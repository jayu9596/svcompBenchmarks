var $M.0: [ref]i8;

var $M.1: ref;

var $M.2: [ref]i8;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]ref;

var $M.7: [ref]ref;

var $M.8: [ref]i24;

var $M.9: [ref]i8;

var $M.10: [ref]i64;

var $M.11: ref;

var $M.13: [ref]ref;

var $M.14: [ref]i32;

var $M.15: ref;

var $M.16: [ref]i8;

var $M.17: [ref]i8;

var $M.18: [ref]i8;

var $M.19: [ref]i8;

var $M.20: [ref]i64;

var $M.21: [ref]i8;

var $M.22: ref;

var $M.23: i32;

var $M.24: ref;

var $M.25: i32;

var $M.26: ref;

var $M.27: i32;

var $M.28: ref;

var $M.29: i32;

var $M.30: ref;

var $M.31: i8;

var $M.32: [ref]ref;

var $M.33: [ref]ref;

var $M.34: [ref]ref;

var $M.35: [ref]ref;

var $M.36: [ref]i64;

var $M.37: i32;

var $M.38: [ref]i64;

var $M.39: [ref]i64;

var $M.40: [ref]i64;

var $M.41: [ref]i64;

var $M.42: [ref]i64;

var $M.43: [ref]i64;

var $M.44: [ref]i64;

var $M.45: [ref]i64;

var $M.46: [ref]i8;

var $M.47: [ref]i64;

var $M.56: [ref]ref;

var $M.57: [ref]i64;

var $M.58: [ref]i64;

var $M.59: [ref]i64;

var $M.60: i32;

var $M.61: [ref]i64;

var $M.66: [ref]i64;

var $M.67: [ref]i8;

var $M.68: ref;

var $M.69: i32;

var $M.70: i32;

var $M.71: i32;

var $M.72: i32;

var $M.73: i32;

var $M.74: i32;

var $M.75: i32;

var $M.76: i32;

var $M.77: i32;

var $M.78: i32;

var $M.79: i32;

var $M.80: i32;

var $M.81: i32;

var $M.82: i32;

var $M.83: i32;

var $M.84: i32;

var $M.85: i32;

var $M.86: i32;

var $M.87: i32;

var $M.88: i32;

var $M.89: i32;

var $M.90: i32;

var $M.91: i32;

var $M.92: i32;

var $M.93: i32;

var $M.94: i32;

var $M.95: i32;

var $M.96: i32;

var $M.97: i32;

var $M.99: [ref]i8;

var $M.100: [ref]i32;

var $M.101: [ref]ref;

var $M.102: [ref]i8;

var $M.103: [ref]i8;

var $M.104: [ref]i8;

var $M.105: [ref]i8;

var $M.106: [ref]i8;

var $M.107: [ref]i8;

var $M.108: [ref]i8;

var $M.109: [ref]i8;

var $M.110: [ref]i8;

var $M.111: [ref]i8;

var $M.112: [ref]i8;

var $M.113: [ref]i8;

var $M.114: [ref]i8;

var $M.115: [ref]i8;

var $M.116: [ref]i8;

var $M.117: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 999754);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const rbd_bd_ops_group0: ref;

axiom rbd_bd_ops_group0 == $sub.ref(0, 2060);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 3088);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 4120);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 5148);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 6180);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 7208);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 8240);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 9268);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 10300);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 11328);

const ldv_state_variable_21: ref;

axiom ldv_state_variable_21 == $sub.ref(0, 12356);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 13384);

const ldv_state_variable_17: ref;

axiom ldv_state_variable_17 == $sub.ref(0, 14412);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 15440);

const ldv_state_variable_22: ref;

axiom ldv_state_variable_22 == $sub.ref(0, 16468);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 17496);

const ldv_state_variable_18: ref;

axiom ldv_state_variable_18 == $sub.ref(0, 18524);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 19552);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 20580);

const ldv_state_variable_16: ref;

axiom ldv_state_variable_16 == $sub.ref(0, 21608);

const ldv_state_variable_13: ref;

axiom ldv_state_variable_13 == $sub.ref(0, 22636);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 23664);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 24692);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 25720);

const ldv_state_variable_12: ref;

axiom ldv_state_variable_12 == $sub.ref(0, 26748);

const ldv_state_variable_20: ref;

axiom ldv_state_variable_20 == $sub.ref(0, 27776);

const ldv_state_variable_14: ref;

axiom ldv_state_variable_14 == $sub.ref(0, 28804);

const ldv_state_variable_15: ref;

axiom ldv_state_variable_15 == $sub.ref(0, 29832);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 30860);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 31888);

const ldv_state_variable_19: ref;

axiom ldv_state_variable_19 == $sub.ref(0, 32916);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 33944);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 34972);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 36000);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 37028);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 38056);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 39084);

const ldv_mutex_i_mutex_of_inode: ref;

axiom ldv_mutex_i_mutex_of_inode == $sub.ref(0, 40112);

const ldv_mutex_client_mutex: ref;

axiom ldv_mutex_client_mutex == $sub.ref(0, 41140);

const rbd_wq: ref;

axiom rbd_wq == $sub.ref(0, 42172);

const rbd_root_dev: ref;

axiom rbd_root_dev == $sub.ref(0, 44620);

const dev_attr_refresh: ref;

axiom dev_attr_refresh == $sub.ref(0, 45692);

const dev_attr_parent: ref;

axiom dev_attr_parent == $sub.ref(0, 46764);

const dev_attr_current_snap: ref;

axiom dev_attr_current_snap == $sub.ref(0, 47836);

const dev_attr_image_id: ref;

axiom dev_attr_image_id == $sub.ref(0, 48908);

const dev_attr_name: ref;

axiom dev_attr_name == $sub.ref(0, 49980);

const dev_attr_pool_id: ref;

axiom dev_attr_pool_id == $sub.ref(0, 51052);

const dev_attr_pool: ref;

axiom dev_attr_pool == $sub.ref(0, 52124);

const dev_attr_client_id: ref;

axiom dev_attr_client_id == $sub.ref(0, 53196);

const dev_attr_minor: ref;

axiom dev_attr_minor == $sub.ref(0, 54268);

const dev_attr_major: ref;

axiom dev_attr_major == $sub.ref(0, 55340);

const dev_attr_features: ref;

axiom dev_attr_features == $sub.ref(0, 56412);

const dev_attr_size: ref;

axiom dev_attr_size == $sub.ref(0, 57484);

const {:count 13} rbd_attrs: ref;

axiom rbd_attrs == $sub.ref(0, 58612);

const rbd_attr_group: ref;

axiom rbd_attr_group == $sub.ref(0, 59668);

const {:count 2} rbd_attr_groups: ref;

axiom rbd_attr_groups == $sub.ref(0, 60708);

const rbd_device_type: ref;

axiom rbd_device_type == $sub.ref(0, 61780);

const bus_attr_remove_single_major: ref;

axiom bus_attr_remove_single_major == $sub.ref(0, 62852);

const bus_attr_add_single_major: ref;

axiom bus_attr_add_single_major == $sub.ref(0, 63924);

const bus_attr_remove: ref;

axiom bus_attr_remove == $sub.ref(0, 64996);

const bus_attr_add: ref;

axiom bus_attr_add == $sub.ref(0, 66068);

const {:count 5} rbd_bus_attrs: ref;

axiom rbd_bus_attrs == $sub.ref(0, 67132);

const rbd_bus_group: ref;

axiom rbd_bus_group == $sub.ref(0, 68188);

const {:count 2} rbd_bus_groups: ref;

axiom rbd_bus_groups == $sub.ref(0, 69228);

const rbd_bus_type: ref;

axiom rbd_bus_type == $sub.ref(0, 70412);

const rbd_mq_ops: ref;

axiom rbd_mq_ops == $sub.ref(0, 71500);

const rbd_bd_ops: ref;

axiom rbd_bd_ops == $sub.ref(0, 72628);

const rbd_major: ref;

axiom rbd_major == $sub.ref(0, 73656);

const rbd_dev_id_ida: ref;

axiom rbd_dev_id_ida == $sub.ref(0, 74800);

const rbd_client_list: ref;

axiom rbd_client_list == $sub.ref(0, 75840);

const client_mutex: ref;

axiom client_mutex == $sub.ref(0, 77024);

const {:count 6} rbd_opts_tokens: ref;

axiom rbd_opts_tokens == $sub.ref(0, 78144);

const rbd_dev_list: ref;

axiom rbd_dev_list == $sub.ref(0, 79184);

const rbd_dev_list_lock: ref;

axiom rbd_dev_list_lock == $sub.ref(0, 80280);

const single_major: ref;

axiom single_major == $sub.ref(0, 81305);

const rbd_client_list_lock: ref;

axiom rbd_client_list_lock == $sub.ref(0, 82401);

const rbd_obj_request_cache: ref;

axiom rbd_obj_request_cache == $sub.ref(0, 83433);

const rbd_segment_name_cache: ref;

axiom rbd_segment_name_cache == $sub.ref(0, 84465);

const rbd_img_request_cache: ref;

axiom rbd_img_request_cache == $sub.ref(0, 85497);

const {:count 21} .str.171: ref;

axiom .str.171 == $sub.ref(0, 86542);

const {:count 18} .str.180: ref;

axiom .str.180 == $sub.ref(0, 87584);

const {:count 15} .str.211: ref;

axiom .str.211 == $sub.ref(0, 88623);

const {:count 10} .str.212: ref;

axiom .str.212 == $sub.ref(0, 89657);

const {:count 3} .str.213: ref;

axiom .str.213 == $sub.ref(0, 90684);

const {:count 11} .str.214: ref;

axiom .str.214 == $sub.ref(0, 91719);

const {:count 3} .str.215: ref;

axiom .str.215 == $sub.ref(0, 92746);

const {:count 23} .str.216: ref;

axiom .str.216 == $sub.ref(0, 93793);

const {:count 13} .str.217: ref;

axiom .str.217 == $sub.ref(0, 94830);

const {:count 26} .str.327: ref;

axiom .str.327 == $sub.ref(0, 95880);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 199} .str.2: ref;

axiom .str.2 == $sub.ref(0, 97103);

const {:count 60} .str.8: ref;

axiom .str.8 == $sub.ref(0, 98187);

const {:count 12} .str.369: ref;

axiom .str.369 == $sub.ref(0, 99223);

const {:count 22} .str.370: ref;

axiom .str.370 == $sub.ref(0, 100269);

const {:count 7} .str.378: ref;

axiom .str.378 == $sub.ref(0, 101300);

const .str: ref;

axiom .str == $sub.ref(0, 102328);

const {:count 17} .str.1: ref;

axiom .str.1 == $sub.ref(0, 103369);

const {:count 48} .str.3: ref;

axiom .str.3 == $sub.ref(0, 104441);

const {:count 53} .str.4: ref;

axiom .str.4 == $sub.ref(0, 105518);

const {:count 5} .str.5: ref;

axiom .str.5 == $sub.ref(0, 106547);

const {:count 45} .str.6: ref;

axiom .str.6 == $sub.ref(0, 107616);

const {:count 50} .str.7: ref;

axiom .str.7 == $sub.ref(0, 108690);

const {:count 38} .str.9: ref;

axiom .str.9 == $sub.ref(0, 109752);

const {:count 54} .str.10: ref;

axiom .str.10 == $sub.ref(0, 110830);

const {:count 59} .str.11: ref;

axiom .str.11 == $sub.ref(0, 111913);

const {:count 38} .str.12: ref;

axiom .str.12 == $sub.ref(0, 112975);

const {:count 30} .str.13: ref;

axiom .str.13 == $sub.ref(0, 114029);

const {:count 30} .str.14: ref;

axiom .str.14 == $sub.ref(0, 115083);

const {:count 26} .str.15: ref;

axiom .str.15 == $sub.ref(0, 116133);

const {:count 5} .str.172: ref;

axiom .str.172 == $sub.ref(0, 117162);

const {:count 6} .str.173: ref;

axiom .str.173 == $sub.ref(0, 118192);

const {:count 8} .str.174: ref;

axiom .str.174 == $sub.ref(0, 119224);

const {:count 4} .str.175: ref;

axiom .str.175 == $sub.ref(0, 120252);

const {:count 20} .str.161: ref;

axiom .str.161 == $sub.ref(0, 121296);

const {:count 20} .str.110: ref;

axiom .str.110 == $sub.ref(0, 122340);

const {:count 41} .str.129: ref;

axiom .str.129 == $sub.ref(0, 123405);

const {:count 46} .str.130: ref;

axiom .str.130 == $sub.ref(0, 124475);

const {:count 24} .str.162: ref;

axiom .str.162 == $sub.ref(0, 125523);

const {:count 32} .str.123: ref;

axiom .str.123 == $sub.ref(0, 126579);

const {:count 37} .str.124: ref;

axiom .str.124 == $sub.ref(0, 127640);

const {:count 36} .str.163: ref;

axiom .str.163 == $sub.ref(0, 128700);

const {:count 27} .str.164: ref;

axiom .str.164 == $sub.ref(0, 129751);

const {:count 22} .str.165: ref;

axiom .str.165 == $sub.ref(0, 130797);

const {:count 7} .str.166: ref;

axiom .str.166 == $sub.ref(0, 131828);

const {:count 19} .str.167: ref;

axiom .str.167 == $sub.ref(0, 132871);

const {:count 19} .str.168: ref;

axiom .str.168 == $sub.ref(0, 133914);

const {:count 33} .str.169: ref;

axiom .str.169 == $sub.ref(0, 134971);

const {:count 38} .str.170: ref;

axiom .str.170 == $sub.ref(0, 136033);

const {:count 24} .str.131: ref;

axiom .str.131 == $sub.ref(0, 137081);

const {:count 32} .str.45: ref;

axiom .str.45 == $sub.ref(0, 138137);

const {:count 44} .str.46: ref;

axiom .str.46 == $sub.ref(0, 139205);

const {:count 49} .str.47: ref;

axiom .str.47 == $sub.ref(0, 140278);

const {:count 35} .str.111: ref;

axiom .str.111 == $sub.ref(0, 141337);

const {:count 53} .str.132: ref;

axiom .str.132 == $sub.ref(0, 142414);

const {:count 39} .str.68: ref;

axiom .str.68 == $sub.ref(0, 143477);

const {:count 40} .str.133: ref;

axiom .str.133 == $sub.ref(0, 144541);

const {:count 20} .str.134: ref;

axiom .str.134 == $sub.ref(0, 145585);

const {:count 20} .str.135: ref;

axiom .str.135 == $sub.ref(0, 146629);

const {:count 41} .str.74: ref;

axiom .str.74 == $sub.ref(0, 147694);

const {:count 46} .str.75: ref;

axiom .str.75 == $sub.ref(0, 148764);

const {:count 24} .str.136: ref;

axiom .str.136 == $sub.ref(0, 149812);

const {:count 32} .str.98: ref;

axiom .str.98 == $sub.ref(0, 150868);

const {:count 37} .str.99: ref;

axiom .str.99 == $sub.ref(0, 151929);

const {:count 33} .str.43: ref;

axiom .str.43 == $sub.ref(0, 152986);

const {:count 32} .str.59: ref;

axiom .str.59 == $sub.ref(0, 154042);

const {:count 42} .str.71: ref;

axiom .str.71 == $sub.ref(0, 155108);

const {:count 21} .str.76: ref;

axiom .str.76 == $sub.ref(0, 156153);

const {:count 23} .str.137: ref;

axiom .str.137 == $sub.ref(0, 157200);

const {:count 26} .str.156: ref;

axiom .str.156 == $sub.ref(0, 158250);

const {:count 25} .str.58: ref;

axiom .str.58 == $sub.ref(0, 159299);

const {:count 24} .str.127: ref;

axiom .str.127 == $sub.ref(0, 160347);

const {:count 16} .str.126: ref;

axiom .str.126 == $sub.ref(0, 161387);

const {:count 28} .str.157: ref;

axiom .str.157 == $sub.ref(0, 162439);

const {:count 40} .str.44: ref;

axiom .str.44 == $sub.ref(0, 163503);

const {:count 13} .str.158: ref;

axiom .str.158 == $sub.ref(0, 164540);

const {:count 26} .str.149: ref;

axiom .str.149 == $sub.ref(0, 165590);

const {:count 63} .str.159: ref;

axiom .str.159 == $sub.ref(0, 166677);

const {:count 68} .str.160: ref;

axiom .str.160 == $sub.ref(0, 167769);

const {:count 25} .str.102: ref;

axiom .str.102 == $sub.ref(0, 168818);

const {:count 38} .str.103: ref;

axiom .str.103 == $sub.ref(0, 169880);

const {:count 43} .str.104: ref;

axiom .str.104 == $sub.ref(0, 170947);

const {:count 19} .str.50: ref;

axiom .str.50 == $sub.ref(0, 171990);

const {:count 36} .str.51: ref;

axiom .str.51 == $sub.ref(0, 173050);

const {:count 38} .str.52: ref;

axiom .str.52 == $sub.ref(0, 174112);

const {:count 60} .str.53: ref;

axiom .str.53 == $sub.ref(0, 175196);

const {:count 28} .str.105: ref;

axiom .str.105 == $sub.ref(0, 176248);

const {:count 50} .str.106: ref;

axiom .str.106 == $sub.ref(0, 177322);

const {:count 21} .str.54: ref;

axiom .str.54 == $sub.ref(0, 178367);

const {:count 43} .str.55: ref;

axiom .str.55 == $sub.ref(0, 179434);

const {:count 48} .str.56: ref;

axiom .str.56 == $sub.ref(0, 180506);

const {:count 32} .str.57: ref;

axiom .str.57 == $sub.ref(0, 181562);

const {:count 38} .str.60: ref;

axiom .str.60 == $sub.ref(0, 182624);

const {:count 37} .str.61: ref;

axiom .str.61 == $sub.ref(0, 183685);

const {:count 42} .str.62: ref;

axiom .str.62 == $sub.ref(0, 184751);

const {:count 23} .str.63: ref;

axiom .str.63 == $sub.ref(0, 185798);

const {:count 25} .str.101: ref;

axiom .str.101 == $sub.ref(0, 186847);

const {:count 35} .str.93: ref;

axiom .str.93 == $sub.ref(0, 187906);

const {:count 25} .str.100: ref;

axiom .str.100 == $sub.ref(0, 188955);

const {:count 47} .str.95: ref;

axiom .str.95 == $sub.ref(0, 190026);

const {:count 52} .str.96: ref;

axiom .str.96 == $sub.ref(0, 191102);

const {:count 22} .str.97: ref;

axiom .str.97 == $sub.ref(0, 192148);

const {:count 23} .str.94: ref;

axiom .str.94 == $sub.ref(0, 193195);

const {:count 22} .str.64: ref;

axiom .str.64 == $sub.ref(0, 194241);

const {:count 59} .str.65: ref;

axiom .str.65 == $sub.ref(0, 195324);

const {:count 64} .str.66: ref;

axiom .str.66 == $sub.ref(0, 196412);

const {:count 34} .str.84: ref;

axiom .str.84 == $sub.ref(0, 197470);

const {:count 40} .str.85: ref;

axiom .str.85 == $sub.ref(0, 198534);

const {:count 11} .str.88: ref;

axiom .str.88 == $sub.ref(0, 199569);

const {:count 13} .str.89: ref;

axiom .str.89 == $sub.ref(0, 200606);

const {:count 30} .str.90: ref;

axiom .str.90 == $sub.ref(0, 201660);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 34} .str.91: ref;

axiom .str.91 == $sub.ref(0, 202718);

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 24} .str.92: ref;

axiom .str.92 == $sub.ref(0, 203766);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 20} .str.86: ref;

axiom .str.86 == $sub.ref(0, 204810);

const {:count 44} .str.87: ref;

axiom .str.87 == $sub.ref(0, 205878);

const {:count 20} .str.67: ref;

axiom .str.67 == $sub.ref(0, 206922);

const {:count 33} .str.69: ref;

axiom .str.69 == $sub.ref(0, 207979);

const {:count 37} .str.70: ref;

axiom .str.70 == $sub.ref(0, 209040);

const {:count 29} .str.77: ref;

axiom .str.77 == $sub.ref(0, 210093);

const {:count 36} .str.78: ref;

axiom .str.78 == $sub.ref(0, 211153);

const {:count 12} .str.79: ref;

axiom .str.79 == $sub.ref(0, 212189);

const {:count 56} .str.80: ref;

axiom .str.80 == $sub.ref(0, 213269);

const {:count 26} .str.72: ref;

axiom .str.72 == $sub.ref(0, 214319);

const {:count 20} .str.73: ref;

axiom .str.73 == $sub.ref(0, 215363);

const {:count 23} .str.37: ref;

axiom .str.37 == $sub.ref(0, 216410);

const {:count 29} .str.38: ref;

axiom .str.38 == $sub.ref(0, 217463);

const {:count 53} .str.39: ref;

axiom .str.39 == $sub.ref(0, 218540);

const {:count 58} .str.40: ref;

axiom .str.40 == $sub.ref(0, 219622);

const {:count 9} .str.41: ref;

axiom .str.41 == $sub.ref(0, 220655);

const {:count 29} .str.140: ref;

axiom .str.140 == $sub.ref(0, 221708);

const {:count 24} .str.141: ref;

axiom .str.141 == $sub.ref(0, 222756);

const {:count 37} .str.142: ref;

axiom .str.142 == $sub.ref(0, 223817);

const {:count 38} .str.143: ref;

axiom .str.143 == $sub.ref(0, 224879);

const {:count 14} .str.144: ref;

axiom .str.144 == $sub.ref(0, 225917);

const {:count 11} .str.145: ref;

axiom .str.145 == $sub.ref(0, 226952);

const {:count 21} .str.146: ref;

axiom .str.146 == $sub.ref(0, 227997);

const {:count 43} .str.147: ref;

axiom .str.147 == $sub.ref(0, 229064);

const {:count 38} .str.148: ref;

axiom .str.148 == $sub.ref(0, 230126);

const {:count 8} .str.150: ref;

axiom .str.150 == $sub.ref(0, 231158);

const {:count 7} .str.151: ref;

axiom .str.151 == $sub.ref(0, 232189);

const {:count 28} .str.154: ref;

axiom .str.154 == $sub.ref(0, 233241);

const {:count 80} .str.155: ref;

axiom .str.155 == $sub.ref(0, 234345);

const {:count 12} .str.139: ref;

axiom .str.139 == $sub.ref(0, 235381);

const {:count 21} .str.107: ref;

axiom .str.107 == $sub.ref(0, 236426);

const {:count 39} .str.108: ref;

axiom .str.108 == $sub.ref(0, 237489);

const {:count 44} .str.109: ref;

axiom .str.109 == $sub.ref(0, 238557);

const {:count 19} .str.112: ref;

axiom .str.112 == $sub.ref(0, 239600);

const {:count 39} .str.113: ref;

axiom .str.113 == $sub.ref(0, 240663);

const {:count 5} .str.114: ref;

axiom .str.114 == $sub.ref(0, 241692);

const {:count 49} .str.115: ref;

axiom .str.115 == $sub.ref(0, 242765);

const {:count 25} .str.122: ref;

axiom .str.122 == $sub.ref(0, 243814);

const {:count 24} .str.116: ref;

axiom .str.116 == $sub.ref(0, 244862);

const {:count 38} .str.117: ref;

axiom .str.117 == $sub.ref(0, 245924);

const {:count 23} .str.118: ref;

axiom .str.118 == $sub.ref(0, 246971);

const {:count 23} .str.119: ref;

axiom .str.119 == $sub.ref(0, 248018);

const {:count 33} .str.120: ref;

axiom .str.120 == $sub.ref(0, 249075);

const {:count 24} .str.121: ref;

axiom .str.121 == $sub.ref(0, 250123);

const {:count 25} .str.125: ref;

axiom .str.125 == $sub.ref(0, 251172);

const {:count 26} .str.152: ref;

axiom .str.152 == $sub.ref(0, 252222);

const {:count 77} .str.153: ref;

axiom .str.153 == $sub.ref(0, 253323);

const {:count 23} .str.81: ref;

axiom .str.81 == $sub.ref(0, 254370);

const {:count 27} .str.82: ref;

axiom .str.82 == $sub.ref(0, 255421);

const {:count 32} .str.83: ref;

axiom .str.83 == $sub.ref(0, 256477);

const {:count 23} .str.138: ref;

axiom .str.138 == $sub.ref(0, 257524);

const {:count 21} .str.26: ref;

axiom .str.26 == $sub.ref(0, 258569);

const {:count 53} .str.27: ref;

axiom .str.27 == $sub.ref(0, 259646);

const {:count 58} .str.28: ref;

axiom .str.28 == $sub.ref(0, 260728);

const {:count 10} .str.29: ref;

axiom .str.29 == $sub.ref(0, 261762);

const {:count 58} .str.30: ref;

axiom .str.30 == $sub.ref(0, 262844);

const {:count 24} .str.31: ref;

axiom .str.31 == $sub.ref(0, 263892);

const {:count 20} .str.128: ref;

axiom .str.128 == $sub.ref(0, 264936);

const {:count 33} .str.49: ref;

axiom .str.49 == $sub.ref(0, 265993);

const fs_bio_set: ref;

axiom fs_bio_set == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 24} .str.42: ref;

axiom .str.42 == $sub.ref(0, 267041);

const {:count 39} .str.48: ref;

axiom .str.48 == $sub.ref(0, 268104);

const {:count 19} .str.35: ref;

axiom .str.35 == $sub.ref(0, 269147);

const {:count 27} .str.36: ref;

axiom .str.36 == $sub.ref(0, 270198);

const {:count 11} .str.32: ref;

axiom .str.32 == $sub.ref(0, 271233);

const {:count 11} .str.33: ref;

axiom .str.33 == $sub.ref(0, 272268);

const {:count 52} .str.34: ref;

axiom .str.34 == $sub.ref(0, 273344);

const {:count 40} .str.21: ref;

axiom .str.21 == $sub.ref(0, 274408);

const {:count 23} .str.22: ref;

axiom .str.22 == $sub.ref(0, 275455);

const {:count 59} .str.23: ref;

axiom .str.23 == $sub.ref(0, 276538);

const {:count 64} .str.24: ref;

axiom .str.24 == $sub.ref(0, 277626);

const {:count 26} .str.25: ref;

axiom .str.25 == $sub.ref(0, 278676);

const {:count 10} .str.16: ref;

axiom .str.16 == $sub.ref(0, 279710);

const {:count 14} .str.17: ref;

axiom .str.17 == $sub.ref(0, 280748);

const {:count 20} .str.18: ref;

axiom .str.18 == $sub.ref(0, 281792);

const {:count 17} .str.19: ref;

axiom .str.19 == $sub.ref(0, 282833);

const {:count 22} .str.20: ref;

axiom .str.20 == $sub.ref(0, 283879);

const {:count 4} .str.334: ref;

axiom .str.334 == $sub.ref(0, 284907);

const {:count 30} .str.191: ref;

axiom .str.191 == $sub.ref(0, 285961);

const {:count 30} .str.192: ref;

axiom .str.192 == $sub.ref(0, 287015);

const {:count 11} .str.193: ref;

axiom .str.193 == $sub.ref(0, 288050);

const {:count 44} .str.194: ref;

axiom .str.194 == $sub.ref(0, 289118);

const {:count 49} .str.195: ref;

axiom .str.195 == $sub.ref(0, 290191);

const {:count 28} .str.181: ref;

axiom .str.181 == $sub.ref(0, 291243);

const {:count 21} .str.182: ref;

axiom .str.182 == $sub.ref(0, 292288);

const {:count 23} .str.183: ref;

axiom .str.183 == $sub.ref(0, 293335);

const {:count 40} .str.184: ref;

axiom .str.184 == $sub.ref(0, 294399);

const {:count 23} .str.186: ref;

axiom .str.186 == $sub.ref(0, 295446);

const {:count 34} .str.187: ref;

axiom .str.187 == $sub.ref(0, 296504);

const {:count 39} .str.188: ref;

axiom .str.188 == $sub.ref(0, 297567);

const {:count 20} .str.185: ref;

axiom .str.185 == $sub.ref(0, 298611);

const {:count 5} .str.322: ref;

axiom .str.322 == $sub.ref(0, 299640);

const {:count 34} .str.323: ref;

axiom .str.323 == $sub.ref(0, 300698);

const {:count 15} .str.351: ref;

axiom .str.351 == $sub.ref(0, 301737);

const {:count 51} .str.352: ref;

axiom .str.352 == $sub.ref(0, 302812);

const {:count 56} .str.353: ref;

axiom .str.353 == $sub.ref(0, 303892);

const {:count 3} .str.333: ref;

axiom .str.333 == $sub.ref(0, 304919);

const {:count 18} .str.332: ref;

axiom .str.332 == $sub.ref(0, 305961);

const {:count 46} .str.246: ref;

axiom .str.246 == $sub.ref(0, 307031);

const {:count 13} .str.280: ref;

axiom .str.280 == $sub.ref(0, 308068);

const {:count 26} .str.281: ref;

axiom .str.281 == $sub.ref(0, 309118);

const {:count 57} .str.238: ref;

axiom .str.238 == $sub.ref(0, 310199);

const {:count 62} .str.239: ref;

axiom .str.239 == $sub.ref(0, 311285);

const {:count 83} .str.282: ref;

axiom .str.282 == $sub.ref(0, 312392);

const {:count 88} .str.283: ref;

axiom .str.283 == $sub.ref(0, 313504);

const {:count 20} .str.243: ref;

axiom .str.243 == $sub.ref(0, 314548);

const {:count 36} .str.244: ref;

axiom .str.244 == $sub.ref(0, 315608);

const {:count 14} .str.331: ref;

axiom .str.331 == $sub.ref(0, 316646);

const {:count 9} .str.270: ref;

axiom .str.270 == $sub.ref(0, 317679);

const {:count 22} .str.271: ref;

axiom .str.271 == $sub.ref(0, 318725);

const {:count 31} .str.272: ref;

axiom .str.272 == $sub.ref(0, 319780);

const {:count 36} .str.273: ref;

axiom .str.273 == $sub.ref(0, 320840);

const {:count 58} .str.274: ref;

axiom .str.274 == $sub.ref(0, 321922);

const {:count 63} .str.275: ref;

axiom .str.275 == $sub.ref(0, 323009);

const {:count 6} .str.328: ref;

axiom .str.328 == $sub.ref(0, 324039);

const {:count 15} .str.329: ref;

axiom .str.329 == $sub.ref(0, 325078);

const {:count 26} .str.330: ref;

axiom .str.330 == $sub.ref(0, 326128);

const {:count 15} .str.324: ref;

axiom .str.324 == $sub.ref(0, 327167);

const {:count 48} .str.325: ref;

axiom .str.325 == $sub.ref(0, 328239);

const {:count 53} .str.326: ref;

axiom .str.326 == $sub.ref(0, 329316);

const {:count 34} .str.226: ref;

axiom .str.226 == $sub.ref(0, 330374);

const {:count 36} .str.227: ref;

axiom .str.227 == $sub.ref(0, 331434);

const {:count 42} .str.228: ref;

axiom .str.228 == $sub.ref(0, 332500);

const {:count 20} .str.229: ref;

axiom .str.229 == $sub.ref(0, 333544);

const {:count 67} .str.230: ref;

axiom .str.230 == $sub.ref(0, 334635);

const {:count 72} .str.231: ref;

axiom .str.231 == $sub.ref(0, 335731);

const {:count 11} .str.316: ref;

axiom .str.316 == $sub.ref(0, 336766);

const {:count 23} .str.317: ref;

axiom .str.317 == $sub.ref(0, 337813);

const {:count 42} .str.318: ref;

axiom .str.318 == $sub.ref(0, 338879);

const {:count 37} .str.319: ref;

axiom .str.319 == $sub.ref(0, 339940);

const {:count 40} .str.320: ref;

axiom .str.320 == $sub.ref(0, 341004);

const {:count 32} .str.321: ref;

axiom .str.321 == $sub.ref(0, 342060);

const {:count 20} .str.300: ref;

axiom .str.300 == $sub.ref(0, 343104);

const {:count 29} .str.301: ref;

axiom .str.301 == $sub.ref(0, 344157);

const {:count 15} .str.302: ref;

axiom .str.302 == $sub.ref(0, 345196);

const {:count 29} .str.303: ref;

axiom .str.303 == $sub.ref(0, 346249);

const {:count 21} .str.304: ref;

axiom .str.304 == $sub.ref(0, 347294);

const {:count 25} .str.305: ref;

axiom .str.305 == $sub.ref(0, 348343);

const {:count 2} .str.200: ref;

axiom .str.200 == $sub.ref(0, 349369);

const {:count 14} .str.313: ref;

axiom .str.313 == $sub.ref(0, 350407);

const {:count 18} .str.296: ref;

axiom .str.296 == $sub.ref(0, 351449);

const {:count 21} .str.297: ref;

axiom .str.297 == $sub.ref(0, 352494);

const {:count 56} .str.298: ref;

axiom .str.298 == $sub.ref(0, 353574);

const {:count 61} .str.299: ref;

axiom .str.299 == $sub.ref(0, 354659);

const {:count 22} .str.314: ref;

axiom .str.314 == $sub.ref(0, 355705);

const {:count 41} .str.315: ref;

axiom .str.315 == $sub.ref(0, 356770);

const {:count 19} .str.306: ref;

axiom .str.306 == $sub.ref(0, 357813);

const {:count 27} .str.307: ref;

axiom .str.307 == $sub.ref(0, 358864);

const {:count 14} .str.308: ref;

axiom .str.308 == $sub.ref(0, 359902);

const {:count 13} .str.309: ref;

axiom .str.309 == $sub.ref(0, 360939);

const {:count 47} .str.310: ref;

axiom .str.310 == $sub.ref(0, 362010);

const {:count 52} .str.311: ref;

axiom .str.311 == $sub.ref(0, 363086);

const {:count 28} .str.312: ref;

axiom .str.312 == $sub.ref(0, 364138);

const {:count 22} .str.292: ref;

axiom .str.292 == $sub.ref(0, 365184);

const {:count 48} .str.293: ref;

axiom .str.293 == $sub.ref(0, 366256);

const {:count 35} .str.294: ref;

axiom .str.294 == $sub.ref(0, 367315);

const {:count 16} .str.295: ref;

axiom .str.295 == $sub.ref(0, 368355);

const {:count 20} .str.260: ref;

axiom .str.260 == $sub.ref(0, 369399);

const {:count 23} .str.267: ref;

axiom .str.267 == $sub.ref(0, 370446);

const {:count 57} .str.268: ref;

axiom .str.268 == $sub.ref(0, 371527);

const {:count 62} .str.269: ref;

axiom .str.269 == $sub.ref(0, 372613);

const {:count 16} .str.288: ref;

axiom .str.288 == $sub.ref(0, 373653);

const {:count 24} .str.289: ref;

axiom .str.289 == $sub.ref(0, 374701);

const {:count 64} .str.290: ref;

axiom .str.290 == $sub.ref(0, 375789);

const {:count 69} .str.291: ref;

axiom .str.291 == $sub.ref(0, 376882);

const {:count 22} .str.284: ref;

axiom .str.284 == $sub.ref(0, 377928);

const {:count 25} .str.285: ref;

axiom .str.285 == $sub.ref(0, 378977);

const {:count 45} .str.286: ref;

axiom .str.286 == $sub.ref(0, 380046);

const {:count 43} .str.287: ref;

axiom .str.287 == $sub.ref(0, 381113);

const {:count 18} .str.276: ref;

axiom .str.276 == $sub.ref(0, 382155);

const {:count 25} .str.277: ref;

axiom .str.277 == $sub.ref(0, 383204);

const {:count 42} .str.278: ref;

axiom .str.278 == $sub.ref(0, 384270);

const {:count 47} .str.279: ref;

axiom .str.279 == $sub.ref(0, 385341);

const {:count 36} .str.261: ref;

axiom .str.261 == $sub.ref(0, 386401);

const {:count 15} .str.262: ref;

axiom .str.262 == $sub.ref(0, 387440);

const {:count 34} .str.266: ref;

axiom .str.266 == $sub.ref(0, 388498);

const {:count 18} .str.263: ref;

axiom .str.263 == $sub.ref(0, 389540);

const {:count 39} .str.264: ref;

axiom .str.264 == $sub.ref(0, 390603);

const {:count 24} .str.265: ref;

axiom .str.265 == $sub.ref(0, 391651);

const {:count 26} .str.249: ref;

axiom .str.249 == $sub.ref(0, 392701);

const {:count 22} .str.250: ref;

axiom .str.250 == $sub.ref(0, 393747);

const {:count 24} .str.251: ref;

axiom .str.251 == $sub.ref(0, 394795);

const {:count 13} .str.252: ref;

axiom .str.252 == $sub.ref(0, 395832);

const {:count 55} .str.253: ref;

axiom .str.253 == $sub.ref(0, 396911);

const {:count 60} .str.254: ref;

axiom .str.254 == $sub.ref(0, 397995);

const {:count 19} .str.255: ref;

axiom .str.255 == $sub.ref(0, 399038);

const {:count 18} .str.256: ref;

axiom .str.256 == $sub.ref(0, 400080);

const {:count 20} .str.257: ref;

axiom .str.257 == $sub.ref(0, 401124);

const {:count 49} .str.258: ref;

axiom .str.258 == $sub.ref(0, 402197);

const {:count 54} .str.259: ref;

axiom .str.259 == $sub.ref(0, 403275);

const {:count 20} .str.245: ref;

axiom .str.245 == $sub.ref(0, 404319);

const {:count 5} .str.232: ref;

axiom .str.232 == $sub.ref(0, 405348);

const {:count 5} .str.247: ref;

axiom .str.247 == $sub.ref(0, 406377);

const {:count 12} .str.248: ref;

axiom .str.248 == $sub.ref(0, 407413);

const {:count 8} .str.233: ref;

axiom .str.233 == $sub.ref(0, 408445);

const {:count 17} .str.234: ref;

axiom .str.234 == $sub.ref(0, 409486);

const {:count 46} .str.235: ref;

axiom .str.235 == $sub.ref(0, 410556);

const {:count 51} .str.236: ref;

axiom .str.236 == $sub.ref(0, 411631);

const {:count 7} .str.237: ref;

axiom .str.237 == $sub.ref(0, 412662);

const .str.240: ref;

axiom .str.240 == $sub.ref(0, 413687);

const {:count 36} .str.241: ref;

axiom .str.241 == $sub.ref(0, 414747);

const {:count 41} .str.242: ref;

axiom .str.242 == $sub.ref(0, 415812);

const {:count 25} .str.224: ref;

axiom .str.224 == $sub.ref(0, 416861);

const {:count 23} .str.225: ref;

axiom .str.225 == $sub.ref(0, 417908);

const {:count 7} .str.223: ref;

axiom .str.223 == $sub.ref(0, 418939);

const {:count 18} .str.218: ref;

axiom .str.218 == $sub.ref(0, 419981);

const {:count 25} .str.219: ref;

axiom .str.219 == $sub.ref(0, 421030);

const {:count 30} .str.220: ref;

axiom .str.220 == $sub.ref(0, 422084);

const {:count 34} .str.221: ref;

axiom .str.221 == $sub.ref(0, 423142);

const {:count 39} .str.222: ref;

axiom .str.222 == $sub.ref(0, 424205);

const {:count 32} .str.196: ref;

axiom .str.196 == $sub.ref(0, 425261);

const {:count 20} .str.197: ref;

axiom .str.197 == $sub.ref(0, 426305);

const {:count 22} .str.198: ref;

axiom .str.198 == $sub.ref(0, 427351);

const {:count 23} .str.199: ref;

axiom .str.199 == $sub.ref(0, 428398);

const {:count 46} .str.202: ref;

axiom .str.202 == $sub.ref(0, 429468);

const {:count 21} .str.203: ref;

axiom .str.203 == $sub.ref(0, 430513);

const {:count 45} .str.204: ref;

axiom .str.204 == $sub.ref(0, 431582);

const {:count 50} .str.205: ref;

axiom .str.205 == $sub.ref(0, 432656);

const {:count 48} .str.206: ref;

axiom .str.206 == $sub.ref(0, 433728);

const {:count 53} .str.207: ref;

axiom .str.207 == $sub.ref(0, 434805);

const {:count 34} .str.208: ref;

axiom .str.208 == $sub.ref(0, 435863);

const {:count 39} .str.209: ref;

axiom .str.209 == $sub.ref(0, 436926);

const {:count 32} .str.210: ref;

axiom .str.210 == $sub.ref(0, 437982);

const {:count 7} .str.201: ref;

axiom .str.201 == $sub.ref(0, 439013);

const {:count 7} .str.335: ref;

axiom .str.335 == $sub.ref(0, 440044);

const {:count 14} .str.177: ref;

axiom .str.177 == $sub.ref(0, 441082);

const {:count 42} .str.178: ref;

axiom .str.178 == $sub.ref(0, 442148);

const {:count 47} .str.179: ref;

axiom .str.179 == $sub.ref(0, 443219);

const {:count 17} .str.336: ref;

axiom .str.336 == $sub.ref(0, 444260);

const {:count 20} .str.337: ref;

axiom .str.337 == $sub.ref(0, 445304);

const {:count 5} .str.338: ref;

axiom .str.338 == $sub.ref(0, 446333);

const {:count 6} .str.377: ref;

axiom .str.377 == $sub.ref(0, 447363);

const {:count 9} .str.339: ref;

axiom .str.339 == $sub.ref(0, 448396);

const {:count 11} .str.371: ref;

axiom .str.371 == $sub.ref(0, 449431);

const {:count 6} .str.340: ref;

axiom .str.340 == $sub.ref(0, 450461);

const {:count 4} .str.176: ref;

axiom .str.176 == $sub.ref(0, 451489);

const {:count 8} .str.376: ref;

axiom .str.376 == $sub.ref(0, 452521);

const {:count 6} .str.341: ref;

axiom .str.341 == $sub.ref(0, 453551);

const {:count 10} .str.342: ref;

axiom .str.342 == $sub.ref(0, 454585);

const {:count 12} .str.379: ref;

axiom .str.379 == $sub.ref(0, 455621);

const {:count 5} .str.343: ref;

axiom .str.343 == $sub.ref(0, 456650);

const {:count 4} .str.189: ref;

axiom .str.189 == $sub.ref(0, 457678);

const {:count 8} .str.344: ref;

axiom .str.344 == $sub.ref(0, 458710);

const {:count 5} .str.345: ref;

axiom .str.345 == $sub.ref(0, 459739);

const {:count 11} .str.190: ref;

axiom .str.190 == $sub.ref(0, 460774);

const {:count 9} .str.346: ref;

axiom .str.346 == $sub.ref(0, 461807);

const {:count 13} .str.347: ref;

axiom .str.347 == $sub.ref(0, 462844);

const {:count 7} .str.348: ref;

axiom .str.348 == $sub.ref(0, 463875);

const {:count 19} .str.372: ref;

axiom .str.372 == $sub.ref(0, 464918);

const {:count 2} .str.374: ref;

axiom .str.374 == $sub.ref(0, 465944);

const {:count 10} .str.375: ref;

axiom .str.375 == $sub.ref(0, 466978);

const {:count 94} .str.373: ref;

axiom .str.373 == $sub.ref(0, 468096);

const {:count 8} .str.349: ref;

axiom .str.349 == $sub.ref(0, 469128);

const {:count 35} .str.358: ref;

axiom .str.358 == $sub.ref(0, 470187);

const {:count 13} .str.359: ref;

axiom .str.359 == $sub.ref(0, 471224);

const {:count 25} .str.360: ref;

axiom .str.360 == $sub.ref(0, 472273);

const {:count 14} .str.361: ref;

axiom .str.361 == $sub.ref(0, 473311);

const {:count 14} .str.354: ref;

axiom .str.354 == $sub.ref(0, 474349);

const {:count 23} .str.355: ref;

axiom .str.355 == $sub.ref(0, 475396);

const {:count 22} .str.356: ref;

axiom .str.356 == $sub.ref(0, 476442);

const {:count 22} .str.357: ref;

axiom .str.357 == $sub.ref(0, 477488);

const {:count 14} .str.362: ref;

axiom .str.362 == $sub.ref(0, 478526);

const {:count 23} .str.363: ref;

axiom .str.363 == $sub.ref(0, 479573);

const {:count 16} .str.364: ref;

axiom .str.364 == $sub.ref(0, 480613);

const {:count 23} .str.365: ref;

axiom .str.365 == $sub.ref(0, 481660);

const {:count 16} .str.366: ref;

axiom .str.366 == $sub.ref(0, 482700);

const {:count 24} .str.367: ref;

axiom .str.367 == $sub.ref(0, 483748);

const {:count 17} .str.368: ref;

axiom .str.368 == $sub.ref(0, 484789);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 485821);

const {:count 3} .str.1.741: ref;

axiom .str.1.741 == $sub.ref(0, 486848);

const {:count 14} .str.742: ref;

axiom .str.742 == $sub.ref(0, 487886);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 488914);

const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 489946);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 0} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 3} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p4 := malloc($i0);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5} __VERIFIER_assume($i7);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 490978);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 492010);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 6} $r := $malloc($i0);
    return;
}



const rbd_open: ref;

axiom rbd_open == $sub.ref(0, 493042);

procedure rbd_open($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rbd_open($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i18: i8;
  var $p23: ref;
  var $i24: i1;
  var $p25: ref;
  var $i13: i32;
  var vslice_dummy_var_48: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} {:cexpr "rbd_open:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1752)), $mul.ref(1680, 1));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i1, 2);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(72, 1));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} spin_lock_irq($p14);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(216, 1));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i16 := constant_test_bit(1, $p15);
    call {:si_unique_call 10} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2184, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 1);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2184, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p22, $i21);
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(72, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} spin_unlock_irq($p23);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i18);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(760, 1));
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} vslice_dummy_var_48 := get_device($p25);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 2);
    goto $bb6;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb10;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(720, 1)), $mul.ref(16, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 30);
    goto $bb6;
}



const rbd_release: ref;

axiom rbd_release == $sub.ref(0, 494074);

procedure rbd_release($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rbd_release($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var vslice_dummy_var_49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} {:cexpr "rbd_release:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1680, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(72, 1));
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} spin_lock_irq($p5);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2184, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    call {:si_unique_call 15} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2184, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64($i9, 1);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2184, 1));
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i10);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(72, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} spin_unlock_irq($p12);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i7, 0);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 18} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(760, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} put_device($p19);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} vslice_dummy_var_49 := printk.ref.ref.i32.ref(.str.8, .str.369, 572, .str.370);
    call {:si_unique_call 20} devirtbounce(0, .str.2, 572, 12);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call rbd_release_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const rbd_ioctl: ref;

axiom rbd_ioctl == $sub.ref(0, 495106);

procedure rbd_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rbd_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} {:cexpr "rbd_ioctl:arg:mode"} boogie_si_record_i32($i1);
    call {:si_unique_call 23} {:cexpr "rbd_ioctl:arg:cmd"} boogie_si_record_i32($i2);
    call {:si_unique_call 24} {:cexpr "rbd_ioctl:arg:arg"} boogie_si_record_i64($i3);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1752)), $mul.ref(1680, 1));
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 4701);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 25);
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb2:
    assume $i9 == 1;
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i10 := rbd_ioctl_set_ro($p8, $i3);
    call {:si_unique_call 26} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb4;
}



const rbd_compat_ioctl: ref;

axiom rbd_compat_ioctl == $sub.ref(0, 496138);

procedure rbd_compat_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rbd_compat_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} {:cexpr "rbd_compat_ioctl:arg:mode"} boogie_si_record_i32($i1);
    call {:si_unique_call 28} {:cexpr "rbd_compat_ioctl:arg:cmd"} boogie_si_record_i32($i2);
    call {:si_unique_call 29} {:cexpr "rbd_compat_ioctl:arg:arg"} boogie_si_record_i64($i3);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i4 := rbd_ioctl($p0, $i1, $i2, $i3);
    call {:si_unique_call 31} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const rbd_ioctl_set_ro: ref;

axiom rbd_ioctl_set_ro == $sub.ref(0, 497170);

procedure rbd_ioctl_set_ro($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rbd_ioctl_set_ro($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i11: i1;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i8;
  var $i23: i32;
  var $i24: i8;
  var $p38: ref;
  var $i39: i1;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i1;
  var $i44: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} {:cexpr "rbd_ioctl_set_ro:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} __might_fault(.str.2, 585);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    call {:si_unique_call 34} $p3 := devirtbounce.1(0, $p2, 4);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p4 := $extractvalue($p3, 0);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i5 := $extractvalue($p3, 1);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p4);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    call {:si_unique_call 35} {:cexpr "__ret_gu"} boogie_si_record_i32($i7);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i5);
    call {:si_unique_call 36} {:cexpr "val"} boogie_si_record_i32($i8);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i7, 0);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i8, 0);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 37} {:cexpr "ro"} boogie_si_record_i8($i12);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, $sub.i64(0, 2));
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(72, 1));
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} spin_lock_irq($p19);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(2184, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i64($i21, 1);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(720, 1)), $mul.ref(16, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i12);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i29, $i31);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i23, $i24 := 0, $i37;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(72, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} spin_unlock_irq($p38);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i23, 0);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i10 := $i23;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb18:
    assume $i39 == 1;
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i24);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb20;

  $bb21:
    assume $i40 == 1;
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i8.i1($i12);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i43);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} set_disk_ro($p42, $i44);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume $i32 == 1;
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i12);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(720, 1)), $mul.ref(16, 1));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i8($i33);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, $i36);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i37 := 1;
    goto $bb17;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i23, $i24 := $sub.i32(0, 16), 0;
    goto $bb13;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i12);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 30);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 14);
    goto $bb3;
}



const __might_fault: ref;

axiom __might_fault == $sub.ref(0, 498202);

procedure __might_fault($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __might_fault($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} {:cexpr "__might_fault:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 499234);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} _raw_spin_lock_irq($p2);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 500266);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} _raw_spin_unlock_irq($p2);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    return;
}



const set_disk_ro: ref;

axiom set_disk_ro == $sub.ref(0, 501298);

procedure set_disk_ro($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation set_disk_ro($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} {:cexpr "set_disk_ro:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 502330);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 503362);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 504394);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 46} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 505426);

procedure printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 1} true;
    call {:si_unique_call 47} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 48} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 1} true;
    call {:si_unique_call 49} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 50} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 1} true;
    call {:si_unique_call 51} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 52} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 1} true;
    call {:si_unique_call 53} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 54} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 1} true;
    call {:si_unique_call 55} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 56} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 1} true;
    call {:si_unique_call 57} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 58} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64($p0: ref, p.1: ref, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64($p0: ref, p.1: ref, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 1} true;
    call {:si_unique_call 59} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 60} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64.i32($p0: ref, p.1: i64, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64.i32($p0: ref, p.1: i64, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 1} true;
    call {:si_unique_call 61} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 62} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const put_device: ref;

axiom put_device == $sub.ref(0, 506458);

procedure put_device($p0: ref);
  free requires assertsPassed;



implementation put_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 507490);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const get_device: ref;

axiom get_device == $sub.ref(0, 508522);

procedure get_device($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_device($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $p1 := external_alloc();
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 509554);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 1} true;
    call {:si_unique_call 65} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 66} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const rbd_queue_rq: ref;

axiom rbd_queue_rq == $sub.ref(0, 510586);

procedure rbd_queue_rq($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29;



implementation rbd_queue_rq($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_50: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $p4 := blk_mq_rq_to_pdu($p3);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p6 := $M.1;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} vslice_dummy_var_50 := queue_work($p6, $p5);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const blk_mq_map_queue: ref;

axiom blk_mq_map_queue == $sub.ref(0, 511618);

procedure blk_mq_map_queue($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation blk_mq_map_queue($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} {:cexpr "blk_mq_map_queue:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $p2 := external_alloc();
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const rbd_init_request: ref;

axiom rbd_init_request == $sub.ref(0, 512650);

procedure rbd_init_request($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rbd_init_request($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 73} {:cexpr "rbd_init_request:arg:hctx_idx"} boogie_si_record_i32($i2);
    call {:si_unique_call 74} {:cexpr "rbd_init_request:arg:request_idx"} boogie_si_record_i32($i3);
    call {:si_unique_call 75} {:cexpr "rbd_init_request:arg:numa_node___0"} boogie_si_record_i32($i4);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $p7 := blk_mq_rq_to_pdu($p1);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} __init_work($p8, 0);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, 137438953408);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p6);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 78} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p11, $p12, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} lockdep_init_map($p13, .str.378, $p5, 0);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} INIT_LIST_HEAD($p14);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, rbd_queue_workfn);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const blk_mq_rq_to_pdu: ref;

axiom blk_mq_rq_to_pdu == $sub.ref(0, 513682);

procedure blk_mq_rq_to_pdu($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation blk_mq_rq_to_pdu($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 514714);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 515746);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 516778);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 517810);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    return;
}



const rbd_queue_workfn: ref;

axiom rbd_queue_workfn == $sub.ref(0, 518842);

procedure rbd_queue_workfn($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.13, $M.14, $CurrAddr, $M.21, $M.18, $M.20, $M.19;



implementation rbd_queue_workfn($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i24;
  var $i25: i24;
  var $i26: i24;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p43: ref;
  var $i44: i64;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i42: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i24;
  var $i57: i24;
  var $i58: i24;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $i69: i1;
  var $p71: ref;
  var $i72: i8;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $i79: i32;
  var $i80: i64;
  var $i81: i64;
  var $i82: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i24;
  var $i94: i24;
  var $i95: i24;
  var $p96: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i64;
  var $i100: i64;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $i109: i32;
  var $i110: i64;
  var $i111: i64;
  var $i112: i1;
  var $i114: i1;
  var $i115: i64;
  var $i116: i1;
  var $p117: ref;
  var $p119: ref;
  var $i120: i64;
  var $i121: i1;
  var $p123: ref;
  var $p124: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i64;
  var $i129: i1;
  var $p130: ref;
  var $i131: i64;
  var $i132: i1;
  var $p133: ref;
  var $p134: ref;
  var $i135: i1;
  var $i136: i32;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i32;
  var $i137: i32;
  var $i142: i1;
  var $i144: i32;
  var $i145: i1;
  var $i143: i32;
  var $p67: ref;
  var $i68: i32;
  var $i146: i1;
  var $p147: ref;
  var $i37: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $p5 := blk_mq_rq_from_pdu($p4);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 368)), $mul.ref(48, 1));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.2, $p6);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 4208)), $mul.ref(2496, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.3, $p8);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i11 := blk_rq_pos($p5);
    call {:si_unique_call 88} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i12 := $shl.i64($i11, 9);
    call {:si_unique_call 89} {:cexpr "offset"} boogie_si_record_i64($i12);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $i13 := blk_rq_bytes($p5);
    call {:si_unique_call 91} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    call {:si_unique_call 92} {:cexpr "length"} boogie_si_record_i64($i14);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 368)), $mul.ref(72, 1));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.2, $p15);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 1);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.2, $p38);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 128);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i41 == 1);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.2, $p43);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i64.i32($i44);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 1);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i42 := $i48;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i14, 0);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i42, 1);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p10, $mul.ref(0, 2192)), $mul.ref(216, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $i85 := constant_test_bit(0, $p84);
    call {:si_unique_call 107} {:cexpr "tmp___10"} boogie_si_record_i32($i85);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 0);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i114 := $ne.i64($i12, 0);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} blk_mq_start_request($p5);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p10, $mul.ref(0, 2192)), $mul.ref(560, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} down_read($p117);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 2192)), $mul.ref(720, 1)), $mul.ref(0, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i120 := $load.i64($M.0, $p119);
    call {:si_unique_call 119} {:cexpr "mapping_size"} boogie_si_record_i64($i120);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i42, 1);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    $p126 := $0.ref;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p10, $mul.ref(0, 2192)), $mul.ref(560, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} up_read($p127);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i128 := $add.i64($i12, $i14);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i129 := $ugt.i64($i128, $i120);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $p130 := rbd_img_request_create($p10, $i12, $i14, $i42, $p126);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($p130);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i132 := $eq.i64($i131, 0);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p130, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p134, $p5);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i42, 2);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i135 == 1);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p5, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.2, $p138);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $i141 := rbd_img_request_fill($p130, 1, $p140);
    call {:si_unique_call 127} {:cexpr "result"} boogie_si_record_i32($i141);
    assume {:verifier.code 0} true;
    $i137 := $i141;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i142 := $ne.i32($i137, 0);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $i144 := rbd_img_request_submit($p130);
    call {:si_unique_call 130} {:cexpr "result"} boogie_si_record_i32($i144);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i144, 0);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    return;

  $bb63:
    assume $i145 == 1;
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i143 := $i144;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} rbd_img_request_put($p130);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p67, $i68 := $p126, $i143;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i146 := $ne.i32($i68, 0);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} ceph_put_snap_context($p67);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i37 := $i68;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} blk_mq_end_request($p5, $i37);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb67:
    assume $i146 == 1;
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $p147 := obj_op_name($i42);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} rbd_warn.ref.ref.ref.i64.i64.i32($p10, .str.15, $p147, $i14, $i12, $i68);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb59:
    assume $i142 == 1;
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i143 := $i137;
    goto $bb61;

  $bb56:
    assume $i135 == 1;
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $i136 := rbd_img_request_fill($p130, 0, $0.ref);
    call {:si_unique_call 125} {:cexpr "result"} boogie_si_record_i32($i136);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i137 := $i136;
    goto $bb58;

  $bb53:
    assume $i132 == 1;
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p67, $i68 := $p126, $sub.i32(0, 12);
    goto $bb19;

  $bb50:
    assume $i129 == 1;
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} rbd_warn.ref.ref.i64.i64.i64($p10, .str.14, $i12, $i14, $i120);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p67, $i68 := $p126, $sub.i32(0, 5);
    goto $bb19;

  $bb47:
    assume $i121 == 1;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(48, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} vslice_dummy_var_53 := ceph_get_snap_context($p124);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p126 := $p124;
    goto $bb49;

  $bb41:
    assume $i114 == 1;
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i115 := $sub.i64(0, $i12);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i116 := $ult.i64($i115, $i14);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb43;

  $bb44:
    assume $i116 == 1;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} rbd_warn.ref.ref.i64.i64($p10, .str.13, $i12, $i14);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p67, $i68 := $0.ref, $sub.i32(0, 22);
    goto $bb19;

  $bb31:
    assume $i86 == 1;
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p87, .str);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p88, .str.1);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p89, .str.2);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p90, .str.10);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i93 := $load.i24($M.8, $p92);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i94 := $and.i24($i93, $sub.i24(0, 262144));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i95 := $or.i24($i94, 3391);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p92, $i95);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p96, 0);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.9, $p97);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i64($i98);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i100 := $and.i64($i99, 1);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $i101 := ldv__builtin_expect($i100, 0);
    call {:si_unique_call 109} {:cexpr "tmp___8"} boogie_si_record_i64($i101);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p10, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i107 := $load.i64($M.10, $p106);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i108 := $eq.i64($i107, $sub.i64(0, 2));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i109 := $zext.i1.i32($i108);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i109);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $i111 := ldv__builtin_expect($i110, 0);
    call {:si_unique_call 113} {:cexpr "tmp___9"} boogie_si_record_i64($i111);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i111, 0);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p67, $i68 := $0.ref, $sub.i32(0, 6);
    goto $bb19;

  $bb36:
    assume $i112 == 1;
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} vslice_dummy_var_52 := printk.ref.ref.i32.ref(.str.8, .str.1, 3392, .str.12);
    call {:si_unique_call 115} devirtbounce(0, .str.2, 3392, 12);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    call rbd_queue_workfn_loop_$bb38();
    goto $bb38_last;

  $bb33:
    assume $i102 == 1;
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $p103 := ceph_file_part(.str.2, 199);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32($p3, .str.11, 4, .str.5, $p103, 3391);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb21:
    assume $i69 == 1;
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 2192)), $mul.ref(720, 1)), $mul.ref(16, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.0, $p71);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i8.i1($i72);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p10, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.10, $p76);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, $sub.i64(0, 2));
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i79 := $zext.i1.i32($i78);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i79);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i81 := ldv__builtin_expect($i80, 0);
    call {:si_unique_call 103} {:cexpr "tmp___6"} boogie_si_record_i64($i81);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb26:
    assume $i82 == 1;
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} vslice_dummy_var_51 := printk.ref.ref.i32.ref(.str.8, .str.1, 3381, .str.9);
    call {:si_unique_call 105} devirtbounce(0, .str.2, 3381, 12);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    call rbd_queue_workfn_loop_$bb28();
    goto $bb28_last;

  $bb23:
    assume $i73 == 1;
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p67, $i68 := $0.ref, $sub.i32(0, 30);
    goto $bb19;

  $bb14:
    assume $i49 == 1;
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p50, .str);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p51, .str.1);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p52, .str.2);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p53, .str.6);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i56 := $load.i24($M.8, $p55);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i57 := $and.i24($i56, $sub.i24(0, 262144));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i58 := $or.i24($i57, 3369);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p55, $i58);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p59, 0);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.9, $p60);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i64($i61);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i63 := $and.i64($i62, 1);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 99} {:cexpr "tmp___5"} boogie_si_record_i64($i64);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p67, $i68 := $0.ref, 0;
    goto $bb19;

  $bb16:
    assume $i65 == 1;
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $p66 := ceph_file_part(.str.2, 199);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref($p2, .str.7, 4, .str.5, $p66, 3369, .str.1);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i47 == 1;
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb13;

  $bb8:
    assume $i41 == 1;
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i42 := 2;
    goto $bb10;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p18, .str);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p19, .str.1);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p20, .str.2);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p21, .str.3);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i24 := $load.i24($M.8, $p23);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i25 := $and.i24($i24, $sub.i24(0, 262144));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i26 := $or.i24($i25, 3354);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p23, $i26);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p27, 0);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.9, $p28);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i29);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 1);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 94} {:cexpr "tmp___3"} boogie_si_record_i64($i32);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32(0, 5);
    goto $bb6;

  $bb3:
    assume $i33 == 1;
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $p34 := ceph_file_part(.str.2, 199);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 368)), $mul.ref(72, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.2, $p35);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.i32($p1, .str.4, 4, .str.5, $p34, 3354, .str.1, $i36);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb38_dummy:
    assume false;
    return;

  $bb38_last:
    assume {:verifier.code 0} true;
    goto $bb38_dummy;

  $bb28_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto $bb28_dummy;
}



const blk_mq_rq_from_pdu: ref;

axiom blk_mq_rq_from_pdu == $sub.ref(0, 519874);

procedure blk_mq_rq_from_pdu($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation blk_mq_rq_from_pdu($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 368), 368));
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const blk_rq_pos: ref;

axiom blk_rq_pos == $sub.ref(0, 520906);

procedure blk_rq_pos($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation blk_rq_pos($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(96, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.2, $p1);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const blk_rq_bytes: ref;

axiom blk_rq_bytes == $sub.ref(0, 521938);

procedure blk_rq_bytes($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation blk_rq_bytes($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(92, 1));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.2, $p1);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ceph_file_part: ref;

axiom ceph_file_part == $sub.ref(0, 522970);

procedure ceph_file_part($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation ceph_file_part($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} {:cexpr "ceph_file_part:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $p2 := external_alloc();
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 524002);

procedure __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: i32);



procedure __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i64($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: i64);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i64($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: i64)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.i64.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: i64, p.9: i32);



procedure __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i64.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: i64, p.7: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i64.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: i64, p.7: i32)
{

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.i64($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: i64);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.i64($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: i64)
{

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i64.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: i64, p.7: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i64.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: i64, p.7: ref)
{

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i64.i64($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: i64, p.7: i64);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i64.i64($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: i64, p.7: i64)
{

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i64.i64.i64($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: i64, p.7: i64, p.8: i64);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i64.i64.i64($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: i64, p.7: i64, p.8: i64)
{

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: i32)
{

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.ref.i64.i64.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: ref, p.9: i64, p.10: i64, p.11: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.ref.i64.i64.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: ref, p.9: i64, p.10: i64, p.11: ref)
{

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: ref, p.9: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: ref, p.9: i32)
{

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: i32, p.9: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: i32, p.9: ref)
{

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: ref)
{

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.i64.i64.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: i64, p.9: i64, p.10: i32, p.11: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.i64.i64.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: i64, p.9: i64, p.10: i32, p.11: ref)
{

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.ref.i32.i64.i64($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: ref, p.9: i32, p.10: i64, p.11: i64);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.ref.i32.i64.i64($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: ref, p.9: i32, p.10: i64, p.11: i64)
{

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.i32.i64($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: i32, p.9: i64);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.i32.i64($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: i32, p.9: i64)
{

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32)
{

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    return;
}



const rbd_warn: ref;

axiom rbd_warn == $sub.ref(0, 525034);

procedure rbd_warn.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rbd_warn.ref.ref($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} ldv__builtin_va_start($p3);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p1);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p3);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} vslice_dummy_var_57 := printk.ref.ref.ref.ref(.str.20, .str, $p0, $p2);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} ldv__builtin_va_end($p3);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i36 == 1;
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb15;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} vslice_dummy_var_58 := printk.ref.ref.ref.ref(.str.19, .str, $p46, $p2);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb9;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} vslice_dummy_var_56 := printk.ref.ref.ref.ref(.str.18, .str, $p31, $p2);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} vslice_dummy_var_55 := printk.ref.ref.ref.ref(.str.17, .str, $p16, $p2);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} vslice_dummy_var_54 := printk.ref.ref.ref(.str.16, .str, $p2);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    goto $bb3;
}



procedure rbd_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rbd_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} ldv__builtin_va_start($p3);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p1);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p3);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i7 == 1);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i12 == 1);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} vslice_dummy_var_62 := printk.ref.ref.ref.ref(.str.20, .str, $p0, $p2);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} ldv__builtin_va_end($p3);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume $i36 == 1;
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb34;

  $bb35:
    assume $i42 == 1;
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} vslice_dummy_var_63 := printk.ref.ref.ref.ref(.str.19, .str, $p46, $p2);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb26:
    assume $i21 == 1;
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb28;

  $bb29:
    assume $i27 == 1;
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} vslice_dummy_var_61 := printk.ref.ref.ref.ref(.str.18, .str, $p31, $p2);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume $i12 == 1;
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} vslice_dummy_var_60 := printk.ref.ref.ref.ref(.str.17, .str, $p16, $p2);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i7 == 1;
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} vslice_dummy_var_59 := printk.ref.ref.ref(.str.16, .str, $p2);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    goto $bb22;
}



procedure rbd_warn.ref.ref.i64.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rbd_warn.ref.ref.i64.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} ldv__builtin_va_start($p3);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p1);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p3);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i7 == 1);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i12 == 1);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} vslice_dummy_var_67 := printk.ref.ref.ref.ref(.str.20, .str, $p0, $p2);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} ldv__builtin_va_end($p3);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    return;

  $bb51:
    assume $i36 == 1;
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb53;

  $bb54:
    assume $i42 == 1;
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} vslice_dummy_var_68 := printk.ref.ref.ref.ref(.str.19, .str, $p46, $p2);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb45:
    assume $i21 == 1;
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb47;

  $bb48:
    assume $i27 == 1;
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} vslice_dummy_var_66 := printk.ref.ref.ref.ref(.str.18, .str, $p31, $p2);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb42:
    assume $i12 == 1;
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} vslice_dummy_var_65 := printk.ref.ref.ref.ref(.str.17, .str, $p16, $p2);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i7 == 1;
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} vslice_dummy_var_64 := printk.ref.ref.ref(.str.16, .str, $p2);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    goto $bb41;
}



procedure rbd_warn.ref.ref.i64($p0: ref, $p1: ref, p.2: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rbd_warn.ref.ref.i64($p0: ref, $p1: ref, p.2: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} ldv__builtin_va_start($p3);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p1);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p3);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i7 == 1);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i12 == 1);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} vslice_dummy_var_72 := printk.ref.ref.ref.ref(.str.20, .str, $p0, $p2);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} ldv__builtin_va_end($p3);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    return;

  $bb70:
    assume $i36 == 1;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb72;

  $bb73:
    assume $i42 == 1;
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} vslice_dummy_var_73 := printk.ref.ref.ref.ref(.str.19, .str, $p46, $p2);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb64:
    assume $i21 == 1;
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb66;

  $bb67:
    assume $i27 == 1;
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} vslice_dummy_var_71 := printk.ref.ref.ref.ref(.str.18, .str, $p31, $p2);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb61:
    assume $i12 == 1;
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} vslice_dummy_var_70 := printk.ref.ref.ref.ref(.str.17, .str, $p16, $p2);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb58:
    assume $i7 == 1;
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} vslice_dummy_var_69 := printk.ref.ref.ref(.str.16, .str, $p2);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    goto $bb60;
}



procedure rbd_warn.ref.ref.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rbd_warn.ref.ref.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;

  $bb76:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} ldv__builtin_va_start($p3);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p1);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p3);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i7 == 1);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i12 == 1);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} vslice_dummy_var_77 := printk.ref.ref.ref.ref(.str.20, .str, $p0, $p2);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} ldv__builtin_va_end($p3);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    return;

  $bb89:
    assume $i36 == 1;
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb91;

  $bb92:
    assume $i42 == 1;
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} vslice_dummy_var_78 := printk.ref.ref.ref.ref(.str.19, .str, $p46, $p2);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb83:
    assume $i21 == 1;
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb85;

  $bb86:
    assume $i27 == 1;
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} vslice_dummy_var_76 := printk.ref.ref.ref.ref(.str.18, .str, $p31, $p2);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb80:
    assume $i12 == 1;
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} vslice_dummy_var_75 := printk.ref.ref.ref.ref(.str.17, .str, $p16, $p2);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb77:
    assume $i7 == 1;
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} vslice_dummy_var_74 := printk.ref.ref.ref(.str.16, .str, $p2);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    goto $bb79;
}



procedure rbd_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rbd_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;

  $bb95:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} ldv__builtin_va_start($p3);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p1);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p3);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i7 == 1);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i12 == 1);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} vslice_dummy_var_82 := printk.ref.ref.ref.ref(.str.20, .str, $p0, $p2);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} ldv__builtin_va_end($p3);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    return;

  $bb108:
    assume $i36 == 1;
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb110;

  $bb111:
    assume $i42 == 1;
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} vslice_dummy_var_83 := printk.ref.ref.ref.ref(.str.19, .str, $p46, $p2);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb102:
    assume $i21 == 1;
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb104;

  $bb105:
    assume $i27 == 1;
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} vslice_dummy_var_81 := printk.ref.ref.ref.ref(.str.18, .str, $p31, $p2);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb99:
    assume $i12 == 1;
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} vslice_dummy_var_80 := printk.ref.ref.ref.ref(.str.17, .str, $p16, $p2);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb96:
    assume $i7 == 1;
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} vslice_dummy_var_79 := printk.ref.ref.ref(.str.16, .str, $p2);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    goto $bb98;
}



procedure rbd_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rbd_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;

  $bb114:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} ldv__builtin_va_start($p3);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p1);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p3);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i7 == 1);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i12 == 1);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} vslice_dummy_var_87 := printk.ref.ref.ref.ref(.str.20, .str, $p0, $p2);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} ldv__builtin_va_end($p3);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    return;

  $bb127:
    assume $i36 == 1;
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb129;

  $bb130:
    assume $i42 == 1;
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} vslice_dummy_var_88 := printk.ref.ref.ref.ref(.str.19, .str, $p46, $p2);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb121:
    assume $i21 == 1;
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb123;

  $bb124:
    assume $i27 == 1;
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} vslice_dummy_var_86 := printk.ref.ref.ref.ref(.str.18, .str, $p31, $p2);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb118:
    assume $i12 == 1;
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} vslice_dummy_var_85 := printk.ref.ref.ref.ref(.str.17, .str, $p16, $p2);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb115:
    assume $i7 == 1;
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} vslice_dummy_var_84 := printk.ref.ref.ref(.str.16, .str, $p2);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    goto $bb117;
}



procedure rbd_warn.ref.ref.ref.i64.i64.i64($p0: ref, $p1: ref, p.2: ref, p.3: i64, p.4: i64, p.5: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rbd_warn.ref.ref.ref.i64.i64.i64($p0: ref, $p1: ref, p.2: ref, p.3: i64, p.4: i64, p.5: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;

  $bb133:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} ldv__builtin_va_start($p3);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p1);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p3);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i7 == 1);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i12 == 1);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} vslice_dummy_var_92 := printk.ref.ref.ref.ref(.str.20, .str, $p0, $p2);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} ldv__builtin_va_end($p3);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    return;

  $bb146:
    assume $i36 == 1;
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb148;

  $bb149:
    assume $i42 == 1;
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} vslice_dummy_var_93 := printk.ref.ref.ref.ref(.str.19, .str, $p46, $p2);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb140:
    assume $i21 == 1;
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb142;

  $bb143:
    assume $i27 == 1;
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} vslice_dummy_var_91 := printk.ref.ref.ref.ref(.str.18, .str, $p31, $p2);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb137:
    assume $i12 == 1;
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} vslice_dummy_var_90 := printk.ref.ref.ref.ref(.str.17, .str, $p16, $p2);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb134:
    assume $i7 == 1;
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} vslice_dummy_var_89 := printk.ref.ref.ref(.str.16, .str, $p2);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    goto $bb136;
}



procedure rbd_warn.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rbd_warn.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;

  $bb152:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} ldv__builtin_va_start($p3);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p1);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p3);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i7 == 1);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i12 == 1);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} vslice_dummy_var_97 := printk.ref.ref.ref.ref(.str.20, .str, $p0, $p2);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} ldv__builtin_va_end($p3);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    return;

  $bb165:
    assume $i36 == 1;
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb167;

  $bb168:
    assume $i42 == 1;
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} vslice_dummy_var_98 := printk.ref.ref.ref.ref(.str.19, .str, $p46, $p2);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb159:
    assume $i21 == 1;
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb161;

  $bb162:
    assume $i27 == 1;
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} vslice_dummy_var_96 := printk.ref.ref.ref.ref(.str.18, .str, $p31, $p2);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb156:
    assume $i12 == 1;
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} vslice_dummy_var_95 := printk.ref.ref.ref.ref(.str.17, .str, $p16, $p2);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb153:
    assume $i7 == 1;
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} vslice_dummy_var_94 := printk.ref.ref.ref(.str.16, .str, $p2);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    goto $bb155;
}



procedure rbd_warn.ref.ref.ref.i64.i64.i32($p0: ref, $p1: ref, p.2: ref, p.3: i64, p.4: i64, p.5: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rbd_warn.ref.ref.ref.i64.i64.i32($p0: ref, $p1: ref, p.2: ref, p.3: i64, p.4: i64, p.5: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;

  $bb171:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} ldv__builtin_va_start($p3);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p1);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p3);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i7 == 1);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i12 == 1);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} vslice_dummy_var_102 := printk.ref.ref.ref.ref(.str.20, .str, $p0, $p2);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} ldv__builtin_va_end($p3);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    return;

  $bb184:
    assume $i36 == 1;
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb186;

  $bb187:
    assume $i42 == 1;
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} vslice_dummy_var_103 := printk.ref.ref.ref.ref(.str.19, .str, $p46, $p2);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb178:
    assume $i21 == 1;
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb180;

  $bb181:
    assume $i27 == 1;
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} vslice_dummy_var_101 := printk.ref.ref.ref.ref(.str.18, .str, $p31, $p2);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb175:
    assume $i12 == 1;
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} vslice_dummy_var_100 := printk.ref.ref.ref.ref(.str.17, .str, $p16, $p2);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb172:
    assume $i7 == 1;
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} vslice_dummy_var_99 := printk.ref.ref.ref(.str.16, .str, $p2);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    goto $bb174;
}



procedure rbd_warn.ref.ref.i64.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64, p.4: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rbd_warn.ref.ref.i64.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64, p.4: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;

  $bb190:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} ldv__builtin_va_start($p3);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p1);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p3);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i7 == 1);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i12 == 1);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} vslice_dummy_var_107 := printk.ref.ref.ref.ref(.str.20, .str, $p0, $p2);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} ldv__builtin_va_end($p3);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    return;

  $bb203:
    assume $i36 == 1;
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb205;

  $bb206:
    assume $i42 == 1;
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} vslice_dummy_var_108 := printk.ref.ref.ref.ref(.str.19, .str, $p46, $p2);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb197:
    assume $i21 == 1;
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb199;

  $bb200:
    assume $i27 == 1;
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} vslice_dummy_var_106 := printk.ref.ref.ref.ref(.str.18, .str, $p31, $p2);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb194:
    assume $i12 == 1;
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} vslice_dummy_var_105 := printk.ref.ref.ref.ref(.str.17, .str, $p16, $p2);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb191:
    assume $i7 == 1;
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} vslice_dummy_var_104 := printk.ref.ref.ref(.str.16, .str, $p2);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    goto $bb193;
}



const blk_mq_start_request: ref;

axiom blk_mq_start_request == $sub.ref(0, 526066);

procedure blk_mq_start_request($p0: ref);
  free requires assertsPassed;



implementation blk_mq_start_request($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    return;
}



const down_read: ref;

axiom down_read == $sub.ref(0, 527098);

procedure down_read($p0: ref);
  free requires assertsPassed;



implementation down_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    return;
}



const ceph_get_snap_context: ref;

axiom ceph_get_snap_context == $sub.ref(0, 528130);

procedure ceph_get_snap_context($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ceph_get_snap_context($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $p1 := external_alloc();
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const up_read: ref;

axiom up_read == $sub.ref(0, 529162);

procedure up_read($p0: ref);
  free requires assertsPassed;



implementation up_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    return;
}



const rbd_img_request_create: ref;

axiom rbd_img_request_create == $sub.ref(0, 530194);

procedure rbd_img_request_create($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_img_request_create($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i1;
  var $i32: i8;
  var $i33: i1;
  var $p34: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i24;
  var $i52: i24;
  var $i53: i24;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p12: ref;
  var vslice_dummy_var_109: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 238} {:cexpr "rbd_img_request_create:arg:offset"} boogie_si_record_i64($i1);
    call {:si_unique_call 239} {:cexpr "rbd_img_request_create:arg:length"} boogie_si_record_i64($i2);
    call {:si_unique_call 240} {:cexpr "rbd_img_request_create:arg:op_type"} boogie_si_record_i32($i3);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p7 := $M.11;
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $p8 := kmem_cache_alloc($p7, 16);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $0.ref);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p9, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p0);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p16, $i1);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p9, $mul.ref(0, 192)), $mul.ref(16, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p17, $i2);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref(0, 192)), $mul.ref(24, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p18, 0);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i3, 2);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i3, 0);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p9, $mul.ref(0, 192)), $mul.ref(32, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p30, $i28);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} $i31 := rbd_dev_parent_get($p0);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i8($i31);
    call {:si_unique_call 244} {:cexpr "tmp___0"} boogie_si_record_i8($i32);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i32);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p9, $mul.ref(0, 192)), $mul.ref(64, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} vslice_dummy_var_109 := spinlock_check($p34);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 192)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} __raw_spin_lock_init($p38, .str.21, $p5);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p9, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 0);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p9, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $0.ref);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p9, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, 0);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p9, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 0);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p9, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} INIT_LIST_HEAD($p43);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p9, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} kref_init($p44);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p45, .str);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p46, .str.22);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p47, .str.2);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p48, .str.23);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i51 := $load.i24($M.8, $p50);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i52 := $and.i24($i51, $sub.i24(0, 262144));
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i53 := $or.i24($i52, 2189);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p50, $i53);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p54, 0);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.9, $p55);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i64($i56);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 1);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 252} {:cexpr "tmp___3"} boogie_si_record_i64($i59);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p12 := $p8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb14:
    assume $i60 == 1;
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $p61 := obj_op_name($i3);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $p62 := ceph_file_part(.str.2, 199);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.ref.i64.i64.ref($p6, .str.24, 4, .str.5, $p62, 2189, .str.22, $p0, $p61, $i1, $i2, $p9);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} img_request_layered_set($p9);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} img_request_write_set($p9);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p9, $mul.ref(0, 192)), $mul.ref(32, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p4);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} img_request_discard_set($p9);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p9, $mul.ref(0, 192)), $mul.ref(32, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p4);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb3;
}



const rbd_img_request_fill: ref;

axiom rbd_img_request_fill == $sub.ref(0, 531226);

procedure rbd_img_request_fill($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.14, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.21, $M.18, $M.20, $M.19;



implementation rbd_img_request_fill($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $i44: i32;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $i50: i1;
  var $p52: ref;
  var $p49: ref;
  var $i53: i1;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i32;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i64;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var $p81: ref;
  var $i98: i1;
  var $i99: i32;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $i109: i64;
  var $i110: i1;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $p128: ref;
  var $i129: i64;
  var $i130: i1;
  var $p133: ref;
  var $p134: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i64;
  var $i144: i1;
  var $p131: ref;
  var $p132: ref;
  var $i111: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 259} {:cexpr "rbd_img_request_fill:arg:type"} boogie_si_record_i32($i1);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p3, $0.ref);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p4, 0);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p9, .str.26);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p10, .str.2);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p11, .str.27);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.8, $p13);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 2443);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p13, $i16);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p17, 0);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.9, $p18);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 261} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    call {:si_unique_call 264} {:cexpr "img_offset"} boogie_si_record_i64($i26);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(16, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    call {:si_unique_call 265} {:cexpr "resid"} boogie_si_record_i64($i28);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 267} {:cexpr "tmp___1"} boogie_si_record_i64($i32);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $i35 := rbd_img_request_op_type($p0);
    call {:si_unique_call 271} {:cexpr "op_type"} boogie_si_record_i32($i35);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i1, 1);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i1, 2);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $p52 := $0.ref;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p49 := $p52;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i28, 0);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i111 := 0;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $r := $i111;
    return;

  $bb18:
    assume $i53 == 1;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i54, $i55, $p56 := $i28, $i26, $p49;
    goto $bb21;

  $bb21:
    call $p57, $i58, $i59, $i60, $i61, $p62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i72, $p73, $p74, $p75, $p76, $p77, $p78, $i79, $i80, $i82, $p83, $p84, $p85, $i86, $p87, $p88, $p89, $i90, $i91, $i92, $i93, $i94, $i95, $p96, $p97, $p81, $i98, $i99, $p100, $i101, $i102, $p103, $p104, $p105, $p106, $p107, $i108, $i109, $i110, $i54, $i55, $p56 := rbd_img_request_fill_loop_$bb21($p0, $i1, $p3, $p4, $p7, $i35, $p57, $i58, $i59, $i60, $i61, $p62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i72, $p73, $p74, $p75, $p76, $p77, $p78, $i79, $i80, $i82, $p83, $p84, $p85, $i86, $p87, $p88, $p89, $i90, $i91, $i92, $i93, $i94, $i95, $p96, $p97, $p81, $i98, $i99, $p100, $i101, $i102, $p103, $p104, $p105, $p106, $p107, $i108, $i109, $i110, $i54, $i55, $p56);
    goto $bb21_last;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $p57 := rbd_segment_name($p7, $i55);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i58, 0);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $i60 := rbd_segment_offset($p7, $i55);
    call {:si_unique_call 278} {:cexpr "offset"} boogie_si_record_i64($i60);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $i61 := rbd_segment_length($p7, $i55, $i54);
    call {:si_unique_call 280} {:cexpr "length"} boogie_si_record_i64($i61);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $p62 := rbd_obj_request_create($p57, $i60, $i61, $i1);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} rbd_segment_name_free($p57);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i63, 0);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} rbd_img_obj_request_add($p0, $p62);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i1, 1);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i65 == 1);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i1, 2);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $p97 := $p56;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p81 := $p97;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i35, 0);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i99 := (if $i98 == 1 then 2 else 1);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $p100 := rbd_osd_req_create($p7, $i35, $i99, $p62);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p100);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i102 := $eq.i64($i101, 0);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p62, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p103, $p100);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p62, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p104, rbd_img_obj_callback);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p62, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p107, $i55);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} rbd_img_obj_request_fill($p62, $p100, $i35, 0);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} rbd_img_request_get($p0);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i108 := $add.i64($i55, $i61);
    call {:si_unique_call 296} {:cexpr "img_offset"} boogie_si_record_i64($i108);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i109 := $sub.i64($i54, $i61);
    call {:si_unique_call 297} {:cexpr "resid"} boogie_si_record_i64($i109);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i110 := $ne.i64($i109, 0);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i110 == 1);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb49:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $i54, $i55, $p56 := $i109, $i108, $p81;
    goto $bb49_dummy;

  $bb46:
    assume $i102 == 1;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1)), $mul.ref(8, 1));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p115, $mul.ref($sub.ref(0, 48), 240));
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p115, $mul.ref($sub.ref(0, 48), 240)), $mul.ref(32, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p117);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p118, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p122, $mul.ref($sub.ref(0, 48), 240));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p115, $mul.ref($sub.ref(0, 48), 240)), $mul.ref(32, 1));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p125, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i129 := $p2i.ref.i64($p128);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i130 := $ne.i64($i127, $i129);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i111 := $sub.i32(0, 12);
    goto $bb52;

  $bb53:
    assume $i130 == 1;
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p131, $p132 := $p116, $p123;
    goto $bb56;

  $bb56:
    call $p133, $p134, $p136, $p137, $p138, $p139, $p140, $p141, $p142, $i143, $i144, $p131, $p132 := rbd_img_request_fill_loop_$bb56($p0, $i129, $p133, $p134, $p136, $p137, $p138, $p139, $p140, $p141, $p142, $i143, $i144, $p131, $p132);
    goto $bb56_last;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} rbd_img_obj_request_del($p0, $p131);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p132, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p134, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p138, $mul.ref($sub.ref(0, 48), 240));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p132, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p141, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i143 := $p2i.ref.i64($p142);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i144 := $ne.i64($i143, $i129);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i144 == 1);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb58:
    assume $i144 == 1;
    assume {:verifier.code 0} true;
    $p131, $p132 := $p132, $p139;
    goto $bb58_dummy;

  $bb40:
    assume $i82 == 1;
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p62, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p85, $p56);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $i86 := calc_pages_for($i60, $i61);
    call {:si_unique_call 292} {:cexpr "tmp___4"} boogie_si_record_i32($i86);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p62, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, $i86);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i90 := $add.i64($i60, $i61);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i91 := $and.i64($i90, 4095);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i94 := $i86;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i95 := $zext.i32.i64($i94);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p56, $mul.ref($i95, 8));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p97 := $p96;
    goto $bb45;

  $bb42:
    assume $i92 == 1;
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i93 := $sub.i32($i86, 1);
    call {:si_unique_call 293} {:cexpr "page_count___0"} boogie_si_record_i32($i93);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i94 := $i93;
    goto $bb44;

  $bb30:
    assume $i65 == 1;
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i66 := $ugt.i64($i61, 4294967295);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i66);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $i69 := ldv__builtin_expect($i68, 0);
    call {:si_unique_call 285} {:cexpr "tmp___3"} boogie_si_record_i64($i69);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i64.i32($i61);
    call {:si_unique_call 288} {:cexpr "clone_size"} boogie_si_record_i32($i72);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $p73 := bio_chain_clone_range($p3, $p4, $i72, 32);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p62, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p75, $p73);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p62, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i80 := $eq.i64($i79, 0);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p81 := $p56;
    goto $bb39;

  $bb36:
    assume $i80 == 1;
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb32:
    assume $i70 == 1;
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} vslice_dummy_var_112 := printk.ref.ref.i32.ref(.str.8, .str.26, 2485, .str.31);
    call {:si_unique_call 287} devirtbounce(0, .str.2, 2485, 12);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    call rbd_img_request_fill_loop_$bb34();
    goto $bb34_last;

  $bb27:
    assume $i64 == 1;
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume $i59 == 1;
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb15:
    assume $i50 == 1;
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p52 := $p2;
    goto $bb17;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p3, $p2);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.13, $p3);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i42 := $shl.i64($i41, 9);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, $i26);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i43);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i46 := ldv__builtin_expect($i45, 0);
    call {:si_unique_call 273} {:cexpr "tmp___2"} boogie_si_record_i64($i46);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p49 := $0.ref;
    goto $bb14;

  $bb10:
    assume $i47 == 1;
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} vslice_dummy_var_111 := printk.ref.ref.i32.ref(.str.8, .str.26, 2453, .str.30);
    call {:si_unique_call 275} devirtbounce(0, .str.2, 2453, 12);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    call rbd_img_request_fill_loop_$bb12();
    goto $bb12_last;

  $bb4:
    assume $i33 == 1;
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} vslice_dummy_var_110 := printk.ref.ref.i32.ref(.str.8, .str.26, 2447, .str.29);
    call {:si_unique_call 269} devirtbounce(0, .str.2, 2447, 12);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call rbd_img_request_fill_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $p24 := ceph_file_part(.str.2, 199);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.i32.ref($p5, .str.28, 4, .str.5, $p24, 2443, .str.26, $p0, $i1, $p2);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb58_dummy:
    assume false;
    return;

  $bb56_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1607;

  $bb34_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    goto $bb34_dummy;

  $bb49_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1493;

  $bb12_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto $bb12_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const rbd_img_request_submit: ref;

axiom rbd_img_request_submit == $sub.ref(0, 532258);

procedure rbd_img_request_submit($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.13, $M.14, $M.0, $M.21, $M.18, $M.20, $M.19;



implementation rbd_img_request_submit($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p38: ref;
  var $p39: ref;
  var $i43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2, .str);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p3, .str.137);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, .str.2);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p5, .str.123);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.8, $p7);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 2963);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p7, $i10);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p11, 0);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.9, $p12);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 301} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1)), $mul.ref(8, 1));
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref($sub.ref(0, 48), 240));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p22, $mul.ref($sub.ref(0, 48), 240)), $mul.ref(32, 1));
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref($sub.ref(0, 48), 240));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p22, $mul.ref($sub.ref(0, 48), 240)), $mul.ref(32, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i34, $i36);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $r := $i43;
    return;

  $bb4:
    assume $i37 == 1;
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p38, $p39 := $p30, $p23;
    goto $bb7;

  $bb7:
    call $i40, $i41, $i42, $p44, $p45, $p47, $p48, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $p38, $p39 := rbd_img_request_submit_loop_$bb7($i36, $i40, $i41, $i42, $p44, $p45, $p47, $p48, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $p38, $p39);
    goto $bb7_last;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $i40 := rbd_img_obj_request_submit($p39);
    call {:si_unique_call 305} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i42 := $i40;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p38, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p45, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p49, $mul.ref($sub.ref(0, 48), 240));
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p38, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, $i36);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i55 == 1);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb13:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $p38, $p39 := $p50, $p38;
    goto $bb13_dummy;

  $bb9:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb11;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $p18 := ceph_file_part(.str.2, 199);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref($p1, .str.124, 4, .str.5, $p18, 2963, .str.137, $p0);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1672;
}



const rbd_img_request_put: ref;

axiom rbd_img_request_put == $sub.ref(0, 533290);

procedure rbd_img_request_put($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.0, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_img_request_put($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i1;
  var $i30: i8;
  var $i31: i1;
  var $p32: ref;
  var $p34: ref;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 308} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p10, .str.161);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p11, .str.2);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p12, .str.129);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.8, $p14);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 1499);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p14, $i17);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p18, 0);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.9, $p19);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 312} {:cexpr "tmp___2"} boogie_si_record_i64($i23);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i29 := img_request_child_test($p0);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i8($i29);
    call {:si_unique_call 318} {:cexpr "tmp___3"} boogie_si_record_i8($i30);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i30);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} vslice_dummy_var_115 := kref_put($p34, rbd_img_request_destroy);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} vslice_dummy_var_114 := kref_put($p32, rbd_parent_request_destroy);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1)), $mul.ref(0, 1));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $i27 := atomic_read($p26);
    call {:si_unique_call 314} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $p28 := ceph_file_part(.str.2, 199);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.i32($p1, .str.130, 4, .str.5, $p28, 1499, .str.161, $p0, $i27);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} vslice_dummy_var_113 := printk.ref.ref.i32.ref(.str.8, .str.161, 1497, .str.110);
    call {:si_unique_call 310} devirtbounce(0, .str.2, 1497, 12);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call rbd_img_request_put_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const obj_op_name: ref;

axiom obj_op_name == $sub.ref(0, 534322);

procedure obj_op_name($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation obj_op_name($i0: i32) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $p5: ref;

  $bb0:
    call {:si_unique_call 321} {:cexpr "obj_op_name:arg:op_type"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p5 := .str.175;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p5 := .str.174;
    goto $bb11;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p5 := .str.172;
    goto $bb11;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p5 := .str.173;
    goto $bb11;
}



const ceph_put_snap_context: ref;

axiom ceph_put_snap_context == $sub.ref(0, 535354);

procedure ceph_put_snap_context($p0: ref);
  free requires assertsPassed;



implementation ceph_put_snap_context($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    return;
}



const blk_mq_end_request: ref;

axiom blk_mq_end_request == $sub.ref(0, 536386);

procedure blk_mq_end_request($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_mq_end_request($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} {:cexpr "blk_mq_end_request:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 537418);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const img_request_child_test: ref;

axiom img_request_child_test == $sub.ref(0, 538450);

procedure img_request_child_test($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation img_request_child_test($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} devirtbounce.2(0);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(24, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $i2 := constant_test_bit(1, $p1);
    call {:si_unique_call 325} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const rbd_parent_request_destroy: ref;

axiom rbd_parent_request_destroy == $sub.ref(0, 539482);

procedure rbd_parent_request_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_parent_request_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 184), 192));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 184), 192)), $mul.ref(40, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 184), 192)), $mul.ref(40, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} rbd_obj_request_put($p5);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} img_request_child_clear($p2);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} rbd_img_request_destroy($p0);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    return;
}



const kref_put: ref;

axiom kref_put == $sub.ref(0, 540514);

procedure kref_put($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.13, $M.14, $M.18, $CurrAddr, $M.20, $M.21, $M.19;



implementation kref_put($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $i2 := kref_sub($p0, 1, $p1);
    call {:si_unique_call 330} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rbd_img_request_destroy: ref;

axiom rbd_img_request_destroy == $sub.ref(0, 541546);

procedure rbd_img_request_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_img_request_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p40: ref;
  var $p41: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $i62: i1;
  var $i63: i8;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i1;
  var $i68: i8;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i1;
  var $i74: i8;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var vslice_dummy_var_116: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 184), 192));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p4, .str);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p5, .str.162);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, .str.2);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p7, .str.123);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.8, $p9);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 2202);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p9, $i12);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p13, 0);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.9, $p14);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 333} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 184), 192)), $mul.ref(168, 1)), $mul.ref(8, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref($sub.ref(0, 48), 240));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p24, $mul.ref($sub.ref(0, 48), 240)), $mul.ref(32, 1));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref($sub.ref(0, 48), 240));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p24, $mul.ref($sub.ref(0, 48), 240)), $mul.ref(32, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 184), 192)), $mul.ref(168, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i36, $i38);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 184), 192)), $mul.ref(164, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i32($i56);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i57);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 338} {:cexpr "tmp___1"} boogie_si_record_i64($i59);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $i62 := img_request_layered_test($p3);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i63 := $zext.i1.i8($i62);
    call {:si_unique_call 342} {:cexpr "tmp___2"} boogie_si_record_i8($i63);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i8.i1($i63);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i67 := img_request_write_test($p3);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i8($i67);
    call {:si_unique_call 346} {:cexpr "tmp___3"} boogie_si_record_i8($i68);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i8.i1($i68);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i69 == 1);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $i73 := img_request_discard_test($p3);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i74 := $zext.i1.i8($i73);
    call {:si_unique_call 349} {:cexpr "tmp___4"} boogie_si_record_i8($i74);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i8.i1($i74);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p79 := $M.11;
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p3);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} kmem_cache_free($p79, $p80);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i75 == 1;
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 184), 192)), $mul.ref(32, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} ceph_put_snap_context($p78);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i69 == 1;
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 184), 192)), $mul.ref(32, 1));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} ceph_put_snap_context($p72);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i64 == 1;
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} img_request_layered_clear($p3);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 184), 192)), $mul.ref(0, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} rbd_dev_parent_put($p66);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i60 == 1;
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} vslice_dummy_var_116 := printk.ref.ref.i32.ref(.str.8, .str.162, 2206, .str.163);
    call {:si_unique_call 340} devirtbounce(0, .str.2, 2206, 12);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    call rbd_img_request_destroy_loop_$bb14();
    goto $bb14_last;

  $bb4:
    assume $i39 == 1;
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p40, $p41 := $p32, $p25;
    goto $bb7;

  $bb7:
    call $p42, $p43, $p45, $p46, $p47, $p48, $p49, $p50, $p51, $i52, $i53, $p40, $p41 := rbd_img_request_destroy_loop_$bb7($p3, $i38, $p42, $p43, $p45, $p46, $p47, $p48, $p49, $p50, $p51, $i52, $i53, $p40, $p41);
    goto $bb7_last;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} rbd_img_obj_request_del($p3, $p41);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p40, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p47, $mul.ref($sub.ref(0, 48), 240));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p40, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, $i38);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i53 == 1);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb9:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $p40, $p41 := $p48, $p40;
    goto $bb9_dummy;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $p20 := ceph_file_part(.str.2, 199);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref($p1, .str.124, 4, .str.5, $p20, 2202, .str.162, $p3);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb9_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1833;
}



const rbd_img_obj_request_del: ref;

axiom rbd_img_obj_request_del == $sub.ref(0, 542578);

procedure rbd_img_obj_request_del($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_img_obj_request_del($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $p55: ref;
  var $i56: i1;
  var $i57: i8;
  var $i58: i1;
  var $i59: i32;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $i71: i32;
  var $i72: i64;
  var $i73: i64;
  var $i74: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(64, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, $sub.i32(0, 1));
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 354} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p12, .str.131);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p13, .str.2);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p14, .str.46);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.8, $p16);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 1529);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p16, $i19);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p20, 0);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.9, $p21);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 358} {:cexpr "tmp___1"} boogie_si_record_i64($i25);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} list_del($p32);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i32($i35);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 363} {:cexpr "tmp___2"} boogie_si_record_i64($i38);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32($i42, 1);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i43);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(64, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i46, $i48);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i32($i49);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $i52 := ldv__builtin_expect($i51, 0);
    call {:si_unique_call 367} {:cexpr "tmp___3"} boogie_si_record_i64($i52);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(64, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $sub.i32(0, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $i56 := obj_request_img_data_test($p1);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i8($i56);
    call {:si_unique_call 371} {:cexpr "tmp___4"} boogie_si_record_i8($i57);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i57);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i59 := 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i59);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $i61 := ldv__builtin_expect($i60, 0);
    call {:si_unique_call 373} {:cexpr "tmp___6"} boogie_si_record_i64($i61);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p0);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i68, $i69);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i71 := $zext.i1.i32($i70);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i71);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i73 := ldv__builtin_expect($i72, 0);
    call {:si_unique_call 377} {:cexpr "tmp___7"} boogie_si_record_i64($i73);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p78, $0.ref);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p79, $0.ref);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} rbd_obj_request_put($p1);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i74 == 1;
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} vslice_dummy_var_121 := printk.ref.ref.i32.ref(.str.8, .str.131, 1536, .str.133);
    call {:si_unique_call 379} devirtbounce(0, .str.2, 1536, 12);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    call rbd_img_obj_request_del_loop_$bb25();
    goto $bb25_last;

  $bb19:
    assume $i62 == 1;
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} vslice_dummy_var_120 := printk.ref.ref.i32.ref(.str.8, .str.131, 1535, .str.68);
    call {:si_unique_call 375} devirtbounce(0, .str.2, 1535, 12);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    call rbd_img_obj_request_del_loop_$bb21();
    goto $bb21_last;

  $bb16:
    assume $i58 == 1;
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb18;

  $bb12:
    assume $i53 == 1;
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} vslice_dummy_var_119 := printk.ref.ref.i32.ref(.str.8, .str.131, 1533, .str.132);
    call {:si_unique_call 369} devirtbounce(0, .str.2, 1533, 12);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    call rbd_img_obj_request_del_loop_$bb14();
    goto $bb14_last;

  $bb8:
    assume $i39 == 1;
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} vslice_dummy_var_118 := printk.ref.ref.i32.ref(.str.8, .str.131, 1531, .str.111);
    call {:si_unique_call 365} devirtbounce(0, .str.2, 1531, 12);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call rbd_img_obj_request_del_loop_$bb10();
    goto $bb10_last;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $p27 := ceph_file_part(.str.2, 199);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(64, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.ref.i32($p2, .str.47, 4, .str.5, $p27, 1529, .str.131, $p0, $p1, $i29);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} vslice_dummy_var_117 := printk.ref.ref.i32.ref(.str.8, .str.131, 1526, .str.45);
    call {:si_unique_call 356} devirtbounce(0, .str.2, 1526, 12);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call rbd_img_obj_request_del_loop_$bb3();
    goto $bb3_last;

  $bb25_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto $bb25_dummy;

  $bb21_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto $bb21_dummy;

  $bb14_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb10_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const img_request_layered_test: ref;

axiom img_request_layered_test == $sub.ref(0, 543610);

procedure img_request_layered_test($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation img_request_layered_test($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} devirtbounce.2(0);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(24, 1));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $i2 := constant_test_bit(2, $p1);
    call {:si_unique_call 383} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const img_request_layered_clear: ref;

axiom img_request_layered_clear == $sub.ref(0, 544642);

procedure img_request_layered_clear($p0: ref);
  free requires assertsPassed;



implementation img_request_layered_clear($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(24, 1));
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} clear_bit(2, $p1);
    call {:si_unique_call 385} devirtbounce.2(0);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    return;
}



const rbd_dev_parent_put: ref;

axiom rbd_dev_parent_put == $sub.ref(0, 545674);

procedure rbd_dev_parent_put($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_parent_put($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(296, 1));
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(312, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $i6 := atomic_dec_return_safe($p5);
    call {:si_unique_call 387} {:cexpr "counter"} boogie_si_record_i32($i6);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 0);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i6, 0);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} rbd_warn.ref.ref($p0, .str.164);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} rbd_dev_unparent($p0);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const img_request_write_test: ref;

axiom img_request_write_test == $sub.ref(0, 546706);

procedure img_request_write_test($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation img_request_write_test($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} devirtbounce.2(0);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(24, 1));
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 392} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const img_request_discard_test: ref;

axiom img_request_discard_test == $sub.ref(0, 547738);

procedure img_request_discard_test($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation img_request_discard_test($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} devirtbounce.2(0);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(24, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $i2 := constant_test_bit(3, $p1);
    call {:si_unique_call 395} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const kmem_cache_free: ref;

axiom kmem_cache_free == $sub.ref(0, 548770);

procedure kmem_cache_free($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation kmem_cache_free($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    return;
}



const atomic_dec_return_safe: ref;

axiom atomic_dec_return_safe == $sub.ref(0, 549802);

procedure atomic_dec_return_safe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation atomic_dec_return_safe($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $i1 := atomic_sub_return(1, $p0);
    call {:si_unique_call 397} {:cexpr "counter"} boogie_si_record_i32($i1);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} atomic_inc($p0);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const rbd_dev_unparent: ref;

axiom rbd_dev_unparent == $sub.ref(0, 550834);

procedure rbd_dev_unparent($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.14, $M.18, $CurrAddr, $M.20, $M.21, $M.19;



implementation rbd_dev_unparent($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} rbd_dev_remove_parent($p0);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(296, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} rbd_spec_put($p2);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(296, 1));
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $0.ref);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(304, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, 0);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    return;
}



const rbd_dev_remove_parent: ref;

axiom rbd_dev_remove_parent == $sub.ref(0, 551866);

procedure rbd_dev_remove_parent($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_remove_parent($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i13: i64;
  var $i15: i1;
  var $p11: ref;
  var $p12: ref;
  var $p18: ref;
  var $p14: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p16: ref;
  var $p17: ref;
  var $p9: ref;
  var $p10: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i38: i32;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(320, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p5, $p6, $i7, $i8, $i13, $i15, $p11, $p12, $p18, $p14, $i19, $i20, $p21, $p22, $p16, $p17, $p9, $p10, $p23, $p24, $i25, $i26, $i27, $i28, $i29, $i30, $p32, $p33, $p34, $p35, $i36, $i37, $i38, $i39, $i40, $i41, $p43, $p44, $p45, $p46, $i47, $i48 := rbd_dev_remove_parent_loop_$bb4($p0, $p1, $p5, $p6, $i7, $i8, $i13, $i15, $p11, $p12, $p18, $p14, $i19, $i20, $p21, $p22, $p16, $p17, $p9, $p10, $p23, $p24, $i25, $i26, $i27, $i28, $i29, $i30, $p32, $p33, $p34, $p35, $i36, $i37, $i38, $i39, $i40, $i41, $p43, $p44, $p45, $p46, $i47, $i48);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(320, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p9, $p10 := $p0, $p6;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p23, $p24 := $p9, $p10;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 402} {:cexpr "tmp"} boogie_si_record_i64($i29);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} rbd_dev_image_release($p24);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p23, $mul.ref(0, 2192)), $mul.ref(320, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $0.ref);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p23, $mul.ref(0, 2192)), $mul.ref(304, 1));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, 0);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p23, $mul.ref(0, 2192)), $mul.ref(296, 1));
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i32($i37);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 407} {:cexpr "tmp___0"} boogie_si_record_i64($i40);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p23, $mul.ref(0, 2192)), $mul.ref(296, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} rbd_spec_put($p44);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p23, $mul.ref(0, 2192)), $mul.ref(296, 1));
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $0.ref);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p1);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i48 == 1);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb25_dummy;

  $bb21:
    assume $i41 == 1;
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} vslice_dummy_var_123 := printk.ref.ref.i32.ref(.str.8, .str.165, 5546, .str.167);
    call {:si_unique_call 409} devirtbounce(0, .str.2, 5546, 12);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    call rbd_dev_remove_parent_loop_$bb23();
    goto $bb23_last;

  $bb17:
    assume $i30 == 1;
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} vslice_dummy_var_122 := printk.ref.ref.i32.ref(.str.8, .str.165, 5541, .str.166);
    call {:si_unique_call 404} devirtbounce(0, .str.2, 5541, 12);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    call rbd_dev_remove_parent_loop_$bb19();
    goto $bb19_last;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p11, $p12 := $p6, $p0;
    goto $bb9;

  $bb9:
    call $i13, $i15, $p11, $p12, $p18, $p14, $i19, $i20, $p21, $p22, $p16, $p17 := rbd_dev_remove_parent_loop_$bb9($i13, $i15, $p11, $p12, $p18, $p14, $i19, $i20, $p21, $p22, $p16, $p17);
    goto $bb9_last;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 2192)), $mul.ref(320, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p18);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p14);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p21, $p22 := $p12, $p11;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p23, $p24 := $p21, $p22;
    goto $bb15;

  $bb13:
    assume $i20 == 1;
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p14);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i13, 0);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p16, $p17 := $p11, $p14;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p9, $p10 := $p16, $p17;
    goto $bb8;

  $bb11:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $p11, $p12 := $p14, $p11;
    goto $bb11_dummy;

  $bb23_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto $bb23_dummy;

  $bb19_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto $bb19_dummy;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2086;

  $bb25_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const rbd_spec_put: ref;

axiom rbd_spec_put == $sub.ref(0, 552898);

procedure rbd_spec_put($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.13, $M.14, $M.18, $CurrAddr, $M.20, $M.21, $M.19;



implementation rbd_spec_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var vslice_dummy_var_124: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} vslice_dummy_var_124 := kref_put($p3, rbd_spec_free);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rbd_spec_free: ref;

axiom rbd_spec_free == $sub.ref(0, 553930);

procedure rbd_spec_free($p0: ref);
  free requires assertsPassed;



implementation rbd_spec_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 48), 56));
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 48), 56)), $mul.ref(8, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} kfree($p4);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 48), 56)), $mul.ref(16, 1));
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} kfree($p6);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 48), 56)), $mul.ref(24, 1));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} kfree($p8);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 48), 56)), $mul.ref(40, 1));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} kfree($p10);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} kfree($p11);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 554962);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} free_($p0);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 555994);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 418} $free($p0);
    return;
}



const rbd_dev_image_release: ref;

axiom rbd_dev_image_release == $sub.ref(0, 557026);

procedure rbd_dev_image_release($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_image_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} rbd_dev_unprobe($p0);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(240, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} kfree($p2);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(240, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $0.ref);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} kfree($p8);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $0.ref);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} rbd_dev_destroy($p0);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    return;
}



const rbd_dev_unprobe: ref;

axiom rbd_dev_unprobe == $sub.ref(0, 558058);

procedure rbd_dev_unprobe($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_unprobe($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} rbd_dev_parent_put($p0);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1));
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(48, 1));
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} ceph_put_snap_context($p3);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(64, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} kfree($p6);
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(56, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} kfree($p8);
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} kfree($p10);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    call {:si_unique_call 428} cmdloc_dummy_var_4 := $memset.i8(cmdloc_dummy_var_3, $p11, 0, 72, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_4;
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    return;
}



const rbd_dev_destroy: ref;

axiom rbd_dev_destroy == $sub.ref(0, 559090);

procedure rbd_dev_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.13, $M.14, $M.18, $CurrAddr, $M.20, $M.21, $M.19;



implementation rbd_dev_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} rbd_put_client($p2);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} rbd_spec_put($p4);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(232, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} kfree($p7);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} kfree($p8);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    return;
}



const rbd_put_client: ref;

axiom rbd_put_client == $sub.ref(0, 560122);

procedure rbd_put_client($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.13, $M.14, $M.18, $CurrAddr, $M.20, $M.21, $M.19;



implementation rbd_put_client($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var vslice_dummy_var_125: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} vslice_dummy_var_125 := kref_put($p3, rbd_client_release);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rbd_client_release: ref;

axiom rbd_client_release == $sub.ref(0, 561154);

procedure rbd_client_release($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation rbd_client_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 8), 32));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p4, .str);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p5, .str.168);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, .str.2);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p7, .str.169);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.8, $p9);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 845);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p9, $i12);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p13, 0);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.9, $p14);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 436} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} spin_lock(rbd_client_list_lock);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 32)), $mul.ref(16, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} list_del($p21);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} spin_unlock(rbd_client_list_lock);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 32)), $mul.ref(0, 1));
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} ceph_destroy_client($p23);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} kfree($p24);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $p20 := ceph_file_part(.str.2, 199);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref($p1, .str.170, 4, .str.5, $p20, 845, .str.168, $p3);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 562186);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} _raw_spin_lock($p2);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 563218);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 564250);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} _raw_spin_unlock($p2);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    return;
}



const ceph_destroy_client: ref;

axiom ceph_destroy_client == $sub.ref(0, 565282);

procedure ceph_destroy_client($p0: ref);
  free requires assertsPassed;



implementation ceph_destroy_client($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 566314);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 567346);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 568378);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const atomic_sub_return: ref;

axiom atomic_sub_return == $sub.ref(0, 569410);

procedure atomic_sub_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_sub_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} {:cexpr "atomic_sub_return:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, $i0);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $i3 := atomic_add_return($i2, $p1);
    call {:si_unique_call 448} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 570442);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 449} devirtbounce.3(0, $p1, $p1);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    return;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 571474);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 451} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 452} $i3 := devirtbounce.4(0, $p2, $i0, $p2);
    call {:si_unique_call 453} {:cexpr "__ret"} boogie_si_record_i32($i3);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 572506);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 455} devirtbounce.5(0, $p1, $i0, $p1);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    return;
}



const obj_request_img_data_test: ref;

axiom obj_request_img_data_test == $sub.ref(0, 573538);

procedure obj_request_img_data_test($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation obj_request_img_data_test($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} devirtbounce.2(0);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $i2 := constant_test_bit(1, $p1);
    call {:si_unique_call 458} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const rbd_obj_request_put: ref;

axiom rbd_obj_request_put == $sub.ref(0, 574570);

procedure rbd_obj_request_put($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.0, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_obj_request_put($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 461} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p10, .str.134);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p11, .str.2);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p12, .str.74);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.8, $p14);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 1481);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p14, $i17);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p18, 0);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.9, $p19);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 465} {:cexpr "tmp___2"} boogie_si_record_i64($i23);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} vslice_dummy_var_127 := kref_put($p29, rbd_obj_request_destroy);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(232, 1)), $mul.ref(0, 1));
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $i27 := atomic_read($p26);
    call {:si_unique_call 467} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $p28 := ceph_file_part(.str.2, 199);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.i32($p1, .str.75, 4, .str.5, $p28, 1481, .str.134, $p0, $i27);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} vslice_dummy_var_126 := printk.ref.ref.i32.ref(.str.8, .str.134, 1479, .str.135);
    call {:si_unique_call 463} devirtbounce(0, .str.2, 1479, 12);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call rbd_obj_request_put_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const rbd_obj_request_destroy: ref;

axiom rbd_obj_request_destroy == $sub.ref(0, 575602);

procedure rbd_obj_request_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation rbd_obj_request_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i8;
  var $i50: i1;
  var $i51: i32;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 232), 240));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p4, .str);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p5, .str.136);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, .str.2);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p7, .str.98);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.8, $p9);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 2057);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p9, $i12);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p13, 0);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.9, $p14);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 473} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 232), 240)), $mul.ref(32, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 477} {:cexpr "tmp___1"} boogie_si_record_i64($i29);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 232), 240)), $mul.ref(64, 1));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, $sub.i32(0, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 481} {:cexpr "tmp___2"} boogie_si_record_i64($i37);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 232), 240)), $mul.ref(104, 1));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 232), 240)), $mul.ref(68, 1));
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i48 := obj_request_type_valid($i47);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i8($i48);
    call {:si_unique_call 486} {:cexpr "tmp___3"} boogie_si_record_i8($i49);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i8.i1($i49);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $i53 := ldv__builtin_expect($i52, 0);
    call {:si_unique_call 488} {:cexpr "tmp___5"} boogie_si_record_i64($i53);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 232), 240)), $mul.ref(68, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i57, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i57, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i57, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 232), 240)), $mul.ref(0, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} kfree($p85);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 232), 240)), $mul.ref(0, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p86, $0.ref);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p87 := $M.15;
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p3);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} kmem_cache_free($p87, $p88);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    return;

  $bb27:
    assume $i60 == 1;
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 232), 240)), $mul.ref(72, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb36:
    assume $i75 == 1;
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 232), 240)), $mul.ref(72, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 232), 240)), $mul.ref(72, 1));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} ceph_release_page_vector($p79, $i83);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb25:
    assume $i59 == 1;
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 232), 240)), $mul.ref(72, 1));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb33:
    assume $i66 == 1;
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 232), 240)), $mul.ref(72, 1));
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} bio_chain_put($p69);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb23:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i57, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb29;

  $bb30:
    assume $i61 == 1;
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb18:
    assume $i54 == 1;
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} vslice_dummy_var_130 := printk.ref.ref.i32.ref(.str.8, .str.136, 2065, .str.71);
    call {:si_unique_call 490} devirtbounce(0, .str.2, 2065, 12);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    call rbd_obj_request_destroy_loop_$bb20();
    goto $bb20_last;

  $bb15:
    assume $i50 == 1;
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i51 := 0;
    goto $bb17;

  $bb12:
    assume $i43 == 1;
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 232), 240)), $mul.ref(104, 1));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} rbd_osd_req_destroy($p45);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} vslice_dummy_var_129 := printk.ref.ref.i32.ref(.str.8, .str.136, 2060, .str.59);
    call {:si_unique_call 483} devirtbounce(0, .str.2, 2060, 12);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call rbd_obj_request_destroy_loop_$bb10();
    goto $bb10_last;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} vslice_dummy_var_128 := printk.ref.ref.i32.ref(.str.8, .str.136, 2059, .str.43);
    call {:si_unique_call 479} devirtbounce(0, .str.2, 2059, 12);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call rbd_obj_request_destroy_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $p20 := ceph_file_part(.str.2, 199);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref($p1, .str.99, 4, .str.5, $p20, 2057, .str.136, $p3);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto $bb20_dummy;

  $bb10_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const rbd_osd_req_destroy: ref;

axiom rbd_osd_req_destroy == $sub.ref(0, 576634);

procedure rbd_osd_req_destroy($p0: ref);
  free requires assertsPassed;



implementation rbd_osd_req_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} ceph_osdc_put_request($p0);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    return;
}



const obj_request_type_valid: ref;

axiom obj_request_type_valid == $sub.ref(0, 577666);

procedure obj_request_type_valid($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation obj_request_type_valid($i0: i32) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    call {:si_unique_call 496} {:cexpr "obj_request_type_valid:arg:type"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb7, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb13;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb10;

  $bb11:
    assume $i4 == 1;
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const bio_chain_put: ref;

axiom bio_chain_put == $sub.ref(0, 578698);

procedure bio_chain_put($p0: ref);
  free requires assertsPassed;



implementation bio_chain_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p3 := $p0;
    goto $bb4;

  $bb4:
    call $p4, $p5, $i6, $i7, $p3 := bio_chain_put_loop_$bb4($p4, $p5, $i6, $i7, $p3);
    goto $bb4_last;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} bio_put($p3);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $p3 := $p5;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2485;
}



const ceph_release_page_vector: ref;

axiom ceph_release_page_vector == $sub.ref(0, 579730);

procedure ceph_release_page_vector($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation ceph_release_page_vector($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} {:cexpr "ceph_release_page_vector:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    return;
}



const bio_put: ref;

axiom bio_put == $sub.ref(0, 580762);

procedure bio_put($p0: ref);
  free requires assertsPassed;



implementation bio_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    return;
}



const ceph_osdc_put_request: ref;

axiom ceph_osdc_put_request == $sub.ref(0, 581794);

procedure ceph_osdc_put_request($p0: ref);
  free requires assertsPassed;



implementation ceph_osdc_put_request($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    return;
}



const kref_sub: ref;

axiom kref_sub == $sub.ref(0, 582826);

procedure kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.13, $M.14, $M.18, $CurrAddr, $M.20, $M.21, $M.19;



implementation kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_131: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} {:cexpr "kref_sub:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 500} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 502} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} vslice_dummy_var_131 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 506} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 507} devirtbounce.6($p2, $p0);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} warn_slowpath_null(.str.76, 71);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 583858);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    return;
}



const atomic_sub_and_test: ref;

axiom atomic_sub_and_test == $sub.ref(0, 584890);

procedure atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 510} {:cexpr "atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 511} devirtbounce.7(0, $p3, $p2, $i0, $p3);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.16, $p2);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i5 := $sext.i8.i32($i4);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const img_request_child_clear: ref;

axiom img_request_child_clear == $sub.ref(0, 585922);

procedure img_request_child_clear($p0: ref);
  free requires assertsPassed;



implementation img_request_child_clear($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(24, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} clear_bit(1, $p1);
    call {:si_unique_call 513} devirtbounce.2(0);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    return;
}



const rbd_img_obj_request_submit: ref;

axiom rbd_img_obj_request_submit == $sub.ref(0, 586954);

procedure rbd_img_obj_request_submit($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.14, $M.0, $CurrAddr, $M.21, $M.18, $M.20, $M.19;



implementation rbd_img_obj_request_submit($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $i1 := img_obj_request_simple($p0);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 515} {:cexpr "tmp___0"} boogie_si_record_i8($i2);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $i17 := obj_request_known_test($p0);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i8($i17);
    call {:si_unique_call 519} {:cexpr "tmp___2"} boogie_si_record_i8($i18);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i21 := rbd_img_obj_exists_submit($p0);
    call {:si_unique_call 523} {:cexpr "tmp___3"} boogie_si_record_i32($i21);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i16 := $i21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i20 := rbd_img_obj_parent_read_full($p0);
    call {:si_unique_call 521} {:cexpr "tmp___1"} boogie_si_record_i32($i20);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i16 := $i20;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 3808)), $mul.ref(2608, 1));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i15 := rbd_obj_request_submit($p14, $p0);
    call {:si_unique_call 517} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb3;
}



const img_obj_request_simple: ref;

axiom img_obj_request_simple == $sub.ref(0, 587986);

procedure img_obj_request_simple($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation img_obj_request_simple($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i23: i8;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i8;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i33: i1;
  var $i34: i8;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i39: i8;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $i51: i1;
  var $i52: i8;
  var $i53: i1;
  var $i54: i1;
  var $i55: i8;
  var $i56: i1;
  var $i32: i1;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $i1 := obj_request_img_data_test($p0);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 525} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 527} {:cexpr "tmp___1"} boogie_si_record_i64($i6);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 531} {:cexpr "tmp___2"} boogie_si_record_i64($i17);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $i22 := img_request_write_test($p12);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i22);
    call {:si_unique_call 535} {:cexpr "tmp___3"} boogie_si_record_i8($i23);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $i33 := img_request_layered_test($p12);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i8($i33);
    call {:si_unique_call 539} {:cexpr "tmp___7"} boogie_si_record_i8($i34);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $i38 := obj_request_overlaps_parent($p0);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i8($i38);
    call {:si_unique_call 541} {:cexpr "tmp___9"} boogie_si_record_i8($i39);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $i51 := obj_request_known_test($p0);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i8($i51);
    call {:si_unique_call 545} {:cexpr "tmp___12"} boogie_si_record_i8($i52);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i8.i1($i52);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb43:
    assume $i53 == 1;
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $i54 := obj_request_exists_test($p0);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i8($i54);
    call {:si_unique_call 547} {:cexpr "tmp___13"} boogie_si_record_i8($i55);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i8.i1($i55);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb45:
    assume $i56 == 1;
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i32 := 1;
    goto $bb22;

  $bb37:
    assume $i45 == 1;
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p21, $mul.ref(0, 2192)), $mul.ref(144, 1));
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i47 := rbd_obj_bytes($p46);
    call {:si_unique_call 543} {:cexpr "tmp___11"} boogie_si_record_i64($i47);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, $i47);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb39:
    assume $i50 == 1;
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i32 := 1;
    goto $bb22;

  $bb34:
    assume $i42 == 1;
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i32 := 1;
    goto $bb22;

  $bb31:
    assume $i40 == 1;
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb33;

  $bb28:
    assume $i37 == 1;
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i32 := 1;
    goto $bb22;

  $bb25:
    assume $i35 == 1;
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb27;

  $bb15:
    assume $i26 == 1;
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i27 := img_request_discard_test($p12);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i8($i27);
    call {:si_unique_call 537} {:cexpr "tmp___5"} boogie_si_record_i8($i28);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i28);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb20:
    assume $i31 == 1;
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i32 := 1;
    goto $bb22;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb19;

  $bb12:
    assume $i24 == 1;
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb14;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} vslice_dummy_var_133 := printk.ref.ref.i32.ref(.str.8, .str.138, 2894, .str.139);
    call {:si_unique_call 533} devirtbounce(0, .str.2, 2894, 12);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call img_obj_request_simple_loop_$bb10();
    goto $bb10_last;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} vslice_dummy_var_132 := printk.ref.ref.i32.ref(.str.8, .str.138, 2891, .str.68);
    call {:si_unique_call 529} devirtbounce(0, .str.2, 2891, 12);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call img_obj_request_simple_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const rbd_obj_request_submit: ref;

axiom rbd_obj_request_submit == $sub.ref(0, 589018);

procedure rbd_obj_request_submit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation rbd_obj_request_submit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p3, .str);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p4, .str.81);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p5, .str.2);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p6, .str.82);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.8, $p8);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 1557);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p8, $i11);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p12, 0);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.9, $p13);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 550} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $i22 := ceph_osdc_start_request($p0, $p21, 0);
    call {:si_unique_call 554} {:cexpr "tmp___1"} boogie_si_record_i32($i22);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $p19 := ceph_file_part(.str.2, 199);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref($p2, .str.83, 4, .str.5, $p19, 1557, .str.81, $p1);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const obj_request_known_test: ref;

axiom obj_request_known_test == $sub.ref(0, 590050);

procedure obj_request_known_test($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation obj_request_known_test($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} devirtbounce.2(0);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $i2 := constant_test_bit(2, $p1);
    call {:si_unique_call 557} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const rbd_img_obj_parent_read_full: ref;

axiom rbd_img_obj_parent_read_full == $sub.ref(0, 591082);

procedure rbd_img_obj_parent_read_full($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.14, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.21, $M.18, $M.20, $M.19;



implementation rbd_img_obj_parent_read_full($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i32;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $i73: i1;
  var $i74: i8;
  var $i75: i1;
  var $p76: ref;
  var $i77: i64;
  var $i78: i32;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $i98: i64;
  var $i99: i1;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $i93: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i1 := obj_request_img_data_test($p0);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 559} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 561} {:cexpr "tmp___1"} boogie_si_record_i64($i6);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(68, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $i11 := obj_request_type_valid($i10);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 565} {:cexpr "tmp___2"} boogie_si_record_i8($i12);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 567} {:cexpr "tmp___4"} boogie_si_record_i64($i16);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 571} {:cexpr "tmp___5"} boogie_si_record_i64($i27);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p22, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 2192)), $mul.ref(320, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i32($i35);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 575} {:cexpr "tmp___6"} boogie_si_record_i64($i38);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i47 := $sub.i64($i44, $i46);
    call {:si_unique_call 578} {:cexpr "img_offset"} boogie_si_record_i64($i47);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(8, 1));
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i52 := $zext.i32.i64($i51);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i53 := $shl.i64(1, $i52);
    call {:si_unique_call 579} {:cexpr "length"} boogie_si_record_i64($i53);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i47, $i53);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p31, $mul.ref(0, 2192)), $mul.ref(304, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p55);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i57 := $ugt.i64($i54, $i56);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i69 := $i53;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $i70 := calc_pages_for(0, $i69);
    call {:si_unique_call 586} {:cexpr "tmp___8"} boogie_si_record_i32($i70);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $p71 := ceph_alloc_page_vector($i70, 208);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $i73 := IS_ERR($p72);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i74 := $zext.i1.i8($i73);
    call {:si_unique_call 589} {:cexpr "tmp___10"} boogie_si_record_i8($i74);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i8.i1($i74);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $p82 := rbd_parent_request_create($p0, $i47, $i69);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i84 := $eq.i64($i83, 0);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p71);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $i86 := rbd_img_request_fill($p82, 2, $p85);
    call {:si_unique_call 595} {:cexpr "result"} boogie_si_record_i32($i86);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p82, $mul.ref(0, 192)), $mul.ref(48, 1));
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p88, $p71);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p82, $mul.ref(0, 192)), $mul.ref(56, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, $i70);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p82, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p90, rbd_img_obj_parent_read_full_callback);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $i91 := rbd_img_request_submit($p82);
    call {:si_unique_call 597} {:cexpr "result"} boogie_si_record_i32($i91);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 0);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p82, $mul.ref(0, 192)), $mul.ref(48, 1));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p94, $0.ref);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p82, $mul.ref(0, 192)), $mul.ref(56, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p95, 0);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p82, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p97, $0.ref);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} rbd_obj_request_put($p0);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p79, $i80, $p81 := $p71, $i91, $p82;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p79);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i98, 0);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p81);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, $i80);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p103, 0);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} obj_request_done_set($p0);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i93 := $i80;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $r := $i93;
    return;

  $bb47:
    assume $i101 == 1;
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} rbd_img_request_put($p81);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i99 == 1;
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} ceph_release_page_vector($p79, $i70);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb40:
    assume $i92 == 1;
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i93 := 0;
    goto $bb42;

  $bb37:
    assume $i87 == 1;
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p79, $i80, $p81 := $p71, $i86, $p82;
    goto $bb32;

  $bb34:
    assume $i84 == 1;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p79, $i80, $p81 := $p71, $sub.i32(0, 12), $p82;
    goto $bb32;

  $bb30:
    assume $i75 == 1;
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p71);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $i77 := PTR_ERR($p76);
    call {:si_unique_call 591} {:cexpr "tmp___9"} boogie_si_record_i64($i77);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i64.i32($i77);
    call {:si_unique_call 592} {:cexpr "result"} boogie_si_record_i32($i78);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p79, $i80, $p81 := $0.ref, $i78, $0.ref;
    goto $bb32;

  $bb23:
    assume $i57 == 1;
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p31, $mul.ref(0, 2192)), $mul.ref(304, 1));
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.0, $p58);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i60 := $ule.i64($i59, $i47);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i32($i60);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $i63 := ldv__builtin_expect($i62, 0);
    call {:si_unique_call 581} {:cexpr "tmp___7"} boogie_si_record_i64($i63);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p31, $mul.ref(0, 2192)), $mul.ref(304, 1));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.0, $p66);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i68 := $sub.i64($i67, $i47);
    call {:si_unique_call 584} {:cexpr "length"} boogie_si_record_i64($i68);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i69 := $i68;
    goto $bb29;

  $bb25:
    assume $i64 == 1;
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} vslice_dummy_var_138 := printk.ref.ref.i32.ref(.str.8, .str.140, 2713, .str.142);
    call {:si_unique_call 583} devirtbounce(0, .str.2, 2713, 12);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    call rbd_img_obj_parent_read_full_loop_$bb27();
    goto $bb27_last;

  $bb19:
    assume $i39 == 1;
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} vslice_dummy_var_137 := printk.ref.ref.i32.ref(.str.8, .str.140, 2698, .str.141);
    call {:si_unique_call 577} devirtbounce(0, .str.2, 2698, 12);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    call rbd_img_obj_parent_read_full_loop_$bb21();
    goto $bb21_last;

  $bb15:
    assume $i28 == 1;
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} vslice_dummy_var_136 := printk.ref.ref.i32.ref(.str.8, .str.140, 2696, .str.110);
    call {:si_unique_call 573} devirtbounce(0, .str.2, 2696, 12);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    call rbd_img_obj_parent_read_full_loop_$bb17();
    goto $bb17_last;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} vslice_dummy_var_135 := printk.ref.ref.i32.ref(.str.8, .str.140, 2693, .str.71);
    call {:si_unique_call 569} devirtbounce(0, .str.2, 2693, 12);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call rbd_img_obj_parent_read_full_loop_$bb13();
    goto $bb13_last;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb10;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} vslice_dummy_var_134 := printk.ref.ref.i32.ref(.str.8, .str.140, 2692, .str.68);
    call {:si_unique_call 563} devirtbounce(0, .str.2, 2692, 12);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call rbd_img_obj_parent_read_full_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb27_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto $bb27_dummy;

  $bb21_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto $bb21_dummy;

  $bb17_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb13_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto $bb13_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const rbd_img_obj_exists_submit: ref;

axiom rbd_img_obj_exists_submit == $sub.ref(0, 592114);

procedure rbd_img_obj_exists_submit($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_img_obj_exists_submit($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i16: i32;
  var $i59: i1;
  var $i10: i32;
  var vslice_dummy_var_139: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $i1 := calc_pages_for(0, 16);
    call {:si_unique_call 603} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $p2 := ceph_alloc_page_vector($i1, 208);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $i4 := IS_ERR($p3);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 606} {:cexpr "tmp___1"} boogie_si_record_i8($i5);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $p13 := rbd_obj_request_create($p12, 0, 0, 2);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} rbd_obj_request_get($p0);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p13, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p0);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p13, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p2);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p13, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i1);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 612} {:cexpr "tmp___2"} boogie_si_record_i64($i33);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $p42 := rbd_osd_req_create($p41, 1, 1, $p13);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p13, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $p42);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p13, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p13, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, rbd_img_obj_exists_callback);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p13, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} osd_req_op_init($p50, 0, 4610, 0);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p13, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} osd_req_op_raw_data_in_pages($p52, 0, $p2, 16, 0, 0, 0);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} rbd_osd_req_format_read($p13);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p41, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 3808)), $mul.ref(2608, 1));
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $i58 := rbd_obj_request_submit($p57, $p13);
    call {:si_unique_call 620} {:cexpr "ret"} boogie_si_record_i32($i58);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i16 := $i58;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i16, 0);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i10 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb16:
    assume $i59 == 1;
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} rbd_obj_request_put($p0);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i47 == 1;
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb7;

  $bb9:
    assume $i34 == 1;
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} vslice_dummy_var_139 := printk.ref.ref.i32.ref(.str.8, .str.156, 2864, .str.58);
    call {:si_unique_call 614} devirtbounce(0, .str.2, 2864, 12);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call rbd_img_obj_exists_submit_loop_$bb11();
    goto $bb11_last;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $i8 := PTR_ERR($p7);
    call {:si_unique_call 608} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;
}



const calc_pages_for: ref;

axiom calc_pages_for == $sub.ref(0, 593146);

procedure calc_pages_for($i0: i64, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation calc_pages_for($i0: i64, $i1: i64) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i32;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} {:cexpr "calc_pages_for:arg:off"} boogie_si_record_i64($i0);
    call {:si_unique_call 623} {:cexpr "calc_pages_for:arg:len"} boogie_si_record_i64($i1);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i0, $i1);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 4095);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i64($i3, 12);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i64($i0, 12);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i5, $i7);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const ceph_alloc_page_vector: ref;

axiom ceph_alloc_page_vector == $sub.ref(0, 594178);

procedure ceph_alloc_page_vector($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation ceph_alloc_page_vector($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} {:cexpr "ceph_alloc_page_vector:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 625} {:cexpr "ceph_alloc_page_vector:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $p2 := external_alloc();
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 595210);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $i1 := ldv_is_err($p0);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 628} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 596242);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 630} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rbd_obj_request_create: ref;

axiom rbd_obj_request_create == $sub.ref(0, 597274);

procedure rbd_obj_request_create($p0: ref, $i1: i64, $i2: i64, $i3: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation rbd_obj_request_create($p0: ref, $i1: i64, $i2: i64, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i24;
  var $i42: i24;
  var $i43: i24;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p18: ref;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var vslice_dummy_var_140: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 632} {:cexpr "rbd_obj_request_create:arg:offset"} boogie_si_record_i64($i1);
    call {:si_unique_call 633} {:cexpr "rbd_obj_request_create:arg:length"} boogie_si_record_i64($i2);
    call {:si_unique_call 634} {:cexpr "rbd_obj_request_create:arg:type"} boogie_si_record_i32($i3);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $i5 := obj_request_type_valid($i3);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 636} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 638} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $i13 := strlen($p0);
    call {:si_unique_call 642} {:cexpr "tmp___2"} boogie_si_record_i64($i13);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 1);
    call {:si_unique_call 643} {:cexpr "size"} boogie_si_record_i64($i14);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $p15 := kmalloc($i14, 16);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p19 := $M.15;
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $p20 := kmem_cache_zalloc($p19, 16);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.0;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 647} cmdloc_dummy_var_7 := $memcpy.i8(cmdloc_dummy_var_5, cmdloc_dummy_var_6, $p15, $p0, $i14, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p21, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p15);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p21, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i1);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p21, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p26, $i2);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p21, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p27, 0);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p21, $mul.ref(0, 240)), $mul.ref(64, 1));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $sub.i32(0, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p21, $mul.ref(0, 240)), $mul.ref(68, 1));
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i3);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p21, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} INIT_LIST_HEAD($p32);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p21, $mul.ref(0, 240)), $mul.ref(136, 1));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} init_completion($p33);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p21, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} kref_init($p34);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p35, .str);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p36, .str.37);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p37, .str.2);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p38, .str.39);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i41 := $load.i24($M.8, $p40);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i42 := $and.i24($i41, $sub.i24(0, 262144));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i43 := $or.i24($i42, 2046);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p40, $i43);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p44, 0);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.9, $p45);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i64($i46);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i48 := $and.i64($i47, 1);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i49 := ldv__builtin_expect($i48, 0);
    call {:si_unique_call 652} {:cexpr "tmp___7"} boogie_si_record_i64($i49);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p18 := $p20;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;

  $bb15:
    assume $i50 == 1;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $p51 := ceph_file_part(.str.2, 199);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.i64.i64.i32.ref($p4, .str.40, 4, .str.5, $p51, 2046, .str.37, $p0, $i1, $i2, $i3, $p21);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} kfree($p15);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $p18 := $0.ref;
    goto $bb10;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p18 := $0.ref;
    goto $bb10;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} vslice_dummy_var_140 := printk.ref.ref.i32.ref(.str.8, .str.37, 2022, .str.38);
    call {:si_unique_call 640} devirtbounce(0, .str.2, 2022, 12);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call rbd_obj_request_create_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const rbd_obj_request_get: ref;

axiom rbd_obj_request_get == $sub.ref(0, 598306);

procedure rbd_obj_request_get($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation rbd_obj_request_get($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2, .str);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p3, .str.73);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, .str.2);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p5, .str.74);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.8, $p7);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 1472);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p7, $i10);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p11, 0);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.9, $p12);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 657} {:cexpr "tmp___1"} boogie_si_record_i64($i16);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} kref_get($p22);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(232, 1)), $mul.ref(0, 1));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $i20 := atomic_read($p19);
    call {:si_unique_call 659} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $p21 := ceph_file_part(.str.2, 199);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.i32($p1, .str.75, 4, .str.5, $p21, 1472, .str.73, $p0, $i20);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rbd_osd_req_create: ref;

axiom rbd_osd_req_create == $sub.ref(0, 599338);

procedure rbd_osd_req_create($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rbd_osd_req_create($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i22: i1;
  var $i23: i8;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i1;
  var $i36: i1;
  var $i38: i1;
  var $i37: i1;
  var $i35: i1;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $i53: i1;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i64;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p52: ref;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} {:cexpr "rbd_osd_req_create:arg:op_type"} boogie_si_record_i32($i1);
    call {:si_unique_call 664} {:cexpr "rbd_osd_req_create:arg:num_ops"} boogie_si_record_i32($i2);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $i4 := obj_request_img_data_test($p3);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 666} {:cexpr "tmp___5"} boogie_si_record_i8($i5);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p33 := $0.ref;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i2, 1);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i35 := 0;
    assume {:branchcond $i34} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i35);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 680} {:cexpr "tmp___6"} boogie_si_record_i64($i41);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 3808)), $mul.ref(2608, 1));
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $p49 := ceph_osdc_alloc_request($p48, $p33, $i2, 0, 32);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i1, 0);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb43;

  $bb43:
    assume !($i53 == 1);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i1, 2);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i54 == 1);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p49, $mul.ref(0, 1248)), $mul.ref(208, 1));
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, 16);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p49, $mul.ref(0, 1248)), $mul.ref(936, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, rbd_osd_req_callback);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p49, $mul.ref(0, 1248)), $mul.ref(992, 1));
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $p3);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(248, 1)), $mul.ref(24, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p49, $mul.ref(0, 1248)), $mul.ref(1000, 1)), $mul.ref(0, 1));
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p65, $i63);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p49, $mul.ref(0, 1248)), $mul.ref(1008, 1));
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} ceph_oid_set_name($p66, $p68);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p52 := $p49;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $r := $p52;
    return;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p49, $mul.ref(0, 1248)), $mul.ref(208, 1));
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 36);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb42;

  $bb37:
    assume $i51 == 1;
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p52 := $0.ref;
    goto $bb39;

  $bb33:
    assume $i42 == 1;
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} vslice_dummy_var_143 := printk.ref.ref.i32.ref(.str.8, .str.50, 1937, .str.53);
    call {:si_unique_call 682} devirtbounce(0, .str.2, 1937, 12);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    call rbd_osd_req_create_loop_$bb35();
    goto $bb35_last;

  $bb27:
    assume $i34 == 1;
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i1, 0);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i37 := 1;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i36 == 1);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i2, 2);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i37 := $i38;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i35 := $i37;
    goto $bb29;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb31;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 2);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i7 == 1);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 0);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i1, 0);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i13 == 1);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $i22 := img_request_discard_test($p12);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i22);
    call {:si_unique_call 670} {:cexpr "tmp___2"} boogie_si_record_i8($i23);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 676} {:cexpr "tmp___4"} boogie_si_record_i64($i27);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(32, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p33 := $p32;
    goto $bb26;

  $bb22:
    assume $i28 == 1;
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} vslice_dummy_var_142 := printk.ref.ref.i32.ref(.str.8, .str.50, 1932, .str.52);
    call {:si_unique_call 678} devirtbounce(0, .str.2, 1932, 12);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    call rbd_osd_req_create_loop_$bb24();
    goto $bb24_last;

  $bb19:
    assume $i24 == 1;
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb21;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $i14 := img_request_write_test($p12);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 668} {:cexpr "tmp"} boogie_si_record_i8($i15);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 672} {:cexpr "tmp___1"} boogie_si_record_i64($i19);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} vslice_dummy_var_141 := printk.ref.ref.i32.ref(.str.8, .str.50, 1930, .str.51);
    call {:si_unique_call 674} devirtbounce(0, .str.2, 1930, 12);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    call rbd_osd_req_create_loop_$bb16();
    goto $bb16_last;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb13;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb5;

  $bb35_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    goto $bb35_dummy;

  $bb24_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    goto $bb24_dummy;

  $bb16_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto $bb16_dummy;
}



const rbd_img_obj_exists_callback: ref;

axiom rbd_img_obj_exists_callback == $sub.ref(0, 600370);

procedure rbd_img_obj_exists_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.14, $CurrAddr, $M.18, $M.21, $M.20, $M.19;



implementation rbd_img_obj_exists_callback($p0: ref)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i24;
  var $i42: i24;
  var $i43: i24;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $i2 := obj_request_img_data_test($p0);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 687} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i64($i4);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 689} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $0.ref);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} rbd_obj_request_put($p11);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p11);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 694} {:cexpr "tmp___1"} boogie_si_record_i64($i18);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p11, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 698} {:cexpr "tmp___2"} boogie_si_record_i64($i29);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    call {:si_unique_call 701} {:cexpr "result"} boogie_si_record_i32($i33);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 0);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p35, .str);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p36, .str.157);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p37, .str.2);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p38, .str.159);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i41 := $load.i24($M.8, $p40);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i42 := $and.i24($i41, $sub.i24(0, 262144));
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i43 := $or.i24($i42, 2786);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p40, $i43);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p44, 0);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.9, $p45);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i64($i46);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i48 := $and.i64($i47, 1);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $i49 := ldv__builtin_expect($i48, 0);
    call {:si_unique_call 703} {:cexpr "tmp___4"} boogie_si_record_i64($i49);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} rbd_obj_request_put($p0);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p11, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 2192)), $mul.ref(304, 1));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.0, $p62);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i63, 0);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i72 := $i33;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 0);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i73 == 1);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i72, $sub.i32(0, 2));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i74 == 1);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i72, 0);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $i77 := rbd_img_obj_request_submit($p11);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p11, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i77);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p11, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb33:
    assume $i81 == 1;
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} rbd_obj_request_complete($p11);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb29:
    assume $i75 == 1;
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p11, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, $i72);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i74 == 1;
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} obj_request_existence_set($p11, 0);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i73 == 1;
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} obj_request_existence_set($p11, 1);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb16:
    assume $i64 == 1;
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p61, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 3808)), $mul.ref(2608, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $i70 := rbd_obj_request_submit($p69, $p11);
    call {:si_unique_call 708} {:cexpr "result"} boogie_si_record_i32($i70);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i72 := $i70;
    goto $bb22;

  $bb18:
    assume $i71 == 1;
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb13:
    assume $i50 == 1;
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $p51 := ceph_file_part(.str.2, 199);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.ref.i32.i64.i64($p1, .str.160, 4, .str.5, $p51, 2786, .str.157, $p0, $p11, $i33, $i53, $i55);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i30 == 1;
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} vslice_dummy_var_146 := printk.ref.ref.i32.ref(.str.8, .str.157, 2779, .str.149);
    call {:si_unique_call 700} devirtbounce(0, .str.2, 2779, 12);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call rbd_img_obj_exists_callback_loop_$bb11();
    goto $bb11_last;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} vslice_dummy_var_145 := printk.ref.ref.i32.ref(.str.8, .str.157, 2778, .str.158);
    call {:si_unique_call 696} devirtbounce(0, .str.2, 2778, 12);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call rbd_img_obj_exists_callback_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} vslice_dummy_var_144 := printk.ref.ref.i32.ref(.str.8, .str.157, 2768, .str.44);
    call {:si_unique_call 691} devirtbounce(0, .str.2, 2768, 12);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call rbd_img_obj_exists_callback_loop_$bb3();
    goto $bb3_last;

  $bb11_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const osd_req_op_init: ref;

axiom osd_req_op_init == $sub.ref(0, 601402);

procedure osd_req_op_init($p0: ref, $i1: i32, $i2: i16, $i3: i32);
  free requires assertsPassed;



implementation osd_req_op_init($p0: ref, $i1: i32, $i2: i16, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} {:cexpr "osd_req_op_init:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 714} {:cexpr "osd_req_op_init:arg:arg2"} boogie_si_record_i16($i2);
    call {:si_unique_call 715} {:cexpr "osd_req_op_init:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    return;
}



const osd_req_op_raw_data_in_pages: ref;

axiom osd_req_op_raw_data_in_pages == $sub.ref(0, 602434);

procedure osd_req_op_raw_data_in_pages($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i32, $i5: i1, $i6: i1);
  free requires assertsPassed;



implementation osd_req_op_raw_data_in_pages($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i32, $i5: i1, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} {:cexpr "osd_req_op_raw_data_in_pages:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 717} {:cexpr "osd_req_op_raw_data_in_pages:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 718} {:cexpr "osd_req_op_raw_data_in_pages:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 719} {:cexpr "osd_req_op_raw_data_in_pages:arg:arg5"} boogie_si_record_i1($i5);
    call {:si_unique_call 720} {:cexpr "osd_req_op_raw_data_in_pages:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    return;
}



const rbd_osd_req_format_read: ref;

axiom rbd_osd_req_format_read == $sub.ref(0, 603466);

procedure rbd_osd_req_format_read($p0: ref);
  free requires assertsPassed;



implementation rbd_osd_req_format_read($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var vslice_dummy_var_147: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 722} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p4);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i19 := $sub.i64(0, 2);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} ceph_osdc_build_request($p6, $i21, $0.ref, $i19, $0.ref);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(32, 1));
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} vslice_dummy_var_147 := printk.ref.ref.i32.ref(.str.8, .str.127, 1889, .str.126);
    call {:si_unique_call 724} devirtbounce(0, .str.2, 1889, 12);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call rbd_osd_req_format_read_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ceph_osdc_build_request: ref;

axiom ceph_osdc_build_request == $sub.ref(0, 604498);

procedure ceph_osdc_build_request($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation ceph_osdc_build_request($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} {:cexpr "ceph_osdc_build_request:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 727} {:cexpr "ceph_osdc_build_request:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    return;
}



const obj_request_existence_set: ref;

axiom obj_request_existence_set == $sub.ref(0, 605530);

procedure obj_request_existence_set($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation obj_request_existence_set($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 728} {:cexpr "obj_request_existence_set:arg:exists"} boogie_si_record_i1($i1);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} set_bit(2, $p5);
    call {:si_unique_call 731} devirtbounce.2(0);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} set_bit(3, $p4);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rbd_obj_request_complete: ref;

axiom rbd_obj_request_complete == $sub.ref(0, 606562);

procedure rbd_obj_request_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_obj_request_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2, .str);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p3, .str.102);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, .str.2);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p5, .str.103);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.8, $p7);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 1747);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p7, $i10);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p11, 0);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.9, $p12);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 734} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(136, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} complete_all($p27);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    call {:si_unique_call 737} devirtbounce.8($p26, $p0);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $p18 := ceph_file_part(.str.2, 199);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.ref($p1, .str.104, 4, .str.5, $p18, 1747, .str.102, $p0, $p20);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const complete_all: ref;

axiom complete_all == $sub.ref(0, 607594);

procedure complete_all($p0: ref);
  free requires assertsPassed;



implementation complete_all($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 608626);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 740} devirtbounce.5(0, $p1, $i0, $p1);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    return;
}



const ceph_osdc_alloc_request: ref;

axiom ceph_osdc_alloc_request == $sub.ref(0, 609658);

procedure ceph_osdc_alloc_request($p0: ref, $p1: ref, $i2: i32, $i3: i1, $i4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation ceph_osdc_alloc_request($p0: ref, $p1: ref, $i2: i32, $i3: i1, $i4: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} {:cexpr "ceph_osdc_alloc_request:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 742} {:cexpr "ceph_osdc_alloc_request:arg:arg3"} boogie_si_record_i1($i3);
    call {:si_unique_call 743} {:cexpr "ceph_osdc_alloc_request:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $p5 := external_alloc();
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const rbd_osd_req_callback: ref;

axiom rbd_osd_req_callback == $sub.ref(0, 610690);

procedure rbd_osd_req_callback($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_osd_req_callback($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $i33: i1;
  var $i34: i8;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i64;
  var $i74: i64;
  var $i75: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i64;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $i85: i32;
  var $i86: i64;
  var $i87: i64;
  var $i88: i1;
  var $p92: ref;
  var $i93: i16;
  var $i94: i32;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $p114: ref;
  var $i115: i16;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i64;
  var $i120: i64;
  var $i121: i1;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $i127: i8;
  var $i128: i1;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(992, 1));
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p6, .str);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p7, .str.54);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, .str.2);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p9, .str.55);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.8, $p11);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 1827);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p11, $i14);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p15, 0);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.9, $p16);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 747} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p0);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i25, $i26);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 751} {:cexpr "tmp___1"} boogie_si_record_i64($i30);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $i33 := obj_request_img_data_test($p5);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i8($i33);
    call {:si_unique_call 755} {:cexpr "tmp___5"} boogie_si_record_i8($i34);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i35 == 1);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(64, 1));
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, $sub.i32(0, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i32($i57);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i58);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i60 := ldv__builtin_expect($i59, 0);
    call {:si_unique_call 759} {:cexpr "tmp___4"} boogie_si_record_i64($i60);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(688, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i64, 0);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(216, 1));
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i71 := $ugt.i32($i70, 3);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i72 := $zext.i1.i32($i71);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i72);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $i74 := ldv__builtin_expect($i73, 0);
    call {:si_unique_call 769} {:cexpr "tmp___6"} boogie_si_record_i64($i74);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(692, 1)), $mul.ref(0, 4));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i79);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p81, $i80);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.0, $p82);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i84 := $ugt.i64($i83, 4294967294);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i85 := $zext.i1.i32($i84);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i85);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $i87 := ldv__builtin_expect($i86, 0);
    call {:si_unique_call 773} {:cexpr "tmp___7"} boogie_si_record_i64($i87);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, 0);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(224, 1)), $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i93 := $load.i16($M.0, $p92);
    call {:si_unique_call 776} {:cexpr "opcode"} boogie_si_record_i16($i93);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i93);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i94, 8707);
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i94, 8709);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i94, 8719);
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i94, 8739);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i94, 8739);
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i125 := $zext.i16.i32($i93);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} rbd_warn.ref.ref.ref.i32($0.ref, .str.63, $p124, $i125);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $i126 := obj_request_done_test($p5);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i127 := $zext.i1.i8($i126);
    call {:si_unique_call 785} {:cexpr "tmp___9"} boogie_si_record_i8($i127);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i8.i1($i127);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    return;

  $bb81:
    assume $i128 == 1;
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} rbd_obj_request_complete($p5);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb43:
    assume $i99 == 1;
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(224, 1)), $mul.ref(1, 136)), $mul.ref(0, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i115 := $load.i16($M.0, $p114);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i116 := $zext.i16.i32($i115);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 8705);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i118 := $zext.i1.i32($i117);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i118);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i120 := ldv__builtin_expect($i119, 0);
    call {:si_unique_call 778} {:cexpr "tmp___8"} boogie_si_record_i64($i120);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i121 := $ne.i64($i120, 0);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} rbd_osd_write_callback($p5);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb76:
    assume $i121 == 1;
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} vslice_dummy_var_154 := printk.ref.ref.i32.ref(.str.8, .str.54, 1855, .str.62);
    call {:si_unique_call 787} devirtbounce(0, .str.2, 1855, 12);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    call rbd_osd_req_callback_loop_$bb78();
    goto $bb78_last;

  $bb41:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i94, 8719);
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb46, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb45;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} rbd_osd_trivial_callback($p5);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb39:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i94, 8709);
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb45;

  $bb49:
    assume $i101 == 1;
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} rbd_osd_discard_callback($p5);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb37:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i94, 8708);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb54;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb52;

  $bb35:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i94, 4615);
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i94, 5121);
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i94, 8705);
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i94, 8705);
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb61, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb45;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i106 == 1;
    goto $bb62;

  $bb59:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i94, 5121);
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb45;

  $bb64:
    assume $i107 == 1;
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb57:
    assume $i104 == 1;
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i94, 4615);
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb66, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb45;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb67;

  $bb55:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i94, 4610);
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i94, 4610);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb45;

  $bb71:
    assume $i110 == 1;
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} rbd_osd_stat_callback($p5);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb69:
    assume $i109 == 1;
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i94, 4609);
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb45;

  $bb73:
    assume $i111 == 1;
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} rbd_osd_read_callback($p5);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb30:
    assume $i88 == 1;
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} vslice_dummy_var_153 := printk.ref.ref.i32.ref(.str.8, .str.54, 1847, .str.61);
    call {:si_unique_call 775} devirtbounce(0, .str.2, 1847, 12);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    call rbd_osd_req_callback_loop_$bb32();
    goto $bb32_last;

  $bb26:
    assume $i75 == 1;
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} vslice_dummy_var_152 := printk.ref.ref.i32.ref(.str.8, .str.54, 1839, .str.60);
    call {:si_unique_call 771} devirtbounce(0, .str.2, 1839, 12);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    call rbd_osd_req_callback_loop_$bb28();
    goto $bb28_last;

  $bb23:
    assume $i65 == 1;
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(688, 1));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i67);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i61 == 1;
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} vslice_dummy_var_151 := printk.ref.ref.i32.ref(.str.8, .str.54, 1833, .str.59);
    call {:si_unique_call 767} devirtbounce(0, .str.2, 1833, 12);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    call rbd_osd_req_callback_loop_$bb21();
    goto $bb21_last;

  $bb8:
    assume $i35 == 1;
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 757} {:cexpr "tmp___2"} boogie_si_record_i64($i44);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(64, 1));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, $sub.i32(0, 1));
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i32($i49);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $i52 := ldv__builtin_expect($i51, 0);
    call {:si_unique_call 763} {:cexpr "tmp___3"} boogie_si_record_i64($i52);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb14:
    assume $i53 == 1;
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} vslice_dummy_var_150 := printk.ref.ref.i32.ref(.str.8, .str.54, 1831, .str.45);
    call {:si_unique_call 765} devirtbounce(0, .str.2, 1831, 12);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    call rbd_osd_req_callback_loop_$bb16();
    goto $bb16_last;

  $bb10:
    assume $i45 == 1;
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} vslice_dummy_var_149 := printk.ref.ref.i32.ref(.str.8, .str.54, 1830, .str.58);
    call {:si_unique_call 761} devirtbounce(0, .str.2, 1830, 12);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    call rbd_osd_req_callback_loop_$bb12();
    goto $bb12_last;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} vslice_dummy_var_148 := printk.ref.ref.i32.ref(.str.8, .str.54, 1828, .str.57);
    call {:si_unique_call 753} devirtbounce(0, .str.2, 1828, 12);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call rbd_osd_req_callback_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $p22 := ceph_file_part(.str.2, 199);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.ref($p2, .str.56, 4, .str.5, $p22, 1827, .str.54, $p0, $p1);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb78_dummy:
    assume false;
    return;

  $bb78_last:
    assume {:verifier.code 0} true;
    goto $bb78_dummy;

  $bb32_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    goto $bb32_dummy;

  $bb28_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto $bb28_dummy;

  $bb21_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto $bb21_dummy;

  $bb16_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto $bb16_dummy;

  $bb12_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto $bb12_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const ceph_oid_set_name: ref;

axiom ceph_oid_set_name == $sub.ref(0, 611722);

procedure ceph_oid_set_name($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ceph_oid_set_name($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var vslice_dummy_var_155: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $i2 := strlen($p1);
    call {:si_unique_call 791} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    call {:si_unique_call 792} {:cexpr "len"} boogie_si_record_i32($i3);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i32($i3, 100);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i14 := $i3;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i14);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 797} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p16, $p1, $i17, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(100, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i14);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32(1, 0);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 794} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32(1, 0);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} vslice_dummy_var_155 := ldv__builtin_expect($i12, 0);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i14 := 100;
    goto $bb6;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} warn_slowpath_fmt.ref.i32.ref.ref.i32.i64(.str.105, 124, .str.106, $p1, $i3, 100);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 612754);

procedure strlen($p0: ref) returns ($r: i64);



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 613786);

procedure warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    return;
}



procedure warn_slowpath_fmt.ref.i32.ref.ref.i32.i64($p0: ref, $i1: i32, $p2: ref, p.3: ref, p.4: i32, p.5: i64);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref.ref.i32.i64($p0: ref, $i1: i32, $p2: ref, p.3: ref, p.4: i32, p.5: i64)
{

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    return;
}



const rbd_osd_read_callback: ref;

axiom rbd_osd_read_callback == $sub.ref(0, 614818);

procedure rbd_osd_read_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.14, $M.0, $CurrAddr, $M.18, $M.21, $M.20, $M.19;



implementation rbd_osd_read_callback($p0: ref)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i24;
  var $i30: i24;
  var $i31: i24;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $i57: i64;
  var $i58: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $i2 := obj_request_img_data_test($p0);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 802} {:cexpr "tmp___1"} boogie_si_record_i8($i3);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i20, $p21, $p22 := 0, $0.ref, $0.ref;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p23, .str);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p24, .str.64);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p25, .str.2);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p26, .str.65);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i29 := $load.i24($M.8, $p28);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i30 := $and.i24($i29, $sub.i24(0, 262144));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i31 := $or.i24($i30, 1774);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p28, $i31);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p32, 0);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.9, $p33);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i64($i34);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, 1);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 807} {:cexpr "tmp___3"} boogie_si_record_i64($i37);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i20);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p22);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i58 == 1);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} obj_request_done_set($p0);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i58 == 1;
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} rbd_img_obj_request_read_callback($p0);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i46 == 1;
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, $sub.i32(0, 2));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb15;

  $bb16:
    assume $i49 == 1;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p21, $mul.ref(0, 2192)), $mul.ref(304, 1));
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i56 := $ult.i64($i53, $i55);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb15;

  $bb18:
    assume $i56 == 1;
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} rbd_img_parent_read($p0);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume $i38 == 1;
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $p39 := ceph_file_part(.str.2, 199);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.ref.i32.i64.i64($p1, .str.66, 4, .str.5, $p39, 1774, .str.64, $p0, $p22, $i41, $i43, $i45);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 805} {:cexpr "layered"} boogie_si_record_i8($i17);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i20, $p21, $p22 := $i17, $p19, $p8;
    goto $bb9;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $i11 := img_request_layered_test($p8);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 804} {:cexpr "tmp"} boogie_si_record_i8($i12);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb8;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb7;
}



const rbd_osd_write_callback: ref;

axiom rbd_osd_write_callback == $sub.ref(0, 615850);

procedure rbd_osd_write_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation rbd_osd_write_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2, .str);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p3, .str.94);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, .str.2);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p5, .str.95);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.8, $p7);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 1787);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p7, $i10);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p11, 0);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.9, $p12);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 815} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i24);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} obj_request_done_set($p0);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $p18 := ceph_file_part(.str.2, 199);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.i32.i64($p1, .str.96, 4, .str.5, $p18, 1787, .str.94, $p0, $i20, $i22);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rbd_osd_stat_callback: ref;

axiom rbd_osd_stat_callback == $sub.ref(0, 616882);

procedure rbd_osd_stat_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation rbd_osd_stat_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2, .str);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p3, .str.97);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, .str.2);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p5, .str.98);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.8, $p7);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 1817);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p7, $i10);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p11, 0);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.9, $p12);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 821} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} obj_request_done_set($p0);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $p18 := ceph_file_part(.str.2, 199);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref($p1, .str.99, 4, .str.5, $p18, 1817, .str.97, $p0);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rbd_osd_discard_callback: ref;

axiom rbd_osd_discard_callback == $sub.ref(0, 617914);

procedure rbd_osd_discard_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation rbd_osd_discard_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2, .str);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p3, .str.100);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, .str.2);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p5, .str.95);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.8, $p7);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 1799);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p7, $i10);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p11, 0);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.9, $p12);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 827} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i24);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, $sub.i32(0, 2));
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} obj_request_done_set($p0);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 0);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $p18 := ceph_file_part(.str.2, 199);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.i32.i64($p1, .str.96, 4, .str.5, $p18, 1799, .str.100, $p0, $i20, $i22);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rbd_osd_trivial_callback: ref;

axiom rbd_osd_trivial_callback == $sub.ref(0, 618946);

procedure rbd_osd_trivial_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation rbd_osd_trivial_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2, .str);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p3, .str.101);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, .str.2);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p5, .str.98);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.8, $p7);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 1756);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p7, $i10);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p11, 0);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.9, $p12);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 833} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} obj_request_done_set($p0);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $p18 := ceph_file_part(.str.2, 199);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref($p1, .str.99, 4, .str.5, $p18, 1756, .str.101, $p0);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const obj_request_done_test: ref;

axiom obj_request_done_test == $sub.ref(0, 619978);

procedure obj_request_done_test($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation obj_request_done_test($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} devirtbounce.2(0);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 839} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const obj_request_done_set: ref;

axiom obj_request_done_set == $sub.ref(0, 621010);

procedure obj_request_done_set($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation obj_request_done_set($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $i2 := test_and_set_bit(0, $p1);
    call {:si_unique_call 841} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $i4 := obj_request_img_data_test($p0);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 843} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $p13 := $0.ref;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} rbd_warn.ref.ref.ref($p13, .str.93, $p0);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb5;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 622042);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 846} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 847} devirtbounce.9(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.17, $p2);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const rbd_img_parent_read: ref;

axiom rbd_img_parent_read == $sub.ref(0, 623074);

procedure rbd_img_parent_read($p0: ref);
  free requires assertsPassed;
  modifies $M.13, $M.14, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.21, $M.18, $M.20, $M.19;



implementation rbd_img_parent_read($p0: ref)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i8;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i56: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i47: i32;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $i1 := obj_request_img_data_test($p0);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 849} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 851} {:cexpr "tmp___1"} boogie_si_record_i64($i6);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 855} {:cexpr "tmp___2"} boogie_si_record_i64($i17);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, $sub.i32(0, 2));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 859} {:cexpr "tmp___3"} boogie_si_record_i64($i25);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(68, 1));
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $i30 := obj_request_type_valid($i29);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i8($i30);
    call {:si_unique_call 863} {:cexpr "tmp___4"} boogie_si_record_i8($i31);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 865} {:cexpr "tmp___6"} boogie_si_record_i64($i35);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $p44 := rbd_parent_request_create($p0, $i41, $i43);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(68, 1));
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 1);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i50 == 1);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $i62 := rbd_img_request_fill($p44, 2, $p61);
    call {:si_unique_call 872} {:cexpr "result"} boogie_si_record_i32($i62);
    assume {:verifier.code 0} true;
    $i56 := $i62;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i56, 0);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p44, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p64, rbd_img_parent_read_callback);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i65 := rbd_img_request_submit($p44);
    call {:si_unique_call 874} {:cexpr "result"} boogie_si_record_i32($i65);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb33:
    assume $i66 == 1;
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i47 := $i65;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p44);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i47);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p70, 0);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} obj_request_done_set($p0);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb37:
    assume $i68 == 1;
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} rbd_img_request_put($p44);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb30:
    assume $i63 == 1;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i47 := $i56;
    goto $bb25;

  $bb27:
    assume $i50 == 1;
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $i55 := rbd_img_request_fill($p44, 1, $p54);
    call {:si_unique_call 870} {:cexpr "result"} boogie_si_record_i32($i55);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i56 := $i55;
    goto $bb29;

  $bb23:
    assume $i46 == 1;
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 12);
    goto $bb25;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} vslice_dummy_var_159 := printk.ref.ref.i32.ref(.str.8, .str.67, 3046, .str.71);
    call {:si_unique_call 867} devirtbounce(0, .str.2, 3046, 12);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    call rbd_img_parent_read_loop_$bb21();
    goto $bb21_last;

  $bb16:
    assume $i32 == 1;
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb18;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} vslice_dummy_var_158 := printk.ref.ref.i32.ref(.str.8, .str.67, 3045, .str.70);
    call {:si_unique_call 861} devirtbounce(0, .str.2, 3045, 12);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    call rbd_img_parent_read_loop_$bb14();
    goto $bb14_last;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} vslice_dummy_var_157 := printk.ref.ref.i32.ref(.str.8, .str.67, 3044, .str.69);
    call {:si_unique_call 857} devirtbounce(0, .str.2, 3044, 12);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call rbd_img_parent_read_loop_$bb10();
    goto $bb10_last;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} vslice_dummy_var_156 := printk.ref.ref.i32.ref(.str.8, .str.67, 3043, .str.68);
    call {:si_unique_call 853} devirtbounce(0, .str.2, 3043, 12);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call rbd_img_parent_read_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb21_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto $bb21_dummy;

  $bb14_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb10_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const rbd_img_obj_request_read_callback: ref;

axiom rbd_img_obj_request_read_callback == $sub.ref(0, 624106);

procedure rbd_img_obj_request_read_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.18, $CurrAddr, $M.20, $M.19, $M.13, $M.14, $M.21;



implementation rbd_img_obj_request_read_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var vslice_dummy_var_160: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    call {:si_unique_call 878} {:cexpr "xferred"} boogie_si_record_i64($i3);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    call {:si_unique_call 879} {:cexpr "length"} boogie_si_record_i64($i5);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p6, .str);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p7, .str.84);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, .str.2);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p9, .str.65);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.8, $p11);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 1718);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p11, $i14);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p15, 0);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.9, $p16);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 881} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(68, 1));
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 885} {:cexpr "tmp___1"} boogie_si_record_i64($i34);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, $sub.i32(0, 2));
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i39 == 1);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i51 := $ult.i64($i3, $i5);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p66, $i5);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} obj_request_done_set($p0);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i51 == 1;
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb16;

  $bb17:
    assume $i54 == 1;
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(68, 1));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 1);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i57 == 1);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} zero_pages($p65, $i3, $i5);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i57 == 1;
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i64.i32($i3);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} zero_bio_chain($p60, $i61);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb8:
    assume $i39 == 1;
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(68, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i42 == 1);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} zero_pages($p49, 0, $i5);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 0);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i42 == 1;
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} zero_bio_chain($p45, 0);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i35 == 1;
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} vslice_dummy_var_160 := printk.ref.ref.i32.ref(.str.8, .str.84, 1727, .str.85);
    call {:si_unique_call 887} devirtbounce(0, .str.2, 1727, 12);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call rbd_img_obj_request_read_callback_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $p22 := ceph_file_part(.str.2, 199);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.ref.i32.i64.i64($p1, .str.66, 4, .str.5, $p22, 1718, .str.84, $p0, $p26, $i28, $i3, $i5);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const zero_bio_chain: ref;

axiom zero_bio_chain == $sub.ref(0, 625138);

procedure zero_bio_chain($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, $M.20, $CurrAddr;



implementation zero_bio_chain($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i17: i32;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i64;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i64;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i1;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i64;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i39: i32;
  var $i16: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p8: ref;
  var $i9: i32;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 897} {:cexpr "zero_bio_chain:arg:start_ofs"} boogie_si_record_i32($i1);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p8, $i9 := $p0, 0;
    goto $bb4;

  $bb4:
    call $p10, $p11, $p12, $p13, $i14, $i15, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $i26, $p27, $p28, $i29, $i30, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $i38, $i17, $p40, $i41, $p42, $p43, $p44, $i45, $i46, $p48, $i49, $p50, $i51, $i52, $p53, $p54, $p55, $i56, $i57, $p59, $p60, $p61, $i62, $i63, $p64, $p65, $p66, $p67, $i68, $i69, $p71, $i72, $p73, $i74, $i75, $p76, $p77, $p78, $i39, $i16, $p79, $p80, $i81, $i82, $p8, $i9, cmdloc_dummy_var_11, cmdloc_dummy_var_12, cmdloc_dummy_var_13, cmdloc_dummy_var_14, cmdloc_dummy_var_15, cmdloc_dummy_var_16, cmdloc_dummy_var_17, cmdloc_dummy_var_18 := zero_bio_chain_loop_$bb4($i1, $p2, $p3, $p4, $p5, $p10, $p11, $p12, $p13, $i14, $i15, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $i26, $p27, $p28, $i29, $i30, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $i38, $i17, $p40, $i41, $p42, $p43, $p44, $i45, $i46, $p48, $i49, $p50, $i51, $i52, $p53, $p54, $p55, $i56, $i57, $p59, $p60, $p61, $i62, $i63, $p64, $p65, $p66, $p67, $i68, $i69, $p71, $i72, $p73, $i74, $i75, $p76, $p77, $p78, $i39, $i16, $p79, $p80, $i81, $i82, $p8, $i9, cmdloc_dummy_var_11, cmdloc_dummy_var_12, cmdloc_dummy_var_13, cmdloc_dummy_var_14, cmdloc_dummy_var_15, cmdloc_dummy_var_16, cmdloc_dummy_var_17, cmdloc_dummy_var_18);
    goto $bb4_last;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 136)), $mul.ref(32, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p3);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p10);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 898} cmdloc_dummy_var_13 := $memcpy.i8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p11, $p12, 24, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i16 := $i9;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p8, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i82 == 1);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb23:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $p8, $i9 := $p80, $i16;
    goto $bb23_dummy;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i17 := $i9;
    goto $bb9;

  $bb9:
    call $p18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $i26, $p27, $p28, $i29, $i30, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $i38, $i17, $p40, $i41, $p42, $p43, $p44, $i45, $i46, $p48, $i49, $p50, $i51, $i52, $p53, $p54, $p55, $i56, $i57, $p59, $p60, $p61, $i62, $i63, $p64, $p65, $p66, $p67, $i68, $i69, $p71, $i72, $p73, $i74, $i75, $p76, $p77, $p78, $i39, cmdloc_dummy_var_14, cmdloc_dummy_var_15, cmdloc_dummy_var_16, cmdloc_dummy_var_17, cmdloc_dummy_var_18 := zero_bio_chain_loop_$bb9($i1, $p2, $p3, $p4, $p5, $p13, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $i26, $p27, $p28, $i29, $i30, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $i38, $i17, $p40, $i41, $p42, $p43, $p44, $i45, $i46, $p48, $i49, $p50, $i51, $i52, $p53, $p54, $p55, $i56, $i57, $p59, $p60, $p61, $i62, $i63, $p64, $p65, $p66, $p67, $i68, $i69, $p71, $i72, $p73, $i74, $i75, $p76, $p77, $p78, $i39, $p8, cmdloc_dummy_var_14, cmdloc_dummy_var_15, cmdloc_dummy_var_16, cmdloc_dummy_var_17, cmdloc_dummy_var_18);
    goto $bb9_last;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    call {:si_unique_call 899} {:cexpr "_min1"} boogie_si_record_i32($i41);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p8, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i46 := $zext.i32.i64($i45);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p43, $mul.ref($i46, 16)), $mul.ref(8, 1));
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i49, $i51);
    call {:si_unique_call 900} {:cexpr "_min2"} boogie_si_record_i32($i52);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p8, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i57 := $zext.i32.i64($i56);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p54, $mul.ref($i57, 16)), $mul.ref(0, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, $p61, $p60);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i62 := $ult.i32($i41, $i52);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i62 == 1);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i63 := $i52;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p64, $i63);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p8, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i69 := $zext.i32.i64($i68);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p66, $mul.ref($i69, 16)), $mul.ref(12, 1));
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i72, $i74);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p76, $i75);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p2);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p5);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.18;
    cmdloc_dummy_var_17 := $M.18;
    call {:si_unique_call 907} cmdloc_dummy_var_18 := $memcpy.i8(cmdloc_dummy_var_16, cmdloc_dummy_var_17, $p77, $p78, 16, $zext.i32.i64(8), 0 == 1);
    $M.18 := cmdloc_dummy_var_18;
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.18, $p18);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, $i17);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i32($i20, $i1);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.18, $p32);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, $i17);
    call {:si_unique_call 905} {:cexpr "pos"} boogie_si_record_i32($i34);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.18, $p35);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} bio_advance_iter($p8, $p3, $i36);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p13);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i39 := $i34;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i16 := $i39;
    goto $bb8;

  $bb17:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i17 := $i34;
    goto $bb17_dummy;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i1, $i17);
    call {:si_unique_call 901} {:cexpr "_max1"} boogie_si_record_i32($i22);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i23 := $sgt.i32($i22, 0);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $p25 := bvec_kmap_irq($p2, $p4);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i24);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p25, $mul.ref($i26, 1));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.18, $p28);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i29, $i24);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i30);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 903} cmdloc_dummy_var_15 := $memset.i8(cmdloc_dummy_var_14, $p27, 0, $i31, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} bvec_kunmap_irq($p25, $p4);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i23 == 1;
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb15;

  $bb19:
    assume $i62 == 1;
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i63 := $i41;
    goto $bb21;

  $bb17_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4118;

  $bb23_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4106;
}



const zero_pages: ref;

axiom zero_pages == $sub.ref(0, 626170);

procedure zero_pages($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.19, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21;



implementation zero_pages($p0: ref, $i1: i64, $i2: i64)
{
  var $i3: i64;
  var $p4: ref;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i11: i64;
  var $i12: i1;
  var $i14: i1;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i64;
  var $p29: ref;
  var $i30: i1;
  var $p15: ref;
  var $i16: i64;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} {:cexpr "zero_pages:arg:offset"} boogie_si_record_i64($i1);
    call {:si_unique_call 909} {:cexpr "zero_pages:arg:end"} boogie_si_record_i64($i2);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i64($i1, 12);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p0, $mul.ref($i3, 8));
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i5 := $ule.i64($i2, $i1);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 911} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $i11 := ldv__builtin_expect(0, 0);
    call {:si_unique_call 915} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i14 := $ult.i64($i1, $i2);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $p15, $i16 := $p4, $i1;
    goto $bb12;

  $bb12:
    call $i17, $i18, $i19, $i20, $i21, $i22, $p23, $p24, $p25, $i26, $i27, $i28, $p29, $i30, $p15, $i16, cmdloc_dummy_var_19, cmdloc_dummy_var_20 := zero_pages_loop_$bb12($i2, $i17, $i18, $i19, $i20, $i21, $i22, $p23, $p24, $p25, $i26, $i27, $i28, $p29, $i30, $p15, $i16, cmdloc_dummy_var_19, cmdloc_dummy_var_20);
    goto $bb12_last;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 4095);
    call {:si_unique_call 918} {:cexpr "page_offset___0"} boogie_si_record_i64($i17);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(4096, $i17);
    call {:si_unique_call 919} {:cexpr "__min1"} boogie_si_record_i64($i18);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i19 := $sub.i64($i2, $i16);
    call {:si_unique_call 920} {:cexpr "__min2"} boogie_si_record_i64($i19);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i20 := $ult.i64($i18, $i19);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $i22 := arch_local_irq_save();
    call {:si_unique_call 922} {:cexpr "flags"} boogie_si_record_i64($i22);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} trace_hardirqs_off();
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p15);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $p24 := kmap_atomic($p23);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref($i17, 1));
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 925} cmdloc_dummy_var_20 := $memset.i8(cmdloc_dummy_var_19, $p25, 0, $i21, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} __kunmap_atomic($p24);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $i26 := arch_irqs_disabled_flags($i22);
    call {:si_unique_call 928} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i27 == 1);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} trace_hardirqs_on();
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} arch_local_irq_restore($i22);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i16, $i21);
    call {:si_unique_call 933} {:cexpr "offset"} boogie_si_record_i64($i28);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p15, $mul.ref(1, 8));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i30 := $ult.i64($i28, $i2);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i30 == 1);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb20:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $p15, $i16 := $p29, $i28;
    goto $bb20_dummy;

  $bb17:
    assume $i27 == 1;
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} arch_local_irq_restore($i22);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} trace_hardirqs_off();
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i21 := $i18;
    goto $bb16;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} vslice_dummy_var_162 := printk.ref.ref.i32.ref(.str.8, .str.88, 1285, .str.90);
    call {:si_unique_call 917} devirtbounce(0, .str.2, 1285, 12);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call zero_pages_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} vslice_dummy_var_161 := printk.ref.ref.i32.ref(.str.8, .str.88, 1284, .str.89);
    call {:si_unique_call 913} devirtbounce(0, .str.2, 1284, 12);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call zero_pages_loop_$bb3();
    goto $bb3_last;

  $bb20_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4232;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_local_irq_save: ref;

axiom arch_local_irq_save == $sub.ref(0, 627202);

procedure arch_local_irq_save() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_irq_save() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $i0 := arch_local_save_flags();
    call {:si_unique_call 935} {:cexpr "f"} boogie_si_record_i64($i0);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} arch_local_irq_disable();
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const trace_hardirqs_off: ref;

axiom trace_hardirqs_off == $sub.ref(0, 628234);

procedure trace_hardirqs_off();
  free requires assertsPassed;



implementation trace_hardirqs_off()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    return;
}



const kmap_atomic: ref;

axiom kmap_atomic == $sub.ref(0, 629266);

procedure kmap_atomic($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.19, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21;



implementation kmap_atomic($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} __preempt_count_add(1);
    call {:si_unique_call 938} devirtbounce.2(0);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} pagefault_disable();
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $p1 := lowmem_page_address($p0);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const __kunmap_atomic: ref;

axiom __kunmap_atomic == $sub.ref(0, 630298);

procedure __kunmap_atomic($p0: ref);
  free requires assertsPassed;
  modifies $M.19, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21;



implementation __kunmap_atomic($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} pagefault_enable();
    call {:si_unique_call 942} devirtbounce.2(0);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} __preempt_count_sub(1);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    return;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 631330);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const arch_local_irq_restore: ref;

axiom arch_local_irq_restore == $sub.ref(0, 632362);

procedure arch_local_irq_restore($i0: i64);
  free requires assertsPassed;



implementation arch_local_irq_restore($i0: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} {:cexpr "arch_local_irq_restore:arg:f"} boogie_si_record_i64($i0);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 947} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 949} $i8 := devirtbounce.10(0, 44, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), 1, $i0);
    call {:si_unique_call 950} {:cexpr "__eax"} boogie_si_record_i64($i8);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 948} devirtbounce(0, .str.91, 836, 12);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_irq_restore_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const trace_hardirqs_on: ref;

axiom trace_hardirqs_on == $sub.ref(0, 633394);

procedure trace_hardirqs_on();
  free requires assertsPassed;



implementation trace_hardirqs_on()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    return;
}



const pagefault_enable: ref;

axiom pagefault_enable == $sub.ref(0, 634426);

procedure pagefault_enable();
  free requires assertsPassed;
  modifies $M.19;



implementation pagefault_enable()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} devirtbounce.2(0);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} pagefault_disabled_dec();
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_sub: ref;

axiom __preempt_count_sub == $sub.ref(0, 635458);

procedure __preempt_count_sub($i0: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation __preempt_count_sub($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} {:cexpr "__preempt_count_sub:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, $i0);
    call {:si_unique_call 956} devirtbounce.11(0, __preempt_count, $i3, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 955} devirtbounce.3(0, __preempt_count, __preempt_count);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 954} devirtbounce.3(0, __preempt_count, __preempt_count);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pagefault_disabled_dec: ref;

axiom pagefault_disabled_dec == $sub.ref(0, 636490);

procedure pagefault_disabled_dec();
  free requires assertsPassed;
  modifies $M.19;



implementation pagefault_disabled_dec()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var vslice_dummy_var_163: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $p0 := get_current();
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11712)), $mul.ref(11704, 1));
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.19, $p1);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11712)), $mul.ref(11704, 1));
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p4, $i3);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} $p5 := get_current();
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 11712)), $mul.ref(11704, 1));
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.19, $p6);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 959} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 961} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} vslice_dummy_var_163 := ldv__builtin_expect($i17, 0);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} warn_slowpath_null(.str.92, 15);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 637522);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $p0 := devirtbounce.12(0, current_task);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __preempt_count_add: ref;

axiom __preempt_count_add == $sub.ref(0, 638554);

procedure __preempt_count_add($i0: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation __preempt_count_add($i0: i32)
{
  var $i1: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} {:cexpr "__preempt_count_add:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    call {:si_unique_call 968} devirtbounce.11(0, __preempt_count, $i0, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 967} devirtbounce.3(0, __preempt_count, __preempt_count);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 966} devirtbounce.3(0, __preempt_count, __preempt_count);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pagefault_disable: ref;

axiom pagefault_disable == $sub.ref(0, 639586);

procedure pagefault_disable();
  free requires assertsPassed;
  modifies $M.19;



implementation pagefault_disable()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} pagefault_disabled_inc();
    call {:si_unique_call 970} devirtbounce.2(0);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    return;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 640618);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const pagefault_disabled_inc: ref;

axiom pagefault_disabled_inc == $sub.ref(0, 641650);

procedure pagefault_disabled_inc();
  free requires assertsPassed;
  modifies $M.19;



implementation pagefault_disabled_inc()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} $p0 := get_current();
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11712)), $mul.ref(11704, 1));
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.19, $p1);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 1);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11712)), $mul.ref(11704, 1));
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p4, $i3);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    return;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 642682);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, pv_irq_ops);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 973} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 975} $i7 := devirtbounce.13(0, 43, pv_irq_ops, 1);
    call {:si_unique_call 976} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 974} devirtbounce(0, .str.91, 831, 12);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_save_flags_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_local_irq_disable: ref;

axiom arch_local_irq_disable == $sub.ref(0, 643714);

procedure arch_local_irq_disable();
  free requires assertsPassed;



implementation arch_local_irq_disable()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1)));
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 978} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 980} $i7 := devirtbounce.13(0, 45, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1)), 1);
    call {:si_unique_call 981} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 979} devirtbounce(0, .str.91, 841, 12);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_irq_disable_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const bvec_kmap_irq: ref;

axiom bvec_kmap_irq == $sub.ref(0, 644746);

procedure bvec_kmap_irq($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation bvec_kmap_irq($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.18, $p2);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $p4 := lowmem_page_address($p3);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.18, $p5);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p4, $mul.ref($i7, 1));
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;
}



const bvec_kunmap_irq: ref;

axiom bvec_kunmap_irq == $sub.ref(0, 645778);

procedure bvec_kunmap_irq($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.20;



implementation bvec_kunmap_irq($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p1, 0);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    return;
}



const bio_advance_iter: ref;

axiom bio_advance_iter == $sub.ref(0, 646810);

procedure bio_advance_iter($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation bio_advance_iter($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} {:cexpr "bio_advance_iter:arg:bytes"} boogie_si_record_i32($i2);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i2, 9);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i4, $i6);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, $i7);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i11 := $and.i64($i10, 640);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} bvec_iter_advance($p18, $p1, $i2);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i14, $i2);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bvec_iter_advance: ref;

axiom bvec_iter_advance == $sub.ref(0, 647842);

procedure bvec_iter_advance($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation bvec_iter_advance($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i27: i64;
  var $i29: i1;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $i58: i32;
  var $i59: i64;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i1;
  var $i30: i32;
  var vslice_dummy_var_164: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} {:cexpr "bvec_iter_advance:arg:bytes"} boogie_si_record_i32($i2);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i5 := $ult.i32($i4, $i2);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 986} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i6);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 988} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i6, 0);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} vslice_dummy_var_164 := ldv__builtin_expect($i27, 0);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i2, 0);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i30 := $i2;
    goto $bb13;

  $bb13:
    call $p31, $i32, $p33, $i34, $i35, $p37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $i48, $i49, $p50, $p51, $i52, $i53, $p54, $p55, $i56, $p57, $i58, $i59, $p61, $i62, $i63, $p64, $p65, $i66, $i67, $p68, $i69, $i30 := bvec_iter_advance_loop_$bb13($p0, $p1, $p31, $i32, $p33, $i34, $i35, $p37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $i48, $i49, $p50, $p51, $i52, $i53, $p54, $p55, $i56, $p57, $i58, $i59, $p61, $i62, $i63, $p64, $p65, $i66, $i67, $p68, $i69, $i30);
    goto $bb13_last;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    call {:si_unique_call 996} {:cexpr "_min1___0"} boogie_si_record_i32($i32);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i34);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref($i35, 16)), $mul.ref(8, 1));
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i38, $i40);
    call {:si_unique_call 997} {:cexpr "_min2___0"} boogie_si_record_i32($i41);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i42 := $ult.i32($i32, $i41);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i42 == 1);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i43 := $i41;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i44 := $ult.i32($i30, $i43);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i44 == 1);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i45 := $i43;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32($i30, $i45);
    call {:si_unique_call 998} {:cexpr "bytes"} boogie_si_record_i32($i46);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32($i48, $i45);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, $i49);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i52, $i45);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64($i58);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref($i59, 16)), $mul.ref(8, 1));
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i56, $i62);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i46, 0);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i69 == 1);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb24:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i30 := $i46;
    goto $bb24_dummy;

  $bb21:
    assume $i63 == 1;
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, 0);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i66, 1);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i67);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i44 == 1;
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i45 := $i30;
    goto $bb20;

  $bb15:
    assume $i42 == 1;
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i43 := $i32;
    goto $bb17;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1(1);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i13 := $xor.i1($i12, 1);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    call {:si_unique_call 989} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i14);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 991} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i14, 0);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 994} {:cexpr "tmp___0"} boogie_si_record_i64($i23);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i24 == 1;
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} warn_slowpath_fmt.ref.i32.ref(.str.86, 211, .str.87);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb24_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4476;
}



const rbd_parent_request_create: ref;

axiom rbd_parent_request_create == $sub.ref(0, 648874);

procedure rbd_parent_request_create($p0: ref, $i1: i64, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_parent_request_create($p0: ref, $i1: i64, $i2: i64) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p25: ref;
  var vslice_dummy_var_165: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} {:cexpr "rbd_parent_request_create:arg:img_offset"} boogie_si_record_i64($i1);
    call {:si_unique_call 1000} {:cexpr "rbd_parent_request_create:arg:length"} boogie_si_record_i64($i2);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 1002} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 2192)), $mul.ref(320, 1));
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} $p22 := rbd_img_request_create($p21, $i1, $i2, 1, $0.ref);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} img_request_child_set($p22);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} rbd_obj_request_get($p0);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p22, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p0);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $p25 := $p22;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $r := $p25;
    return;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $p25 := $0.ref;
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} vslice_dummy_var_165 := printk.ref.ref.i32.ref(.str.8, .str.72, 2227, .str.58);
    call {:si_unique_call 1004} devirtbounce(0, .str.2, 2227, 12);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call rbd_parent_request_create_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const rbd_img_parent_read_callback: ref;

axiom rbd_img_parent_read_callback == $sub.ref(0, 649906);

procedure rbd_img_parent_read_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.18, $CurrAddr, $M.20, $M.13, $M.14, $M.21, $M.19;



implementation rbd_img_parent_read_callback($p0: ref)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $i63: i32;
  var $i64: i64;
  var $i65: i64;
  var $i66: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $i73: i64;
  var $i74: i64;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $i86: i64;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i64;
  var $i92: i64;
  var $i93: i1;
  var $i94: i64;
  var $p95: ref;
  var $p96: ref;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} $i1 := img_request_child_test($p0);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1009} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 1011} {:cexpr "tmp___1"} boogie_si_record_i64($i6);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(152, 1));
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    call {:si_unique_call 1014} {:cexpr "img_xferred"} boogie_si_record_i64($i13);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    call {:si_unique_call 1015} {:cexpr "img_result"} boogie_si_record_i32($i15);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} rbd_img_request_put($p0);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p11);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 1018} {:cexpr "tmp___2"} boogie_si_record_i64($i20);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p11, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 1022} {:cexpr "tmp___3"} boogie_si_record_i64($i31);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p11, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 2192)), $mul.ref(304, 1));
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i50 := $i15;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p11, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i50);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p11, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p11, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.0, $p57);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p11, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.0, $p59);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i61 := $xor.i64($i60, $sub.i64(0, 1));
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i62 := $uge.i64($i58, $i61);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i63 := $zext.i1.i32($i62);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i63);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $i65 := ldv__builtin_expect($i64, 0);
    call {:si_unique_call 1030} {:cexpr "tmp___4"} boogie_si_record_i64($i65);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p11, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.0, $p70);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p11, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i73 := $load.i64($M.0, $p72);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i71, $i73);
    call {:si_unique_call 1033} {:cexpr "obj_end"} boogie_si_record_i64($i74);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p39, $mul.ref(0, 2192)), $mul.ref(304, 1));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.0, $p75);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $i77 := $ult.i64($i76, $i74);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i77 == 1);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p11, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p96, $i13);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} rbd_img_obj_request_read_callback($p11);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} rbd_obj_request_complete($p11);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume $i77 == 1;
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p11, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.0, $p80);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p39, $mul.ref(0, 2192)), $mul.ref(304, 1));
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.0, $p82);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i84 := $ult.i64($i81, $i83);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i92 := 0;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i93 := $ult.i64($i13, $i92);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i93 == 1);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i94 := $i92;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p11, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p95, $i94);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i93 == 1;
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i94 := $i13;
    goto $bb38;

  $bb33:
    assume $i84 == 1;
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p39, $mul.ref(0, 2192)), $mul.ref(304, 1));
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i86 := $load.i64($M.0, $p85);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p11, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.0, $p89);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i91 := $sub.i64($i86, $i90);
    call {:si_unique_call 1034} {:cexpr "xferred"} boogie_si_record_i64($i91);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i92 := $i91;
    goto $bb35;

  $bb27:
    assume $i66 == 1;
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} vslice_dummy_var_169 := printk.ref.ref.i32.ref(.str.8, .str.77, 3020, .str.80);
    call {:si_unique_call 1032} devirtbounce(0, .str.2, 3020, 12);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    call rbd_img_parent_read_callback_loop_$bb29();
    goto $bb29_last;

  $bb23:
    assume $i54 == 1;
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p39, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 3808)), $mul.ref(2608, 1));
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} $i48 := rbd_obj_request_submit($p47, $p11);
    call {:si_unique_call 1026} {:cexpr "img_result"} boogie_si_record_i32($i48);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i50 := $i48;
    goto $bb22;

  $bb18:
    assume $i49 == 1;
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} vslice_dummy_var_168 := printk.ref.ref.i32.ref(.str.8, .str.77, 2998, .str.58);
    call {:si_unique_call 1024} devirtbounce(0, .str.2, 2998, 12);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    call rbd_img_parent_read_callback_loop_$bb14();
    goto $bb14_last;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} vslice_dummy_var_167 := printk.ref.ref.i32.ref(.str.8, .str.77, 2997, .str.79);
    call {:si_unique_call 1020} devirtbounce(0, .str.2, 2997, 12);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call rbd_img_parent_read_callback_loop_$bb10();
    goto $bb10_last;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} vslice_dummy_var_166 := printk.ref.ref.i32.ref(.str.8, .str.77, 2983, .str.78);
    call {:si_unique_call 1013} devirtbounce(0, .str.2, 2983, 12);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call rbd_img_parent_read_callback_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb29_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto $bb29_dummy;

  $bb14_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb10_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const img_request_child_set: ref;

axiom img_request_child_set == $sub.ref(0, 650938);

procedure img_request_child_set($p0: ref);
  free requires assertsPassed;



implementation img_request_child_set($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(24, 1));
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} set_bit(1, $p1);
    call {:si_unique_call 1036} devirtbounce.2(0);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    return;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 651970);

procedure kref_get($p0: ref);
  free requires assertsPassed;



implementation kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var vslice_dummy_var_170: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $i2 := atomic_add_return(1, $p1);
    call {:si_unique_call 1038} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 1039} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 1041} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} vslice_dummy_var_170 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 1042} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1044} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 1047} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} warn_slowpath_null(.str.76, 47);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 653002);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1050} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kmem_cache_zalloc: ref;

axiom kmem_cache_zalloc == $sub.ref(0, 654034);

procedure kmem_cache_zalloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kmem_cache_zalloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} {:cexpr "kmem_cache_zalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $p3 := kmem_cache_alloc($p0, $i2);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const init_completion: ref;

axiom init_completion == $sub.ref(0, 655066);

procedure init_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} __init_waitqueue_head($p3, .str.41, $p1);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    return;
}



const kref_init: ref;

axiom kref_init == $sub.ref(0, 656098);

procedure kref_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation kref_init($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} atomic_set($p1, 1);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 657130);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 658162);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    return;
}



const kmem_cache_alloc: ref;

axiom kmem_cache_alloc == $sub.ref(0, 659194);

procedure kmem_cache_alloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kmem_cache_alloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} {:cexpr "kmem_cache_alloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $p2 := external_alloc();
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 660226);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1061} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $p2 := ldv_malloc($i0);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 661258);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 662290);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rbd_img_obj_parent_read_full_callback: ref;

axiom rbd_img_obj_parent_read_full_callback == $sub.ref(0, 663322);

procedure rbd_img_obj_parent_read_full_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.13, $M.14, $M.18, $M.21, $M.20, $M.19;



implementation rbd_img_obj_parent_read_full_callback($p0: ref)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i8;
  var $i42: i1;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $i55: i32;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $i66: i32;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $i79: i32;
  var $i80: i64;
  var $i81: i64;
  var $i82: i1;
  var $p84: ref;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i1;
  var $p97: ref;
  var $i98: i64;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $i96: i32;
  var $p118: ref;
  var $p119: ref;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} $i1 := img_request_child_test($p0);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1064} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 1066} {:cexpr "tmp___1"} boogie_si_record_i64($i6);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(48, 1));
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 1070} {:cexpr "tmp___2"} boogie_si_record_i64($i15);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(48, 1));
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $0.ref);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(56, 1));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    call {:si_unique_call 1073} {:cexpr "page_count___0"} boogie_si_record_i32($i20);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1075} {:cexpr "tmp___3"} boogie_si_record_i64($i24);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(56, 1));
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 0);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 1079} {:cexpr "tmp___4"} boogie_si_record_i64($i35);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p30, $mul.ref(0, 240)), $mul.ref(68, 1));
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} $i40 := obj_request_type_valid($i39);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i8($i40);
    call {:si_unique_call 1083} {:cexpr "tmp___5"} boogie_si_record_i8($i41);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i41);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 1085} {:cexpr "tmp___7"} boogie_si_record_i64($i45);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    call {:si_unique_call 1088} {:cexpr "img_result"} boogie_si_record_i32($i49);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(16, 1));
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    call {:si_unique_call 1089} {:cexpr "parent_length"} boogie_si_record_i64($i51);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(152, 1));
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, $i51);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i32($i54);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i55);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $i57 := ldv__builtin_expect($i56, 0);
    call {:si_unique_call 1091} {:cexpr "tmp___8"} boogie_si_record_i64($i57);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} rbd_img_request_put($p0);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p30, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i65 := $eq.i64($i64, 0);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i66 := $zext.i1.i32($i65);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i66);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $i68 := ldv__builtin_expect($i67, 0);
    call {:si_unique_call 1096} {:cexpr "tmp___9"} boogie_si_record_i64($i68);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p30, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i77, 0);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i79 := $zext.i1.i32($i78);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i79);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} $i81 := ldv__builtin_expect($i80, 0);
    call {:si_unique_call 1100} {:cexpr "tmp___10"} boogie_si_record_i64($i81);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p76, $mul.ref(0, 2192)), $mul.ref(304, 1));
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.0, $p84);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i86 := $eq.i64($i85, 0);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i94 := $i49;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $p97 := rbd_osd_req_create_copyup($p30);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i99 := $eq.i64($i98, 0);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p30, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} rbd_osd_req_destroy($p101);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p30, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p102, $p97);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p30, $mul.ref(0, 240)), $mul.ref(88, 1));
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p103, $p10);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p30, $mul.ref(0, 240)), $mul.ref(96, 1));
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p104, $i20);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} osd_req_op_cls_init($p97, 0, 5121, .str, .str.151);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} osd_req_op_cls_request_data_pages($p97, 0, $p10, $i51, 0, 0, 0);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p30, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} $i109 := rbd_img_request_op_type($p108);
    call {:si_unique_call 1113} {:cexpr "op_type"} boogie_si_record_i32($i109);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} rbd_img_obj_request_fill($p30, $p97, $i109, 1);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p30, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p110, rbd_img_obj_copyup_callback);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p76, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 3808)), $mul.ref(2608, 1));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} $i116 := rbd_obj_request_submit($p115, $p30);
    call {:si_unique_call 1116} {:cexpr "img_result"} boogie_si_record_i32($i116);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 0);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i96 := $i116;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p30, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p118, $i96);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p30, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p119, 0);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} obj_request_done_set($p30);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} rbd_obj_request_complete($p30);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    return;

  $bb53:
    assume $i117 == 1;
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb50:
    assume $i99 == 1;
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i96 := $sub.i32(0, 12);
    goto $bb48;

  $bb46:
    assume $i95 == 1;
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i96 := $i94;
    goto $bb48;

  $bb39:
    assume $i86 == 1;
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} ceph_release_page_vector($p10, $i20);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p76, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p90, $mul.ref(0, 3808)), $mul.ref(2608, 1));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $i92 := rbd_obj_request_submit($p91, $p30);
    call {:si_unique_call 1105} {:cexpr "img_result"} boogie_si_record_i32($i92);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 0);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i94 := $i92;
    goto $bb45;

  $bb41:
    assume $i93 == 1;
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb35:
    assume $i82 == 1;
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} vslice_dummy_var_178 := printk.ref.ref.i32.ref(.str.8, .str.143, 2605, .str.150);
    call {:si_unique_call 1102} devirtbounce(0, .str.2, 2605, 12);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    call rbd_img_obj_parent_read_full_callback_loop_$bb37();
    goto $bb37_last;

  $bb31:
    assume $i69 == 1;
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} vslice_dummy_var_177 := printk.ref.ref.i32.ref(.str.8, .str.143, 2603, .str.149);
    call {:si_unique_call 1098} devirtbounce(0, .str.2, 2603, 12);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    call rbd_img_obj_parent_read_full_callback_loop_$bb33();
    goto $bb33_last;

  $bb27:
    assume $i58 == 1;
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} vslice_dummy_var_176 := printk.ref.ref.i32.ref(.str.8, .str.143, 2600, .str.148);
    call {:si_unique_call 1093} devirtbounce(0, .str.2, 2600, 12);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    call rbd_img_obj_parent_read_full_callback_loop_$bb29();
    goto $bb29_last;

  $bb23:
    assume $i46 == 1;
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} vslice_dummy_var_175 := printk.ref.ref.i32.ref(.str.8, .str.143, 2597, .str.147);
    call {:si_unique_call 1087} devirtbounce(0, .str.2, 2597, 12);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    call rbd_img_obj_parent_read_full_callback_loop_$bb25();
    goto $bb25_last;

  $bb20:
    assume $i42 == 1;
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb22;

  $bb16:
    assume $i36 == 1;
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} vslice_dummy_var_174 := printk.ref.ref.i32.ref(.str.8, .str.143, 2596, .str.146);
    call {:si_unique_call 1081} devirtbounce(0, .str.2, 2596, 12);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call rbd_img_obj_parent_read_full_callback_loop_$bb18();
    goto $bb18_last;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} vslice_dummy_var_173 := printk.ref.ref.i32.ref(.str.8, .str.143, 2592, .str.145);
    call {:si_unique_call 1077} devirtbounce(0, .str.2, 2592, 12);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    call rbd_img_obj_parent_read_full_callback_loop_$bb14();
    goto $bb14_last;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} vslice_dummy_var_172 := printk.ref.ref.i32.ref(.str.8, .str.143, 2589, .str.144);
    call {:si_unique_call 1072} devirtbounce(0, .str.2, 2589, 12);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call rbd_img_obj_parent_read_full_callback_loop_$bb10();
    goto $bb10_last;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} vslice_dummy_var_171 := printk.ref.ref.i32.ref(.str.8, .str.143, 2584, .str.78);
    call {:si_unique_call 1068} devirtbounce(0, .str.2, 2584, 12);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call rbd_img_obj_parent_read_full_callback_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb37_dummy:
    assume false;
    return;

  $bb37_last:
    assume {:verifier.code 0} true;
    goto $bb37_dummy;

  $bb33_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    goto $bb33_dummy;

  $bb29_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto $bb29_dummy;

  $bb25_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto $bb25_dummy;

  $bb18_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto $bb18_dummy;

  $bb14_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb10_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const rbd_osd_req_create_copyup: ref;

axiom rbd_osd_req_create_copyup == $sub.ref(0, 664354);

procedure rbd_osd_req_create_copyup($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rbd_osd_req_create_copyup($p0: ref) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i20: i1;
  var $i21: i8;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i8;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p53: ref;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} $i1 := obj_request_img_data_test($p0);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1118} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 1120} {:cexpr "tmp___1"} boogie_si_record_i64($i6);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1124} {:cexpr "tmp___2"} boogie_si_record_i64($i17);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} $i20 := img_request_write_test($p12);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i8($i20);
    call {:si_unique_call 1128} {:cexpr "tmp___3"} boogie_si_record_i8($i21);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i21);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 1132} {:cexpr "tmp___8"} boogie_si_record_i64($i33);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $i36 := img_request_discard_test($p12);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 1136} {:cexpr "tmp___9"} boogie_si_record_i8($i37);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := 3;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(32, 1));
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 3808)), $mul.ref(2608, 1));
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $p50 := ceph_osdc_alloc_request($p49, $p42, $i39, 0, 32);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p50, $mul.ref(0, 1248)), $mul.ref(208, 1));
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 36);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p50, $mul.ref(0, 1248)), $mul.ref(936, 1));
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, rbd_osd_req_callback);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p50, $mul.ref(0, 1248)), $mul.ref(992, 1));
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, $p0);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p44, $mul.ref(0, 2192)), $mul.ref(248, 1)), $mul.ref(24, 1));
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i60);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p50, $mul.ref(0, 1248)), $mul.ref(1000, 1)), $mul.ref(0, 1));
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p63, $i61);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p50, $mul.ref(0, 1248)), $mul.ref(1008, 1));
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} ceph_oid_set_name($p64, $p66);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p53 := $p50;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $r := $p53;
    return;

  $bb31:
    assume $i52 == 1;
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $p53 := $0.ref;
    goto $bb33;

  $bb28:
    assume $i38 == 1;
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i39 := 2;
    goto $bb30;

  $bb24:
    assume $i34 == 1;
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} vslice_dummy_var_181 := printk.ref.ref.i32.ref(.str.8, .str.152, 1981, .str.153);
    call {:si_unique_call 1134} devirtbounce(0, .str.2, 1981, 12);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    call rbd_osd_req_create_copyup_loop_$bb26();
    goto $bb26_last;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $i25 := img_request_discard_test($p12);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i8($i25);
    call {:si_unique_call 1130} {:cexpr "tmp___5"} boogie_si_record_i8($i26);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i26);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb23;

  $bb20:
    assume $i29 == 1;
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i30 := 1;
    goto $bb22;

  $bb17:
    assume $i27 == 1;
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb19;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb14;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} vslice_dummy_var_180 := printk.ref.ref.i32.ref(.str.8, .str.152, 1979, .str.139);
    call {:si_unique_call 1126} devirtbounce(0, .str.2, 1979, 12);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call rbd_osd_req_create_copyup_loop_$bb10();
    goto $bb10_last;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} vslice_dummy_var_179 := printk.ref.ref.i32.ref(.str.8, .str.152, 1977, .str.68);
    call {:si_unique_call 1122} devirtbounce(0, .str.2, 1977, 12);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call rbd_osd_req_create_copyup_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb26_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    goto $bb26_dummy;

  $bb10_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const osd_req_op_cls_init: ref;

axiom osd_req_op_cls_init == $sub.ref(0, 665386);

procedure osd_req_op_cls_init($p0: ref, $i1: i32, $i2: i16, $p3: ref, $p4: ref);
  free requires assertsPassed;



implementation osd_req_op_cls_init($p0: ref, $i1: i32, $i2: i16, $p3: ref, $p4: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} {:cexpr "osd_req_op_cls_init:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1140} {:cexpr "osd_req_op_cls_init:arg:arg2"} boogie_si_record_i16($i2);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    return;
}



const osd_req_op_cls_request_data_pages: ref;

axiom osd_req_op_cls_request_data_pages == $sub.ref(0, 666418);

procedure osd_req_op_cls_request_data_pages($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i32, $i5: i1, $i6: i1);
  free requires assertsPassed;



implementation osd_req_op_cls_request_data_pages($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i32, $i5: i1, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} {:cexpr "osd_req_op_cls_request_data_pages:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1142} {:cexpr "osd_req_op_cls_request_data_pages:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 1143} {:cexpr "osd_req_op_cls_request_data_pages:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1144} {:cexpr "osd_req_op_cls_request_data_pages:arg:arg5"} boogie_si_record_i1($i5);
    call {:si_unique_call 1145} {:cexpr "osd_req_op_cls_request_data_pages:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    return;
}



const rbd_img_request_op_type: ref;

axiom rbd_img_request_op_type == $sub.ref(0, 667450);

procedure rbd_img_request_op_type($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rbd_img_request_op_type($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} $i1 := img_request_write_test($p0);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1147} {:cexpr "tmp___0"} boogie_si_record_i8($i2);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} $i5 := img_request_discard_test($p0);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 1149} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i4 := 2;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const rbd_img_obj_request_fill: ref;

axiom rbd_img_obj_request_fill == $sub.ref(0, 668482);

procedure rbd_img_obj_request_fill($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.21, $M.0, $CurrAddr;



implementation rbd_img_obj_request_fill($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i8;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $i44: i16;
  var $i32: i16;
  var $i29: i16;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i50: i16;
  var $i45: i32;
  var $i46: i16;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i16;
  var $i55: i32;
  var $i56: i16;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $i73: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} {:cexpr "rbd_img_obj_request_fill:arg:op_type"} boogie_si_record_i32($i2);
    call {:si_unique_call 1151} {:cexpr "rbd_img_obj_request_fill:arg:num_ops"} boogie_si_record_i32($i3);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(144, 1));
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $i11 := rbd_obj_bytes($p10);
    call {:si_unique_call 1153} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    call {:si_unique_call 1154} {:cexpr "offset"} boogie_si_record_i64($i13);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    call {:si_unique_call 1155} {:cexpr "length"} boogie_si_record_i64($i15);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i2, 2);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i2, 0);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i49, $i50 := $i3, 4609;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i45, $i46 := $i49, $i50;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i46);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 8709);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i52 == 1);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i46);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i16($i55);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} osd_req_op_extent_init($p1, $i45, $i56, $i13, $i15, 0, 0);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(68, 1));
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 1);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i59 == 1);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(68, 1));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 2);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i2, 0);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb41, $bb43;

  $bb43:
    assume !($i72 == 1);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i2, 2);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i73 == 1);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} rbd_osd_req_format_read($p0);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    return;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} rbd_osd_req_format_write($p0);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb42;

  $bb38:
    assume $i65 == 1;
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i64.i32($i13);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, 4095);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} osd_req_op_extent_osd_data_pages($p1, $i45, $p69, $i15, $i71, 0, 0);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume $i59 == 1;
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} osd_req_op_extent_osd_data_bio($p1, $i45, $p62, $i15);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i52 == 1;
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i46);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} osd_req_op_init($p1, $i45, $i54, 0);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i47 == 1;
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} osd_req_op_alloc_hint_init($p1, $i3, $i11, $i11);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i3, 1);
    call {:si_unique_call 1164} {:cexpr "num_ops"} boogie_si_record_i32($i48);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i49, $i50 := $i48, 8705;
    goto $bb31;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i13, 0);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i13, $i15);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, $i11);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i31 == 1);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(560, 1));
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} down_read($p33);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(40, 1));
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    call {:si_unique_call 1161} {:cexpr "img_end"} boogie_si_record_i64($i36);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(560, 1));
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} up_read($p37);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, $i15);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, $i36);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := 8708;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i32 := $i44;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i29 := $i32;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i45, $i46 := $i3, $i29;
    goto $bb28;

  $bb25:
    assume $i43 == 1;
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i44 := 8707;
    goto $bb27;

  $bb22:
    assume $i31 == 1;
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i32 := 8707;
    goto $bb24;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i15, $i11);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb5;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $i19 := img_request_layered_test($p7);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 1157} {:cexpr "tmp___0"} boogie_si_record_i8($i20);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} $i24 := obj_request_overlaps_parent($p0);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i8($i24);
    call {:si_unique_call 1159} {:cexpr "tmp___2"} boogie_si_record_i8($i25);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i28 == 1);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i28 == 1;
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i29 := 8709;
    goto $bb21;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb16;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb10;
}



const rbd_img_obj_copyup_callback: ref;

axiom rbd_img_obj_copyup_callback == $sub.ref(0, 669514);

procedure rbd_img_obj_copyup_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_img_obj_copyup_callback($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i4: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i32;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $i45: i32;
  var $i46: i64;
  var $i47: i64;
  var $i48: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(68, 1));
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 1);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i4);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1172} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $i13 := obj_request_img_data_test($p0);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 1176} {:cexpr "tmp___0"} boogie_si_record_i8($i14);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1178} {:cexpr "tmp___2"} boogie_si_record_i64($i18);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 1182} {:cexpr "tmp___3"} boogie_si_record_i64($i29);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p24, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i32($i35);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 1186} {:cexpr "tmp___4"} boogie_si_record_i64($i38);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(88, 1));
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i32($i44);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i45);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $i47 := ldv__builtin_expect($i46, 0);
    call {:si_unique_call 1190} {:cexpr "tmp___5"} boogie_si_record_i64($i47);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(88, 1));
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $0.ref);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(96, 1));
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    call {:si_unique_call 1193} {:cexpr "page_count___0"} boogie_si_record_i32($i52);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i54 := $zext.i1.i32($i53);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i54);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} $i56 := ldv__builtin_expect($i55, 0);
    call {:si_unique_call 1195} {:cexpr "tmp___6"} boogie_si_record_i64($i56);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(96, 1));
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, 0);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} ceph_release_page_vector($p42, $i52);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 0);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} rbd_img_obj_callback($p0);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume $i62 == 1;
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.0, $p63);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p65, $i64);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb27:
    assume $i57 == 1;
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} vslice_dummy_var_187 := printk.ref.ref.i32.ref(.str.8, .str.154, 2553, .str.145);
    call {:si_unique_call 1197} devirtbounce(0, .str.2, 2553, 12);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    call rbd_img_obj_copyup_callback_loop_$bb29();
    goto $bb29_last;

  $bb23:
    assume $i48 == 1;
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} vslice_dummy_var_186 := printk.ref.ref.i32.ref(.str.8, .str.154, 2550, .str.144);
    call {:si_unique_call 1192} devirtbounce(0, .str.2, 2550, 12);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    call rbd_img_obj_copyup_callback_loop_$bb25();
    goto $bb25_last;

  $bb19:
    assume $i39 == 1;
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} vslice_dummy_var_185 := printk.ref.ref.i32.ref(.str.8, .str.154, 2547, .str.150);
    call {:si_unique_call 1188} devirtbounce(0, .str.2, 2547, 12);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    call rbd_img_obj_copyup_callback_loop_$bb21();
    goto $bb21_last;

  $bb15:
    assume $i30 == 1;
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} vslice_dummy_var_184 := printk.ref.ref.i32.ref(.str.8, .str.154, 2544, .str.139);
    call {:si_unique_call 1184} devirtbounce(0, .str.2, 2544, 12);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    call rbd_img_obj_copyup_callback_loop_$bb17();
    goto $bb17_last;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} vslice_dummy_var_183 := printk.ref.ref.i32.ref(.str.8, .str.154, 2542, .str.68);
    call {:si_unique_call 1180} devirtbounce(0, .str.2, 2542, 12);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call rbd_img_obj_copyup_callback_loop_$bb13();
    goto $bb13_last;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb10;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} vslice_dummy_var_182 := printk.ref.ref.i32.ref(.str.8, .str.154, 2541, .str.155);
    call {:si_unique_call 1174} devirtbounce(0, .str.2, 2541, 12);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call rbd_img_obj_copyup_callback_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(68, 1));
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    assume {:verifier.code 0} true;
    $i4 := $i7;
    goto $bb3;

  $bb29_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto $bb29_dummy;

  $bb25_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto $bb25_dummy;

  $bb21_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto $bb21_dummy;

  $bb17_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb13_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto $bb13_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const rbd_img_obj_callback: ref;

axiom rbd_img_obj_callback == $sub.ref(0, 670546);

procedure rbd_img_obj_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_img_obj_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i24;
  var $i23: i24;
  var $i24: i24;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $i48: i1;
  var $i49: i32;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i32;
  var $i82: i64;
  var $i83: i64;
  var $i84: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i64;
  var $i91: i64;
  var $i92: i1;
  var $i94: i1;
  var $i95: i8;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $i99: i8;
  var $i100: i32;
  var $i103: i1;
  var $i104: i8;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i64;
  var $i117: i1;
  var $p76: ref;
  var $i77: i32;
  var $i78: i8;
  var $i118: i8;
  var $i119: i32;
  var $i74: i8;
  var $i75: i32;
  var $i101: i8;
  var $i102: i32;
  var $i120: i1;
  var $i121: i32;
  var $p122: ref;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i64;
  var $i129: i64;
  var $i130: i1;
  var $p132: ref;
  var $i66: i8;
  var $p133: ref;
  var $i134: i1;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i32;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(64, 1));
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    call {:si_unique_call 1201} {:cexpr "which"} boogie_si_record_i32($i3);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $i4 := obj_request_img_data_test($p0);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 1203} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1205} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p16, .str);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p17, .str.107);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p18, .str.2);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p19, .str.108);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i22 := $load.i24($M.8, $p21);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i23 := $and.i24($i22, $sub.i24(0, 262144));
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i24 := $or.i24($i23, 2325);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p21, $i24);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p25, 0);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.9, $p26);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i64($i27);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 1);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 1209} {:cexpr "tmp___3"} boogie_si_record_i64($i30);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p15);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 1213} {:cexpr "tmp___4"} boogie_si_record_i64($i37);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p15, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 1217} {:cexpr "tmp___5"} boogie_si_record_i64($i45);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i3, $sub.i32(0, 1));
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i32($i48);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 1221} {:cexpr "tmp___6"} boogie_si_record_i64($i51);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p15, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i56 := $ule.i32($i55, $i3);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i32($i56);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i57);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 1225} {:cexpr "tmp___7"} boogie_si_record_i64($i59);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p15, $mul.ref(0, 192)), $mul.ref(64, 1));
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} spin_lock_irq($p62);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p15, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, $i3);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p15, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i70, $i72);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i74, $i75 := 1, $i3;
    assume {:branchcond $i73} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i101, $i102 := $i74, $i75;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i8.i1($i101);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i121 := $zext.i1.i32($i120);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p15, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p122);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, $i102);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i125 := $zext.i1.i32($i124);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i121, $i125);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i127 := $zext.i1.i32($i126);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i128 := $sext.i32.i64($i127);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} $i129 := ldv__builtin_expect($i128, 0);
    call {:si_unique_call 1242} {:cexpr "tmp___12"} boogie_si_record_i64($i129);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i130 := $ne.i64($i129, 0);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p15, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p132, $i102);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i66 := $i101;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p15, $mul.ref(0, 192)), $mul.ref(64, 1));
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} spin_unlock_irq($p133);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} rbd_img_request_put($p15);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i8.i1($i66);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i134 == 1);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} rbd_img_request_complete($p15);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    return;

  $bb58:
    assume $i134 == 1;
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb54:
    assume $i130 == 1;
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} vslice_dummy_var_195 := printk.ref.ref.i32.ref(.str.8, .str.107, 2345, .str.115);
    call {:si_unique_call 1247} devirtbounce(0, .str.2, 2345, 12);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    call rbd_img_obj_callback_loop_$bb56();
    goto $bb56_last;

  $bb31:
    assume $i73 == 1;
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p76, $i77, $i78 := $p0, $i3, 1;
    goto $bb34;

  $bb34:
    call $i79, $i80, $i81, $i82, $i83, $i84, $p86, $i87, $i88, $i89, $i90, $i91, $i92, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i103, $i104, $i105, $p106, $p107, $p109, $p110, $p111, $p112, $p113, $p114, $p115, $i116, $i117, $p76, $i77, $i78, $i118, $i119 := rbd_img_obj_callback_loop_$bb34($p15, $i72, $i79, $i80, $i81, $i82, $i83, $i84, $p86, $i87, $i88, $i89, $i90, $i91, $i92, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i103, $i104, $i105, $p106, $p107, $p109, $p110, $p111, $p112, $p113, $p114, $p115, $i116, $i117, $p76, $i77, $i78, $i118, $i119);
    goto $bb34_last;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i8.i1($i78);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i80 := $xor.i1($i79, 1);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i81 := $zext.i1.i32($i80);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i81);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} $i83 := ldv__builtin_expect($i82, 0);
    call {:si_unique_call 1232} {:cexpr "tmp___8"} boogie_si_record_i64($i83);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p15, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $i88 := $ule.i32($i87, $i77);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i89 := $zext.i1.i32($i88);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i89);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} $i91 := ldv__builtin_expect($i90, 0);
    call {:si_unique_call 1236} {:cexpr "tmp___9"} boogie_si_record_i64($i91);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} $i94 := obj_request_done_test($p76);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i95 := $zext.i1.i8($i94);
    call {:si_unique_call 1240} {:cexpr "tmp___10"} boogie_si_record_i8($i95);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i8.i1($i95);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := 1;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i99, $i100 := $i78, $i77;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $i103 := rbd_img_obj_end_request($p76);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i104 := $zext.i1.i8($i103);
    call {:si_unique_call 1244} {:cexpr "more"} boogie_si_record_i8($i104);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i77, 1);
    call {:si_unique_call 1245} {:cexpr "which"} boogie_si_record_i32($i105);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p76, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p107, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p111, $mul.ref($sub.ref(0, 48), 240));
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p111, $mul.ref($sub.ref(0, 48), 240)), $mul.ref(32, 1));
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i116 := $p2i.ref.i64($p115);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i117 := $ne.i64($i116, $i72);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i118, $i119 := $i104, $i105;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i74, $i75 := $i118, $i119;
    goto $bb33;

  $bb51:
    assume $i117 == 1;
    assume {:verifier.code 0} true;
    $p76, $i77, $i78 := $p112, $i105, $i104;
    goto $bb51_dummy;

  $bb47:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i101, $i102 := $i99, $i100;
    goto $bb49;

  $bb44:
    assume $i96 == 1;
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i97 := 0;
    goto $bb46;

  $bb40:
    assume $i92 == 1;
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} vslice_dummy_var_194 := printk.ref.ref.i32.ref(.str.8, .str.107, 2337, .str.113);
    call {:si_unique_call 1238} devirtbounce(0, .str.2, 2337, 12);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    call rbd_img_obj_callback_loop_$bb42();
    goto $bb42_last;

  $bb36:
    assume $i84 == 1;
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} vslice_dummy_var_193 := printk.ref.ref.i32.ref(.str.8, .str.107, 2336, .str.114);
    call {:si_unique_call 1234} devirtbounce(0, .str.2, 2336, 12);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    call rbd_img_obj_callback_loop_$bb38();
    goto $bb38_last;

  $bb27:
    assume $i65 == 1;
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i66 := 1;
    goto $bb29;

  $bb23:
    assume $i60 == 1;
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} vslice_dummy_var_192 := printk.ref.ref.i32.ref(.str.8, .str.107, 2329, .str.113);
    call {:si_unique_call 1227} devirtbounce(0, .str.2, 2329, 12);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    call rbd_img_obj_callback_loop_$bb25();
    goto $bb25_last;

  $bb19:
    assume $i52 == 1;
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} vslice_dummy_var_191 := printk.ref.ref.i32.ref(.str.8, .str.107, 2328, .str.112);
    call {:si_unique_call 1223} devirtbounce(0, .str.2, 2328, 12);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    call rbd_img_obj_callback_loop_$bb21();
    goto $bb21_last;

  $bb15:
    assume $i46 == 1;
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} vslice_dummy_var_190 := printk.ref.ref.i32.ref(.str.8, .str.107, 2327, .str.111);
    call {:si_unique_call 1219} devirtbounce(0, .str.2, 2327, 12);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    call rbd_img_obj_callback_loop_$bb17();
    goto $bb17_last;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} vslice_dummy_var_189 := printk.ref.ref.i32.ref(.str.8, .str.107, 2326, .str.110);
    call {:si_unique_call 1215} devirtbounce(0, .str.2, 2326, 12);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call rbd_img_obj_callback_loop_$bb13();
    goto $bb13_last;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} $p32 := ceph_file_part(.str.2, 199);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.ref($p1, .str.109, 4, .str.5, $p32, 2325, .str.107, $p15, $p0);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} vslice_dummy_var_188 := printk.ref.ref.i32.ref(.str.8, .str.107, 2322, .str.68);
    call {:si_unique_call 1207} devirtbounce(0, .str.2, 2322, 12);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call rbd_img_obj_callback_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb56_dummy:
    assume false;
    return;

  $bb56_last:
    assume {:verifier.code 0} true;
    goto $bb56_dummy;

  $bb42_dummy:
    assume false;
    return;

  $bb42_last:
    assume {:verifier.code 0} true;
    goto $bb42_dummy;

  $bb38_dummy:
    assume false;
    return;

  $bb38_last:
    assume {:verifier.code 0} true;
    goto $bb38_dummy;

  $bb51_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5430;

  $bb25_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto $bb25_dummy;

  $bb21_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto $bb21_dummy;

  $bb17_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb13_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto $bb13_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const rbd_img_obj_end_request: ref;

axiom rbd_img_obj_end_request == $sub.ref(0, 671578);

procedure rbd_img_obj_end_request($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rbd_img_obj_end_request($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i1;
  var $i30: i8;
  var $i31: i1;
  var $i33: i1;
  var $i34: i8;
  var $i35: i1;
  var $i36: i32;
  var $i32: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i1;
  var $i64: i8;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $i71: i32;
  var $i72: i64;
  var $i73: i64;
  var $i74: i1;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i82: i8;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $i89: i32;
  var $i90: i64;
  var $i91: i64;
  var $i92: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i1;
  var $i98: i8;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i83: i8;
  var $i103: i1;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $i1 := obj_request_img_data_test($p0);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1250} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 1252} {:cexpr "tmp___1"} boogie_si_record_i64($i6);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i64($i14, 4294967295);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1256} {:cexpr "tmp___2"} boogie_si_record_i64($i18);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i22);
    call {:si_unique_call 1259} {:cexpr "xferred"} boogie_si_record_i32($i23);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    call {:si_unique_call 1260} {:cexpr "result"} boogie_si_record_i32($i25);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i53 := $i23;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(68, 1));
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 2);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $i63 := img_request_child_test($p12);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i64 := $zext.i1.i8($i63);
    call {:si_unique_call 1270} {:cexpr "tmp___8"} boogie_si_record_i8($i64);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i8.i1($i64);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i65 == 1);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i88 := $eq.i64($i87, 0);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i89 := $zext.i1.i32($i88);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i89);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $i91 := ldv__builtin_expect($i90, 0);
    call {:si_unique_call 1274} {:cexpr "tmp___7"} boogie_si_record_i64($i91);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $i97 := blk_update_request($p96, $i25, $i53);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i98 := $zext.i1.i8($i97);
    call {:si_unique_call 1281} {:cexpr "more"} boogie_si_record_i8($i98);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i8.i1($i98);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i99 == 1);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} __blk_mq_end_request($p102, $i25);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i83 := $i98;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i8.i1($i83);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $r := $i103;
    return;

  $bb38:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb34:
    assume $i92 == 1;
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} vslice_dummy_var_199 := printk.ref.ref.i32.ref(.str.8, .str.116, 2306, .str.121);
    call {:si_unique_call 1279} devirtbounce(0, .str.2, 2306, 12);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    call rbd_img_obj_end_request_loop_$bb36();
    goto $bb36_last;

  $bb27:
    assume $i65 == 1;
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i69, 0);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i71 := $zext.i1.i32($i70);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i71);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} $i73 := ldv__builtin_expect($i72, 0);
    call {:si_unique_call 1272} {:cexpr "tmp___6"} boogie_si_record_i64($i73);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(64, 1));
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i80 := $sub.i32($i79, 1);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i81 := $ult.i32($i77, $i80);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i82 := $zext.i1.i8($i81);
    call {:si_unique_call 1277} {:cexpr "more"} boogie_si_record_i8($i82);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i83 := $i82;
    goto $bb33;

  $bb29:
    assume $i74 == 1;
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} vslice_dummy_var_198 := printk.ref.ref.i32.ref(.str.8, .str.116, 2303, .str.120);
    call {:si_unique_call 1276} devirtbounce(0, .str.2, 2303, 12);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    call rbd_img_obj_end_request_loop_$bb31();
    goto $bb31_last;

  $bb24:
    assume $i56 == 1;
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $0.ref);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, 0);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} $i29 := img_request_discard_test($p12);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i8($i29);
    call {:si_unique_call 1262} {:cexpr "tmp___4"} boogie_si_record_i8($i30);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i30);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} $i33 := img_request_write_test($p12);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i8($i33);
    call {:si_unique_call 1264} {:cexpr "tmp___3"} boogie_si_record_i8($i34);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i32 := $i36;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $p37 := obj_op_name($i32);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} rbd_warn.ref.ref.ref.i64.i64.i64($p28, .str.118, $p37, $i39, $i43, $i45);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} rbd_warn.ref.ref.i32.i32($p28, .str.119, $i25, $i23);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i32($i51);
    call {:si_unique_call 1268} {:cexpr "xferred"} boogie_si_record_i32($i52);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb23;

  $bb20:
    assume $i48 == 1;
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i25);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb19;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i32 := 2;
    goto $bb16;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} vslice_dummy_var_197 := printk.ref.ref.i32.ref(.str.8, .str.116, 2267, .str.117);
    call {:si_unique_call 1258} devirtbounce(0, .str.2, 2267, 12);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call rbd_img_obj_end_request_loop_$bb10();
    goto $bb10_last;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} vslice_dummy_var_196 := printk.ref.ref.i32.ref(.str.8, .str.116, 2264, .str.68);
    call {:si_unique_call 1254} devirtbounce(0, .str.2, 2264, 12);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call rbd_img_obj_end_request_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb36_dummy:
    assume false;
    return;

  $bb36_last:
    assume {:verifier.code 0} true;
    goto $bb36_dummy;

  $bb31_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    goto $bb31_dummy;

  $bb10_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const rbd_img_request_complete: ref;

axiom rbd_img_request_complete == $sub.ref(0, 672610);

procedure rbd_img_request_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_img_request_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $i35: i64;
  var $p36: ref;
  var $i52: i64;
  var $i34: i64;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2, .str);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p3, .str.122);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, .str.2);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p5, .str.123);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.8, $p7);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 1608);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p7, $i10);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p11, 0);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.9, $p12);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1285} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i57 == 1);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} rbd_img_request_put($p0);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb15:
    assume $i57 == 1;
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    call {:si_unique_call 1289} devirtbounce.14($p59, $p0);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref($sub.ref(0, 48), 240));
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p25, $mul.ref($sub.ref(0, 48), 240)), $mul.ref(32, 1));
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i30, $i32);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i34 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(152, 1));
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p53, $i34);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb6:
    assume $i33 == 1;
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i35, $p36 := 0, $p26;
    goto $bb9;

  $bb9:
    call $p37, $i38, $i39, $p40, $p41, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $i50, $i51, $i35, $p36, $i52 := rbd_img_request_complete_loop_$bb9($i32, $p37, $i38, $i39, $p40, $p41, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $i50, $i51, $i35, $p36, $i52);
    goto $bb9_last;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, $i35);
    call {:si_unique_call 1288} {:cexpr "xferred"} boogie_si_record_i64($i39);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p36, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref($sub.ref(0, 48), 240));
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p45, $mul.ref($sub.ref(0, 48), 240)), $mul.ref(32, 1));
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, $i32);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i52 := $i39;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i34 := $i52;
    goto $bb8;

  $bb11:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i35, $p36 := $i39, $p46;
    goto $bb11_dummy;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $p18 := ceph_file_part(.str.2, 199);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref($p1, .str.124, 4, .str.5, $p18, 1608, .str.122, $p0);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5698;
}



const blk_update_request: ref;

axiom blk_update_request == $sub.ref(0, 673642);

procedure blk_update_request($p0: ref, $i1: i32, $i2: i32) returns ($r: i1);
  free requires assertsPassed;



implementation blk_update_request($p0: ref, $i1: i32, $i2: i32) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1291} {:cexpr "blk_update_request:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1292} {:cexpr "blk_update_request:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1293} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1294} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __blk_mq_end_request: ref;

axiom __blk_mq_end_request == $sub.ref(0, 674674);

procedure __blk_mq_end_request($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __blk_mq_end_request($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} {:cexpr "__blk_mq_end_request:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    return;
}



const rbd_obj_bytes: ref;

axiom rbd_obj_bytes == $sub.ref(0, 675706);

procedure rbd_obj_bytes($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rbd_obj_bytes($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32(1, $i3);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const obj_request_overlaps_parent: ref;

axiom obj_request_overlaps_parent == $sub.ref(0, 676738);

procedure obj_request_overlaps_parent($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation obj_request_overlaps_parent($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(144, 1));
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $i8 := rbd_obj_bytes($p7);
    call {:si_unique_call 1297} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(304, 1));
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i15 := $sub.i64($i14, 1);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i16 := $sub.i64($i8, 1);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $i17 := $or.i64($i15, $i16);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 1);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i19 := $ult.i64($i12, $i18);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;
}



const osd_req_op_alloc_hint_init: ref;

axiom osd_req_op_alloc_hint_init == $sub.ref(0, 677770);

procedure osd_req_op_alloc_hint_init($p0: ref, $i1: i32, $i2: i64, $i3: i64);
  free requires assertsPassed;



implementation osd_req_op_alloc_hint_init($p0: ref, $i1: i32, $i2: i64, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} {:cexpr "osd_req_op_alloc_hint_init:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1299} {:cexpr "osd_req_op_alloc_hint_init:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1300} {:cexpr "osd_req_op_alloc_hint_init:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    return;
}



const osd_req_op_extent_init: ref;

axiom osd_req_op_extent_init == $sub.ref(0, 678802);

procedure osd_req_op_extent_init($p0: ref, $i1: i32, $i2: i16, $i3: i64, $i4: i64, $i5: i64, $i6: i32);
  free requires assertsPassed;



implementation osd_req_op_extent_init($p0: ref, $i1: i32, $i2: i16, $i3: i64, $i4: i64, $i5: i64, $i6: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} {:cexpr "osd_req_op_extent_init:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1302} {:cexpr "osd_req_op_extent_init:arg:arg2"} boogie_si_record_i16($i2);
    call {:si_unique_call 1303} {:cexpr "osd_req_op_extent_init:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 1304} {:cexpr "osd_req_op_extent_init:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 1305} {:cexpr "osd_req_op_extent_init:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 1306} {:cexpr "osd_req_op_extent_init:arg:arg6"} boogie_si_record_i32($i6);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    return;
}



const osd_req_op_extent_osd_data_bio: ref;

axiom osd_req_op_extent_osd_data_bio == $sub.ref(0, 679834);

procedure osd_req_op_extent_osd_data_bio($p0: ref, $i1: i32, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation osd_req_op_extent_osd_data_bio($p0: ref, $i1: i32, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} {:cexpr "osd_req_op_extent_osd_data_bio:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1308} {:cexpr "osd_req_op_extent_osd_data_bio:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    return;
}



const osd_req_op_extent_osd_data_pages: ref;

axiom osd_req_op_extent_osd_data_pages == $sub.ref(0, 680866);

procedure osd_req_op_extent_osd_data_pages($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i32, $i5: i1, $i6: i1);
  free requires assertsPassed;



implementation osd_req_op_extent_osd_data_pages($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i32, $i5: i1, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} {:cexpr "osd_req_op_extent_osd_data_pages:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1310} {:cexpr "osd_req_op_extent_osd_data_pages:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 1311} {:cexpr "osd_req_op_extent_osd_data_pages:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1312} {:cexpr "osd_req_op_extent_osd_data_pages:arg:arg5"} boogie_si_record_i1($i5);
    call {:si_unique_call 1313} {:cexpr "osd_req_op_extent_osd_data_pages:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    return;
}



const rbd_osd_req_format_write: ref;

axiom rbd_osd_req_format_write == $sub.ref(0, 681898);

procedure rbd_osd_req_format_write($p0: ref);
  free requires assertsPassed;
  modifies $M.21, $M.0, $CurrAddr;



implementation rbd_osd_req_format_write($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var vslice_dummy_var_200: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} $p10 := current_kernel_time();
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p3);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i13 := $extractvalue($p10, 0);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $M.21 := $store.i64($M.21, $p12, $i13);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i15 := $extractvalue($p10, 1);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $M.21 := $store.i64($M.21, $p14, $i15);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p3);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.21;
    cmdloc_dummy_var_22 := $M.21;
    call {:si_unique_call 1318} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p16, $p17, 16, $zext.i32.i64(8), 0 == 1);
    $M.21 := cmdloc_dummy_var_23;
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p2);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.21;
    cmdloc_dummy_var_25 := $M.21;
    call {:si_unique_call 1319} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p18, $p19, 16, $zext.i32.i64(8), 0 == 1);
    $M.21 := cmdloc_dummy_var_26;
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p9);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1321} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p7);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $p32 := $0.ref;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} ceph_osdc_build_request($p9, $i34, $p32, $sub.i64(0, 2), $p1);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(32, 1));
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $p32 := $p31;
    goto $bb7;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} vslice_dummy_var_200 := printk.ref.ref.i32.ref(.str.8, .str.125, 1903, .str.126);
    call {:si_unique_call 1323} devirtbounce(0, .str.2, 1903, 12);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call rbd_osd_req_format_write_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const current_kernel_time: ref;

axiom current_kernel_time == $sub.ref(0, 682930);

procedure current_kernel_time() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation current_kernel_time() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $p0 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} $p1 := external_alloc();
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 1} true;
    $i3 := $ne.ref($p2, $0.ref);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1327} __VERIFIER_assume($i4);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 1328} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p5, $p6, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_5827;

  corral_source_split_5827:
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5828;

  corral_source_split_5828:
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume $extractvalue($p10, 1) == $extractvalue($u0, 1);
    assume $extractvalue($p10, 0) == $i9;
    goto corral_source_split_5830;

  corral_source_split_5830:
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5831;

  corral_source_split_5831:
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume $extractvalue($p13, 0) == $extractvalue($p10, 0);
    assume $extractvalue($p13, 1) == $i12;
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;
}



const ceph_osdc_start_request: ref;

axiom ceph_osdc_start_request == $sub.ref(0, 683962);

procedure ceph_osdc_start_request($p0: ref, $p1: ref, $i2: i1) returns ($r: i32);
  free requires assertsPassed;



implementation ceph_osdc_start_request($p0: ref, $p1: ref, $i2: i1) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1329} {:cexpr "ceph_osdc_start_request:arg:arg2"} boogie_si_record_i1($i2);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1330} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1331} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const obj_request_exists_test: ref;

axiom obj_request_exists_test == $sub.ref(0, 684994);

procedure obj_request_exists_test($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation obj_request_exists_test($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} devirtbounce.2(0);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} $i2 := constant_test_bit(3, $p1);
    call {:si_unique_call 1334} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const rbd_segment_name: ref;

axiom rbd_segment_name == $sub.ref(0, 686026);

procedure rbd_segment_name($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation rbd_segment_name($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $p24: ref;
  var $p6: ref;
  var vslice_dummy_var_201: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} {:cexpr "rbd_segment_name:arg:offset"} boogie_si_record_i64($i1);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p2 := $M.22;
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} $p3 := kmem_cache_alloc($p2, 16);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(8, 1));
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i12 := $lshr.i64($i1, $i11);
    call {:si_unique_call 1337} {:cexpr "segment"} boogie_si_record_i64($i12);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 2);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $p16 := .str.32;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $i20 := snprintf.ref.i64.ref.ref.i64($p3, 101, $p16, $p19, $i12);
    call {:si_unique_call 1339} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i21 == 1);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i20, 100);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $p24 := $p3;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $p6 := $p24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} vslice_dummy_var_201 := printk.ref.i64.i32(.str.34, $i12, $i20);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} rbd_segment_name_free($p3);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $p24 := $0.ref;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb9;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $p16 := .str.33;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;
}



const rbd_segment_offset: ref;

axiom rbd_segment_offset == $sub.ref(0, 687058);

procedure rbd_segment_offset($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation rbd_segment_offset($p0: ref, $i1: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} {:cexpr "rbd_segment_offset:arg:offset"} boogie_si_record_i64($i1);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(8, 1));
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i7 := $shl.i64(1, $i6);
    call {:si_unique_call 1343} {:cexpr "segment_size"} boogie_si_record_i64($i7);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64($i7, 1);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i9 := $and.i64($i8, $i1);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const rbd_segment_length: ref;

axiom rbd_segment_length == $sub.ref(0, 688090);

procedure rbd_segment_length($p0: ref, $i1: i64, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation rbd_segment_length($p0: ref, $i1: i64, $i2: i64) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i18: i64;
  var $i19: i1;
  var $i20: i64;
  var $i21: i64;
  var vslice_dummy_var_202: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} {:cexpr "rbd_segment_length:arg:offset"} boogie_si_record_i64($i1);
    call {:si_unique_call 1345} {:cexpr "rbd_segment_length:arg:length"} boogie_si_record_i64($i2);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(8, 1));
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i8 := $shl.i64(1, $i7);
    call {:si_unique_call 1346} {:cexpr "segment_size"} boogie_si_record_i64($i8);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64($i8, 1);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i10 := $and.i64($i9, $i1);
    call {:si_unique_call 1347} {:cexpr "offset"} boogie_si_record_i64($i10);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i11 := $xor.i64($i10, $sub.i64(0, 1));
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i12 := $ult.i64($i11, $i2);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 1349} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i10, $i2);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i64($i18, $i8);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i21 := $i2;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $i20 := $sub.i64($i8, $i10);
    call {:si_unique_call 1352} {:cexpr "length"} boogie_si_record_i64($i20);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb7;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} vslice_dummy_var_202 := printk.ref.ref.i32.ref(.str.8, .str.35, 1216, .str.36);
    call {:si_unique_call 1351} devirtbounce(0, .str.2, 1216, 12);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call rbd_segment_length_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const rbd_segment_name_free: ref;

axiom rbd_segment_name_free == $sub.ref(0, 689122);

procedure rbd_segment_name_free($p0: ref);
  free requires assertsPassed;



implementation rbd_segment_name_free($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p1 := $M.22;
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} kmem_cache_free($p1, $p0);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    return;
}



const rbd_img_obj_request_add: ref;

axiom rbd_img_obj_request_add == $sub.ref(0, 690154);

procedure rbd_img_obj_request_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation rbd_img_obj_request_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i1;
  var $i21: i8;
  var $i22: i1;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i24;
  var $i50: i24;
  var $i51: i24;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 1356} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p0);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(64, 1));
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} $i20 := obj_request_img_data_test($p1);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i8($i20);
    call {:si_unique_call 1360} {:cexpr "tmp___0"} boogie_si_record_i8($i21);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i21);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i64($i22);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1362} {:cexpr "tmp___1"} boogie_si_record_i64($i24);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} obj_request_img_data_set($p1);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(64, 1));
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, $sub.i32(0, 1));
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 1367} {:cexpr "tmp___2"} boogie_si_record_i64($i32);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 1);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} list_add_tail($p41, $p42);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p43, .str);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p44, .str.42);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p45, .str.2);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p46, .str.46);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i49 := $load.i24($M.8, $p48);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i50 := $and.i24($i49, $sub.i24(0, 262144));
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i51 := $or.i24($i50, 1520);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p48, $i51);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p52, 0);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.9, $p53);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i64($i54);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i56 := $and.i64($i55, 1);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} $i57 := ldv__builtin_expect($i56, 0);
    call {:si_unique_call 1372} {:cexpr "tmp___4"} boogie_si_record_i64($i57);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i58 == 1;
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} $p59 := ceph_file_part(.str.2, 199);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(64, 1));
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.ref.i32($p2, .str.47, 4, .str.5, $p59, 1520, .str.42, $p0, $p1, $i61);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i33 == 1;
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} vslice_dummy_var_205 := printk.ref.ref.i32.ref(.str.8, .str.42, 1516, .str.45);
    call {:si_unique_call 1369} devirtbounce(0, .str.2, 1516, 12);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call rbd_img_obj_request_add_loop_$bb11();
    goto $bb11_last;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} vslice_dummy_var_204 := printk.ref.ref.i32.ref(.str.8, .str.42, 1514, .str.44);
    call {:si_unique_call 1364} devirtbounce(0, .str.2, 1514, 12);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call rbd_img_obj_request_add_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} vslice_dummy_var_203 := printk.ref.ref.i32.ref(.str.8, .str.42, 1509, .str.43);
    call {:si_unique_call 1358} devirtbounce(0, .str.2, 1509, 12);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call rbd_img_obj_request_add_loop_$bb3();
    goto $bb3_last;

  $bb11_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const bio_chain_clone_range: ref;

axiom bio_chain_clone_range == $sub.ref(0, 691186);

procedure bio_chain_clone_range($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.13, $M.14, $CurrAddr;



implementation bio_chain_clone_range($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i15: i1;
  var $i22: i64;
  var $i23: i1;
  var $i24: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i35: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p46: ref;
  var $i47: i32;
  var $p16: ref;
  var $i17: i32;
  var $p48: ref;
  var $p49: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1376} {:cexpr "bio_chain_clone_range:arg:len"} boogie_si_record_i32($i2);
    call {:si_unique_call 1377} {:cexpr "bio_chain_clone_range:arg:gfpmask"} boogie_si_record_i32($i3);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.13, $p0);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.14, $p1);
    call {:si_unique_call 1378} {:cexpr "off"} boogie_si_record_i32($i6);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $0.ref);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p5);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i12 := $ule.i32($i11, $i6);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i2, 0);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i2, 0);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p16, $i17 := $p5, $i6;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p0, $p16);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p1, $i17);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p4);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $p14 := $p48;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $p18, $i19, $i20, $p21 := $p4, $i6, $i2, $p5;
    goto $bb13;

  $bb13:
    call $i22, $i23, $i24, $p26, $i27, $i28, $i29, $i30, $p31, $i32, $i33, $i35, $p37, $i38, $i39, $p40, $p41, $p42, $i43, $i44, $i45, $p18, $i19, $i20, $p21, $p46, $i47 := bio_chain_clone_range_loop_$bb13($i3, $i22, $i23, $i24, $p26, $i27, $i28, $i29, $i30, $p31, $i32, $i33, $i35, $p37, $i38, $i39, $p40, $p41, $p42, $i43, $i44, $i45, $p18, $i19, $i20, $p21, $p46, $i47);
    goto $bb13_last;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i24 := $i20;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32($i27, $i19);
    call {:si_unique_call 1381} {:cexpr "__min1"} boogie_si_record_i32($i28);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i29 := $ult.i32($i28, $i20);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i29 == 1);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i30 := $i20;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} $p31 := bio_clone_range($p21, $i19, $i30, $i3);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p31);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i19, $i30);
    call {:si_unique_call 1383} {:cexpr "off"} boogie_si_record_i32($i35);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, $i35);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $p42, $i43 := $p21, $i35;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32($i20, $i30);
    call {:si_unique_call 1384} {:cexpr "len"} boogie_si_record_i32($i44);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $p46, $i47 := $p42, $i43;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $p16, $i17 := $p46, $i47;
    goto $bb12;

  $bb28:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $p18, $i19, $i20, $p21 := $p31, $i43, $i44, $p42;
    goto $bb28_dummy;

  $bb25:
    assume $i39 == 1;
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p21, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $p42, $i43 := $p41, 0;
    goto $bb27;

  $bb22:
    assume $i33 == 1;
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p4);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} bio_chain_put($p49);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb8;

  $bb19:
    assume $i29 == 1;
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i30 := $i28;
    goto $bb21;

  $bb15:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} rbd_warn.ref.ref.i32($0.ref, .str.49, $i24);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb28_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6022;
}



const rbd_img_request_get: ref;

axiom rbd_img_request_get == $sub.ref(0, 692218);

procedure rbd_img_request_get($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation rbd_img_request_get($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2, .str);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p3, .str.128);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, .str.2);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p5, .str.129);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.8, $p7);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 1488);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p7, $i10);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p11, 0);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.9, $p12);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1387} {:cexpr "tmp___1"} boogie_si_record_i64($i16);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} kref_get($p22);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1)), $mul.ref(0, 1));
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $i20 := atomic_read($p19);
    call {:si_unique_call 1389} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} $p21 := ceph_file_part(.str.2, 199);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.i32($p1, .str.130, 4, .str.5, $p21, 1488, .str.128, $p0, $i20);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bio_clone_range: ref;

axiom bio_clone_range == $sub.ref(0, 693250);

procedure bio_clone_range($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation bio_clone_range($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} {:cexpr "bio_clone_range:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 1394} {:cexpr "bio_clone_range:arg:len"} boogie_si_record_i32($i2);
    call {:si_unique_call 1395} {:cexpr "bio_clone_range:arg:gfpmask"} boogie_si_record_i32($i3);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $p4 := bio_clone($p0, $i3);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} bio_advance($p4, $i1);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i2);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $p7 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;
}



const bio_clone: ref;

axiom bio_clone == $sub.ref(0, 694282);

procedure bio_clone($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation bio_clone($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} {:cexpr "bio_clone:arg:gfp_mask"} boogie_si_record_i32($i1);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, fs_bio_set);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} $p3 := bio_clone_bioset($p0, $i1, $p2);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const bio_advance: ref;

axiom bio_advance == $sub.ref(0, 695314);

procedure bio_advance($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation bio_advance($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} {:cexpr "bio_advance:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    return;
}



const bio_clone_bioset: ref;

axiom bio_clone_bioset == $sub.ref(0, 696346);

procedure bio_clone_bioset($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation bio_clone_bioset($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} {:cexpr "bio_clone_bioset:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} $p3 := external_alloc();
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const obj_request_img_data_set: ref;

axiom obj_request_img_data_set == $sub.ref(0, 697378);

procedure obj_request_img_data_set($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation obj_request_img_data_set($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} $i2 := test_and_set_bit(1, $p1);
    call {:si_unique_call 1404} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} rbd_warn.ref.ref.ref($p9, .str.48, $p0);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 698410);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} __list_add($p0, $p3, $p1);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 699442);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 700474);

procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref.ref.i64($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: i64) returns ($r: i32);



const img_request_discard_set: ref;

axiom img_request_discard_set == $sub.ref(0, 701506);

procedure img_request_discard_set($p0: ref);
  free requires assertsPassed;



implementation img_request_discard_set($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(24, 1));
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} set_bit(3, $p1);
    call {:si_unique_call 1408} devirtbounce.2(0);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    return;
}



const img_request_write_set: ref;

axiom img_request_write_set == $sub.ref(0, 702538);

procedure img_request_write_set($p0: ref);
  free requires assertsPassed;



implementation img_request_write_set($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(24, 1));
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} set_bit(0, $p1);
    call {:si_unique_call 1410} devirtbounce.2(0);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    return;
}



const rbd_dev_parent_get: ref;

axiom rbd_dev_parent_get == $sub.ref(0, 703570);

procedure rbd_dev_parent_get($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_parent_get($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i1;
  var $i15: i1;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(296, 1));
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(560, 1));
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} down_read($p6);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(304, 1));
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(560, 1));
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} up_read($p13);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 0);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i12, 0);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i5 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} rbd_warn.ref.ref($p0, .str.25);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(312, 1));
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $i11 := atomic_inc_return_safe($p10);
    call {:si_unique_call 1413} {:cexpr "counter"} boogie_si_record_i32($i11);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const img_request_layered_set: ref;

axiom img_request_layered_set == $sub.ref(0, 704602);

procedure img_request_layered_set($p0: ref);
  free requires assertsPassed;



implementation img_request_layered_set($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(24, 1));
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} set_bit(2, $p1);
    call {:si_unique_call 1417} devirtbounce.2(0);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 705634);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 706666);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    return;
}



const atomic_inc_return_safe: ref;

axiom atomic_inc_return_safe == $sub.ref(0, 707698);

procedure atomic_inc_return_safe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation atomic_inc_return_safe($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} $i1 := __atomic_add_unless($p0, 1, 0);
    call {:si_unique_call 1419} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} atomic_dec($p0);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const __atomic_add_unless: ref;

axiom __atomic_add_unless == $sub.ref(0, 708730);

procedure __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i11: i32;
  var $i9: i32;
  var $i10: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} {:cexpr "__atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 1422} {:cexpr "__atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $i3 := atomic_read($p0);
    call {:si_unique_call 1424} {:cexpr "c"} boogie_si_record_i32($i3);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $i2);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 1426} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i9 := $i3;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $i10 := $i3;
    goto $bb4;

  $bb4:
    call $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25 := __atomic_add_unless_loop_$bb4($p0, $i1, $i2, $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i10, $i1);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} $i14 := atomic_cmpxchg($p0, $i10, $i13);
    call {:si_unique_call 1428} {:cexpr "old"} boogie_si_record_i32($i14);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, $i10);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 1430} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i20 := $i10;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i14, $i2);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1432} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i11 := $i14;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i14;
    goto $bb11_dummy;

  $bb5:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i12 := $i20;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const atomic_dec: ref;

axiom atomic_dec == $sub.ref(0, 709762);

procedure atomic_dec($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation atomic_dec($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 1433} devirtbounce.3(0, $p1, $p1);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    return;
}



const atomic_cmpxchg: ref;

axiom atomic_cmpxchg == $sub.ref(0, 710794);

procedure atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} {:cexpr "atomic_cmpxchg:arg:old"} boogie_si_record_i32($i1);
    call {:si_unique_call 1435} {:cexpr "atomic_cmpxchg:arg:new"} boogie_si_record_i32($i2);
    call {:si_unique_call 1436} {:cexpr "atomic_cmpxchg:arg:__old"} boogie_si_record_i32($i1);
    call {:si_unique_call 1437} {:cexpr "atomic_cmpxchg:arg:__new"} boogie_si_record_i32($i2);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 1438} $i4 := devirtbounce.15(0, $p3, $i2, $i1, $p3);
    call {:si_unique_call 1439} {:cexpr "__ret"} boogie_si_record_i32($i4);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv__builtin_va_start: ref;

axiom ldv__builtin_va_start == $sub.ref(0, 711826);

procedure ldv__builtin_va_start($p0: ref);
  free requires assertsPassed;



implementation ldv__builtin_va_start($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_va_end: ref;

axiom ldv__builtin_va_end == $sub.ref(0, 712858);

procedure ldv__builtin_va_end($p0: ref);
  free requires assertsPassed;



implementation ldv__builtin_va_end($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 713890);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} $i2 := ldv_queue_work_on_5(8192, $p0, $p1);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1441} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_queue_work_on_5: ref;

axiom ldv_queue_work_on_5 == $sub.ref(0, 714922);

procedure ldv_queue_work_on_5($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29;



implementation ldv_queue_work_on_5($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} {:cexpr "ldv_queue_work_on_5:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1444} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 1445} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} activate_work_1($p2, 2);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 715954);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1447} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1448} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1449} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const activate_work_1: ref;

axiom activate_work_1 == $sub.ref(0, 716986);

procedure activate_work_1($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29;



implementation activate_work_1($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} {:cexpr "activate_work_1:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i2 := $M.23;
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.25;
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.27;
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.29;
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $M.30 := $p0;
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $M.29 := $i1;
    call {:si_unique_call 1454} {:cexpr "ldv_work_1_3"} boogie_si_record_i32($i1);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $M.28 := $p0;
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $M.27 := $i1;
    call {:si_unique_call 1453} {:cexpr "ldv_work_1_2"} boogie_si_record_i32($i1);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $M.26 := $p0;
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $M.25 := $i1;
    call {:si_unique_call 1452} {:cexpr "ldv_work_1_1"} boogie_si_record_i32($i1);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $M.24 := $p0;
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $M.23 := $i1;
    call {:si_unique_call 1451} {:cexpr "ldv_work_1_0"} boogie_si_record_i32($i1);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rbd_bus_is_visible: ref;

axiom rbd_bus_is_visible == $sub.ref(0, 718018);

procedure rbd_bus_is_visible($p0: ref, $p1: ref, $i2: i32) returns ($r: i16);
  free requires assertsPassed;



implementation rbd_bus_is_visible($p0: ref, $p1: ref, $i2: i32) returns ($r: i16)
{
  var $i3: i8;
  var $i4: i1;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i16;
  var $i9: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} {:cexpr "rbd_bus_is_visible:arg:index"} boogie_si_record_i32($i2);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i3 := $M.31;
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, $p2i.ref.i64(bus_attr_add_single_major));
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i6 == 1);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p1);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, $p2i.ref.i64(bus_attr_remove_single_major));
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb5;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const rbd_add: ref;

axiom rbd_add == $sub.ref(0, 719050);

procedure rbd_add($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.32, $M.33, $M.34, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.35, $CurrAddr, $M.61, $M.56, $M.21, $M.57, $M.38, $M.39, $M.60, $M.13, $M.14, $M.18, $M.58, $M.40, $M.41, assertsPassed, $M.20, $M.45, $M.46, $M.47, $M.59, $M.42, $M.43, $M.44, $M.19;



implementation rbd_add($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i8;
  var $i4: i1;
  var $i6: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} {:cexpr "rbd_add:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i3 := $M.31;
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} $i6 := do_rbd_add($p0, $p1, $i2);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 1458} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, 22);
    goto $bb3;
}



const do_rbd_add: ref;

axiom do_rbd_add == $sub.ref(0, 720082);

procedure do_rbd_add($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.32, $M.33, $M.34, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.35, $CurrAddr, $M.61, $M.56, $M.21, $M.57, $M.38, $M.39, $M.60, $M.13, $M.14, $M.18, $M.58, $M.40, $M.41, assertsPassed, $M.20, $M.45, $M.46, $M.47, $M.59, $M.42, $M.43, $M.44, $M.19;



implementation do_rbd_add($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i1;
  var $i60: i8;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $i66: i8;
  var $i67: i1;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i1;
  var $p36: ref;
  var $i37: i32;
  var $i25: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i15: i32;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i24;
  var $i83: i24;
  var $i84: i24;
  var $p85: ref;
  var $p86: ref;
  var $i87: i8;
  var $i88: i64;
  var $i89: i64;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $i93: i64;
  var $i12: i64;
  var vslice_dummy_var_206: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1463} {:cexpr "do_rbd_add:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p3, $0.ref);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $M.33 := $store.ref($M.33, $p4, $0.ref);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p5, $0.ref);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} $i7 := try_module_get(__this_module);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 1465} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} $i13 := rbd_add_parse_args($p1, $p3, $p4, $p5);
    call {:si_unique_call 1467} {:cexpr "rc"} boogie_si_record_i32($i13);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.32, $p3);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} $p17 := rbd_get_client($p16);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} $i19 := IS_ERR($p18);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 1473} {:cexpr "tmp___2"} boogie_si_record_i8($i20);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.34, $p5);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} $i29 := rbd_add_get_pool_id($p17, $p28);
    call {:si_unique_call 1480} {:cexpr "rc"} boogie_si_record_i32($i29);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 0);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i29);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.34, $p5);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p40, $i38);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.34, $p5);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $i44 := $ugt.i64($i43, 4294967295);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.34, $p5);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.33, $p4);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} $p50 := rbd_dev_create($p17, $p48, $p49);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p5, $0.ref);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $M.33 := $store.ref($M.33, $p4, $0.ref);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $i53 := rbd_dev_image_probe($p50, 1);
    call {:si_unique_call 1486} {:cexpr "rc"} boogie_si_record_i32($i53);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, 0);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p50, $mul.ref(0, 2192)), $mul.ref(232, 1));
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i8.i1($i58);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i8($i59);
    call {:si_unique_call 1488} {:cexpr "read_only"} boogie_si_record_i8($i60);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p50, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.0, $p63);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, $sub.i64(0, 2));
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $i60;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i8.i1($i66);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p50, $mul.ref(0, 2192)), $mul.ref(720, 1)), $mul.ref(16, 1));
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $i70 := $zext.i1.i8($i67);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, $i70);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $i71 := rbd_dev_device_setup($p50);
    call {:si_unique_call 1490} {:cexpr "rc"} boogie_si_record_i32($i71);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i12 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb36:
    assume $i72 == 1;
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} rbd_dev_header_unwatch_sync($p50);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} rbd_dev_image_release($p50);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $i15 := $i71;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} module_put(__this_module);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p76, .str);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p77, .str.193);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p78, .str.2);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p79, .str.194);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i82 := $load.i24($M.8, $p81);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i83 := $and.i24($i82, $sub.i24(0, 262144));
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i84 := $or.i24($i83, 5491);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p81, $i84);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p85, 0);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.9, $p86);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i64($i87);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i89 := $and.i64($i88, 1);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} $i90 := ldv__builtin_expect($i89, 0);
    call {:si_unique_call 1470} {:cexpr "tmp___4"} boogie_si_record_i64($i90);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i15);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $i12 := $i93;
    goto $bb6;

  $bb39:
    assume $i91 == 1;
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} $p92 := ceph_file_part(.str.2, 199);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref($p6, .str.195, 4, .str.5, $p92, 5491, $p1);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb33:
    assume $i65 == 1;
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i66 := 1;
    goto $bb35;

  $bb29:
    assume $i54 == 1;
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} rbd_dev_destroy($p50);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $p36, $i37 := $0.ref, $i53;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} rbd_put_client($p36);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $i25 := $i37;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.34, $p5);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} rbd_spec_put($p73);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.33, $p4);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} kfree($p75);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i15 := $i25;
    goto $bb10;

  $bb26:
    assume $i52 == 1;
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $p36, $i37 := $p17, $i29;
    goto $bb21;

  $bb23:
    assume $i44 == 1;
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.34, $p5);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} rbd_warn.ref.ref.i64.i32($0.ref, .str.192, $i47, $sub.i32(0, 1));
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $p36, $i37 := $p17, $sub.i32(0, 5);
    goto $bb21;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i29, $sub.i32(0, 2));
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p36, $i37 := $p17, $i29;
    goto $bb21;

  $bb18:
    assume $i31 == 1;
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.34, $p5);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} vslice_dummy_var_206 := printk.ref.ref(.str.191, $p34);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb12:
    assume $i21 == 1;
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p17);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $i23 := PTR_ERR($p22);
    call {:si_unique_call 1475} {:cexpr "tmp___1"} boogie_si_record_i64($i23);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i23);
    call {:si_unique_call 1476} {:cexpr "rc"} boogie_si_record_i32($i24);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb14;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb10;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 19);
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const try_module_get: ref;

axiom try_module_get == $sub.ref(0, 721114);

procedure try_module_get($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation try_module_get($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1495} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1496} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rbd_add_parse_args: ref;

axiom rbd_add_parse_args == $sub.ref(0, 722146);

procedure rbd_add_parse_args($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.35, $M.0, $M.32, $M.33, $M.34, $M.61, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_add_parse_args($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $i47: i64;
  var $i48: i1;
  var $i50: i1;
  var $i49: i64;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i1;
  var $i70: i8;
  var $i71: i1;
  var $p72: ref;
  var $i73: i64;
  var $i74: i32;
  var $p24: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p75: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p4, $p0);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} $i5 := next_token($p4);
    call {:si_unique_call 1499} {:cexpr "len"} boogie_si_record_i64($i5);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.35, $p4);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i5, 1);
    call {:si_unique_call 1501} {:cexpr "mon_addrs_size"} boogie_si_record_i64($i9);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.35, $p4);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($i5, 1));
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p4, $p11);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} $p12 := dup_token($p4, $0.ref);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p12);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i16 := $sext.i8.i32($i15);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} $p21 := rbd_spec_alloc();
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} $p25 := dup_token($p4, $0.ref);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p21, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p25);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p21, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p21, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i34 := $sext.i8.i32($i33);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} $p36 := dup_token($p4, $0.ref);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p21, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p36);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p21, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p21, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $i45 := $sext.i8.i32($i44);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} $i47 := next_token($p4);
    call {:si_unique_call 1513} {:cexpr "len"} boogie_si_record_i64($i47);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, 0);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i48 == 1);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i50 := $ugt.i64($i47, 250);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i49 := $i47;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.35, $p4);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i49, 1);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $p53 := kmemdup($p51, $i52, 208);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i54, 0);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p53, $mul.ref($i49, 1));
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, 0);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p21, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, $p53);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} $p58 := kzalloc(8, 208);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $i61 := $eq.i64($i60, 0);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p59, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 0);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p59, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, 128);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i9, $sub.i64(0, 1));
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p8, $mul.ref($i64, 1));
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p59);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} $p67 := ceph_parse_options($p12, $p8, $p65, parse_rbd_opts_token, $p66);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} $i69 := IS_ERR($p68);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i70 := $zext.i1.i8($i69);
    call {:si_unique_call 1518} {:cexpr "tmp___4"} boogie_si_record_i8($i70);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i8.i1($i70);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} kfree($p12);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p1, $p67);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $M.33 := $store.ref($M.33, $p2, $p58);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p3, $p21);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb40:
    assume $i71 == 1;
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p67);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} $i73 := PTR_ERR($p72);
    call {:si_unique_call 1520} {:cexpr "tmp___3"} boogie_si_record_i64($i73);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i64.i32($i73);
    call {:si_unique_call 1521} {:cexpr "ret"} boogie_si_record_i32($i74);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $p18, $p19, $i20 := $p21, $p58, $i74;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p19);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} kfree($p75);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} rbd_spec_put($p18);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} kfree($p12);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i7 := $i20;
    goto $bb3;

  $bb37:
    assume $i61 == 1;
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $p24 := $p58;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $p18, $p19, $i20 := $p21, $p24, $sub.i32(0, 12);
    goto $bb10;

  $bb34:
    assume $i55 == 1;
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $p24 := $0.ref;
    goto $bb14;

  $bb31:
    assume $i50 == 1;
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $p18, $p19, $i20 := $p21, $0.ref, $sub.i32(0, 36);
    goto $bb10;

  $bb28:
    assume $i48 == 1;
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p4, .str.200);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i49 := 1;
    goto $bb30;

  $bb25:
    assume $i46 == 1;
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} rbd_warn.ref.ref($0.ref, .str.199);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p18, $p19, $i20 := $p21, $0.ref, $sub.i32(0, 22);
    goto $bb10;

  $bb22:
    assume $i41 == 1;
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $p24 := $0.ref;
    goto $bb14;

  $bb19:
    assume $i35 == 1;
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} rbd_warn.ref.ref($0.ref, .str.198);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $p18, $p19, $i20 := $p21, $0.ref, $sub.i32(0, 22);
    goto $bb10;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $p24 := $0.ref;
    goto $bb14;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $p24 := $0.ref;
    goto $bb14;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} rbd_warn.ref.ref($0.ref, .str.197);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $p18, $p19, $i20 := $0.ref, $0.ref, $sub.i32(0, 22);
    goto $bb10;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} rbd_warn.ref.ref($0.ref, .str.196);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const rbd_get_client: ref;

axiom rbd_get_client == $sub.ref(0, 723178);

procedure rbd_get_client($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.60, assertsPassed, $CurrAddr;



implementation rbd_get_client($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} ldv_mutex_lock_nested_17(client_mutex, 1);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} $p1 := rbd_client_find($p0);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} $p5 := rbd_client_create($p0);
    assume {:verifier.code 0} true;
    $p4 := $p5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} ldv_mutex_unlock_18(client_mutex);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} ceph_destroy_options($p0);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $p4 := $p1;
    goto $bb3;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const rbd_add_get_pool_id: ref;

axiom rbd_add_get_pool_id == $sub.ref(0, 724210);

procedure rbd_add_get_pool_id($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation rbd_add_get_pool_id($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i32;
  var $p45: ref;
  var $i46: i64;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i19: i32;
  var $i54: i32;
  var $i14: i32;
  var $i55: i32;
  var $i26: i32;
  var vslice_dummy_var_207: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3808)), $mul.ref(32, 1));
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 3808)), $mul.ref(2608, 1)), $mul.ref(8, 1));
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} $i12 := ceph_pg_poolid_by_name($p11, $p1);
    call {:si_unique_call 1530} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, $sub.i32(0, 2));
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i55 := $i14;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $i26 := $i55;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i15, $i16 := $i12, 0;
    goto $bb4;

  $bb4:
    call $i15, $i16, $i17, $i18, $p20, $p21, $p22, $i23, $i24, $i25, $p27, $p28, $p30, $p31, $p32, $i33, $i34, $i35, $i36, $p37, $p38, $p39, $p40, $p41, $p42, $i43, $i44, $p45, $i46, $p48, $p50, $p51, $i52, $i53, $i19, $i54, vslice_dummy_var_207 := rbd_add_get_pool_id_loop_$bb4($p0, $p1, $p2, $p6, $p7, $i15, $i16, $i17, $i18, $p20, $p21, $p22, $i23, $i24, $i25, $p27, $p28, $p30, $p31, $p32, $i33, $i34, $i35, $i36, $p37, $p38, $p39, $p40, $p41, $p42, $i43, $i44, $p45, $i46, $p48, $p50, $p51, $i52, $i53, $i19, $i54, vslice_dummy_var_207);
    goto $bb4_last;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 1);
    call {:si_unique_call 1531} {:cexpr "tries"} boogie_si_record_i32($i17);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i18 := $sle.i32($i16, 0);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $i19 := $i15;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i55 := $i19;
    goto $bb16;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 3808)), $mul.ref(712, 1));
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} $i23 := ceph_monc_do_get_version($p22, .str.223, $p2);
    call {:si_unique_call 1533} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i25 := $i23;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 3808)), $mul.ref(2608, 1)), $mul.ref(8, 1));
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 472)), $mul.ref(16, 1));
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.36, $p2);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $i36 := $ult.i64($i34, $i35);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i36 == 1);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 2);
    goto $bb9;

  $bb11:
    assume $i36 == 1;
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 3808)), $mul.ref(712, 1));
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} ceph_monc_request_next_osdmap($p39);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 3808)), $mul.ref(712, 1));
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.36, $p2);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i64.i32($i43);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 216)), $mul.ref(160, 1));
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} vslice_dummy_var_207 := ceph_monc_wait_osdmap($p42, $i44, $i46);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p7);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p48, $mul.ref(0, 3808)), $mul.ref(2608, 1)), $mul.ref(8, 1));
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} $i52 := ceph_pg_poolid_by_name($p51, $p1);
    call {:si_unique_call 1537} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, $sub.i32(0, 2));
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $i54 := $i52;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i14 := $i54;
    goto $bb3;

  $bb13:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i15, $i16 := $i52, $i17;
    goto $bb13_dummy;

  $bb7:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb9;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6631;
}



const rbd_dev_create: ref;

axiom rbd_dev_create == $sub.ref(0, 725242);

procedure rbd_dev_create($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rbd_dev_create($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i32;
  var $p32: ref;
  var $p9: ref;
  var vslice_dummy_var_208: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} $p5 := kzalloc(2184, 208);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(72, 1));
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} vslice_dummy_var_208 := spinlock_check($p10);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} __raw_spin_lock_init($p14, .str.224, $p3);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(216, 1));
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, 0);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(312, 1));
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} atomic_set($p16, 0);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(744, 1));
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} INIT_LIST_HEAD($p17);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(560, 1));
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} __init_rwsem($p18, .str.225, $p4);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p0);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p1);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(232, 1));
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p2);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(248, 1)), $mul.ref(0, 1));
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 1073741824);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(248, 1)), $mul.ref(4, 1));
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 1);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(248, 1)), $mul.ref(8, 1));
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 1073741824);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i29);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(248, 1)), $mul.ref(24, 1));
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i30);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $p9 := $p5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;
}



const rbd_dev_image_probe: ref;

axiom rbd_dev_image_probe == $sub.ref(0, 726274);

procedure rbd_dev_image_probe($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.56, $M.21, $M.57, $CurrAddr, $M.58, $M.45, $M.46, $M.47, $M.59, $M.13, $M.14, $M.18, $M.42, $M.43, $M.44, $M.20, $M.19;



implementation rbd_dev_image_probe($p0: ref, $i1: i1) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i24: i32;
  var $i25: i1;
  var $i27: i1;
  var $i28: i32;
  var $i30: i32;
  var $i29: i32;
  var $i31: i1;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i24;
  var $i69: i24;
  var $i70: i24;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i64;
  var $i75: i64;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $i46: i32;
  var $i26: i32;
  var $i83: i1;
  var $i23: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i9: i32;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i6: i32;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i1);
    call {:si_unique_call 1547} {:cexpr "rbd_dev_image_probe:arg:mapping"} boogie_si_record_i1($i1);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} $i4 := rbd_dev_image_id($p0);
    call {:si_unique_call 1549} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} $i7 := rbd_dev_header_name($p0);
    call {:si_unique_call 1551} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i3);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} $i24 := rbd_dev_header_info($p0);
    call {:si_unique_call 1558} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i3);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i27 == 1);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} $i30 := rbd_spec_fill_names($p0);
    call {:si_unique_call 1562} {:cexpr "ret"} boogie_si_record_i32($i30);
    assume {:verifier.code 0} true;
    $i29 := $i30;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i29, 0);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(32, 1));
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i64.i32($i49);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 1);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} $i60 := rbd_dev_probe_parent($p0);
    call {:si_unique_call 1569} {:cexpr "ret"} boogie_si_record_i32($i60);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p62, .str);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p63, .str.229);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p64, .str.2);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p65, .str.230);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $i68 := $load.i24($M.8, $p67);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $i69 := $and.i24($i68, $sub.i24(0, 262144));
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $i70 := $or.i24($i69, 5387);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p67, $i70);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p71, 0);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.9, $p72);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i64($i73);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i75 := $and.i64($i74, 1);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} $i76 := ldv__builtin_expect($i75, 0);
    call {:si_unique_call 1571} {:cexpr "tmp___0"} boogie_si_record_i64($i76);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb48:
    assume $i77 == 1;
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} $p78 := ceph_file_part(.str.2, 199);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(240, 1));
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i32.ref($p2, .str.231, 4, .str.5, $p78, 5387, $i80, $p82);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb45:
    assume $i61 == 1;
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i46 := $i60;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} rbd_dev_unprobe($p0);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i26 := $i46;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i8.i1($i3);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i23 := $i26;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(240, 1));
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} kfree($p85);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(240, 1));
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p86, $0.ref);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $i9 := $i23;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, 0);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} kfree($p91);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p94, $0.ref);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb3;

  $bb51:
    assume $i83 == 1;
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} rbd_dev_header_unwatch_sync($p0);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb33:
    assume $i52 == 1;
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} $i53 := rbd_dev_v2_parent_info($p0);
    call {:si_unique_call 1566} {:cexpr "ret"} boogie_si_record_i32($i53);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i8.i1($i3);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb38:
    assume $i55 == 1;
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(296, 1));
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb40;

  $bb41:
    assume $i59 == 1;
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} rbd_warn.ref.ref($p0, .str.228);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb35:
    assume $i54 == 1;
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i46 := $i53;
    goto $bb31;

  $bb26:
    assume $i31 == 1;
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i29, $sub.i32(0, 2));
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i46 := $i29;
    goto $bb31;

  $bb28:
    assume $i32 == 1;
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} vslice_dummy_var_210 := printk.ref.ref.ref.ref(.str.227, $p36, $p40, $p44);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb23:
    assume $i27 == 1;
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} $i28 := rbd_spec_fill_snap_id($p0);
    call {:si_unique_call 1560} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb25;

  $bb19:
    assume $i25 == 1;
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    goto $bb21;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} $i11 := rbd_dev_header_watch_sync($p0);
    call {:si_unique_call 1554} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i11, $sub.i32(0, 2));
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i23 := $i11;
    goto $bb16;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} vslice_dummy_var_209 := printk.ref.ref.ref(.str.226, $p17, $p21);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const rbd_dev_device_setup: ref;

axiom rbd_dev_device_setup == $sub.ref(0, 727306);

procedure rbd_dev_device_setup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.38, $M.39, $M.40, $M.41, $CurrAddr, $M.45, $M.46, $M.47, $M.42, $M.43, $M.44, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_device_setup($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i9: i8;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $i54: i64;
  var $i29: i32;
  var $i26: i32;
  var $i56: i8;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i15: i32;
  var $i3: i32;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} $i1 := rbd_dev_id_get($p0);
    call {:si_unique_call 1576} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(40, 1));
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} vslice_dummy_var_211 := sprintf.ref.ref.ref.i32($p5, .str.322, .str, $i7);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $i9 := $M.31;
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(40, 1));
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} $i13 := register_blkdev(0, $p12);
    call {:si_unique_call 1580} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(4, 1));
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i13);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} $i24 := rbd_init_disk($p0);
    call {:si_unique_call 1584} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} $i27 := rbd_dev_mapping_set($p0);
    call {:si_unique_call 1586} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(720, 1)), $mul.ref(0, 1));
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i35 := $udiv.i64($i34, 512);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} set_capacity($p31, $i35);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(720, 1)), $mul.ref(16, 1));
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i40);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} set_disk_ro($p37, $i42);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} $i43 := rbd_bus_add_dev($p0);
    call {:si_unique_call 1591} {:cexpr "ret"} boogie_si_record_i32($i43);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(216, 1));
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} set_bit(0, $p45);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} add_disk($p47);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(720, 1)), $mul.ref(0, 1));
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p53);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} vslice_dummy_var_212 := printk.ref.ref.i64(.str.323, $p51, $i54);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i3 := $i43;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb20:
    assume $i44 == 1;
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} rbd_dev_mapping_clear($p0);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $i29 := $i43;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} rbd_free_disk($p0);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i26 := $i29;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i56 := $M.31;
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i8.i1($i56);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i57 == 1);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(4, 1));
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(40, 1));
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} unregister_blkdev($i59, $p61);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i15 := $i26;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} rbd_dev_id_put($p0);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} rbd_dev_mapping_clear($p0);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $i3 := $i15;
    goto $bb3;

  $bb24:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb18;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    goto $bb14;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb9;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $i18 := $M.37;
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(4, 1));
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} $i22 := rbd_dev_id_to_minor($i21);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const rbd_dev_header_unwatch_sync: ref;

axiom rbd_dev_header_unwatch_sync == $sub.ref(0, 728338);

procedure rbd_dev_header_unwatch_sync($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.21, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.19;



implementation rbd_dev_header_unwatch_sync($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $i27: i8;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(280, 1));
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 1598} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(288, 1));
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1602} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(288, 1));
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} rbd_obj_request_end($p20);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(288, 1));
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} rbd_obj_request_put($p22);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(288, 1));
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $0.ref);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} $p24 := rbd_obj_watch_request_helper($p0, 0);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} $i26 := IS_ERR($p25);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 1609} {:cexpr "tmp___2"} boogie_si_record_i8($i27);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p24);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} $i32 := PTR_ERR($p31);
    call {:si_unique_call 1612} {:cexpr "tmp___1"} boogie_si_record_i64($i32);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} rbd_warn.ref.ref.i64($p0, .str.184, $i32);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(280, 1));
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} ceph_osdc_cancel_event($p34);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(280, 1));
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $0.ref);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i30 == 1;
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} rbd_obj_request_put($p24);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i28 == 1;
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb11;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} vslice_dummy_var_214 := printk.ref.ref.i32.ref(.str.8, .str.181, 3236, .str.183);
    call {:si_unique_call 1604} devirtbounce(0, .str.2, 3236, 12);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call rbd_dev_header_unwatch_sync_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} vslice_dummy_var_213 := printk.ref.ref.i32.ref(.str.8, .str.181, 3235, .str.182);
    call {:si_unique_call 1600} devirtbounce(0, .str.2, 3235, 12);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call rbd_dev_header_unwatch_sync_loop_$bb3();
    goto $bb3_last;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const module_put: ref;

axiom module_put == $sub.ref(0, 729370);

procedure module_put($p0: ref);
  free requires assertsPassed;



implementation module_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    return;
}



const rbd_obj_request_end: ref;

axiom rbd_obj_request_end == $sub.ref(0, 730402);

procedure rbd_obj_request_end($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation rbd_obj_request_end($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2, .str);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p3, .str.185);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, .str.2);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p5, .str.82);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.8, $p7);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 1563);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p7, $i10);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p11, 0);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.9, $p12);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1617} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} ceph_osdc_cancel_request($p20);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} $p18 := ceph_file_part(.str.2, 199);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref($p1, .str.83, 4, .str.5, $p18, 1563, .str.185, $p0);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rbd_obj_watch_request_helper: ref;

axiom rbd_obj_watch_request_helper == $sub.ref(0, 731434);

procedure rbd_obj_watch_request_helper($p0: ref, $i1: i1) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.21, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.19;



implementation rbd_obj_watch_request_helper($p0: ref, $i1: i1) returns ($r: ref)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i64;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i1;
  var $i26: i32;
  var $i48: i64;
  var $p49: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1621} {:cexpr "rbd_obj_watch_request_helper:arg:watch"} boogie_si_record_i1($i1);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3808)), $mul.ref(2608, 1));
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3808)), $mul.ref(2608, 1)), $mul.ref(0, 1));
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 3808)), $mul.ref(32, 1));
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(240, 1));
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} $p14 := rbd_obj_request_create($p13, 0, 0, 0);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} $p20 := rbd_osd_req_create($p0, 0, 1, $p14);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p14, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p20);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p14, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p14, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(280, 1));
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i2);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} osd_req_op_watch_init($p28, 0, 8719, $i32, 0, $i34);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} rbd_osd_req_format_write($p14);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i2);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} $i38 := rbd_obj_request_submit($p7, $p14);
    call {:si_unique_call 1631} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p11, $mul.ref(0, 216)), $mul.ref(160, 1));
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} $i42 := rbd_obj_request_wait_timeout($p14, $i41);
    call {:si_unique_call 1633} {:cexpr "ret"} boogie_si_record_i32($i42);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p14, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    call {:si_unique_call 1634} {:cexpr "ret"} boogie_si_record_i32($i45);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p19 := $p14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $r := $p19;
    return;

  $bb18:
    assume $i46 == 1;
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i2);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i26 := $i45;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} rbd_obj_request_put($p14);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i26);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} $p49 := ERR_PTR($i48);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $p19 := $p49;
    goto $bb3;

  $bb20:
    assume $i47 == 1;
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} rbd_obj_request_end($p14);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb15:
    assume $i43 == 1;
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $i26 := $i42;
    goto $bb7;

  $bb12:
    assume $i39 == 1;
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $i26 := $i38;
    goto $bb7;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p14, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} ceph_osdc_set_request_linger($p7, $p37);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} $p17 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $p19 := $p17;
    goto $bb3;
}



const ceph_osdc_cancel_event: ref;

axiom ceph_osdc_cancel_event == $sub.ref(0, 732466);

procedure ceph_osdc_cancel_event($p0: ref);
  free requires assertsPassed;



implementation ceph_osdc_cancel_event($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 733498);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const osd_req_op_watch_init: ref;

axiom osd_req_op_watch_init == $sub.ref(0, 734530);

procedure osd_req_op_watch_init($p0: ref, $i1: i32, $i2: i16, $i3: i64, $i4: i64, $i5: i32);
  free requires assertsPassed;



implementation osd_req_op_watch_init($p0: ref, $i1: i32, $i2: i16, $i3: i64, $i4: i64, $i5: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} {:cexpr "osd_req_op_watch_init:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1639} {:cexpr "osd_req_op_watch_init:arg:arg2"} boogie_si_record_i16($i2);
    call {:si_unique_call 1640} {:cexpr "osd_req_op_watch_init:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 1641} {:cexpr "osd_req_op_watch_init:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 1642} {:cexpr "osd_req_op_watch_init:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    return;
}



const ceph_osdc_set_request_linger: ref;

axiom ceph_osdc_set_request_linger == $sub.ref(0, 735562);

procedure ceph_osdc_set_request_linger($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ceph_osdc_set_request_linger($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    return;
}



const rbd_obj_request_wait_timeout: ref;

axiom rbd_obj_request_wait_timeout == $sub.ref(0, 736594);

procedure rbd_obj_request_wait_timeout($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation rbd_obj_request_wait_timeout($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} {:cexpr "rbd_obj_request_wait_timeout:arg:timeout"} boogie_si_record_i64($i1);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} $i2 := __rbd_obj_request_wait($p0, $i1);
    call {:si_unique_call 1645} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __rbd_obj_request_wait: ref;

axiom __rbd_obj_request_wait == $sub.ref(0, 737626);

procedure __rbd_obj_request_wait($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation __rbd_obj_request_wait($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i1;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i24;
  var $i35: i24;
  var $i36: i24;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1648} {:cexpr "__rbd_obj_request_wait:arg:timeout"} boogie_si_record_i64($i1);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p4, .str);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p5, .str.186);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, .str.2);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p7, .str.82);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.8, $p9);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 1578);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p9, $i12);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p13, 0);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.9, $p14);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1650} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} $i21 := ceph_timeout_jiffies($i1);
    call {:si_unique_call 1654} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(136, 1));
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} $i23 := wait_for_completion_interruptible_timeout($p22, $i21);
    call {:si_unique_call 1656} {:cexpr "ret"} boogie_si_record_i64($i23);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i24 := $sle.i64($i23, 0);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p28, .str);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p29, .str.186);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p30, .str.2);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p31, .str.187);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i34 := $load.i24($M.8, $p33);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i35 := $and.i24($i34, $sub.i24(0, 262144));
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $i36 := $or.i24($i35, 1590);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p33, $i36);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p37, 0);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.9, $p38);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i64($i39);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $i41 := $and.i64($i40, 1);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} $i42 := ldv__builtin_expect($i41, 0);
    call {:si_unique_call 1659} {:cexpr "tmp___3"} boogie_si_record_i64($i42);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i64.i32($i27);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $r := $i46;
    return;

  $bb10:
    assume $i43 == 1;
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} $p44 := ceph_file_part(.str.2, 199);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i64.i32($i27);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.i32($p3, .str.188, 4, .str.5, $p44, 1590, .str.186, $p0, $i45);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i23, 0);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i23;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} rbd_obj_request_end($p0);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb9;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $i26 := $sub.i64(0, 110);
    goto $bb8;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} $p20 := ceph_file_part(.str.2, 199);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref($p2, .str.83, 4, .str.5, $p20, 1578, .str.186, $p0);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ceph_timeout_jiffies: ref;

axiom ceph_timeout_jiffies == $sub.ref(0, 738658);

procedure ceph_timeout_jiffies($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ceph_timeout_jiffies($i0: i64) returns ($r: i64)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} {:cexpr "ceph_timeout_jiffies:arg:timeout"} boogie_si_record_i64($i0);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i1 := $ne.i64($i0, 0);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i5 := 9223372036854775807;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i0, 0);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const wait_for_completion_interruptible_timeout: ref;

axiom wait_for_completion_interruptible_timeout == $sub.ref(0, 739690);

procedure wait_for_completion_interruptible_timeout($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation wait_for_completion_interruptible_timeout($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1663} {:cexpr "wait_for_completion_interruptible_timeout:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1664} $i2 := __VERIFIER_nondet_long();
    call {:si_unique_call 1665} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i2);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 740722);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(2012, $i0);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ceph_osdc_cancel_request: ref;

axiom ceph_osdc_cancel_request == $sub.ref(0, 741754);

procedure ceph_osdc_cancel_request($p0: ref);
  free requires assertsPassed;



implementation ceph_osdc_cancel_request($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    return;
}



const rbd_dev_id_get: ref;

axiom rbd_dev_id_get == $sub.ref(0, 742786);

procedure rbd_dev_id_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation rbd_dev_id_get($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} $i2 := minor_to_rbd_dev_id(1048576);
    call {:si_unique_call 1669} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} $i3 := ida_simple_get(rbd_dev_id_ida, 0, $i2, 208);
    call {:si_unique_call 1671} {:cexpr "new_dev_id"} boogie_si_record_i32($i3);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i3);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} spin_lock(rbd_dev_list_lock);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(744, 1));
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} list_add_tail($p7, rbd_dev_list);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} spin_unlock(rbd_dev_list_lock);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p9, .str.324);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p10, .str.2);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p11, .str.325);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.8, $p13);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 4767);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p13, $i16);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p17, 0);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.9, $p18);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 1676} {:cexpr "tmp___1"} boogie_si_record_i64($i22);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} $p24 := ceph_file_part(.str.2, 199);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.i32($p1, .str.326, 4, .str.5, $p24, 4767, $p0, $i26);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 743818);

procedure sprintf.ref.ref.ref.i64.ref.ref.ref.i64.ref.i64($p0: ref, $p1: ref, p.2: ref, p.3: i64, p.4: ref, p.5: ref, p.6: ref, p.7: i64, p.8: ref, p.9: i64) returns ($r: i32);



procedure sprintf.ref.ref($p0: ref, $p1: ref) returns ($r: i32);



procedure sprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



procedure sprintf.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32);



procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure sprintf.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref) returns ($r: i32);



procedure sprintf.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);



const register_blkdev: ref;

axiom register_blkdev == $sub.ref(0, 744850);

procedure register_blkdev($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_blkdev($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1679} {:cexpr "register_blkdev:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1680} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1681} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rbd_dev_id_to_minor: ref;

axiom rbd_dev_id_to_minor == $sub.ref(0, 745882);

procedure rbd_dev_id_to_minor($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation rbd_dev_id_to_minor($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} {:cexpr "rbd_dev_id_to_minor:arg:dev_id"} boogie_si_record_i32($i0);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i1 := $shl.i32($i0, 4);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rbd_init_disk: ref;

axiom rbd_init_disk == $sub.ref(0, 746914);

procedure rbd_init_disk($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rbd_init_disk($p0: ref) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i1;
  var $i54: i8;
  var $i55: i1;
  var $p56: ref;
  var $i57: i64;
  var $i58: i32;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $i62: i32;
  var $i63: i64;
  var $i64: i16;
  var $i65: i32;
  var $i66: i16;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $p72: ref;
  var $i73: i32;
  var $p75: ref;
  var $i76: i64;
  var $i77: i32;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i49: i32;
  var $i7: i32;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var vslice_dummy_var_215: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i1 := $M.31;
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i3 := (if $i2 == 1 then 16 else 256);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} $p4 := alloc_disk($i3);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} vslice_dummy_var_215 := snprintf.ref.i64.ref.i32($p9, 32, .str.328, $i11);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(4, 1));
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 1752)), $mul.ref(0, 1));
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 1752)), $mul.ref(4, 1));
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i19 := $M.31;
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 1752)), $mul.ref(1664, 1));
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, rbd_bd_ops);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 1752)), $mul.ref(1680, 1));
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p0);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(328, 1));
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.0;
    call {:si_unique_call 1685} cmdloc_dummy_var_31 := $memset.i8(cmdloc_dummy_var_30, $p29, 0, 232, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_31;
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(328, 1)), $mul.ref(0, 1));
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, rbd_mq_ops);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(232, 1));
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(328, 1)), $mul.ref(12, 1));
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i35);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(328, 1)), $mul.ref(24, 1));
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $sub.i32(0, 1));
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(328, 1)), $mul.ref(32, 1));
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, 5);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(328, 1)), $mul.ref(8, 1));
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 1);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(328, 1)), $mul.ref(20, 1));
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 80);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(328, 1));
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} $i47 := blk_mq_alloc_tag_set($p46);
    call {:si_unique_call 1687} {:cexpr "err"} boogie_si_record_i32($i47);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(328, 1));
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} $p51 := blk_mq_init_queue($p50);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} $i53 := IS_ERR($p52);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $i54 := $zext.i1.i8($i53);
    call {:si_unique_call 1691} {:cexpr "tmp___0"} boogie_si_record_i8($i54);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i8.i1($i54);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} queue_flag_set_unlocked(12, $p51);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1));
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} $i60 := rbd_obj_bytes($p59);
    call {:si_unique_call 1698} {:cexpr "segment_size"} boogie_si_record_i64($i60);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $i61 := $udiv.i64($i60, 512);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i64.i32($i61);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} blk_queue_max_hw_sectors($p51, $i62);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $i63 := $udiv.i64($i60, 512);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i64.i16($i63);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} blk_queue_max_segments($p51, $i66);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i64.i32($i60);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} blk_queue_max_segment_size($p51, $i67);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i64.i32($i60);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} blk_queue_io_min($p51, $i68);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i64.i32($i60);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} blk_queue_io_opt($p51, $i69);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} queue_flag_set_unlocked(14, $p51);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i64.i32($i60);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 4208)), $mul.ref(3488, 1)), $mul.ref(56, 1));
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i70);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i64.i32($i60);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 4208)), $mul.ref(3488, 1)), $mul.ref(60, 1));
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i73);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $i76 := $udiv.i64($i60, 512);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i64.i32($i76);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 4208)), $mul.ref(3488, 1)), $mul.ref(48, 1));
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, $i77);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 4208)), $mul.ref(3488, 1)), $mul.ref(73, 1));
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, 1);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} blk_queue_merge_bvec($p51, rbd_merge_bvec);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 1752)), $mul.ref(1672, 1));
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p82, $p51);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p51, $mul.ref(0, 4208)), $mul.ref(2496, 1));
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p84, $p0);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p85, $p4);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb12:
    assume $i55 == 1;
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p51);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} $i57 := PTR_ERR($p56);
    call {:si_unique_call 1693} {:cexpr "tmp"} boogie_si_record_i64($i57);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i64.i32($i57);
    call {:si_unique_call 1694} {:cexpr "err"} boogie_si_record_i32($i58);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(328, 1));
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} blk_mq_free_tag_set($p86);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $i49 := $i58;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} put_disk($p4);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i7 := $i49;
    goto $bb3;

  $bb8:
    assume $i48 == 1;
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $i49 := $i47;
    goto $bb10;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 1752)), $mul.ref(1688, 1));
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i22, 64);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 1752)), $mul.ref(1688, 1));
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;
}



const rbd_dev_mapping_set: ref;

axiom rbd_dev_mapping_set == $sub.ref(0, 747946);

procedure rbd_dev_mapping_set($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.39, $M.0, $M.40, $M.41, $CurrAddr, $M.45, $M.46, $M.47, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.42, $M.43, $M.44, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_mapping_set($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $p14: ref;
  var $i15: i64;
  var $p17: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    call {:si_unique_call 1708} {:cexpr "snap_id"} boogie_si_record_i64($i6);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $M.38 := $store.i64($M.38, $p1, 0);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $M.39 := $store.i64($M.39, $p2, 0);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} $i7 := rbd_snap_size($p0, $i6, $p1);
    call {:si_unique_call 1710} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} $i10 := rbd_snap_features($p0, $i6, $p2);
    call {:si_unique_call 1712} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.38, $p1);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(720, 1)), $mul.ref(0, 1));
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, $i12);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.39, $p2);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(720, 1)), $mul.ref(8, 1));
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p17, $i15);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;
}



const set_capacity: ref;

axiom set_capacity == $sub.ref(0, 748978);

procedure set_capacity($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation set_capacity($p0: ref, $i1: i64)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} {:cexpr "set_capacity:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(72, 1)), $mul.ref(8, 1));
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i1);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    return;
}



const rbd_bus_add_dev: ref;

axiom rbd_bus_add_dev == $sub.ref(0, 750010);

procedure rbd_bus_add_dev($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rbd_bus_add_dev($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i9: i32;
  var vslice_dummy_var_216: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(760, 1));
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(760, 1)), $mul.ref(488, 1));
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, rbd_bus_type);
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(760, 1)), $mul.ref(320, 1));
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, rbd_device_type);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(760, 1)), $mul.ref(0, 1));
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, rbd_root_dev);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(760, 1)), $mul.ref(1400, 1));
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, rbd_dev_device_release);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} vslice_dummy_var_216 := dev_set_name.ref.ref.i32($p1, .str.333, $i7);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} $i9 := device_register($p1);
    call {:si_unique_call 1716} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const add_disk: ref;

axiom add_disk == $sub.ref(0, 751042);

procedure add_disk($p0: ref);
  free requires assertsPassed;



implementation add_disk($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    return;
}



const rbd_dev_mapping_clear: ref;

axiom rbd_dev_mapping_clear == $sub.ref(0, 752074);

procedure rbd_dev_mapping_clear($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rbd_dev_mapping_clear($p0: ref)
{
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(720, 1)), $mul.ref(0, 1));
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, 0);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(720, 1)), $mul.ref(8, 1));
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, 0);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    return;
}



const rbd_free_disk: ref;

axiom rbd_free_disk == $sub.ref(0, 753106);

procedure rbd_free_disk($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rbd_free_disk($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 1752)), $mul.ref(1688, 1));
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 16);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} put_disk($p2);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} del_gendisk($p2);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 1752)), $mul.ref(1672, 1));
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(328, 1));
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} blk_mq_free_tag_set($p16);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 1752)), $mul.ref(1672, 1));
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} blk_cleanup_queue($p15);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const unregister_blkdev: ref;

axiom unregister_blkdev == $sub.ref(0, 754138);

procedure unregister_blkdev($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation unregister_blkdev($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} {:cexpr "unregister_blkdev:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    return;
}



const rbd_dev_id_put: ref;

axiom rbd_dev_id_put == $sub.ref(0, 755170);

procedure rbd_dev_id_put($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation rbd_dev_id_put($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} spin_lock(rbd_dev_list_lock);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(744, 1));
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} list_del_init($p2);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} spin_unlock(rbd_dev_list_lock);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} ida_simple_remove(rbd_dev_id_ida, $i4);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p5, .str);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p6, .str.351);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p7, .str.2);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p8, .str.352);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.8, $p10);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 4784);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p10, $i13);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p14, 0);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.9, $p15);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1728} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} $p21 := ceph_file_part(.str.2, 199);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.i32($p1, .str.353, 4, .str.5, $p21, 4784, $p0, $i23);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 756202);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} __list_del_entry($p0);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} INIT_LIST_HEAD($p0);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    return;
}



const ida_simple_remove: ref;

axiom ida_simple_remove == $sub.ref(0, 757234);

procedure ida_simple_remove($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation ida_simple_remove($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} {:cexpr "ida_simple_remove:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 758266);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    return;
}



const del_gendisk: ref;

axiom del_gendisk == $sub.ref(0, 759298);

procedure del_gendisk($p0: ref);
  free requires assertsPassed;



implementation del_gendisk($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    return;
}



const blk_cleanup_queue: ref;

axiom blk_cleanup_queue == $sub.ref(0, 760330);

procedure blk_cleanup_queue($p0: ref);
  free requires assertsPassed;



implementation blk_cleanup_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    return;
}



const blk_mq_free_tag_set: ref;

axiom blk_mq_free_tag_set == $sub.ref(0, 761362);

procedure blk_mq_free_tag_set($p0: ref);
  free requires assertsPassed;



implementation blk_mq_free_tag_set($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    return;
}



const put_disk: ref;

axiom put_disk == $sub.ref(0, 762394);

procedure put_disk($p0: ref);
  free requires assertsPassed;



implementation put_disk($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    return;
}



const rbd_dev_device_release: ref;

axiom rbd_dev_device_release == $sub.ref(0, 763426);

procedure rbd_dev_device_release($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation rbd_dev_device_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} $p1 := dev_to_rbd_dev($p0);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} rbd_free_disk($p1);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2192)), $mul.ref(216, 1));
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} clear_bit(0, $p2);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} rbd_dev_mapping_clear($p1);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $i3 := $M.31;
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 2192)), $mul.ref(4, 1));
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 2192)), $mul.ref(40, 1));
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} unregister_blkdev($i6, $p8);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} rbd_dev_id_put($p1);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} rbd_dev_mapping_clear($p1);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_set_name: ref;

axiom dev_set_name == $sub.ref(0, 764458);

procedure dev_set_name.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_name.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1741} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1742} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const device_register: ref;

axiom device_register == $sub.ref(0, 765490);

procedure device_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1743} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1744} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_to_rbd_dev: ref;

axiom dev_to_rbd_dev == $sub.ref(0, 766522);

procedure dev_to_rbd_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_to_rbd_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 760), 2192));
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const rbd_snap_size: ref;

axiom rbd_snap_size == $sub.ref(0, 767554);

procedure rbd_snap_size($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.40, $M.0, $M.45, $M.46, $M.47, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_snap_size($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i14: i1;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i32;
  var $i31: i1;
  var $i32: i64;
  var $i23: i32;
  var vslice_dummy_var_217: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1746} {:cexpr "rbd_snap_size:arg:snap_id"} boogie_si_record_i64($i1);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} $i6 := rbd_image_format_valid($i5);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 1748} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 1750} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i1, $sub.i64(0, 2));
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $M.40 := $store.i64($M.40, $p3, 0);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} $i30 := _rbd_dev_v2_snap_size($p0, $i1, $0.ref, $p3);
    call {:si_unique_call 1756} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.40, $p3);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $M.38 := $store.i64($M.38, $p2, $i32);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb18:
    assume $i31 == 1;
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i23 := $i30;
    goto $bb15;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} $i21 := rbd_dev_snap_index($p0, $i1);
    call {:si_unique_call 1754} {:cexpr "which"} boogie_si_record_i32($i21);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, $sub.i32(0, 1));
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(64, 1));
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i21);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p26, $mul.ref($i27, 8));
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $M.38 := $store.i64($M.38, $p2, $i29);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 2);
    goto $bb15;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(40, 1));
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $M.38 := $store.i64($M.38, $p2, $i17);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} vslice_dummy_var_217 := printk.ref.ref.i32.ref(.str.8, .str.331, 1098, .str.246);
    call {:si_unique_call 1752} devirtbounce(0, .str.2, 1098, 12);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call rbd_snap_size_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const rbd_snap_features: ref;

axiom rbd_snap_features == $sub.ref(0, 768586);

procedure rbd_snap_features($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.41, $M.42, $M.43, $M.44, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_snap_features($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i14: i1;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i24: i64;
  var $i23: i32;
  var vslice_dummy_var_218: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1758} {:cexpr "rbd_snap_features:arg:snap_id"} boogie_si_record_i64($i1);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} $i6 := rbd_image_format_valid($i5);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 1760} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 1762} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i1, $sub.i64(0, 2));
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $M.41 := $store.i64($M.41, $p3, 0);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} $i21 := _rbd_dev_v2_snap_features($p0, $i1, $p3);
    call {:si_unique_call 1766} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.41, $p3);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $M.39 := $store.i64($M.39, $p2, $i24);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    goto $bb16;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $M.39 := $store.i64($M.39, $p2, 0);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(32, 1));
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $M.39 := $store.i64($M.39, $p2, $i17);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} vslice_dummy_var_218 := printk.ref.ref.i32.ref(.str.8, .str.332, 1125, .str.246);
    call {:si_unique_call 1764} devirtbounce(0, .str.2, 1125, 12);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call rbd_snap_features_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const rbd_image_format_valid: ref;

axiom rbd_image_format_valid == $sub.ref(0, 769618);

procedure rbd_image_format_valid($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation rbd_image_format_valid($i0: i32) returns ($r: i1)
{
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} {:cexpr "rbd_image_format_valid:arg:image_format"} boogie_si_record_i32($i0);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 2);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const _rbd_dev_v2_snap_features: ref;

axiom _rbd_dev_v2_snap_features == $sub.ref(0, 770650);

procedure _rbd_dev_v2_snap_features($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.43, $M.44, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation _rbd_dev_v2_snap_features($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i24;
  var $i21: i24;
  var $i22: i24;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $i31: i1;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i24;
  var $i47: i24;
  var $i48: i24;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $i59: i64;
  var $i32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1772} {:cexpr "_rbd_dev_v2_snap_features:arg:snap_id"} boogie_si_record_i64($i1);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $M.42 := $store.i64($M.42, $p3, $i1);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $M.43 := $store.i64($M.43, $p7, 0);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $M.44 := $store.i64($M.44, $p8, 0);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(240, 1));
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p3);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p4);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} $i13 := rbd_obj_method_sync($p0, $p10, .str, .str.280, $p11, 8, $p12, 16);
    call {:si_unique_call 1774} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p14, .str);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p15, .str.281);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p16, .str.2);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p17, .str.238);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $i20 := $load.i24($M.8, $p19);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $i21 := $and.i24($i20, $sub.i24(0, 262144));
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $i22 := $or.i24($i21, 4200);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p19, $i22);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p23, 0);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.9, $p24);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i64($i25);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 1);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 1776} {:cexpr "tmp___0"} boogie_si_record_i64($i28);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i13, 0);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i33 := $ule.i32($i13, 15);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.44, $p34);
    call {:si_unique_call 1779} {:cexpr "incompat"} boogie_si_record_i64($i35);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, $sub.i64(0, 4));
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.43, $p38);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i39);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p40, .str);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p41, .str.281);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p42, .str.2);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p43, .str.282);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $i46 := $load.i24($M.8, $p45);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $i47 := $and.i24($i46, $sub.i24(0, 262144));
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $i48 := $or.i24($i47, 4215);
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p45, $i48);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p49, 0);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.9, $p50);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i64($i51);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i52, 1);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 1781} {:cexpr "tmp___2"} boogie_si_record_i64($i54);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb14:
    assume $i55 == 1;
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} $p56 := ceph_file_part(.str.2, 199);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p2);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.44, $p58);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i64.i64.i64($p6, .str.283, 4, .str.5, $p56, 4215, $i1, $i57, $i59);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 6);
    goto $bb6;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 34);
    goto $bb6;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $i32 := $i13;
    goto $bb6;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} $p30 := ceph_file_part(.str.2, 199);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.i32($p5, .str.239, 4, .str.5, $p30, 4200, .str.281, $i13);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rbd_obj_method_sync: ref;

axiom rbd_obj_method_sync == $sub.ref(0, 771682);

procedure rbd_obj_method_sync($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $i5: i64, $p6: ref, $i7: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_obj_method_sync($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $i5: i64, $p6: ref, $i7: i64) returns ($r: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $i17: i8;
  var $i18: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i32;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $i65: i32;
  var $i66: i64;
  var $i67: i64;
  var $i68: i1;
  var $p70: ref;
  var $i71: i64;
  var $i72: i32;
  var $p73: ref;
  var $i74: i64;
  var $i26: i32;
  var $i75: i64;
  var $i76: i1;
  var $i22: i32;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} {:cexpr "rbd_obj_method_sync:arg:outbound_size"} boogie_si_record_i64($i5);
    call {:si_unique_call 1785} {:cexpr "rbd_obj_method_sync:arg:inbound_size"} boogie_si_record_i64($i7);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 3808)), $mul.ref(2608, 1));
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} $i13 := calc_pages_for(0, $i7);
    call {:si_unique_call 1787} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} $p14 := ceph_alloc_page_vector($i13, 208);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} $i16 := IS_ERR($p15);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 1790} {:cexpr "tmp___1"} boogie_si_record_i8($i17);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} $p23 := rbd_obj_request_create($p1, 0, $i7, 2);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p23, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p14);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p23, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i13);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} $p33 := rbd_osd_req_create($p0, 1, 1, $p23);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p23, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p33);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p23, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p23, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} osd_req_op_cls_init($p40, 0, 5121, $p2, $p3);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i5, 0);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p23, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p23, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} osd_req_op_cls_response_data_pages($p50, 0, $p54, $i7, 0, 0, 0);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} rbd_osd_req_format_read($p23);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} $i55 := rbd_obj_request_submit($p12, $p23);
    call {:si_unique_call 1803} {:cexpr "ret"} boogie_si_record_i32($i55);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} $i57 := rbd_obj_request_wait($p23);
    call {:si_unique_call 1805} {:cexpr "ret"} boogie_si_record_i32($i57);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p23, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    call {:si_unique_call 1806} {:cexpr "ret"} boogie_si_record_i32($i60);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i60, 0);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p23, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.0, $p62);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $i64 := $ugt.i64($i63, 2147483646);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $i65 := $zext.i1.i32($i64);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i65);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} $i67 := ldv__builtin_expect($i66, 0);
    call {:si_unique_call 1808} {:cexpr "tmp___3"} boogie_si_record_i64($i67);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p23, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.0, $p70);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i64.i32($i71);
    call {:si_unique_call 1811} {:cexpr "ret"} boogie_si_record_i32($i72);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p23, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.0, $p73);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} ceph_copy_from_page_vector($p14, $p6, 0, $i74);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $i26 := $i72;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p23);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i76 == 1);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} ceph_release_page_vector($p14, $i13);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i22 := $i26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb31:
    assume $i76 == 1;
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} rbd_obj_request_put($p23);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb27:
    assume $i68 == 1;
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} vslice_dummy_var_220 := printk.ref.ref.i32.ref(.str.8, .str.243, 3328, .str.244);
    call {:si_unique_call 1810} devirtbounce(0, .str.2, 3328, 12);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    call rbd_obj_method_sync_loop_$bb29();
    goto $bb29_last;

  $bb24:
    assume $i61 == 1;
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $i26 := $i60;
    goto $bb7;

  $bb21:
    assume $i58 == 1;
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $i26 := $i57;
    goto $bb7;

  $bb18:
    assume $i56 == 1;
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $i26 := $i55;
    goto $bb7;

  $bb12:
    assume $i41 == 1;
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} $p42 := kmalloc(72, 80);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} ceph_pagelist_init($p43);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} vslice_dummy_var_219 := ceph_pagelist_append($p43, $p4, $i5);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p23, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} osd_req_op_cls_request_data_pagelist($p48, 0, $p43);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i45 == 1;
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 12);
    goto $bb7;

  $bb9:
    assume $i38 == 1;
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 12);
    goto $bb7;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p14);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} $i20 := PTR_ERR($p19);
    call {:si_unique_call 1792} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i20);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb3;

  $bb29_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto $bb29_dummy;
}



const ceph_pagelist_init: ref;

axiom ceph_pagelist_init == $sub.ref(0, 772714);

procedure ceph_pagelist_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ceph_pagelist_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} INIT_LIST_HEAD($p1);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $0.ref);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, 0);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, 0);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} INIT_LIST_HEAD($p5);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p6, 0);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} atomic_set($p7, 1);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    return;
}



const ceph_pagelist_append: ref;

axiom ceph_pagelist_append == $sub.ref(0, 773746);

procedure ceph_pagelist_append($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation ceph_pagelist_append($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1818} {:cexpr "ceph_pagelist_append:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1819} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1820} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const osd_req_op_cls_request_data_pagelist: ref;

axiom osd_req_op_cls_request_data_pagelist == $sub.ref(0, 774778);

procedure osd_req_op_cls_request_data_pagelist($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation osd_req_op_cls_request_data_pagelist($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} {:cexpr "osd_req_op_cls_request_data_pagelist:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    return;
}



const osd_req_op_cls_response_data_pages: ref;

axiom osd_req_op_cls_response_data_pages == $sub.ref(0, 775810);

procedure osd_req_op_cls_response_data_pages($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i32, $i5: i1, $i6: i1);
  free requires assertsPassed;



implementation osd_req_op_cls_response_data_pages($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i32, $i5: i1, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} {:cexpr "osd_req_op_cls_response_data_pages:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1823} {:cexpr "osd_req_op_cls_response_data_pages:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 1824} {:cexpr "osd_req_op_cls_response_data_pages:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1825} {:cexpr "osd_req_op_cls_response_data_pages:arg:arg5"} boogie_si_record_i1($i5);
    call {:si_unique_call 1826} {:cexpr "osd_req_op_cls_response_data_pages:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    return;
}



const rbd_obj_request_wait: ref;

axiom rbd_obj_request_wait == $sub.ref(0, 776842);

procedure rbd_obj_request_wait($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation rbd_obj_request_wait($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} $i1 := __rbd_obj_request_wait($p0, 0);
    call {:si_unique_call 1828} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ceph_copy_from_page_vector: ref;

axiom ceph_copy_from_page_vector == $sub.ref(0, 777874);

procedure ceph_copy_from_page_vector($p0: ref, $p1: ref, $i2: i64, $i3: i64);
  free requires assertsPassed;



implementation ceph_copy_from_page_vector($p0: ref, $p1: ref, $i2: i64, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} {:cexpr "ceph_copy_from_page_vector:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1830} {:cexpr "ceph_copy_from_page_vector:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    return;
}



const rbd_dev_snap_index: ref;

axiom rbd_dev_snap_index == $sub.ref(0, 778906);

procedure rbd_dev_snap_index($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rbd_dev_snap_index($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i32;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i1);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(48, 1));
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(24, 1));
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} $p12 := bsearch($p6, $p8, $i11, 8, snapid_compare_reverse);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p13);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(24, 1));
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i19 := $sub.i64($i16, $i18);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $i20 := $sdiv.i64($i19, 8);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i20);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb3;
}



const _rbd_dev_v2_snap_size: ref;

axiom _rbd_dev_v2_snap_size == $sub.ref(0, 779938);

procedure _rbd_dev_v2_snap_size($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.45, $M.46, $M.47, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation _rbd_dev_v2_snap_size($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i24;
  var $i23: i24;
  var $i24: i24;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $i33: i1;
  var $i35: i1;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i39: i8;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i24;
  var $i47: i24;
  var $i48: i24;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i24;
  var $i68: i24;
  var $i69: i24;
  var $p70: ref;
  var $p71: ref;
  var $i72: i8;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $i78: i64;
  var $i34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1838} {:cexpr "_rbd_dev_v2_snap_size:arg:snap_id"} boogie_si_record_i64($i1);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $M.45 := $store.i64($M.45, $p4, $i1);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p9, 0);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $M.47 := $store.i64($M.47, $p10, 0);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(240, 1));
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p4);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p5);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} $i15 := rbd_obj_method_sync($p0, $p12, .str, .str.270, $p13, 8, $p14, 9);
    call {:si_unique_call 1840} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p16, .str);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p17, .str.271);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p18, .str.2);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p19, .str.238);
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $i22 := $load.i24($M.8, $p21);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $i23 := $and.i24($i22, $sub.i24(0, 262144));
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $i24 := $or.i24($i23, 4125);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p21, $i24);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p25, 0);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.9, $p26);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i64($i27);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 1);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 1842} {:cexpr "tmp___0"} boogie_si_record_i64($i30);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i15, 0);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i35 := $ule.i32($i15, 8);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p2);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.47, $p59);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i60);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p61, .str);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p62, .str.271);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p63, .str.2);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p64, .str.274);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $i67 := $load.i24($M.8, $p66);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $i68 := $and.i24($i67, $sub.i24(0, 262144));
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i69 := $or.i24($i68, 4139);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p66, $i69);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p70, 0);
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.9, $p71);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i64($i72);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $i74 := $and.i64($i73, 1);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} $i75 := ldv__builtin_expect($i74, 0);
    call {:si_unique_call 1850} {:cexpr "tmp___4"} boogie_si_record_i64($i75);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb17:
    assume $i76 == 1;
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} $p77 := ceph_file_part(.str.2, 199);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.0, $p3);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i64.i64($p8, .str.275, 4, .str.5, $p77, 4139, $i1, $i78);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.46, $p38);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, $i39);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p40, .str);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p41, .str.271);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p42, .str.2);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p43, .str.272);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $i46 := $load.i24($M.8, $p45);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $i47 := $and.i24($i46, $sub.i24(0, 262144));
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $i48 := $or.i24($i47, 4133);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p45, $i48);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p49, 0);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.9, $p50);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i64($i51);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i52, 1);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 1846} {:cexpr "tmp___2"} boogie_si_record_i64($i54);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i55 == 1;
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} $p56 := ceph_file_part(.str.2, 199);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p2);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i32($p7, .str.273, 4, .str.5, $p56, 4133, $i58);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i35 == 1;
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 34);
    goto $bb6;

  $bb4:
    assume $i33 == 1;
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $i34 := $i15;
    goto $bb6;

  $bb1:
    assume $i31 == 1;
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} $p32 := ceph_file_part(.str.2, 199);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.i32($p6, .str.239, 4, .str.5, $p32, 4125, .str.271, $i15);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snapid_compare_reverse: ref;

axiom snapid_compare_reverse == $sub.ref(0, 780970);

procedure snapid_compare_reverse($p0: ref, $p1: ref) returns ($r: i32);



const bsearch: ref;

axiom bsearch == $sub.ref(0, 782002);

procedure bsearch($p0: ref, $p1: ref, $i2: i64, $i3: i64, $p4: ref) returns ($r: ref);



const alloc_disk: ref;

axiom alloc_disk == $sub.ref(0, 783034);

procedure alloc_disk($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_disk($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} {:cexpr "alloc_disk:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} $p1 := external_alloc();
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const blk_mq_alloc_tag_set: ref;

axiom blk_mq_alloc_tag_set == $sub.ref(0, 784066);

procedure blk_mq_alloc_tag_set($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation blk_mq_alloc_tag_set($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1855} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1856} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const blk_mq_init_queue: ref;

axiom blk_mq_init_queue == $sub.ref(0, 785098);

procedure blk_mq_init_queue($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation blk_mq_init_queue($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} $p1 := external_alloc();
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const queue_flag_set_unlocked: ref;

axiom queue_flag_set_unlocked == $sub.ref(0, 786130);

procedure queue_flag_set_unlocked($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation queue_flag_set_unlocked($i0: i32, $p1: ref)
{
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} {:cexpr "queue_flag_set_unlocked:arg:flag"} boogie_si_record_i32($i0);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i0);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4208)), $mul.ref(2504, 1));
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} __set_bit($i2, $p3);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    return;
}



const blk_queue_max_hw_sectors: ref;

axiom blk_queue_max_hw_sectors == $sub.ref(0, 787162);

procedure blk_queue_max_hw_sectors($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_queue_max_hw_sectors($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} {:cexpr "blk_queue_max_hw_sectors:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    return;
}



const blk_queue_max_segments: ref;

axiom blk_queue_max_segments == $sub.ref(0, 788194);

procedure blk_queue_max_segments($p0: ref, $i1: i16);
  free requires assertsPassed;



implementation blk_queue_max_segments($p0: ref, $i1: i16)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} {:cexpr "blk_queue_max_segments:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    return;
}



const blk_queue_max_segment_size: ref;

axiom blk_queue_max_segment_size == $sub.ref(0, 789226);

procedure blk_queue_max_segment_size($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_queue_max_segment_size($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} {:cexpr "blk_queue_max_segment_size:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    return;
}



const blk_queue_io_min: ref;

axiom blk_queue_io_min == $sub.ref(0, 790258);

procedure blk_queue_io_min($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_queue_io_min($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} {:cexpr "blk_queue_io_min:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    return;
}



const blk_queue_io_opt: ref;

axiom blk_queue_io_opt == $sub.ref(0, 791290);

procedure blk_queue_io_opt($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_queue_io_opt($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} {:cexpr "blk_queue_io_opt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    return;
}



const rbd_merge_bvec: ref;

axiom rbd_merge_bvec == $sub.ref(0, 792322);

procedure rbd_merge_bvec($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const blk_queue_merge_bvec: ref;

axiom blk_queue_merge_bvec == $sub.ref(0, 793354);

procedure blk_queue_merge_bvec($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation blk_queue_merge_bvec($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    return;
}



const get_start_sect: ref;

axiom get_start_sect == $sub.ref(0, 794386);

procedure get_start_sect($p0: ref) returns ($r: i64);



const __set_bit: ref;

axiom __set_bit == $sub.ref(0, 795418);

procedure __set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation __set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} {:cexpr "__set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1866} devirtbounce.5(0, $p1, $i0, $p1);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    return;
}



const minor_to_rbd_dev_id: ref;

axiom minor_to_rbd_dev_id == $sub.ref(0, 796450);

procedure minor_to_rbd_dev_id($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation minor_to_rbd_dev_id($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} {:cexpr "minor_to_rbd_dev_id:arg:minor"} boogie_si_record_i32($i0);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $i1 := $ashr.i32($i0, 4);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ida_simple_get: ref;

axiom ida_simple_get == $sub.ref(0, 797482);

procedure ida_simple_get($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ida_simple_get($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1868} {:cexpr "ida_simple_get:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1869} {:cexpr "ida_simple_get:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1870} {:cexpr "ida_simple_get:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1871} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1872} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const rbd_dev_image_id: ref;

axiom rbd_dev_image_id == $sub.ref(0, 798514);

procedure rbd_dev_image_id($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.56, $M.58, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_image_id($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i24;
  var $i42: i24;
  var $i43: i24;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i24;
  var $i64: i24;
  var $i65: i24;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $i74: i1;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i83: i1;
  var $p84: ref;
  var $i85: i64;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $i81: i32;
  var $p82: ref;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i24;
  var $i104: i24;
  var $i105: i24;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i64;
  var $i110: i64;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;
  var $i55: i32;
  var $i20: i32;
  var vslice_dummy_var_221: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} $i25 := strlen($p24);
    call {:si_unique_call 1878} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 8);
    call {:si_unique_call 1879} {:cexpr "size"} boogie_si_record_i64($i26);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} $p27 := kmalloc($i26, 16);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} vslice_dummy_var_221 := sprintf.ref.ref.ref.ref($p27, .str.232, .str.233, $p33);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p35, .str);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p36, .str.234);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p37, .str.2);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p38, .str.235);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $i41 := $load.i24($M.8, $p40);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i42 := $and.i24($i41, $sub.i24(0, 262144));
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $i43 := $or.i24($i42, 5063);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p40, $i43);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p44, 0);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.9, $p45);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i64($i46);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $i48 := $and.i64($i47, 1);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} $i49 := ldv__builtin_expect($i48, 0);
    call {:si_unique_call 1883} {:cexpr "tmp___2"} boogie_si_record_i64($i49);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} $p52 := kzalloc(68, 16);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} $i56 := rbd_obj_method_sync($p0, $p27, .str, .str.237, $0.ref, 0, $p52, 64);
    call {:si_unique_call 1890} {:cexpr "ret"} boogie_si_record_i32($i56);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p57, .str);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p58, .str.234);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p59, .str.2);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p60, .str.238);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $i63 := $load.i24($M.8, $p62);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $i64 := $and.i24($i63, $sub.i24(0, 262144));
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $i65 := $or.i24($i64, 5079);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p62, $i65);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p66, 0);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.9, $p67);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i64($i68);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $i70 := $and.i64($i69, 1);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} $i71 := ldv__builtin_expect($i70, 0);
    call {:si_unique_call 1892} {:cexpr "tmp___4"} boogie_si_record_i64($i71);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i56, $sub.i32(0, 2));
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i74 == 1);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $i83 := $sge.i32($i56, 0);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i91, $p92 := $i56, $u1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i81, $p82 := $i91, $p92;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i81, 0);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i55 := $i81;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} kfree($p52);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} kfree($p27);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $i20 := $i55;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb30:
    assume $i93 == 1;
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p96, $p82);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p97, .str);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p98, .str.234);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p99, .str.2);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p100, .str.241);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $i103 := $load.i24($M.8, $p102);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i104 := $and.i24($i103, $sub.i24(0, 262144));
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i105 := $or.i24($i104, 5097);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p102, $i105);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p106, 0);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.9, $p107);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i64($i108);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $i110 := $and.i64($i109, 1);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} $i111 := ldv__builtin_expect($i110, 0);
    call {:si_unique_call 1901} {:cexpr "tmp___6"} boogie_si_record_i64($i111);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i111, 0);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i112 == 1;
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} $p113 := ceph_file_part(.str.2, 199);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref($p4, .str.242, 4, .str.5, $p113, 5097, $p82);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb24:
    assume $i83 == 1;
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $M.56 := $store.ref($M.56, $p3, $p52);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.56, $p3);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i56);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p84, $mul.ref($i85, 1));
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} $p87 := ceph_extract_encoded_string($p3, $p86, $0.ref, 16);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} $i88 := PTR_ERR_OR_ZERO($p87);
    call {:si_unique_call 1899} {:cexpr "ret"} boogie_si_record_i32($i88);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 0);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i91, $p92 := $i88, $p87;
    goto $bb29;

  $bb26:
    assume $i89 == 1;
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, 2);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb18:
    assume $i74 == 1;
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} $p75 := kstrdup(.str.240, 208);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i78 := (if $i77 == 1 then 0 else $sub.i32(0, 12));
    call {:si_unique_call 1896} {:cexpr "ret"} boogie_si_record_i32($i78);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 0);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i81, $p82 := $i78, $p75;
    goto $bb23;

  $bb20:
    assume $i79 == 1;
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, 1);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb15:
    assume $i72 == 1;
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} $p73 := ceph_file_part(.str.2, 199);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.i32($p2, .str.239, 4, .str.5, $p73, 5079, .str.234, $i56);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i54 == 1;
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32(0, 12);
    goto $bb13;

  $bb8:
    assume $i50 == 1;
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} $p51 := ceph_file_part(.str.2, 199);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref($p1, .str.236, 4, .str.5, $p51, 5063, $p27);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i29 == 1;
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $i16 := $sext.i8.i32($i15);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $i18 := (if $i17 == 1 then 2 else 1);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb3;
}



const rbd_dev_header_name: ref;

axiom rbd_dev_header_name == $sub.ref(0, 799546);

procedure rbd_dev_header_name($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rbd_dev_header_name($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i20: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i31: i32;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} $i5 := rbd_image_format_valid($i4);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 1905} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1907} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} $i23 := strlen($p22);
    call {:si_unique_call 1914} {:cexpr "tmp___3"} boogie_si_record_i64($i23);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 12);
    call {:si_unique_call 1915} {:cexpr "size"} boogie_si_record_i64($i24);
    assume {:verifier.code 0} true;
    $i20 := $i24;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} $p25 := kmalloc($i20, 208);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(240, 1));
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p25);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(240, 1));
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 1);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i34 == 1);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(240, 1));
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} vslice_dummy_var_224 := sprintf.ref.ref.ref.ref($p41, .str.232, .str.248, $p43);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb15:
    assume $i34 == 1;
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(240, 1));
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} vslice_dummy_var_223 := sprintf.ref.ref.ref.ref($p36, .str.232, $p38, .str.247);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 12);
    goto $bb13;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} $i18 := strlen($p17);
    call {:si_unique_call 1911} {:cexpr "tmp___2"} boogie_si_record_i64($i18);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 5);
    call {:si_unique_call 1912} {:cexpr "size"} boogie_si_record_i64($i19);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb10;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} vslice_dummy_var_222 := printk.ref.ref.i32.ref(.str.8, .str.245, 5278, .str.246);
    call {:si_unique_call 1909} devirtbounce(0, .str.2, 5278, 12);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call rbd_dev_header_name_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const rbd_dev_header_watch_sync: ref;

axiom rbd_dev_header_watch_sync == $sub.ref(0, 800578);

procedure rbd_dev_header_watch_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.21, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.19;



implementation rbd_dev_header_watch_sync($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i1;
  var $i32: i8;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i32;
  var $p40: ref;
  var $i28: i32;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3808)), $mul.ref(2608, 1));
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(280, 1));
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 1920} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(288, 1));
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 1924} {:cexpr "tmp___0"} boogie_si_record_i64($i21);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p0);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(280, 1));
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} $i26 := ceph_osdc_create_event($p5, rbd_watch_cb, $p24, $p25);
    call {:si_unique_call 1928} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, 0);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} $p29 := rbd_obj_watch_request_helper($p0, 1);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} $i31 := IS_ERR($p30);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i8($i31);
    call {:si_unique_call 1931} {:cexpr "tmp___2"} boogie_si_record_i8($i32);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i32);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(288, 1));
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p29);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(280, 1));
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} ceph_osdc_cancel_event($p35);
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(280, 1));
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $0.ref);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p29);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} $i38 := PTR_ERR($p37);
    call {:si_unique_call 1934} {:cexpr "tmp___1"} boogie_si_record_i64($i38);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i64.i32($i38);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $i28 := $i39;
    goto $bb11;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $i28 := $i26;
    goto $bb11;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} vslice_dummy_var_226 := printk.ref.ref.i32.ref(.str.8, .str.249, 3201, .str.251);
    call {:si_unique_call 1926} devirtbounce(0, .str.2, 3201, 12);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call rbd_dev_header_watch_sync_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} vslice_dummy_var_225 := printk.ref.ref.i32.ref(.str.8, .str.249, 3200, .str.250);
    call {:si_unique_call 1922} devirtbounce(0, .str.2, 3200, 12);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call rbd_dev_header_watch_sync_loop_$bb3();
    goto $bb3_last;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const rbd_dev_header_info: ref;

axiom rbd_dev_header_info == $sub.ref(0, 801610);

procedure rbd_dev_header_info($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.45, $M.46, $M.47, $M.56, $CurrAddr, $M.58, $M.42, $M.43, $M.44, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_header_info($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i16: i32;
  var $i15: i32;
  var vslice_dummy_var_227: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} $i3 := rbd_image_format_valid($i2);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1936} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1937} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 1938} {:cexpr "tmp___1"} boogie_si_record_i64($i8);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} $i16 := rbd_dev_v2_header_info($p0);
    call {:si_unique_call 1944} {:cexpr "tmp___3"} boogie_si_record_i32($i16);
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $i15 := $i16;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} $i14 := rbd_dev_v1_header_info($p0);
    call {:si_unique_call 1942} {:cexpr "tmp___2"} boogie_si_record_i32($i14);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb10;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} vslice_dummy_var_227 := printk.ref.ref.i32.ref(.str.8, .str.260, 4718, .str.246);
    call {:si_unique_call 1940} devirtbounce(0, .str.2, 4718, 12);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call rbd_dev_header_info_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const rbd_spec_fill_snap_id: ref;

axiom rbd_spec_fill_snap_id == $sub.ref(0, 802642);

procedure rbd_spec_fill_snap_id($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.59, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.56, $M.58, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_spec_fill_snap_id($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i6: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i20: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p48: ref;
  var $p49: ref;
  var $i47: i32;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i32;
  var vslice_dummy_var_230: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, $sub.i64(0, 1));
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $i6 := $i10;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i6);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 1946} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $i20 := 1;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i19 == 1);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $i20 := $i24;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i20);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 1950} {:cexpr "tmp___0"} boogie_si_record_i64($i27);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 1954} {:cexpr "tmp___1"} boogie_si_record_i64($i36);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} $i41 := strcmp($p40, .str.200);
    call {:si_unique_call 1958} {:cexpr "tmp___2"} boogie_si_record_i32($i41);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i42 == 1);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p49, $sub.i64(0, 2));
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $r := $i47;
    return;

  $bb19:
    assume $i42 == 1;
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} $i45 := rbd_snap_id_by_name($p0, $p44);
    call {:si_unique_call 1960} {:cexpr "snap_id"} boogie_si_record_i64($i45);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, $sub.i64(0, 2));
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, $i45);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb21:
    assume $i46 == 1;
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 2);
    goto $bb23;

  $bb15:
    assume $i37 == 1;
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} vslice_dummy_var_230 := printk.ref.ref.i32.ref(.str.8, .str.292, 4509, .str.295);
    call {:si_unique_call 1956} devirtbounce(0, .str.2, 4509, 12);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    call rbd_spec_fill_snap_id_loop_$bb17();
    goto $bb17_last;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} vslice_dummy_var_229 := printk.ref.ref.i32.ref(.str.8, .str.292, 4508, .str.294);
    call {:si_unique_call 1952} devirtbounce(0, .str.2, 4508, 12);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call rbd_spec_fill_snap_id_loop_$bb13();
    goto $bb13_last;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb9;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} vslice_dummy_var_228 := printk.ref.ref.i32.ref(.str.8, .str.292, 4507, .str.293);
    call {:si_unique_call 1948} devirtbounce(0, .str.2, 4507, 12);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call rbd_spec_fill_snap_id_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb17_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb13_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto $bb13_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const rbd_spec_fill_names: ref;

axiom rbd_spec_fill_names == $sub.ref(0, 803674);

procedure rbd_spec_fill_names($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.58, $M.56, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.59, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_spec_fill_names($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $i41: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $i52: i1;
  var $i53: i8;
  var $i54: i1;
  var $i55: i64;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i42: i32;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, $sub.i64(0, 1));
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 1962} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 1966} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, $sub.i64(0, 2));
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 1970} {:cexpr "tmp___1"} boogie_si_record_i64($i30);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    $p33 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3808)), $mul.ref(2608, 1)), $mul.ref(8, 1));
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} $p37 := ceph_pg_pool_name_by_id($p34, $i36);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 0);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} $p43 := kstrdup($p37, 208);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} $p46 := rbd_dev_image_name($p0);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, 0);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p49);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} $p51 := rbd_snap_name($p0, $i50);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} $i52 := IS_ERR($p51);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $i53 := $zext.i1.i8($i52);
    call {:si_unique_call 1980} {:cexpr "tmp___5"} boogie_si_record_i8($i53);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i8.i1($i53);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, $p43);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, $p46);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $p51);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb23:
    assume $i54 == 1;
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} $i55 := PTR_ERR($p51);
    call {:si_unique_call 1982} {:cexpr "tmp___4"} boogie_si_record_i64($i55);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i64.i32($i55);
    call {:si_unique_call 1983} {:cexpr "ret"} boogie_si_record_i32($i56);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} kfree($p46);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} kfree($p43);
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $i42 := $i56;
    goto $bb15;

  $bb20:
    assume $i48 == 1;
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} rbd_warn.ref.ref($p0, .str.305);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i45 == 1;
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 12);
    goto $bb15;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} rbd_warn.ref.ref.i64($p0, .str.304, $i41);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 5);
    goto $bb15;

  $bb9:
    assume $i31 == 1;
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} vslice_dummy_var_233 := printk.ref.ref.i32.ref(.str.8, .str.300, 4543, .str.303);
    call {:si_unique_call 1972} devirtbounce(0, .str.2, 4543, 12);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call rbd_spec_fill_names_loop_$bb11();
    goto $bb11_last;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} vslice_dummy_var_232 := printk.ref.ref.i32.ref(.str.8, .str.300, 4542, .str.302);
    call {:si_unique_call 1968} devirtbounce(0, .str.2, 4542, 12);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call rbd_spec_fill_names_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} vslice_dummy_var_231 := printk.ref.ref.i32.ref(.str.8, .str.300, 4541, .str.301);
    call {:si_unique_call 1964} devirtbounce(0, .str.2, 4541, 12);
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call rbd_spec_fill_names_loop_$bb3();
    goto $bb3_last;

  $bb11_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const rbd_dev_v2_parent_info: ref;

axiom rbd_dev_v2_parent_info == $sub.ref(0, 804706);

procedure rbd_dev_v2_parent_info($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.57, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.56, $M.58, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_v2_parent_info($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i24;
  var $i28: i24;
  var $i29: i24;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i1;
  var $i39: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i59: i1;
  var $p60: ref;
  var $i61: i1;
  var $i62: i8;
  var $i63: i1;
  var $i64: i64;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i64;
  var $i70: i64;
  var $i71: i1;
  var $i72: i64;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i1;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $p58: ref;
  var $p11: ref;
  var $i12: i32;
  var $i7: i32;
  var vslice_dummy_var_234: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} $p4 := rbd_spec_alloc();
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} $p8 := kmalloc(92, 208);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $M.57 := $store.i64($M.57, $p1, $i16);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(240, 1));
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} $i20 := rbd_obj_method_sync($p0, $p18, .str, .str.316, $p19, 8, $p8, 92);
    call {:si_unique_call 1994} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p21, .str);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p22, .str.317);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p23, .str.2);
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p24, .str.238);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $i27 := $load.i24($M.8, $p26);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $i28 := $and.i24($i27, $sub.i24(0, 262144));
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $i29 := $or.i24($i28, 4259);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p26, $i29);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p30, 0);
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.9, $p31);
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i64($i32);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 1);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 1996} {:cexpr "tmp___0"} boogie_si_record_i64($i35);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i20, 0);
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.56 := $store.ref($M.56, $p2, $p8);
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i20);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p8, $mul.ref($i39, 1));
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} $i41 := ceph_has_room($p2, $p40, 8);
    call {:si_unique_call 2000} {:cexpr "tmp___1"} boogie_si_record_i32($i41);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} $i45 := ldv__builtin_expect($i44, 1);
    call {:si_unique_call 2002} {:cexpr "tmp___2"} boogie_si_record_i64($i45);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} $i47 := ceph_decode_64($p2);
    call {:si_unique_call 2004} {:cexpr "pool_id"} boogie_si_record_i64($i47);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, $sub.i64(0, 1));
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i59 := $ugt.i64($i47, 4294967295);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} $p60 := ceph_extract_encoded_string($p2, $p40, $0.ref, 208);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} $i61 := IS_ERR($p60);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $i62 := $zext.i1.i8($i61);
    call {:si_unique_call 2010} {:cexpr "tmp___4"} boogie_si_record_i8($i62);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i8.i1($i62);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2014} $i66 := ceph_has_room($p2, $p40, 8);
    call {:si_unique_call 2015} {:cexpr "tmp___5"} boogie_si_record_i32($i66);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i67);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i68);
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} $i70 := ldv__builtin_expect($i69, 1);
    call {:si_unique_call 2017} {:cexpr "tmp___6"} boogie_si_record_i64($i70);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $i71 := $eq.i64($i70, 0);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} $i72 := ceph_decode_64($p2);
    call {:si_unique_call 2019} {:cexpr "snap_id"} boogie_si_record_i64($i72);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} $i73 := ceph_has_room($p2, $p40, 8);
    call {:si_unique_call 2021} {:cexpr "tmp___7"} boogie_si_record_i32($i73);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $i75 := $zext.i1.i32($i74);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i75);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} $i77 := ldv__builtin_expect($i76, 1);
    call {:si_unique_call 2023} {:cexpr "tmp___8"} boogie_si_record_i64($i77);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i77, 0);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} $i79 := ceph_decode_64($p2);
    call {:si_unique_call 2025} {:cexpr "overlap"} boogie_si_record_i64($i79);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(296, 1));
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $i83 := $eq.i64($i82, 0);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i83 == 1);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} kfree($p60);
    assume {:verifier.code 0} true;
    $p88 := $p4;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $i89 := $eq.i64($i79, 0);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(304, 1));
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p95, $i79);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $p58 := $p88;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $p11, $i12 := $p58, 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} kfree($p8);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} rbd_spec_put($p11);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb40:
    assume $i89 == 1;
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p88);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i91 == 1);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} rbd_warn.ref.ref($p0, .str.321);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb42:
    assume $i91 == 1;
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(304, 1));
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.0, $p92);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume $i94 == 1;
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2028} rbd_warn.ref.ref($p0, .str.320);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb37:
    assume $i83 == 1;
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p84, $i47);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p85, $p60);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p86, $i72);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(296, 1));
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p87, $p4);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $p88 := $0.ref;
    goto $bb39;

  $bb34:
    assume $i78 == 1;
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $p11, $i12 := $p4, $sub.i32(0, 5);
    goto $bb7;

  $bb31:
    assume $i71 == 1;
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $p11, $i12 := $p4, $sub.i32(0, 5);
    goto $bb7;

  $bb28:
    assume $i63 == 1;
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2011} $i64 := PTR_ERR($p60);
    call {:si_unique_call 2012} {:cexpr "tmp___3"} boogie_si_record_i64($i64);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i64.i32($i64);
    call {:si_unique_call 2013} {:cexpr "ret"} boogie_si_record_i32($i65);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $p11, $i12 := $p4, $i65;
    goto $bb7;

  $bb25:
    assume $i59 == 1;
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} rbd_warn.ref.ref.i64.i32($0.ref, .str.319, $i47, $sub.i32(0, 1));
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $p11, $i12 := $p4, $sub.i32(0, 5);
    goto $bb7;

  $bb18:
    assume $i48 == 1;
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(304, 1));
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p49);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p58 := $p4;
    goto $bb23;

  $bb20:
    assume $i51 == 1;
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(304, 1));
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p52, 0);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} rbd_dev_parent_put($p0);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} vslice_dummy_var_234 := printk.ref.ref(.str.318, $p56);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb15:
    assume $i46 == 1;
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $p11, $i12 := $p4, $sub.i32(0, 34);
    goto $bb7;

  $bb12:
    assume $i38 == 1;
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $p11, $i12 := $p4, $i20;
    goto $bb7;

  $bb9:
    assume $i36 == 1;
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} $p37 := ceph_file_part(.str.2, 199);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.i32($p3, .str.239, 4, .str.5, $p37, 4259, .str.317, $i20);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $p11, $i12 := $p4, $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;
}



const rbd_dev_probe_parent: ref;

axiom rbd_dev_probe_parent == $sub.ref(0, 805738);

procedure rbd_dev_probe_parent($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.56, $M.21, $M.57, $CurrAddr, $M.58, $M.45, $M.46, $M.47, $M.59, $M.13, $M.14, $M.18, $M.42, $M.43, $M.44, $M.20, $M.19;



implementation rbd_dev_probe_parent($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i15: i32;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(296, 1));
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(296, 1));
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} $p8 := rbd_spec_get($p7);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} $p11 := __rbd_get_client($p10);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2031} $p12 := rbd_dev_create($p11, $p8, $0.ref);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2032} $i16 := rbd_dev_image_probe($p12, 0);
    call {:si_unique_call 2033} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(320, 1));
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p12);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(312, 1));
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2034} atomic_set($p19, 1);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $i15 := $i16;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p12);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i21 == 1);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2038} rbd_put_client($p11);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} rbd_spec_put($p8);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i5 := $i15;
    goto $bb3;

  $bb12:
    assume $i21 == 1;
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} rbd_dev_unparent($p0);
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(240, 1));
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} kfree($p23);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} rbd_dev_destroy($p12);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const rbd_spec_get: ref;

axiom rbd_spec_get == $sub.ref(0, 806770);

procedure rbd_spec_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation rbd_spec_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} kref_get($p1);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __rbd_get_client: ref;

axiom __rbd_get_client == $sub.ref(0, 807802);

procedure __rbd_get_client($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __rbd_get_client($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} kref_get($p1);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const rbd_spec_alloc: ref;

axiom rbd_spec_alloc == $sub.ref(0, 808834);

procedure rbd_spec_alloc() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rbd_spec_alloc() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} $p0 := kzalloc(56, 208);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p5, $sub.i64(0, 1));
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p6, $sub.i64(0, 2));
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} kref_init($p7);
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $p4 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const ceph_has_room: ref;

axiom ceph_has_room == $sub.ref(0, 809866);

procedure ceph_has_room($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation ceph_has_room($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i7: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} {:cexpr "ceph_has_room:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.56, $p0);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i4, $i5);
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i7);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p1);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.56, $p0);
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64($i8, $i10);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $i12 := $uge.i64($i11, $i2);
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb3;
}



const ceph_decode_64: ref;

axiom ceph_decode_64 == $sub.ref(0, 810898);

procedure ceph_decode_64($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.56;



implementation ceph_decode_64($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.56, $p0);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} $i2 := get_unaligned_le64($p1);
    call {:si_unique_call 2046} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.56, $p0);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(8, 1));
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $M.56 := $store.ref($M.56, $p0, $p4);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ceph_extract_encoded_string: ref;

axiom ceph_extract_encoded_string == $sub.ref(0, 811930);

procedure ceph_extract_encoded_string($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.56, $M.0, $M.58, $CurrAddr;



implementation ceph_extract_encoded_string($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i23: i1;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i34: i64;
  var $p35: ref;
  var $p22: ref;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2048} {:cexpr "ceph_extract_encoded_string:arg:gfp"} boogie_si_record_i32($i3);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.56, $p0);
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $M.56 := $store.ref($M.56, $p4, $p5);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} $i6 := ceph_has_room($p4, $p1, 4);
    call {:si_unique_call 2050} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} $i10 := ldv__builtin_expect($i9, 1);
    call {:si_unique_call 2052} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} $i12 := ceph_decode_32($p4);
    call {:si_unique_call 2055} {:cexpr "len"} boogie_si_record_i32($i12);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} $i14 := ceph_has_room($p4, $p1, $i13);
    call {:si_unique_call 2057} {:cexpr "tmp___1"} boogie_si_record_i32($i14);
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i12, 1);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} $p18 := kmalloc($i17, $i3);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i12, 0);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i12);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p18, $mul.ref($i26, 1));
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 0);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.56, $p0);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i12);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 4);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p28, $mul.ref($i30, 1));
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    $M.56 := $store.ref($M.56, $p0, $p31);
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p2);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p22 := $p18;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $r := $p22;
    return;

  $bb15:
    assume $i33 == 1;
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i12);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $M.58 := $store.i64($M.58, $p2, $i34);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.56, $p4);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i12);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.0;
    cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 2060} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p18, $p24, $i25, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_34;
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} $p21 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $p22 := $p21;
    goto $bb10;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} $p35 := ERR_PTR($sub.i64(0, 34));
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $p22 := $p35;
    goto $bb10;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ceph_decode_32: ref;

axiom ceph_decode_32 == $sub.ref(0, 812962);

procedure ceph_decode_32($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.56;



implementation ceph_decode_32($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.56, $p0);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} $i2 := get_unaligned_le32($p1);
    call {:si_unique_call 2062} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.56, $p0);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 1));
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $M.56 := $store.ref($M.56, $p0, $p4);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const get_unaligned_le32: ref;

axiom get_unaligned_le32 == $sub.ref(0, 813994);

procedure get_unaligned_le32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_unaligned_le32($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} $i2 := __le32_to_cpup($p1);
    call {:si_unique_call 2064} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __le32_to_cpup: ref;

axiom __le32_to_cpup == $sub.ref(0, 815026);

procedure __le32_to_cpup($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __le32_to_cpup($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.0, $p0);
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const get_unaligned_le64: ref;

axiom get_unaligned_le64 == $sub.ref(0, 816058);

procedure get_unaligned_le64($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation get_unaligned_le64($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} $i2 := __le64_to_cpup($p1);
    call {:si_unique_call 2066} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __le64_to_cpup: ref;

axiom __le64_to_cpup == $sub.ref(0, 817090);

procedure __le64_to_cpup($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation __le64_to_cpup($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $i1 := $load.i64($M.0, $p0);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 818122);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 2068} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ceph_pg_pool_name_by_id: ref;

axiom ceph_pg_pool_name_by_id == $sub.ref(0, 819154);

procedure ceph_pg_pool_name_by_id($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ceph_pg_pool_name_by_id($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} {:cexpr "ceph_pg_pool_name_by_id:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} $p2 := external_alloc();
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kstrdup: ref;

axiom kstrdup == $sub.ref(0, 820186);

procedure kstrdup($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kstrdup($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} {:cexpr "kstrdup:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} $p2 := external_alloc();
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const rbd_dev_image_name: ref;

axiom rbd_dev_image_name == $sub.ref(0, 821218);

procedure rbd_dev_image_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.58, $M.56, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_image_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i32;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i1;
  var $i43: i8;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i24;
  var $i53: i24;
  var $i54: i24;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $i63: i64;
  var $p45: ref;
  var $p36: ref;
  var $p25: ref;
  var vslice_dummy_var_235: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2076} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    $M.58 := $store.i64($M.58, $p2, 0);
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 2078} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} $i19 := strlen($p18);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $M.58 := $store.i64($M.58, $p2, $i19);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.58, $p2);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 4);
    call {:si_unique_call 2082} {:cexpr "image_id_size"} boogie_si_record_i64($i21);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} $p22 := kmalloc($i21, 208);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $M.56 := $store.ref($M.56, $p1, $p22);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p22, $mul.ref($i21, 1));
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.58, $p2);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32($i31);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} ceph_encode_string($p1, $p26, $p30, $i32);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} $p33 := kmalloc(4095, 208);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} $i37 := rbd_obj_method_sync($p0, .str.308, .str, .str.309, $p22, $i21, $p33, 4095);
    call {:si_unique_call 2089} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 0);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.56 := $store.ref($M.56, $p1, $p33);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i37);
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p33, $mul.ref($i39, 1));
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} $p41 := ceph_extract_encoded_string($p1, $p40, $p2, 208);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} $i42 := IS_ERR($p41);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i8($i42);
    call {:si_unique_call 2092} {:cexpr "tmp___3"} boogie_si_record_i8($i43);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i8.i1($i43);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i44 == 1);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p46, .str);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p47, .str.306);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p48, .str.2);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p49, .str.310);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $i52 := $load.i24($M.8, $p51);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $i53 := $and.i24($i52, $sub.i24(0, 262144));
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $i54 := $or.i24($i53, 4437);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p51, $i54);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p55, 0);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.9, $p56);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i64($i57);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $i59 := $and.i64($i58, 1);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} $i60 := ldv__builtin_expect($i59, 0);
    call {:si_unique_call 2094} {:cexpr "tmp___2"} boogie_si_record_i64($i60);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p45 := $p41;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $p36 := $p45;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} kfree($p33);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} kfree($p22);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $p25 := $p36;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $r := $p25;
    return;

  $bb19:
    assume $i61 == 1;
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} $p62 := ceph_file_part(.str.2, 199);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.58, $p2);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2096} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref.i64($p3, .str.311, 4, .str.5, $p62, 4437, .str.306, $p41, $i63);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i44 == 1;
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $p45 := $0.ref;
    goto $bb18;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $p36 := $0.ref;
    goto $bb11;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $p36 := $0.ref;
    goto $bb11;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $p25 := $0.ref;
    goto $bb7;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} vslice_dummy_var_235 := printk.ref.ref.i32.ref(.str.8, .str.306, 4407, .str.307);
    call {:si_unique_call 2080} devirtbounce(0, .str.2, 4407, 12);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call rbd_dev_image_name_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const rbd_snap_name: ref;

axiom rbd_snap_name == $sub.ref(0, 822250);

procedure rbd_snap_name($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.59, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.56, $M.58, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_snap_name($p0: ref, $i1: i64) returns ($r: ref)
{
  var $i2: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p3: ref;
  var vslice_dummy_var_236: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} {:cexpr "rbd_snap_name:arg:snap_id"} boogie_si_record_i64($i1);
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, $sub.i64(0, 2));
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} $i6 := rbd_image_format_valid($i5);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 2099} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 2101} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 1);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} $p18 := rbd_dev_v2_snap_name($p0, $i1);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $p3 := $p18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} $p17 := rbd_dev_v1_snap_name($p0, $i1);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $p3 := $p17;
    goto $bb3;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2102} vslice_dummy_var_236 := printk.ref.ref.i32.ref(.str.8, .str.313, 1088, .str.246);
    call {:si_unique_call 2103} devirtbounce(0, .str.2, 1088, 12);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call rbd_snap_name_loop_$bb10();
    goto $bb10_last;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $p3 := .str.200;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;
}



const rbd_dev_v1_snap_name: ref;

axiom rbd_dev_v1_snap_name == $sub.ref(0, 823282);

procedure rbd_dev_v1_snap_name($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rbd_dev_v1_snap_name($p0: ref, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2106} {:cexpr "rbd_dev_v1_snap_name:arg:snap_id"} boogie_si_record_i64($i1);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} $i2 := rbd_dev_snap_index($p0, $i1);
    call {:si_unique_call 2108} {:cexpr "which"} boogie_si_record_i32($i2);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2110} $p6 := _rbd_dev_v1_snap_name($p0, $i2);
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p10 := $p6;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $p5 := $p10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} $p9 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $p10 := $p9;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} $p4 := ERR_PTR($sub.i64(0, 2));
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $p5 := $p4;
    goto $bb3;
}



const rbd_dev_v2_snap_name: ref;

axiom rbd_dev_v2_snap_name == $sub.ref(0, 824314);

procedure rbd_dev_v2_snap_name($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.59, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.56, $M.58, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_v2_snap_name($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $i32: i1;
  var $i33: i64;
  var $p34: ref;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i1;
  var $i40: i8;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i24;
  var $i49: i24;
  var $i50: i24;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p35: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2112} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 2116} {:cexpr "rbd_dev_v2_snap_name:arg:snap_id"} boogie_si_record_i64($i1);
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} $p6 := kmalloc(254, 208);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.59 := $store.i64($M.59, $p2, $i1);
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(240, 1));
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} $i14 := rbd_obj_method_sync($p0, $p12, .str, .str.296, $p13, 8, $p6, 254);
    call {:si_unique_call 2120} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p15, .str);
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p16, .str.297);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p17, .str.2);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p18, .str.238);
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.8, $p20);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 4675);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p20, $i23);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p24, 0);
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.9, $p25);
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 2122} {:cexpr "tmp___1"} boogie_si_record_i64($i29);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i14, 0);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $M.56 := $store.ref($M.56, $p3, $p6);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i14);
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p6, $mul.ref($i36, 1));
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} $p38 := ceph_extract_encoded_string($p3, $p37, $0.ref, 208);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} $i39 := IS_ERR($p38);
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i8($i39);
    call {:si_unique_call 2129} {:cexpr "tmp___3"} boogie_si_record_i8($i40);
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i40);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p42, .str);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p43, .str.297);
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p44, .str.2);
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p45, .str.298);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $i48 := $load.i24($M.8, $p47);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $i49 := $and.i24($i48, $sub.i24(0, 262144));
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $i50 := $or.i24($i49, 4688);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p47, $i50);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p51, 0);
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.9, $p52);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i64($i53);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $i55 := $and.i64($i54, 1);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2130} $i56 := ldv__builtin_expect($i55, 0);
    call {:si_unique_call 2131} {:cexpr "tmp___5"} boogie_si_record_i64($i56);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p35 := $p38;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} kfree($p6);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $p10 := $p35;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb15:
    assume $i57 == 1;
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} $p58 := ceph_file_part(.str.2, 199);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i64.ref($p5, .str.299, 4, .str.5, $p58, 4688, $i1, $p38);
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i41 == 1;
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $p35 := $p38;
    goto $bb10;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i14);
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} $p34 := ERR_PTR($i33);
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $p35 := $p34;
    goto $bb10;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} $p31 := ceph_file_part(.str.2, 199);
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.i32($p4, .str.239, 4, .str.5, $p31, 4675, .str.297, $i14);
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} $p9 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $p10 := $p9;
    goto $bb3;
}



const _rbd_dev_v1_snap_name: ref;

axiom _rbd_dev_v1_snap_name == $sub.ref(0, 825346);

procedure _rbd_dev_v1_snap_name($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation _rbd_dev_v1_snap_name($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i19: i32;
  var $p20: ref;
  var $p26: ref;
  var $p18: ref;
  var $p27: ref;
  var vslice_dummy_var_237: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} {:cexpr "_rbd_dev_v1_snap_name:arg:which"} boogie_si_record_i32($i1);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(48, 1));
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $i7 := $ule.i32($i6, $i1);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 2136} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(56, 1));
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 2139} {:cexpr "_rbd_dev_v1_snap_name:arg:tmp___1"} boogie_si_record_i32($i1);
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i1, 1);
    call {:si_unique_call 2140} {:cexpr "which"} boogie_si_record_i32($i16);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i1, 0);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    $p18 := $p15;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2144} $p27 := kstrdup($p18, 208);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $r := $p27;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    $i19, $p20 := $i16, $p15;
    goto $bb8;

  $bb8:
    call $i21, $i22, $p23, $i24, $i25, $i19, $p20, $p26 := _rbd_dev_v1_snap_name_loop_$bb8($i21, $i22, $p23, $i24, $i25, $i19, $p20, $p26);
    goto $bb8_last;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} $i21 := strlen($p20);
    call {:si_unique_call 2142} {:cexpr "tmp___0"} boogie_si_record_i64($i21);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 1);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p20, $mul.ref($i22, 1));
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i19, 1);
    call {:si_unique_call 2143} {:cexpr "which"} boogie_si_record_i32($i24);
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i19, 0);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $p26 := $p23;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    $p18 := $p26;
    goto $bb7;

  $bb10:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i19, $p20 := $i24, $p23;
    goto $bb10_dummy;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} vslice_dummy_var_237 := printk.ref.ref.i32.ref(.str.8, .str.314, 1023, .str.315);
    call {:si_unique_call 2138} devirtbounce(0, .str.2, 1023, 12);
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call _rbd_dev_v1_snap_name_loop_$bb3();
    goto $bb3_last;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9175;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ceph_encode_string: ref;

axiom ceph_encode_string == $sub.ref(0, 826378);

procedure ceph_encode_string($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.0, $M.56;



implementation ceph_encode_string($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} {:cexpr "ceph_encode_string:arg:len"} boogie_si_record_i32($i3);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.56, $p0);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i3);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 4);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p4, $mul.ref($i6, 1));
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i64($i8, $i9);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 2147} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} ceph_encode_32($p0, $i3);
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i3, 0);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.56, $p0);
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i3);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p18, $mul.ref($i19, 1));
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $M.56 := $store.ref($M.56, $p0, $p20);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.56, $p0);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i3);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.0;
    cmdloc_dummy_var_36 := $M.0;
    call {:si_unique_call 2150} cmdloc_dummy_var_37 := $memcpy.i8(cmdloc_dummy_var_35, cmdloc_dummy_var_36, $p16, $p2, $i17, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_37;
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i14 == 1;
    call {:si_unique_call 2148} devirtbounce(0, .str.312, 213, 12);
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call ceph_encode_string_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ceph_encode_32: ref;

axiom ceph_encode_32 == $sub.ref(0, 827410);

procedure ceph_encode_32($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.56, $M.0;



implementation ceph_encode_32($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2151} {:cexpr "ceph_encode_32:arg:v"} boogie_si_record_i32($i1);
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.56, $p0);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2152} put_unaligned_le32($i1, $p2);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.56, $p0);
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 1));
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $M.56 := $store.ref($M.56, $p0, $p4);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    return;
}



const put_unaligned_le32: ref;

axiom put_unaligned_le32 == $sub.ref(0, 828442);

procedure put_unaligned_le32($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation put_unaligned_le32($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} {:cexpr "put_unaligned_le32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i0);
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    return;
}



const strcmp: ref;

axiom strcmp == $sub.ref(0, 829474);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const rbd_snap_id_by_name: ref;

axiom rbd_snap_id_by_name == $sub.ref(0, 830506);

procedure rbd_snap_id_by_name($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.59, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.56, $M.58, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_snap_id_by_name($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $i7: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2156} $i7 := rbd_v2_snap_id_by_name($p0, $p1);
    call {:si_unique_call 2157} {:cexpr "tmp___0"} boogie_si_record_i64($i7);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2154} $i5 := rbd_v1_snap_id_by_name($p0, $p1);
    call {:si_unique_call 2155} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const rbd_v1_snap_id_by_name: ref;

axiom rbd_v1_snap_id_by_name == $sub.ref(0, 831538);

procedure rbd_v1_snap_id_by_name($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rbd_v1_snap_id_by_name($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $p18: ref;
  var $i19: i64;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i11: i32;
  var $p12: ref;
  var $i20: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(48, 1));
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(56, 1));
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i32($i9, 0);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i20 := $sub.i64(0, 2);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $i11, $p12 := 0, $p7;
    goto $bb4;

  $bb4:
    call $i13, $i14, $i15, $i21, $i22, $p23, $i24, $i25, $i26, $i11, $p12 := rbd_v1_snap_id_by_name_loop_$bb4($p1, $p8, $i13, $i14, $i15, $i21, $i22, $p23, $i24, $i25, $i26, $i11, $p12);
    goto $bb4_last;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2158} $i13 := strcmp($p1, $p12);
    call {:si_unique_call 2159} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $i15 := $i11;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} $i21 := strlen($p12);
    call {:si_unique_call 2161} {:cexpr "tmp___0"} boogie_si_record_i64($i21);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 1);
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p12, $mul.ref($i22, 1));
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i11, 1);
    call {:si_unique_call 2162} {:cexpr "which"} boogie_si_record_i32($i24);
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p8);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $i26 := $ugt.i32($i25, $i24);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i11, $p12 := $i24, $p23;
    goto $bb10_dummy;

  $bb6:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(24, 1)), $mul.ref($i16, 8));
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9249;
}



const rbd_v2_snap_id_by_name: ref;

axiom rbd_v2_snap_id_by_name == $sub.ref(0, 832570);

procedure rbd_v2_snap_id_by_name($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.59, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.56, $M.58, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_v2_snap_id_by_name($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i8: i64;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i16: i64;
  var $i17: i1;
  var $i18: i8;
  var $i19: i64;
  var $i23: i32;
  var $i24: i1;
  var $i25: i8;
  var $i20: i8;
  var $i26: i32;
  var $i27: i1;
  var $i5: i64;
  var $i6: i8;
  var $i7: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i28: i8;
  var $i29: i64;
  var $i21: i8;
  var $i22: i64;
  var $i33: i1;
  var $i34: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(48, 1));
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $i5, $i6, $i7 := $u2, 0, 0;
    goto $bb1;

  $bb1:
    call $i8, $p10, $i11, $p12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i23, $i24, $i25, $i20, $i26, $i27, $i5, $i6, $i7, $p30, $i31, $i32, $i28, $i29 := rbd_v2_snap_id_by_name_loop_$bb1($p0, $p1, $p4, $i8, $p10, $i11, $p12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i23, $i24, $i25, $i20, $i26, $i27, $i5, $i6, $i7, $p30, $i31, $i32, $i28, $i29);
    goto $bb1_last;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $i32 := $ugt.i32($i31, $i7);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $i28, $i29 := $i6, $i5;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i21, $i22 := $i28, $i29;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i21);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i33 == 1);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $i34 := $sub.i64(0, 2);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb16:
    assume $i33 == 1;
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $i34 := $i22;
    goto $bb18;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(24, 1)), $mul.ref($i8, 8));
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    call {:si_unique_call 2163} {:cexpr "snap_id"} boogie_si_record_i64($i11);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2164} $p12 := rbd_dev_v2_snap_name($p0, $i11);
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} $i13 := IS_ERR($p12);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 2166} {:cexpr "tmp___0"} boogie_si_record_i8($i14);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} $i23 := strcmp($p1, $p12);
    call {:si_unique_call 2171} {:cexpr "tmp___1"} boogie_si_record_i32($i23);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i8($i24);
    call {:si_unique_call 2172} {:cexpr "found"} boogie_si_record_i8($i25);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} kfree($p12);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $i20 := $i25;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i7, 1);
    call {:si_unique_call 2169} {:cexpr "which"} boogie_si_record_i32($i26);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i20);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $i28, $i29 := $i20, $i11;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i5, $i6, $i7 := $i11, $i20, $i26;
    goto $bb12_dummy;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb11;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} $i16 := PTR_ERR($p12);
    call {:si_unique_call 2168} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, $sub.i64(0, 2));
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i6, $i11;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    $i21, $i22 := $i18, $i19;
    goto $bb8;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $i20 := $i6;
    goto $bb7;

  $bb12_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9274;
}



const rbd_dev_v1_header_info: ref;

axiom rbd_dev_v1_header_info == $sub.ref(0, 833602);

procedure rbd_dev_v1_header_info($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_v1_header_info($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i8: i64;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i30: i64;
  var $i31: i1;
  var $i32: i64;
  var $p33: ref;
  var $i34: i1;
  var $i35: i8;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $p28: ref;
  var $i29: i32;
  var $p47: ref;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2174} kfree($0.ref);
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} $p1 := kmalloc(112, 208);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $p5, $i6, $i7 := $p1, 112, 0;
    goto $bb4;

  $bb4:
    call $i8, $i9, $p10, $p11, $i12, $i13, $i14, $i15, $p16, $p17, $i18, $i19, $p5, $i6, $i7, $p21, $p22, $p23, $i24, $i25, $p26, $i27, $i30, $i31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $p39, $p40, $i41, $p42, $i43, $i44, $p45 := rbd_dev_v1_header_info_loop_$bb4($p0, $i8, $i9, $p10, $p11, $i12, $i13, $i14, $i15, $p16, $p17, $i18, $i19, $p5, $i6, $i7, $p21, $p22, $p23, $i24, $i25, $p26, $i27, $i30, $i31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $p39, $p40, $i41, $p42, $i43, $i44, $p45);
    goto $bb4_last;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(240, 1));
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p5);
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2180} $i24 := rbd_obj_read_sync($p0, $p22, 0, $i6, $p23);
    call {:si_unique_call 2181} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $p26, $i27 := $p5, $i24;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i24);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $i31 := $ult.i64($i30, $i6);
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    $i32, $p33 := $i6, $p5;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} $i34 := rbd_dev_ondisk_valid($p5);
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i8($i34);
    call {:si_unique_call 2185} {:cexpr "tmp___0"} boogie_si_record_i8($i35);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $p39 := $p5;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    call {:si_unique_call 2187} {:cexpr "names_size"} boogie_si_record_i64($i41);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    call {:si_unique_call 2188} {:cexpr "snap_count"} boogie_si_record_i32($i43);
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, $i7);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $i8, $i9, $p10, $p45 := $i41, $i43, $p5, $p5;
    assume true;
    goto $bb5, $bb23;

  $bb23:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} $i46 := rbd_header_from_disk($p0, $p45);
    call {:si_unique_call 2190} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $p28, $i29 := $p45, $i46;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p28);
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2182} kfree($p47);
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $i20 := $i29;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb5:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} kfree($p11);
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i9);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $i13 := $mul.i64($i12, 16);
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 112);
    call {:si_unique_call 2177} {:cexpr "size"} boogie_si_record_i64($i14);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, $i8);
    call {:si_unique_call 2178} {:cexpr "size"} boogie_si_record_i64($i15);
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} $p16 := kmalloc($i15, 208);
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $p5, $i6, $i7 := $p16, $i15, $i9;
    goto $bb7_dummy;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 12);
    goto $bb8;

  $bb20:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} rbd_warn.ref.ref($p0, .str.262);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $p28, $i29 := $p39, $sub.i32(0, 6);
    goto $bb12;

  $bb17:
    assume $i36 == 1;
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb19;

  $bb14:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} rbd_warn.ref.ref.i64.i32($p0, .str.261, $i32, $sub.i32(0, 6));
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $p28, $i29 := $p33, $sub.i32(0, 6);
    goto $bb12;

  $bb10:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    $p28, $i29 := $p26, $i27;
    goto $bb12;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb7_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;
}



const rbd_dev_v2_header_info: ref;

axiom rbd_dev_v2_header_info == $sub.ref(0, 834634);

procedure rbd_dev_v2_header_info($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.45, $M.46, $M.47, $M.0, $M.56, $CurrAddr, $M.58, $M.42, $M.43, $M.44, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_v2_header_info($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2191} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 2192} {:cexpr "first_time"} boogie_si_record_i8($i7);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2193} $i8 := rbd_dev_v2_image_size($p0);
    call {:si_unique_call 2194} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i7);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2197} $i14 := rbd_dev_v2_snap_context($p0);
    call {:si_unique_call 2198} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p15, .str);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p16, .str.267);
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p17, .str.2);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p18, .str.268);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.8, $p20);
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 4711);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p20, $i23);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p24, 0);
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.9, $p25);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2199} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 2200} {:cexpr "tmp___0"} boogie_si_record_i64($i29);
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2201} $p31 := ceph_file_part(.str.2, 199);
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2202} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i32($p1, .str.269, 4, .str.5, $p31, 4711, $i14);
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2195} $i12 := rbd_dev_v2_header_onetime($p0);
    call {:si_unique_call 2196} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;
}



const rbd_dev_v2_image_size: ref;

axiom rbd_dev_v2_image_size == $sub.ref(0, 835666);

procedure rbd_dev_v2_image_size($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.45, $M.46, $M.47, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_v2_image_size($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(8, 1));
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(40, 1));
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2203} $i5 := _rbd_dev_v2_snap_size($p0, $sub.i64(0, 2), $p2, $p4);
    call {:si_unique_call 2204} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const rbd_dev_v2_header_onetime: ref;

axiom rbd_dev_v2_header_onetime == $sub.ref(0, 836698);

procedure rbd_dev_v2_header_onetime($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.56, $M.58, $M.42, $M.43, $M.44, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_v2_header_onetime($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i3: i32;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2205} $i1 := rbd_dev_v2_object_prefix($p0);
    call {:si_unique_call 2206} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2208} $i4 := rbd_dev_v2_features($p0);
    call {:si_unique_call 2209} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(32, 1));
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    $i9 := $and.i64($i8, 2);
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2210} $i11 := rbd_dev_v2_striping_info($p0);
    call {:si_unique_call 2211} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    $i3 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(32, 1));
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, 0);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2207} kfree($p18);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $0.ref);
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $i13 := $i3;
    goto $bb14;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const rbd_dev_v2_snap_context: ref;

axiom rbd_dev_v2_snap_context == $sub.ref(0, 837730);

procedure rbd_dev_v2_snap_context($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.56, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_v2_snap_context($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i1;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $i38: i64;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $i45: i32;
  var $i46: i64;
  var $i47: i64;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $i54: i1;
  var $i56: i64;
  var $i57: i64;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i55: i32;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i24;
  var $i74: i24;
  var $i75: i24;
  var $p76: ref;
  var $p77: ref;
  var $i78: i8;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $i29: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2212} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2213} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2214} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} $p4 := kzalloc(4092, 208);
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(240, 1));
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2216} $i10 := rbd_obj_method_sync($p0, $p9, .str, .str.288, $0.ref, 0, $p4, 4092);
    call {:si_unique_call 2217} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str);
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p12, .str.289);
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p13, .str.2);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p14, .str.238);
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.8, $p16);
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 4609);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p16, $i19);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p20, 0);
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.9, $p21);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 2219} {:cexpr "tmp___0"} boogie_si_record_i64($i25);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i10, 0);
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $M.56 := $store.ref($M.56, $p1, $p4);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i10);
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p4, $mul.ref($i30, 1));
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2223} $i32 := ceph_has_room($p1, $p31, 8);
    call {:si_unique_call 2224} {:cexpr "tmp___1"} boogie_si_record_i32($i32);
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2225} $i36 := ldv__builtin_expect($i35, 1);
    call {:si_unique_call 2226} {:cexpr "tmp___2"} boogie_si_record_i64($i36);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2227} $i38 := ceph_decode_64($p1);
    call {:si_unique_call 2228} {:cexpr "seq"} boogie_si_record_i64($i38);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2229} $i39 := ceph_has_room($p1, $p31, 4);
    call {:si_unique_call 2230} {:cexpr "tmp___3"} boogie_si_record_i32($i39);
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i32($i40);
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2231} $i43 := ldv__builtin_expect($i42, 1);
    call {:si_unique_call 2232} {:cexpr "tmp___4"} boogie_si_record_i64($i43);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} $i45 := ceph_decode_32($p1);
    call {:si_unique_call 2234} {:cexpr "snap_count"} boogie_si_record_i32($i45);
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $i46 := $zext.i32.i64($i45);
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $i47 := $mul.i64($i46, 8);
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} $i48 := ceph_has_room($p1, $p31, $i47);
    call {:si_unique_call 2236} {:cexpr "tmp___5"} boogie_si_record_i32($i48);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2237} $p50 := ceph_create_snap_context($i45, 208);
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p50, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p53, $i38);
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $i54 := $ult.i32(0, $i45);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(48, 1));
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2240} ceph_put_snap_context($p64);
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(48, 1));
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $p50);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p67, .str);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p68, .str.289);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p69, .str.2);
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p70, .str.290);
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $i73 := $load.i24($M.8, $p72);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    $i74 := $and.i24($i73, $sub.i24(0, 262144));
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    $i75 := $or.i24($i74, 4647);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p72, $i75);
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p76, 0);
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.9, $p77);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i64($i78);
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $i80 := $and.i64($i79, 1);
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2241} $i81 := ldv__builtin_expect($i80, 0);
    call {:si_unique_call 2242} {:cexpr "tmp___7"} boogie_si_record_i64($i81);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2222} kfree($p4);
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $i7 := $i29;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb32:
    assume $i82 == 1;
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} $p83 := ceph_file_part(.str.2, 199);
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2244} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i64.i32($p3, .str.291, 4, .str.5, $p83, 4647, $i38, $i45);
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb24:
    assume $i54 == 1;
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb27;

  $bb27:
    call $i56, $i57, $p59, $i60, $i61, $i55 := rbd_dev_v2_snap_context_loop_$bb27($p1, $i45, $p50, $i56, $i57, $p59, $i60, $i61, $i55);
    goto $bb27_last;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2238} $i56 := ceph_decode_64($p1);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $i57 := $zext.i32.i64($i55);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p50, $mul.ref(0, 24)), $mul.ref(24, 1)), $mul.ref($i57, 8));
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p59, $i56);
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i55, 1);
    call {:si_unique_call 2239} {:cexpr "i"} boogie_si_record_i32($i60);
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    $i61 := $ult.i32($i60, $i45);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i61 == 1);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb29:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i55 := $i60;
    goto $bb29_dummy;

  $bb21:
    assume $i52 == 1;
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 12);
    goto $bb10;

  $bb18:
    assume $i49 == 1;
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 34);
    goto $bb10;

  $bb15:
    assume $i44 == 1;
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 34);
    goto $bb10;

  $bb12:
    assume $i37 == 1;
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 34);
    goto $bb10;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $i29 := $i10;
    goto $bb10;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} $p27 := ceph_file_part(.str.2, 199);
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2221} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.i32($p2, .str.239, 4, .str.5, $p27, 4609, .str.289, $i10);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  $bb29_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9553;
}



const ceph_create_snap_context: ref;

axiom ceph_create_snap_context == $sub.ref(0, 838762);

procedure ceph_create_snap_context($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation ceph_create_snap_context($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2245} {:cexpr "ceph_create_snap_context:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2246} {:cexpr "ceph_create_snap_context:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2247} $p2 := external_alloc();
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const rbd_dev_v2_object_prefix: ref;

axiom rbd_dev_v2_object_prefix == $sub.ref(0, 839794);

procedure rbd_dev_v2_object_prefix($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.56, $M.58, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_v2_object_prefix($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i1;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i1;
  var $i40: i8;
  var $i41: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i32;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i24;
  var $i57: i24;
  var $i58: i24;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p68: ref;
  var $p69: ref;
  var $i49: i32;
  var $i29: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2249} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2251} $p4 := kzalloc(64, 208);
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(240, 1));
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2252} $i10 := rbd_obj_method_sync($p0, $p9, .str, .str.276, $0.ref, 0, $p4, 64);
    call {:si_unique_call 2253} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str);
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p12, .str.277);
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p13, .str.2);
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p14, .str.238);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.8, $p16);
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 4164);
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p16, $i19);
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p20, 0);
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.9, $p21);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 2255} {:cexpr "tmp___0"} boogie_si_record_i64($i25);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i10, 0);
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $M.56 := $store.ref($M.56, $p1, $p4);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.56, $p1);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i10);
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p30, $mul.ref($i31, 1));
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2259} $p33 := ceph_extract_encoded_string($p1, $p32, $0.ref, 16);
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p33);
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} $i39 := IS_ERR($p38);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i8($i39);
    call {:si_unique_call 2261} {:cexpr "tmp___4"} boogie_si_record_i8($i40);
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i40);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i41 == 1);
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p50, .str);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p51, .str.277);
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p52, .str.2);
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p53, .str.278);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $i56 := $load.i24($M.8, $p55);
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $i57 := $and.i24($i56, $sub.i24(0, 262144));
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    $i58 := $or.i24($i57, 4177);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p55, $i58);
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p59, 0);
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.9, $p60);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i64($i61);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $i63 := $and.i64($i62, 1);
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2265} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 2266} {:cexpr "tmp___3"} boogie_si_record_i64($i64);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i49 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $i29 := $i49;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2258} kfree($p4);
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    $i7 := $i29;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb15:
    assume $i65 == 1;
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2267} $p66 := ceph_file_part(.str.2, 199);
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2268} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref($p3, .str.279, 4, .str.5, $p66, 4177, $p69);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i41 == 1;
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} $i45 := PTR_ERR($p44);
    call {:si_unique_call 2263} {:cexpr "tmp___1"} boogie_si_record_i64($i45);
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i64.i32($i45);
    call {:si_unique_call 2264} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $0.ref);
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $i49 := $i46;
    goto $bb14;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $i29 := $i10;
    goto $bb10;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2256} $p27 := ceph_file_part(.str.2, 199);
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2257} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.i32($p2, .str.239, 4, .str.5, $p27, 4164, .str.277, $i10);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;
}



const rbd_dev_v2_features: ref;

axiom rbd_dev_v2_features == $sub.ref(0, 840826);

procedure rbd_dev_v2_features($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.43, $M.44, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_v2_features($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(32, 1));
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2269} $i3 := _rbd_dev_v2_snap_features($p0, $sub.i64(0, 2), $p2);
    call {:si_unique_call 2270} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const rbd_dev_v2_striping_info: ref;

axiom rbd_dev_v2_striping_info == $sub.ref(0, 841858);

procedure rbd_dev_v2_striping_info($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.56, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_v2_striping_info($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i1;
  var $i29: i64;
  var $i30: i1;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i38: i64;
  var $i39: i1;
  var $i40: i64;
  var $i41: i1;
  var $p43: ref;
  var $p45: ref;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2271} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2273} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, 0);
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p5, 0);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(240, 1));
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} $i9 := rbd_obj_method_sync($p0, $p7, .str, .str.284, $0.ref, 0, $p8, 16);
    call {:si_unique_call 2275} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p11, .str.285);
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p12, .str.2);
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p13, .str.238);
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.8, $p15);
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 4361);
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p15, $i18);
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p19, 0);
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.9, $p20);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 2277} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i9, 0);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i9);
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $i30 := $ult.i64($i29, 16);
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(8, 1));
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i34);
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    $i36 := $shl.i64(1, $i35);
    call {:si_unique_call 2280} {:cexpr "obj_size"} boogie_si_record_i64($i36);
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    $M.56 := $store.ref($M.56, $p2, $p1);
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2281} $i38 := ceph_decode_64($p2);
    call {:si_unique_call 2282} {:cexpr "stripe_unit"} boogie_si_record_i64($i38);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, $i36);
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2284} $i40 := ceph_decode_64($p2);
    call {:si_unique_call 2285} {:cexpr "stripe_count"} boogie_si_record_i64($i40);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 1);
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(16, 1));
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p43, $i38);
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(24, 1));
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p45, $i40);
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb14:
    assume $i41 == 1;
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2286} rbd_warn.ref.ref.i64($p0, .str.287, $i40);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 22);
    goto $bb6;

  $bb11:
    assume $i39 == 1;
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2283} rbd_warn.ref.ref.i64.i64($p0, .str.286, $i38, $i36);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 22);
    goto $bb6;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 34);
    goto $bb6;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $i28 := $i9;
    goto $bb6;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} $p26 := ceph_file_part(.str.2, 199);
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2279} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.i32($p3, .str.239, 4, .str.5, $p26, 4361, .str.285, $i9);
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rbd_obj_read_sync: ref;

axiom rbd_obj_read_sync == $sub.ref(0, 842890);

procedure rbd_obj_read_sync($p0: ref, $p1: ref, $i2: i64, $i3: i64, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_obj_read_sync($p0: ref, $p1: ref, $i2: i64, $i3: i64, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i32;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $i47: i64;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i64;
  var $i58: i1;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $i63: i32;
  var $i64: i64;
  var $i65: i64;
  var $i66: i1;
  var $i68: i32;
  var $i23: i32;
  var $i69: i64;
  var $i70: i1;
  var $i19: i32;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2287} {:cexpr "rbd_obj_read_sync:arg:offset"} boogie_si_record_i64($i2);
    call {:si_unique_call 2288} {:cexpr "rbd_obj_read_sync:arg:length"} boogie_si_record_i64($i3);
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 3808)), $mul.ref(2608, 1));
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2289} $i10 := calc_pages_for($i2, $i3);
    call {:si_unique_call 2290} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2291} $p11 := ceph_alloc_page_vector($i10, 208);
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} $i13 := IS_ERR($p12);
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 2293} {:cexpr "tmp___1"} boogie_si_record_i8($i14);
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2296} $p20 := rbd_obj_request_create($p1, $i2, $i3, 2);
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p20, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p11);
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p20, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i10);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2297} $p30 := rbd_osd_req_create($p0, 1, 1, $p20);
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p20, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p30);
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p20, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p20, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2298} osd_req_op_extent_init($p37, 0, 4609, $i2, $i3, 0, 0);
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p20, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p20, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p20, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p20, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i64.i32($i47);
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 4095);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2299} osd_req_op_extent_osd_data_pages($p39, 0, $p43, $i45, $i49, 0, 0);
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2300} rbd_osd_req_format_read($p20);
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2301} $i50 := rbd_obj_request_submit($p9, $p20);
    call {:si_unique_call 2302} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2303} $i52 := rbd_obj_request_wait($p20);
    call {:si_unique_call 2304} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p20, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    call {:si_unique_call 2305} {:cexpr "ret"} boogie_si_record_i32($i55);
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2306} $i57 := ldv__builtin_expect(0, 0);
    call {:si_unique_call 2307} {:cexpr "tmp___2"} boogie_si_record_i64($i57);
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p20, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.0, $p60);
    call {:si_unique_call 2310} {:cexpr "size"} boogie_si_record_i64($i61);
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2311} ceph_copy_from_page_vector($p11, $p4, 0, $i61);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    $i62 := $ugt.i64($i61, 2147483647);
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $i63 := $zext.i1.i32($i62);
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i63);
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} $i65 := ldv__builtin_expect($i64, 0);
    call {:si_unique_call 2313} {:cexpr "tmp___3"} boogie_si_record_i64($i65);
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i64.i32($i61);
    call {:si_unique_call 2316} {:cexpr "ret"} boogie_si_record_i32($i68);
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    $i23 := $i68;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p20);
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i70 == 1);
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2318} ceph_release_page_vector($p11, $i10);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i19 := $i23;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb29:
    assume $i70 == 1;
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} rbd_obj_request_put($p20);
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb25:
    assume $i66 == 1;
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2314} vslice_dummy_var_239 := printk.ref.ref.i32.ref(.str.8, .str.263, 3582, .str.265);
    call {:si_unique_call 2315} devirtbounce(0, .str.2, 3582, 12);
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    call rbd_obj_read_sync_loop_$bb27();
    goto $bb27_last;

  $bb21:
    assume $i58 == 1;
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} vslice_dummy_var_238 := printk.ref.ref.i32.ref(.str.8, .str.263, 3579, .str.264);
    call {:si_unique_call 2309} devirtbounce(0, .str.2, 3579, 12);
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    call rbd_obj_read_sync_loop_$bb23();
    goto $bb23_last;

  $bb18:
    assume $i56 == 1;
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    $i23 := $i55;
    goto $bb7;

  $bb15:
    assume $i53 == 1;
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $i23 := $i52;
    goto $bb7;

  $bb12:
    assume $i51 == 1;
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $i23 := $i50;
    goto $bb7;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 12);
    goto $bb7;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p11);
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2294} $i17 := PTR_ERR($p16);
    call {:si_unique_call 2295} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i17);
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb3;

  $bb27_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto $bb27_dummy;

  $bb23_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto $bb23_dummy;
}



const rbd_dev_ondisk_valid: ref;

axiom rbd_dev_ondisk_valid == $sub.ref(0, 843922);

procedure rbd_dev_ondisk_valid($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation rbd_dev_ondisk_valid($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2319} $i3 := memcmp($p2, .str.266, 34);
    call {:si_unique_call 2320} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(76, 1)), $mul.ref(0, 1));
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    $i10 := $ule.i32($i9, 8);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(76, 1)), $mul.ref(0, 1));
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i14, 31);
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    call {:si_unique_call 2321} {:cexpr "snap_count"} boogie_si_record_i32($i17);
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    $i19 := $udiv.i64($sub.i64(0, 25), 8);
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i64($i18, $i19);
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i17);
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    $i22 := $mul.i64($i21, 8);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $i23 := $sub.i64($sub.i64(0, 25), $i22);
    call {:si_unique_call 2322} {:cexpr "size"} boogie_si_record_i64($i23);
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    $i26 := $ugt.i64($i25, $i23);
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const rbd_header_from_disk: ref;

axiom rbd_header_from_disk == $sub.ref(0, 844954);

procedure rbd_header_from_disk($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rbd_header_from_disk($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i1;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i1;
  var $i51: i64;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $p57: ref;
  var $i58: i64;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $i50: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i1;
  var $p69: ref;
  var $p71: ref;
  var $i72: i8;
  var $p73: ref;
  var $p75: ref;
  var $i76: i8;
  var $p77: ref;
  var $p79: ref;
  var $i80: i8;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p26: ref;
  var $p27: ref;
  var $p98: ref;
  var $i16: i32;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 2323} {:cexpr "first_time"} boogie_si_record_i8($i7);
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p20 := $0.ref;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    call {:si_unique_call 2328} {:cexpr "snap_count"} boogie_si_record_i32($i22);
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} $p23 := ceph_create_snap_context($i22, 208);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p30, $i29);
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i22, 0);
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $p66, $p67 := $0.ref, $0.ref;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i8.i1($i7);
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i68 == 1);
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(48, 1));
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2340} ceph_put_snap_context($p86);
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(56, 1));
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} kfree($p88);
    $p89 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(64, 1));
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} kfree($p91);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.0, $p92);
    $p94 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(40, 1));
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p94, $i93);
    $p95 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(48, 1));
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p95, $p23);
    $p96 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(56, 1));
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p96, $p66);
    $p97 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(64, 1));
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p97, $p67);
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb29:
    assume $i68 == 1;
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p69, $p20);
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(76, 1)), $mul.ref(0, 1));
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.0, $p71);
    $p73 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(8, 1));
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p73, $i72);
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(76, 1)), $mul.ref(1, 1));
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.0, $p75);
    $p77 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(9, 1));
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, $i76);
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(76, 1)), $mul.ref(2, 1));
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(10, 1));
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, $i80);
    $p82 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(16, 1));
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p82, 0);
    $p83 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(24, 1));
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p83, 0);
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(32, 1));
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p84, 0);
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb12:
    assume $i31 == 1;
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    call {:si_unique_call 2334} {:cexpr "snap_names_len"} boogie_si_record_i64($i33);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2335} $p34 := kmalloc($i33, 208);
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i22);
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    $i38 := $mul.i64($i37, 8);
    call {:si_unique_call 2336} {:cexpr "size"} boogie_si_record_i64($i38);
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2337} $p39 := kmalloc($i38, 208);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(112, 1));
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i22);
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p44, $mul.ref($i45, 1));
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_41 := $M.0;
    cmdloc_dummy_var_42 := $M.0;
    call {:si_unique_call 2338} cmdloc_dummy_var_43 := $memcpy.i8(cmdloc_dummy_var_41, cmdloc_dummy_var_42, $p34, $p46, $i33, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_43;
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(112, 1));
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    $i49 := $ult.i32(0, $i22);
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p66, $p67 := $p34, $p39;
    goto $bb28;

  $bb20:
    assume $i49 == 1;
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb23;

  $bb23:
    call $i51, $p53, $i54, $i55, $p57, $i58, $p60, $i61, $i62, $p63, $i64, $i65, $i50 := rbd_header_from_disk_loop_$bb23($i22, $p23, $p40, $p48, $i51, $p53, $i54, $i55, $p57, $i58, $p60, $i61, $i62, $p63, $i64, $i65, $i50);
    goto $bb23_last;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i51 := $zext.i32.i64($i50);
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p48, $mul.ref($i51, 16)), $mul.ref(0, 1));
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p53);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $i55 := $zext.i32.i64($i50);
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(24, 1)), $mul.ref($i55, 8));
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p57, $i54);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i50);
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p48, $mul.ref($i58, 16)), $mul.ref(8, 1));
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.0, $p60);
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    $i62 := $zext.i32.i64($i50);
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p40, $mul.ref($i62, 8));
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p63, $i61);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i50, 1);
    call {:si_unique_call 2339} {:cexpr "i"} boogie_si_record_i32($i64);
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    $i65 := $ult.i32($i64, $i22);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i65 == 1);
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb25:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i50 := $i64;
    goto $bb25_dummy;

  $bb17:
    assume $i42 == 1;
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $p26, $p27 := $p34, $p39;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p27);
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2330} kfree($p98);
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2331} kfree($p26);
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} ceph_put_snap_context($p23);
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2333} kfree($p20);
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb5;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $p26, $p27 := $p34, $0.ref;
    goto $bb10;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $p26, $p27 := $0.ref, $0.ref;
    goto $bb10;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(40, 1));
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2324} $i11 := strnlen($p10, 24);
    call {:si_unique_call 2325} {:cexpr "len"} boogie_si_record_i64($i11);
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 1);
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2326} $p13 := kmalloc($i12, 208);
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(40, 1));
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.0;
    cmdloc_dummy_var_39 := $M.0;
    call {:si_unique_call 2327} cmdloc_dummy_var_40 := $memcpy.i8(cmdloc_dummy_var_38, cmdloc_dummy_var_39, $p13, $p18, $i11, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_40;
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p13, $mul.ref($i11, 1));
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 0);
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    $p20 := $p13;
    goto $bb7;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb5;

  $bb25_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9999;
}



const strnlen: ref;

axiom strnlen == $sub.ref(0, 845986);

procedure strnlen($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strnlen($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2343} {:cexpr "strnlen:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2344} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 2345} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const memcmp: ref;

axiom memcmp == $sub.ref(0, 847018);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const rbd_watch_cb: ref;

axiom rbd_watch_cb == $sub.ref(0, 848050);

procedure rbd_watch_cb($i0: i64, $i1: i64, $i2: i8, $p3: ref);



const ceph_osdc_create_event: ref;

axiom ceph_osdc_create_event == $sub.ref(0, 849082);

procedure ceph_osdc_create_event($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ceph_osdc_create_event($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2346} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 2347} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const rbd_dev_refresh: ref;

axiom rbd_dev_refresh == $sub.ref(0, 850114);

procedure rbd_dev_refresh($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.57, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.56, $M.58, $M.45, $M.46, $M.47, $CurrAddr, $M.42, $M.43, $M.44, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_refresh($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $i22: i64;
  var $p24: ref;
  var $i7: i32;
  var $p25: ref;
  var $i26: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(560, 1));
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2348} down_write($p1);
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(720, 1)), $mul.ref(0, 1));
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    call {:si_unique_call 2349} {:cexpr "mapping_size"} boogie_si_record_i64($i4);
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2350} $i5 := rbd_dev_header_info($p0);
    call {:si_unique_call 2351} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(320, 1));
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i14 := $i5;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, $sub.i64(0, 2));
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2355} rbd_exists_validate($p0);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i7 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(560, 1));
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} up_write($p25);
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i7, 0);
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(720, 1)), $mul.ref(0, 1));
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, $i4);
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb16;

  $bb17:
    assume $i30 == 1;
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} rbd_dev_update_size($p0);
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(144, 1)), $mul.ref(40, 1));
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(720, 1)), $mul.ref(0, 1));
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, $i22);
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} $i12 := rbd_dev_v2_parent_info($p0);
    call {:si_unique_call 2354} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb10;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;
}



const rbd_obj_notify_ack_sync: ref;

axiom rbd_obj_notify_ack_sync == $sub.ref(0, 851146);

procedure rbd_obj_notify_ack_sync($p0: ref, $i1: i64) returns ($r: i32);



const down_write: ref;

axiom down_write == $sub.ref(0, 852178);

procedure down_write($p0: ref);
  free requires assertsPassed;



implementation down_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    return;
}



const rbd_exists_validate: ref;

axiom rbd_exists_validate == $sub.ref(0, 853210);

procedure rbd_exists_validate($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rbd_exists_validate($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(216, 1));
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2357} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 2358} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    call {:si_unique_call 2359} {:cexpr "snap_id"} boogie_si_record_i64($i7);
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, $sub.i64(0, 2));
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2360} $i9 := rbd_dev_snap_index($p0, $i7);
    call {:si_unique_call 2361} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, $sub.i32(0, 1));
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(216, 1));
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2362} clear_bit(0, $p11);
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const up_write: ref;

axiom up_write == $sub.ref(0, 854242);

procedure up_write($p0: ref);
  free requires assertsPassed;



implementation up_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    return;
}



const rbd_dev_update_size: ref;

axiom rbd_dev_update_size == $sub.ref(0, 855274);

procedure rbd_dev_update_size($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation rbd_dev_update_size($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i8;
  var $p7: ref;
  var $i8: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var vslice_dummy_var_240: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2363} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(72, 1));
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2364} spin_lock_irq($p2);
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(216, 1));
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2365} $i4 := constant_test_bit(1, $p3);
    call {:si_unique_call 2366} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 2367} {:cexpr "removing"} boogie_si_record_i8($i6);
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(72, 1));
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2368} spin_unlock_irq($p7);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i6);
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(720, 1)), $mul.ref(0, 1));
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    $i12 := $udiv.i64($i11, 512);
    call {:si_unique_call 2369} {:cexpr "size"} boogie_si_record_i64($i12);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str);
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p14, .str.257);
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p15, .str.2);
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p16, .str.258);
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.8, $p18);
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 3691);
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p18, $i21);
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p22, 0);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.9, $p23);
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2370} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 2371} {:cexpr "tmp___1"} boogie_si_record_i64($i27);
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2374} set_capacity($p31, $i12);
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2375} vslice_dummy_var_240 := revalidate_disk($p33);
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb3:
    assume $i28 == 1;
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2372} $p29 := ceph_file_part(.str.2, 199);
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.i64($p1, .str.259, 4, .str.5, $p29, 3691, $i12);
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb1:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    goto $bb6;
}



const revalidate_disk: ref;

axiom revalidate_disk == $sub.ref(0, 856306);

procedure revalidate_disk($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation revalidate_disk($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2376} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2377} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const PTR_ERR_OR_ZERO: ref;

axiom PTR_ERR_OR_ZERO == $sub.ref(0, 857338);

procedure PTR_ERR_OR_ZERO($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation PTR_ERR_OR_ZERO($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2378} $i1 := IS_ERR($p0);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2379} {:cexpr "tmp___0"} boogie_si_record_i8($i2);
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2380} $i4 := PTR_ERR($p0);
    call {:si_unique_call 2381} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const __init_rwsem: ref;

axiom __init_rwsem == $sub.ref(0, 858370);

procedure __init_rwsem($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_rwsem($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    return;
}



const ceph_pg_poolid_by_name: ref;

axiom ceph_pg_poolid_by_name == $sub.ref(0, 859402);

procedure ceph_pg_poolid_by_name($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ceph_pg_poolid_by_name($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2382} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2383} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ceph_monc_do_get_version: ref;

axiom ceph_monc_do_get_version == $sub.ref(0, 860434);

procedure ceph_monc_do_get_version($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ceph_monc_do_get_version($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2384} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2385} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ceph_monc_request_next_osdmap: ref;

axiom ceph_monc_request_next_osdmap == $sub.ref(0, 861466);

procedure ceph_monc_request_next_osdmap($p0: ref);
  free requires assertsPassed;



implementation ceph_monc_request_next_osdmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    return;
}



const ceph_monc_wait_osdmap: ref;

axiom ceph_monc_wait_osdmap == $sub.ref(0, 862498);

procedure ceph_monc_wait_osdmap($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation ceph_monc_wait_osdmap($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2386} {:cexpr "ceph_monc_wait_osdmap:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2387} {:cexpr "ceph_monc_wait_osdmap:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2388} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2389} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_mutex_lock_nested_17: ref;

axiom ldv_mutex_lock_nested_17 == $sub.ref(0, 863530);

procedure ldv_mutex_lock_nested_17($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.60, assertsPassed;



implementation ldv_mutex_lock_nested_17($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2390} {:cexpr "ldv_mutex_lock_nested_17:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2391} ldv_mutex_lock_client_mutex($p0);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2392} mutex_lock_nested($p0, $i1);
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const rbd_client_find: ref;

axiom rbd_client_find == $sub.ref(0, 864562);

procedure rbd_client_find($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation rbd_client_find($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p13: ref;
  var $p30: ref;
  var $p12: ref;
  var $p20: ref;
  var $i21: i8;
  var $i31: i1;
  var $p32: ref;
  var $p5: ref;
  var vslice_dummy_var_241: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 2);
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2393} spin_lock(rbd_client_list_lock);
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, rbd_client_list);
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 16), 32));
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 16), 32)), $mul.ref(16, 1));
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, $p2i.ref.i64(rbd_client_list));
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    $p12 := $p8;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p20, $i21 := $p12, 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2397} spin_unlock(rbd_client_list_lock);
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i21);
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i31 == 1);
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    $p32 := $0.ref;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $p5 := $p32;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb17:
    assume $i31 == 1;
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    $p32 := $p20;
    goto $bb19;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    $p13 := $p8;
    goto $bb8;

  $bb8:
    call $p14, $p15, $i16, $i17, $p18, $p23, $p24, $p25, $p26, $p27, $i28, $i29, $p13, $p30 := rbd_client_find_loop_$bb8($p0, $p14, $p15, $i16, $i17, $p18, $p23, $p24, $p25, $p26, $p27, $i28, $i29, $p13, $p30);
    goto $bb8_last;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} $i16 := ceph_compare_options($p0, $p15);
    call {:si_unique_call 2395} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    $p18 := $p13;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref($sub.ref(0, 16), 32));
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p25, $mul.ref($sub.ref(0, 16), 32)), $mul.ref(16, 1));
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, $p2i.ref.i64(rbd_client_list));
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $p30 := $p26;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    $p12 := $p30;
    goto $bb7;

  $bb14:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $p13 := $p26;
    goto $bb14_dummy;

  $bb10:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2396} vslice_dummy_var_241 := __rbd_get_client($p18);
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    $p20, $i21 := $p18, 1;
    goto $bb12;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10236;
}



const ceph_destroy_options: ref;

axiom ceph_destroy_options == $sub.ref(0, 865594);

procedure ceph_destroy_options($p0: ref);
  free requires assertsPassed;



implementation ceph_destroy_options($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    return;
}



const rbd_client_create: ref;

axiom rbd_client_create == $sub.ref(0, 866626);

procedure rbd_client_create($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation rbd_client_create($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $i36: i8;
  var $i37: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i24;
  var $i52: i24;
  var $i53: i24;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p63: ref;
  var $p64: ref;
  var $i38: i32;
  var $p39: ref;
  var $p65: ref;
  var $i25: i32;
  var $p26: ref;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i24;
  var $i75: i24;
  var $i76: i24;
  var $p77: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i64;
  var $i81: i64;
  var $i82: i64;
  var $i83: i1;
  var $p84: ref;
  var $i85: i64;
  var $p86: ref;
  var $p62: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2398} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2399} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2400} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p4, .str);
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p5, .str.218);
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, .str.2);
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p7, .str.219);
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.8, $p9);
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 658);
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p9, $i12);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p13, 0);
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.9, $p14);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2401} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 2402} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2405} $p21 := kmalloc(32, 208);
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p22, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2406} kref_init($p27);
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p22, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2407} INIT_LIST_HEAD($p28);
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p22);
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2408} $p30 := ceph_create_client($p0, $p29, 0, 0);
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p22, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p30);
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p22, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2409} $i35 := IS_ERR($p34);
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i8($i35);
    call {:si_unique_call 2410} {:cexpr "tmp___2"} boogie_si_record_i8($i36);
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($i36);
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p22, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2412} $i42 := ceph_open_session($p41);
    call {:si_unique_call 2413} {:cexpr "ret"} boogie_si_record_i32($i42);
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 0);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2415} spin_lock(rbd_client_list_lock);
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p22, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2416} list_add_tail($p44, rbd_client_list);
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2417} spin_unlock(rbd_client_list_lock);
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p45, .str);
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p46, .str.218);
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p47, .str.2);
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p48, .str.169);
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    $i51 := $load.i24($M.8, $p50);
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    $i52 := $and.i24($i51, $sub.i24(0, 262144));
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    $i53 := $or.i24($i52, 679);
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p50, $i53);
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p54, 0);
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.9, $p55);
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i64($i56);
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 1);
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2418} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 2419} {:cexpr "tmp___4"} boogie_si_record_i64($i59);
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p62 := $p21;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $r := $p62;
    return;

  $bb16:
    assume $i60 == 1;
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2420} $p61 := ceph_file_part(.str.2, 199);
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2421} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.ref($p2, .str.170, 4, .str.5, $p61, 679, .str.218, $p22);
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i43 == 1;
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p22, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2414} ceph_destroy_client($p64);
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    $i38, $p39 := $i42, $0.ref;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p22);
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2411} kfree($p65);
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    $i25, $p26 := $i38, $p39;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p26);
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p68, .str);
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p69, .str.218);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p70, .str.2);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p71, .str.221);
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    $i74 := $load.i24($M.8, $p73);
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    $i75 := $and.i24($i74, $sub.i24(0, 262144));
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    $i76 := $or.i24($i75, 689);
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p73, $i76);
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p77, 0);
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.9, $p78);
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i64($i79);
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    $i81 := $and.i64($i80, 1);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2423} $i82 := ldv__builtin_expect($i81, 0);
    call {:si_unique_call 2424} {:cexpr "tmp___6"} boogie_si_record_i64($i82);
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    $i83 := $ne.i64($i82, 0);
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i25);
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2427} $p86 := ERR_PTR($i85);
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    $p62 := $p86;
    goto $bb19;

  $bb23:
    assume $i83 == 1;
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2425} $p84 := ceph_file_part(.str.2, 199);
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2426} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref.i32($p3, .str.222, 4, .str.5, $p84, 689, .str.218, $i25);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i67 == 1;
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2422} ceph_destroy_options($p26);
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb8:
    assume $i37 == 1;
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    $i38, $p39 := $sub.i32(0, 12), $p0;
    goto $bb10;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    $i25, $p26 := $sub.i32(0, 12), $p0;
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2403} $p20 := ceph_file_part(.str.2, 199);
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2404} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref($p1, .str.220, 4, .str.5, $p20, 658, .str.218);
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_unlock_18: ref;

axiom ldv_mutex_unlock_18 == $sub.ref(0, 867658);

procedure ldv_mutex_unlock_18($p0: ref);
  free requires assertsPassed;
  modifies $M.60, assertsPassed;



implementation ldv_mutex_unlock_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2428} ldv_mutex_unlock_client_mutex($p0);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2429} mutex_unlock($p0);
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_client_mutex: ref;

axiom ldv_mutex_unlock_client_mutex == $sub.ref(0, 868690);

procedure ldv_mutex_unlock_client_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.60, assertsPassed;



implementation ldv_mutex_unlock_client_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    $i1 := $M.60;
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 2);
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 2431} {:cexpr "ldv_mutex_client_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2430} ldv_error();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 869722);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 870754);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2432} __VERIFIER_error();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const ceph_create_client: ref;

axiom ceph_create_client == $sub.ref(0, 871786);

procedure ceph_create_client($p0: ref, $p1: ref, $i2: i64, $i3: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ceph_create_client($p0: ref, $p1: ref, $i2: i64, $i3: i64) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2433} {:cexpr "ceph_create_client:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 2434} {:cexpr "ceph_create_client:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2435} $p4 := external_alloc();
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const ceph_open_session: ref;

axiom ceph_open_session == $sub.ref(0, 872818);

procedure ceph_open_session($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ceph_open_session($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2436} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2437} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ceph_compare_options: ref;

axiom ceph_compare_options == $sub.ref(0, 873850);

procedure ceph_compare_options($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ceph_compare_options($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2438} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2439} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_lock_client_mutex: ref;

axiom ldv_mutex_lock_client_mutex == $sub.ref(0, 874882);

procedure ldv_mutex_lock_client_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.60, assertsPassed;



implementation ldv_mutex_lock_client_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    $i1 := $M.60;
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 2441} {:cexpr "ldv_mutex_client_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2440} ldv_error();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 875914);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2442} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    return;
}



const next_token: ref;

axiom next_token == $sub.ref(0, 876946);

procedure next_token($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.35;



implementation next_token($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.35, $p0);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2443} $i2 := strspn($p1, .str.201);
    call {:si_unique_call 2444} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.35, $p0);
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($i2, 1));
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p0, $p4);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.35, $p0);
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2445} $i6 := strcspn($p5, .str.201);
    call {:si_unique_call 2446} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const dup_token: ref;

axiom dup_token == $sub.ref(0, 877978);

procedure dup_token($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.35, $M.0, $M.61;



implementation dup_token($p0: ref, $p1: ref) returns ($r: ref)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2447} $i2 := next_token($p0);
    call {:si_unique_call 2448} {:cexpr "len"} boogie_si_record_i64($i2);
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.35, $p0);
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i2, 1);
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2449} $p5 := kmemdup($p3, $i4, 208);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p5, $mul.ref($i2, 1));
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.35, $p0);
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($i2, 1));
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p0, $p11);
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p1);
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $p5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $M.61 := $store.i64($M.61, $p1, $i2);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;
}



const kmemdup: ref;

axiom kmemdup == $sub.ref(0, 879010);

procedure kmemdup($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kmemdup($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2450} {:cexpr "kmemdup:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 2451} {:cexpr "kmemdup:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2452} $p3 := external_alloc();
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const parse_rbd_opts_token: ref;

axiom parse_rbd_opts_token == $sub.ref(0, 880042);

procedure parse_rbd_opts_token($p0: ref, $p1: ref) returns ($r: i32);



const ceph_parse_options: ref;

axiom ceph_parse_options == $sub.ref(0, 881074);

procedure ceph_parse_options($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ceph_parse_options($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2453} $p5 := external_alloc();
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const match_token: ref;

axiom match_token == $sub.ref(0, 882106);

procedure match_token($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const match_int: ref;

axiom match_int == $sub.ref(0, 883138);

procedure match_int($p0: ref, $p1: ref) returns ($r: i32);



const strspn: ref;

axiom strspn == $sub.ref(0, 884170);

procedure strspn($p0: ref, $p1: ref) returns ($r: i64);



const strcspn: ref;

axiom strcspn == $sub.ref(0, 885202);

procedure strcspn($p0: ref, $p1: ref) returns ($r: i64);



const rbd_remove: ref;

axiom rbd_remove == $sub.ref(0, 886234);

procedure rbd_remove($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.21, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.19;



implementation rbd_remove($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i8;
  var $i4: i1;
  var $i6: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2454} {:cexpr "rbd_remove:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    $i3 := $M.31;
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2455} $i6 := do_rbd_remove($p0, $p1, $i2);
    call {:si_unique_call 2456} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, 22);
    goto $bb3;
}



const do_rbd_remove: ref;

axiom do_rbd_remove == $sub.ref(0, 887266);

procedure do_rbd_remove($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.21, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.19;



implementation do_rbd_remove($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i9: i64;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p18: ref;
  var $p31: ref;
  var $p17: ref;
  var $p25: ref;
  var $i26: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i8;
  var $i37: i8;
  var $i38: i32;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $i47: i1;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i24;
  var $i56: i24;
  var $i57: i24;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2458} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 2459} {:cexpr "do_rbd_remove:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2460} $i5 := kstrtoul($p1, 10, $p3);
    call {:si_unique_call 2461} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.66, $p3);
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    call {:si_unique_call 2462} {:cexpr "dev_id"} boogie_si_record_i32($i10);
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.66, $p3);
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i11, $i12);
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2463} spin_lock(rbd_dev_list_lock);
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, rbd_dev_list);
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, $p2i.ref.i64(rbd_dev_list));
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    $p17 := $0.ref;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p25, $i26 := $p17, $sub.i32(0, 2);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i26, 0);
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i44, $i45 := 0, $i26;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2469} spin_unlock(rbd_dev_list_lock);
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, 0);
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i46 == 1);
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i44);
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2470} rbd_dev_header_unwatch_sync($p25);
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p49, .str);
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p50, .str.177);
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p51, .str.2);
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p52, .str.178);
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $i55 := $load.i24($M.8, $p54);
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $i56 := $and.i24($i55, $sub.i24(0, 262144));
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    $i57 := $or.i24($i56, 5599);
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p54, $i57);
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p58, 0);
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.9, $p59);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i64($i60);
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    $i62 := $and.i64($i61, 1);
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2471} $i63 := ldv__builtin_expect($i62, 0);
    call {:si_unique_call 2472} {:cexpr "tmp___2"} boogie_si_record_i64($i63);
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p25, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 3808)), $mul.ref(2608, 1));
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2475} ceph_osdc_flush_notifies($p70);
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2476} rbd_bus_del_dev($p25);
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2477} rbd_dev_image_release($p25);
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2478} module_put(__this_module);
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    $i8 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb32:
    assume $i64 == 1;
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2473} $p65 := ceph_file_part(.str.2, 199);
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2474} __dynamic_pr_debug.ref.ref.i32.ref.ref.i32.ref($p4, .str.179, 4, .str.5, $p65, 5599, .str.177);
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i45);
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    $i8 := $i48;
    goto $bb3;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb27;

  $bb20:
    assume $i32 == 1;
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p25, $mul.ref(0, 2192)), $mul.ref(72, 1));
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2464} spin_lock_irq($p33);
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p25, $mul.ref(0, 2192)), $mul.ref(2184, 1));
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i36 == 1);
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p25, $mul.ref(0, 2192)), $mul.ref(216, 1));
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2465} $i40 := test_and_set_bit(1, $p39);
    call {:si_unique_call 2466} {:cexpr "tmp___0"} boogie_si_record_i32($i40);
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i8($i41);
    call {:si_unique_call 2467} {:cexpr "already"} boogie_si_record_i8($i42);
    assume {:verifier.code 0} true;
    $i37, $i38 := $i42, $i26;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p25, $mul.ref(0, 2192)), $mul.ref(72, 1));
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2468} spin_unlock_irq($p43);
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $i44, $i45 := $i37, $i38;
    goto $bb25;

  $bb22:
    assume $i36 == 1;
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    $i37, $i38 := 0, $sub.i32(0, 16);
    goto $bb24;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    $p18 := $p14;
    goto $bb11;

  $bb11:
    call $p19, $p20, $p21, $i22, $i23, $p24, $p27, $p28, $i29, $i30, $p18, $p31 := do_rbd_remove_loop_$bb11($i10, $p19, $p20, $p21, $i22, $i23, $p24, $p27, $p28, $i29, $i30, $p18, $p31);
    goto $bb11_last;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref($sub.ref(0, 744), 2192));
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p19, $mul.ref($sub.ref(0, 744), 2192)), $mul.ref(0, 1));
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, $i10);
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    $p24 := $p20;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p18, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, $p2i.ref.i64(rbd_dev_list));
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    $p31 := $p20;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    $p17 := $p31;
    goto $bb10;

  $bb17:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $p18 := $p28;
    goto $bb17_dummy;

  $bb13:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    $p25, $i26 := $p24, 0;
    goto $bb15;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i5);
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10519;
}



const kstrtoul: ref;

axiom kstrtoul == $sub.ref(0, 888298);

procedure kstrtoul($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoul($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2479} {:cexpr "kstrtoul:arg:base"} boogie_si_record_i32($i1);
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2480} $i3 := kstrtoull($p0, $i1, $p2);
    call {:si_unique_call 2481} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ceph_osdc_flush_notifies: ref;

axiom ceph_osdc_flush_notifies == $sub.ref(0, 889330);

procedure ceph_osdc_flush_notifies($p0: ref);
  free requires assertsPassed;



implementation ceph_osdc_flush_notifies($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    return;
}



const rbd_bus_del_dev: ref;

axiom rbd_bus_del_dev == $sub.ref(0, 890362);

procedure rbd_bus_del_dev($p0: ref);
  free requires assertsPassed;



implementation rbd_bus_del_dev($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(760, 1));
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2482} device_unregister($p1);
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    return;
}



const device_unregister: ref;

axiom device_unregister == $sub.ref(0, 891394);

procedure device_unregister($p0: ref);
  free requires assertsPassed;



implementation device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    return;
}



const kstrtoull: ref;

axiom kstrtoull == $sub.ref(0, 892426);

procedure kstrtoull($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoull($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2483} {:cexpr "kstrtoull:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2484} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2485} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const rbd_add_single_major: ref;

axiom rbd_add_single_major == $sub.ref(0, 893458);

procedure rbd_add_single_major($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.32, $M.33, $M.34, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.35, $CurrAddr, $M.61, $M.56, $M.21, $M.57, $M.38, $M.39, $M.60, $M.13, $M.14, $M.18, $M.58, $M.40, $M.41, assertsPassed, $M.20, $M.45, $M.46, $M.47, $M.59, $M.42, $M.43, $M.44, $M.19;



implementation rbd_add_single_major($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2486} {:cexpr "rbd_add_single_major:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2487} $i3 := do_rbd_add($p0, $p1, $i2);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 2488} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const rbd_remove_single_major: ref;

axiom rbd_remove_single_major == $sub.ref(0, 894490);

procedure rbd_remove_single_major($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.21, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.19;



implementation rbd_remove_single_major($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2489} {:cexpr "rbd_remove_single_major:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2490} $i3 := do_rbd_remove($p0, $p1, $i2);
    call {:si_unique_call 2491} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const rbd_sysfs_dev_release: ref;

axiom rbd_sysfs_dev_release == $sub.ref(0, 895522);

procedure rbd_sysfs_dev_release($p0: ref);
  free requires assertsPassed;



implementation rbd_sysfs_dev_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    return;
}



const rbd_size_show: ref;

axiom rbd_size_show == $sub.ref(0, 896554);

procedure rbd_size_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rbd_size_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2492} $p3 := dev_to_rbd_dev($p0);
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(720, 1)), $mul.ref(0, 1));
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2493} $i7 := sprintf.ref.ref.i64($p2, .str.377, $i6);
    call {:si_unique_call 2494} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const rbd_features_show: ref;

axiom rbd_features_show == $sub.ref(0, 897586);

procedure rbd_features_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rbd_features_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2495} $p3 := dev_to_rbd_dev($p0);
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(720, 1)), $mul.ref(8, 1));
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2496} $i7 := sprintf.ref.ref.i64($p2, .str.371, $i6);
    call {:si_unique_call 2497} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const rbd_major_show: ref;

axiom rbd_major_show == $sub.ref(0, 898618);

procedure rbd_major_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rbd_major_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $i12: i32;
  var $i13: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} $p3 := dev_to_rbd_dev($p0);
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(4, 1));
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} $i12 := sprintf.ref.ref($p2, .str.376);
    call {:si_unique_call 2502} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    $i11 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(4, 1));
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2499} $i9 := sprintf.ref.ref.i32($p2, .str.176, $i8);
    call {:si_unique_call 2500} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const rbd_minor_show: ref;

axiom rbd_minor_show == $sub.ref(0, 899650);

procedure rbd_minor_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rbd_minor_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} $p3 := dev_to_rbd_dev($p0);
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2504} $i6 := sprintf.ref.ref.i32($p2, .str.176, $i5);
    call {:si_unique_call 2505} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const rbd_client_id_show: ref;

axiom rbd_client_id_show == $sub.ref(0, 900682);

procedure rbd_client_id_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rbd_client_id_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2506} $p3 := dev_to_rbd_dev($p0);
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2507} $i8 := ceph_client_id($p7);
    call {:si_unique_call 2508} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2509} $i9 := sprintf.ref.ref.i64($p2, .str.379, $i8);
    call {:si_unique_call 2510} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const ceph_client_id: ref;

axiom ceph_client_id == $sub.ref(0, 901714);

procedure ceph_client_id($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ceph_client_id($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2511} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 2512} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rbd_pool_show: ref;

axiom rbd_pool_show == $sub.ref(0, 902746);

procedure rbd_pool_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rbd_pool_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2513} $p3 := dev_to_rbd_dev($p0);
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2514} $i8 := sprintf.ref.ref.ref($p2, .str.189, $p7);
    call {:si_unique_call 2515} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const rbd_pool_id_show: ref;

axiom rbd_pool_id_show == $sub.ref(0, 903778);

procedure rbd_pool_id_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rbd_pool_id_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2516} $p3 := dev_to_rbd_dev($p0);
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2517} $i8 := sprintf.ref.ref.i64($p2, .str.377, $i7);
    call {:si_unique_call 2518} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const rbd_name_show: ref;

axiom rbd_name_show == $sub.ref(0, 904810);

procedure rbd_name_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rbd_name_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $i17: i32;
  var $i18: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} $p3 := dev_to_rbd_dev($p0);
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2522} $i17 := sprintf.ref.ref($p2, .str.190);
    call {:si_unique_call 2523} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    $i16 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2520} $i14 := sprintf.ref.ref.ref($p2, .str.189, $p13);
    call {:si_unique_call 2521} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb3;
}



const rbd_image_id_show: ref;

axiom rbd_image_id_show == $sub.ref(0, 905842);

procedure rbd_image_id_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rbd_image_id_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2524} $p3 := dev_to_rbd_dev($p0);
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2525} $i8 := sprintf.ref.ref.ref($p2, .str.189, $p7);
    call {:si_unique_call 2526} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const rbd_snap_show: ref;

axiom rbd_snap_show == $sub.ref(0, 906874);

procedure rbd_snap_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rbd_snap_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2527} $p3 := dev_to_rbd_dev($p0);
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(224, 1));
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2528} $i8 := sprintf.ref.ref.ref($p2, .str.189, $p7);
    call {:si_unique_call 2529} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const rbd_parent_show: ref;

axiom rbd_parent_show == $sub.ref(0, 907906);

procedure rbd_parent_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rbd_parent_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i32;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $i16: i64;
  var $p17: ref;
  var $i56: i64;
  var $i15: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2530} $p3 := dev_to_rbd_dev($p0);
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(320, 1));
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(320, 1));
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    $i15 := 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i10 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    $i16, $p17 := 0, $p3;
    goto $bb8;

  $bb8:
    call $p18, $p19, $p20, $i21, $p22, $p23, $i24, $p25, $p26, $p27, $p28, $p29, $p30, $i31, $i32, $p33, $p34, $i35, $i36, $i37, $i38, $p39, $p40, $p41, $i42, $p43, $p44, $p45, $i46, $i47, $i48, $i49, $p50, $p51, $p52, $p53, $i54, $i55, $i16, $p17, $i56 := rbd_parent_show_loop_$bb8($p2, $p18, $p19, $p20, $i21, $p22, $p23, $i24, $p25, $p26, $p27, $p28, $p29, $p30, $i31, $i32, $p33, $p34, $i35, $i36, $i37, $i38, $p39, $p40, $p41, $i42, $p43, $p44, $p45, $i46, $i47, $i48, $i49, $p50, $p51, $p52, $p53, $i54, $i55, $i16, $p17, $i56);
    goto $bb8_last;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 2192)), $mul.ref(296, 1));
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p2, $mul.ref($i16, 1));
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i16, 0);
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    $p22 := (if $i21 == 1 then .str.240 else .str.374);
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p19, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p19, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p19, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_10767;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p19, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    $p40 := .str.375;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p19, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p19, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p17, $mul.ref(0, 2192)), $mul.ref(304, 1));
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2533} $i47 := sprintf.ref.ref.ref.i64.ref.ref.ref.i64.ref.i64($p20, .str.373, $p22, $i24, $p26, $p28, $p40, $i42, $p44, $i46);
    call {:si_unique_call 2534} {:cexpr "tmp___1"} boogie_si_record_i32($i47);
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, $i16);
    call {:si_unique_call 2535} {:cexpr "count"} boogie_si_record_i64($i49);
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p17, $mul.ref(0, 2192)), $mul.ref(320, 1));
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 2192)), $mul.ref(320, 1));
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    $i56 := $i49;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    $i15 := $i56;
    goto $bb7;

  $bb13:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i16, $p17 := $i49, $p51;
    goto $bb13_dummy;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p19, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i38);
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    $p40 := $p39;
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2531} $i8 := sprintf.ref.ref($p2, .str.372);
    call {:si_unique_call 2532} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10755;
}



const rbd_image_refresh: ref;

axiom rbd_image_refresh == $sub.ref(0, 908938);

procedure rbd_image_refresh($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.57, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.56, $M.58, $M.45, $M.46, $M.47, $CurrAddr, $M.42, $M.43, $M.44, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_image_refresh($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2536} {:cexpr "rbd_image_refresh:arg:size"} boogie_si_record_i64($i3);
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2537} $p4 := dev_to_rbd_dev($p0);
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2538} $i5 := rbd_dev_refresh($p4);
    call {:si_unique_call 2539} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i5);
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const rbd_root_dev_release: ref;

axiom rbd_root_dev_release == $sub.ref(0, 909970);

procedure rbd_root_dev_release($p0: ref);
  free requires assertsPassed;



implementation rbd_root_dev_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 911002);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2540} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2541} $p1 := calloc(1, $i0);
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2542} __VERIFIER_assume($i4);
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 912034);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.67;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 2544} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_44 := $M.67;
    call {:si_unique_call 2545} cmdloc_dummy_var_45 := $memset.i8(cmdloc_dummy_var_44, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.67 := cmdloc_dummy_var_45;
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_initialize_block_device_operations_16: ref;

axiom ldv_initialize_block_device_operations_16 == $sub.ref(0, 913066);

procedure ldv_initialize_block_device_operations_16();
  free requires assertsPassed;
  modifies $M.68, $M.0, $CurrAddr;



implementation ldv_initialize_block_device_operations_16()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2546} $p0 := ldv_init_zalloc(480);
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    $M.68 := $p0;
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    return;
}



const call_and_disable_work_1: ref;

axiom call_and_disable_work_1 == $sub.ref(0, 914098);

procedure call_and_disable_work_1($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.23, $M.25, $M.27, $M.29, $M.13, $M.14, $CurrAddr, $M.21, $M.18, $M.20, $M.19;



implementation call_and_disable_work_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    $i1 := $M.23;
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    $i3 := $M.23;
    goto corral_source_split_10841;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := $M.25;
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i10 == 1);
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    $i11 := $M.25;
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 3);
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i17 := $M.27;
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 2);
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i18 == 1);
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    $i19 := $M.27;
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 3);
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i25 := $M.29;
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i26 == 1);
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    $i27 := $M.29;
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 3);
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    $p30 := $M.30;
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i29, $i31);
    goto corral_source_split_10886;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb34;

  $bb35:
    assume $i32 == 1;
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} rbd_queue_workfn($p0);
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 2554} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb30;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    $p22 := $M.28;
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb25;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2551} rbd_queue_workfn($p0);
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 2552} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb21;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    $p14 := $M.26;
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i13, $i15);
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb16;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2549} rbd_queue_workfn($p0);
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 2550} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    $p6 := $M.24;
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i5, $i7);
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2547} rbd_queue_workfn($p0);
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 2548} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 915130);

procedure work_init_1();
  free requires assertsPassed;
  modifies $M.23, $M.25, $M.27, $M.29;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    $M.23 := 0;
    call {:si_unique_call 2555} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    $M.25 := 0;
    call {:si_unique_call 2556} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    $M.27 := 0;
    call {:si_unique_call 2557} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 2558} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    return;
}



const call_and_disable_all_1: ref;

axiom call_and_disable_all_1 == $sub.ref(0, 916162);

procedure call_and_disable_all_1($i0: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.23, $M.25, $M.27, $M.29, $M.13, $M.14, $CurrAddr, $M.21, $M.18, $M.20, $M.19;



implementation call_and_disable_all_1($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} {:cexpr "call_and_disable_all_1:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    $i1 := $M.23;
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, $i0);
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $M.25;
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, $i0);
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $M.27;
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $i0);
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := $M.29;
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $i0);
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    $p12 := $M.30;
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2563} call_and_disable_work_1($p12);
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    $p9 := $M.28;
    goto corral_source_split_10921;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2562} call_and_disable_work_1($p9);
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    $p6 := $M.26;
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} call_and_disable_work_1($p6);
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    $p3 := $M.24;
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2560} call_and_disable_work_1($p3);
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const invoke_work_1: ref;

axiom invoke_work_1 == $sub.ref(0, 917194);

procedure invoke_work_1();
  free requires assertsPassed;
  modifies $M.23, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.25, $M.27, $M.29, $M.13, $M.14, $CurrAddr, $M.21, $M.18, $M.20, $M.19;



implementation invoke_work_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2564} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2565} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2566} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2579} ldv_stop();
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    $i21 := $M.29;
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $i23 := $M.29;
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.29 := 4;
    call {:si_unique_call 2576} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(4);
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    $p25 := $M.24;
    goto corral_source_split_10977;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2577} rbd_queue_workfn($p25);
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 2578} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    $i16 := $M.27;
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    $i18 := $M.27;
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.27 := 4;
    call {:si_unique_call 2573} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(4);
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    $p20 := $M.24;
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2574} rbd_queue_workfn($p20);
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 2575} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    $i11 := $M.25;
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    $i13 := $M.25;
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.25 := 4;
    call {:si_unique_call 2570} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(4);
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    $p15 := $M.24;
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2571} rbd_queue_workfn($p15);
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 2572} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    $i6 := $M.23;
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    $i8 := $M.23;
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.23 := 4;
    call {:si_unique_call 2567} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(4);
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    $p10 := $M.24;
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2568} rbd_queue_workfn($p10);
    goto corral_source_split_10951;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 2569} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 918226);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const main: ref;

axiom main == $sub.ref(0, 919258);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.67, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.23, $M.25, $M.27, $M.29, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.93, $M.68, $M.94, $M.32, $M.33, $M.34, $M.57, $M.56, $M.24, $M.26, $M.28, $M.30, $M.97, $M.96, $M.95, $M.60, $M.1, $M.37, $M.99, $M.100, $M.101, $M.102, $M.31, $M.15, $M.22, $M.11, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $CurrAddr, $M.13, $M.14, $M.35, $M.21, $M.58, assertsPassed, $M.61, $M.38, $M.39, $M.45, $M.46, $M.47, $M.18, $M.40, $M.41, $M.42, $M.43, $M.44, $M.20, $M.59, $M.19;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p111: ref;
  var $p113: ref;
  var $p115: ref;
  var $p117: ref;
  var $p119: ref;
  var $p121: ref;
  var $p123: ref;
  var $p125: ref;
  var $p127: ref;
  var $p129: ref;
  var $p131: ref;
  var $p133: ref;
  var $p135: ref;
  var $p137: ref;
  var $p139: ref;
  var $p141: ref;
  var $p143: ref;
  var $i145: i32;
  var $i146: i1;
  var $i147: i1;
  var $i148: i1;
  var $i149: i1;
  var $i150: i1;
  var $i151: i1;
  var $i152: i1;
  var $i153: i1;
  var $i154: i1;
  var $i155: i1;
  var $i156: i1;
  var $i157: i1;
  var $i158: i1;
  var $i159: i1;
  var $i160: i1;
  var $i161: i1;
  var $i162: i1;
  var $i163: i1;
  var $i164: i1;
  var $i165: i1;
  var $i166: i1;
  var $i167: i1;
  var $i168: i1;
  var $i169: i1;
  var $i170: i32;
  var $i171: i1;
  var $i172: i32;
  var $i173: i1;
  var $i174: i32;
  var $i175: i1;
  var $i177: i32;
  var $i178: i1;
  var $i179: i32;
  var $i180: i1;
  var $i181: i32;
  var $i182: i1;
  var $i183: i64;
  var $i185: i32;
  var $i186: i1;
  var $i187: i32;
  var $i188: i1;
  var $i189: i32;
  var $i190: i1;
  var $i192: i32;
  var $i193: i1;
  var $i194: i32;
  var $i195: i1;
  var $i196: i1;
  var $i197: i1;
  var $i198: i32;
  var $i199: i1;
  var $i200: i32;
  var $i201: i32;
  var $i202: i32;
  var $i203: i1;
  var $i205: i32;
  var $i206: i32;
  var $i207: i32;
  var $i208: i1;
  var $i209: i32;
  var $i210: i1;
  var $i211: i1;
  var $i212: i1;
  var $i213: i32;
  var $i214: i1;
  var $i215: i32;
  var $i216: i32;
  var $i217: i32;
  var $i218: i1;
  var $i220: i32;
  var $i221: i32;
  var $i222: i32;
  var $i223: i1;
  var $i224: i32;
  var $i225: i1;
  var $i226: i32;
  var $i227: i1;
  var $i228: i64;
  var $i230: i32;
  var $i231: i1;
  var $i232: i32;
  var $i233: i1;
  var $i234: i32;
  var $i235: i1;
  var $i236: i32;
  var $i237: i1;
  var $i238: i32;
  var $i240: i32;
  var $i241: i1;
  var $i242: i32;
  var $i243: i1;
  var $i244: i1;
  var $i245: i1;
  var $i246: i32;
  var $i247: i1;
  var $i248: i32;
  var $i249: i1;
  var $i250: i32;
  var $i251: i1;
  var $i252: i32;
  var $i253: i32;
  var $i254: i1;
  var $i255: i32;
  var $i256: i1;
  var $i257: i32;
  var $i258: i1;
  var $i259: i32;
  var $i260: i1;
  var $i261: i1;
  var $i262: i1;
  var $i263: i1;
  var $i264: i1;
  var $i265: i32;
  var $i266: i1;
  var $i267: i32;
  var $i268: i32;
  var $i269: i32;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $i273: i32;
  var $i274: i32;
  var $i275: i64;
  var $i277: i32;
  var $i278: i1;
  var $p279: ref;
  var $i280: i32;
  var $i281: i32;
  var $i282: i64;
  var $i284: i32;
  var $i285: i1;
  var $p286: ref;
  var $i287: i32;
  var $i288: i32;
  var $i289: i64;
  var $i291: i32;
  var $i292: i1;
  var $p293: ref;
  var $i294: i32;
  var $i295: i32;
  var $i296: i64;
  var $i298: i32;
  var $i299: i1;
  var $p300: ref;
  var $i301: i32;
  var $i302: i32;
  var $i303: i32;
  var $i304: i1;
  var $i305: i32;
  var $i306: i32;
  var $i307: i32;
  var $i308: i1;
  var $i309: i32;
  var $i310: i1;
  var $i311: i32;
  var $i312: i1;
  var $i314: i32;
  var $i315: i1;
  var $i316: i32;
  var $i317: i1;
  var $i318: i32;
  var $i319: i1;
  var $i321: i32;
  var $i322: i1;
  var $i323: i32;
  var $i324: i1;
  var $i325: i32;
  var $i326: i1;
  var $i328: i32;
  var $i329: i1;
  var $i330: i32;
  var $i331: i1;
  var $i332: i32;
  var $i333: i1;
  var $i335: i32;
  var $i336: i1;
  var $i337: i32;
  var $i338: i1;
  var $i339: i32;
  var $i340: i1;
  var $i342: i32;
  var $i343: i1;
  var $i344: i32;
  var $i345: i1;
  var $i346: i32;
  var $i347: i1;
  var $i348: i64;
  var $i350: i32;
  var $i351: i1;
  var $i352: i32;
  var $i353: i1;
  var $i354: i32;
  var $i355: i1;
  var $i357: i32;
  var $i358: i1;
  var $i359: i32;
  var $i360: i1;
  var $i361: i1;
  var $i362: i1;
  var $i363: i1;
  var $i364: i32;
  var $i365: i1;
  var $i366: i32;
  var $i367: i32;
  var $i368: i32;
  var $i370: i32;
  var $i371: i1;
  var $i372: i32;
  var $i374: i32;
  var $i375: i1;
  var $i377: i32;
  var $i378: i1;
  var $i379: i32;
  var $i380: i1;
  var $i381: i32;
  var $i382: i1;
  var $i384: i32;
  var $i385: i1;
  var $i386: i32;
  var $i387: i1;
  var $i388: i32;
  var $i389: i1;
  var $i391: i32;
  var $i392: i1;
  var $i393: i32;
  var $i394: i1;
  var $i395: i32;
  var $i396: i1;
  var $i397: i64;
  var $i399: i32;
  var $i400: i1;
  var $i401: i32;
  var $i402: i1;
  var $i403: i32;
  var $i404: i1;
  var $i406: i32;
  var $i407: i1;
  var $i408: i32;
  var $i409: i1;
  var $i410: i32;
  var $i411: i1;
  var $i412: i64;
  var vslice_dummy_var_242: ref;
  var vslice_dummy_var_243: ref;
  var vslice_dummy_var_244: ref;
  var vslice_dummy_var_245: ref;
  var vslice_dummy_var_246: ref;
  var vslice_dummy_var_247: ref;
  var vslice_dummy_var_248: ref;
  var vslice_dummy_var_249: ref;
  var vslice_dummy_var_250: ref;
  var vslice_dummy_var_251: ref;
  var vslice_dummy_var_252: ref;
  var vslice_dummy_var_253: ref;
  var vslice_dummy_var_254: ref;
  var vslice_dummy_var_255: ref;
  var vslice_dummy_var_256: ref;
  var vslice_dummy_var_257: ref;
  var vslice_dummy_var_258: ref;
  var vslice_dummy_var_259: ref;
  var vslice_dummy_var_260: i64;
  var vslice_dummy_var_261: i64;
  var vslice_dummy_var_262: i64;
  var vslice_dummy_var_263: i32;
  var vslice_dummy_var_264: i32;
  var vslice_dummy_var_265: i64;
  var vslice_dummy_var_266: i16;
  var vslice_dummy_var_267: i32;
  var vslice_dummy_var_268: i32;
  var vslice_dummy_var_269: i32;
  var vslice_dummy_var_270: i32;
  var vslice_dummy_var_271: i64;
  var vslice_dummy_var_272: i64;
  var vslice_dummy_var_273: i64;
  var vslice_dummy_var_274: i64;
  var vslice_dummy_var_275: i64;
  var vslice_dummy_var_276: i64;
  var vslice_dummy_var_277: i64;
  var vslice_dummy_var_278: i32;
  var vslice_dummy_var_279: ref;
  var vslice_dummy_var_280: i32;
  var vslice_dummy_var_281: i64;
  var vslice_dummy_var_282: i64;
  var vslice_dummy_var_283: i64;
  var vslice_dummy_var_284: i64;
  var vslice_dummy_var_285: i64;

  $bb0:
    call {:si_unique_call 2580} $initialize();
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2581} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 2582} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2583} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2584} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2585} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2586} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2587} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2588} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2589} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} $p8 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2591} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2592} $p10 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2593} $p11 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} $p12 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2595} $p13 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} $p14 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2597} $p15 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} $p16 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2599} $p17 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2600} $p18 := ldv_init_zalloc(1);
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2601} $p19 := ldv_init_zalloc(1416);
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2602} $p21 := ldv_init_zalloc(48);
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2603} $p23 := ldv_init_zalloc(160);
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2604} $p25 := ldv_init_zalloc(1);
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2605} $p26 := ldv_init_zalloc(48);
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2606} $p28 := ldv_init_zalloc(1);
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2607} $p29 := ldv_init_zalloc(1416);
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2608} $p31 := ldv_init_zalloc(1416);
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2609} $p33 := ldv_init_zalloc(1416);
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2610} $p35 := ldv_init_zalloc(160);
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2611} $p37 := ldv_init_zalloc(1);
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2612} $p38 := ldv_init_zalloc(296);
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2613} $p40 := ldv_init_zalloc(32);
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2614} $p42 := ldv_init_zalloc(1744);
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2615} $p44 := ldv_init_zalloc(1);
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2616} $p45 := ldv_init_zalloc(1416);
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2617} $p47 := ldv_init_zalloc(48);
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2618} $p49 := ldv_init_zalloc(48);
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} $p51 := ldv_init_zalloc(1416);
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2620} $p53 := ldv_init_zalloc(1);
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2621} $p54 := ldv_init_zalloc(1416);
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2622} $p56 := ldv_init_zalloc(48);
    goto corral_source_split_11029;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2623} $p58 := ldv_init_zalloc(1);
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2624} $p59 := ldv_init_zalloc(48);
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2625} $p61 := ldv_init_zalloc(1416);
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2626} $p63 := ldv_init_zalloc(1);
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2627} $p64 := ldv_init_zalloc(1);
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2628} $p65 := ldv_init_zalloc(48);
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2629} $p67 := ldv_init_zalloc(1416);
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2630} $p69 := ldv_init_zalloc(160);
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2631} $p71 := ldv_init_zalloc(1);
    goto corral_source_split_11044;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} $p72 := ldv_init_zalloc(1);
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2633} $p73 := ldv_init_zalloc(1416);
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2634} $p75 := ldv_init_zalloc(48);
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2635} $p77 := ldv_init_zalloc(4208);
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2636} $p79 := ldv_init_zalloc(24);
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2637} $p81 := ldv_init_zalloc(368);
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2638} $p83 := ldv_init_zalloc(1);
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2639} $p84 := ldv_init_zalloc(1152);
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2640} $p86 := ldv_init_zalloc(1);
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2641} $p87 := ldv_init_zalloc(48);
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2642} $p89 := ldv_init_zalloc(1416);
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} $p91 := ldv_init_zalloc(48);
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} $p93 := ldv_init_zalloc(1);
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2645} $p94 := ldv_init_zalloc(1416);
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_11068;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2646} $p96 := ldv_init_zalloc(1);
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2647} $p97 := ldv_init_zalloc(160);
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2648} $p99 := ldv_init_zalloc(1416);
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2649} $p101 := ldv_init_zalloc(48);
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2650} $p103 := ldv_init_zalloc(1);
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2651} $p104 := ldv_init_zalloc(1);
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2652} $p105 := ldv_init_zalloc(48);
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2653} $p107 := ldv_init_zalloc(1416);
    goto corral_source_split_11080;

  corral_source_split_11080:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2654} ldv_initialize();
    goto corral_source_split_11082;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p0);
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2655} vslice_dummy_var_242 := ldv_memset($p109, 0, 8);
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p1);
    goto corral_source_split_11085;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2656} vslice_dummy_var_243 := ldv_memset($p111, 0, 8);
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p2);
    goto corral_source_split_11087;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2657} vslice_dummy_var_244 := ldv_memset($p113, 0, 4);
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p3);
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2658} vslice_dummy_var_245 := ldv_memset($p115, 0, 8);
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p4);
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} vslice_dummy_var_246 := ldv_memset($p117, 0, 4);
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p5);
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2660} vslice_dummy_var_247 := ldv_memset($p119, 0, 4);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p6);
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2661} vslice_dummy_var_248 := ldv_memset($p121, 0, 8);
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p7);
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} vslice_dummy_var_249 := ldv_memset($p123, 0, 4);
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p8);
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2663} vslice_dummy_var_250 := ldv_memset($p125, 0, 4);
    goto corral_source_split_11100;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p9);
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2664} vslice_dummy_var_251 := ldv_memset($p127, 0, 4);
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p10);
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2665} vslice_dummy_var_252 := ldv_memset($p129, 0, 4);
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p11);
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2666} vslice_dummy_var_253 := ldv_memset($p131, 0, 8);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p12);
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2667} vslice_dummy_var_254 := ldv_memset($p133, 0, 4);
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p13);
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} vslice_dummy_var_255 := ldv_memset($p135, 0, 4);
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p14);
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2669} vslice_dummy_var_256 := ldv_memset($p137, 0, 4);
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p15);
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2670} vslice_dummy_var_257 := ldv_memset($p139, 0, 4);
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p16);
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2671} vslice_dummy_var_258 := ldv_memset($p141, 0, 8);
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p17);
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} vslice_dummy_var_259 := ldv_memset($p143, 0, 8);
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    $M.69 := 0;
    call {:si_unique_call 2673} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    $M.70 := 0;
    call {:si_unique_call 2674} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(0);
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    $M.71 := 0;
    call {:si_unique_call 2675} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    $M.72 := 0;
    call {:si_unique_call 2676} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(0);
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    $M.73 := 0;
    call {:si_unique_call 2677} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    $M.74 := 0;
    call {:si_unique_call 2678} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(0);
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2679} work_init_1();
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 2680} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    $M.76 := 0;
    call {:si_unique_call 2681} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(0);
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    $M.77 := 0;
    call {:si_unique_call 2682} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2683} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_11129;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    $M.79 := 0;
    call {:si_unique_call 2684} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    $M.80 := 0;
    call {:si_unique_call 2685} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    goto corral_source_split_11131;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    $M.81 := 0;
    call {:si_unique_call 2686} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    $M.82 := 0;
    call {:si_unique_call 2687} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    $M.83 := 0;
    call {:si_unique_call 2688} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    $M.84 := 0;
    call {:si_unique_call 2689} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    $M.85 := 0;
    call {:si_unique_call 2690} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(0);
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    $M.86 := 0;
    call {:si_unique_call 2691} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    $M.87 := 0;
    call {:si_unique_call 2692} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    $M.88 := 0;
    call {:si_unique_call 2693} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    $M.89 := 0;
    call {:si_unique_call 2694} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    $M.90 := 0;
    call {:si_unique_call 2695} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(0);
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    $M.91 := 0;
    call {:si_unique_call 2696} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    $M.92 := 0;
    call {:si_unique_call 2697} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i185, $i186, $i187, $i188, $i189, $i190, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $p272, $i273, $i274, $i275, $i277, $i278, $p279, $i280, $i281, $i282, $i284, $i285, $p286, $i287, $i288, $i289, $i291, $i292, $p293, $i294, $i295, $i296, $i298, $i299, $p300, $i301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i314, $i315, $i316, $i317, $i318, $i319, $i321, $i322, $i323, $i324, $i325, $i326, $i328, $i329, $i330, $i331, $i332, $i333, $i335, $i336, $i337, $i338, $i339, $i340, $i342, $i343, $i344, $i345, $i346, $i347, $i348, $i350, $i351, $i352, $i353, $i354, $i355, $i357, $i358, $i359, $i360, $i361, $i362, $i363, $i364, $i365, $i366, $i367, $i368, $i370, $i371, $i372, $i374, $i375, $i377, $i378, $i379, $i380, $i381, $i382, $i384, $i385, $i386, $i387, $i388, $i389, $i391, $i392, $i393, $i394, $i395, $i396, $i397, $i399, $i400, $i401, $i402, $i403, $i404, $i406, $i407, $i408, $i409, $i410, $i411, $i412, vslice_dummy_var_260, vslice_dummy_var_261, vslice_dummy_var_262, vslice_dummy_var_263, vslice_dummy_var_264, vslice_dummy_var_265, vslice_dummy_var_266, vslice_dummy_var_267, vslice_dummy_var_268, vslice_dummy_var_269, vslice_dummy_var_270, vslice_dummy_var_271, vslice_dummy_var_272, vslice_dummy_var_273, vslice_dummy_var_274, vslice_dummy_var_275, vslice_dummy_var_276, vslice_dummy_var_277, vslice_dummy_var_278, vslice_dummy_var_279, vslice_dummy_var_280, vslice_dummy_var_281, vslice_dummy_var_282, vslice_dummy_var_283, vslice_dummy_var_284, vslice_dummy_var_285 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p20, $p22, $p24, $p25, $p27, $p28, $p30, $p32, $p34, $p36, $p37, $p39, $p41, $p43, $p44, $p46, $p48, $p50, $p52, $p53, $p55, $p57, $p58, $p60, $p62, $p63, $p64, $p66, $p68, $p70, $p71, $p72, $p74, $p76, $p78, $p80, $p82, $p83, $p85, $p86, $p88, $p90, $p92, $p93, $p95, $p96, $p98, $p100, $p102, $p103, $p104, $p106, $p108, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i185, $i186, $i187, $i188, $i189, $i190, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $p272, $i273, $i274, $i275, $i277, $i278, $p279, $i280, $i281, $i282, $i284, $i285, $p286, $i287, $i288, $i289, $i291, $i292, $p293, $i294, $i295, $i296, $i298, $i299, $p300, $i301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i314, $i315, $i316, $i317, $i318, $i319, $i321, $i322, $i323, $i324, $i325, $i326, $i328, $i329, $i330, $i331, $i332, $i333, $i335, $i336, $i337, $i338, $i339, $i340, $i342, $i343, $i344, $i345, $i346, $i347, $i348, $i350, $i351, $i352, $i353, $i354, $i355, $i357, $i358, $i359, $i360, $i361, $i362, $i363, $i364, $i365, $i366, $i367, $i368, $i370, $i371, $i372, $i374, $i375, $i377, $i378, $i379, $i380, $i381, $i382, $i384, $i385, $i386, $i387, $i388, $i389, $i391, $i392, $i393, $i394, $i395, $i396, $i397, $i399, $i400, $i401, $i402, $i403, $i404, $i406, $i407, $i408, $i409, $i410, $i411, $i412, vslice_dummy_var_260, vslice_dummy_var_261, vslice_dummy_var_262, vslice_dummy_var_263, vslice_dummy_var_264, vslice_dummy_var_265, vslice_dummy_var_266, vslice_dummy_var_267, vslice_dummy_var_268, vslice_dummy_var_269, vslice_dummy_var_270, vslice_dummy_var_271, vslice_dummy_var_272, vslice_dummy_var_273, vslice_dummy_var_274, vslice_dummy_var_275, vslice_dummy_var_276, vslice_dummy_var_277, vslice_dummy_var_278, vslice_dummy_var_279, vslice_dummy_var_280, vslice_dummy_var_281, vslice_dummy_var_282, vslice_dummy_var_283, vslice_dummy_var_284, vslice_dummy_var_285);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i146 := $slt.i32($i145, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    $i147 := $slt.i32($i145, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    $i148 := $slt.i32($i145, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    $i149 := $slt.i32($i145, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    $i150 := $slt.i32($i145, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i145, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2886} ldv_stop();
    goto corral_source_split_11673;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb64_dummy;

  $bb13:
    assume $i151 == 1;
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    $i406 := $M.92;
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    $i407 := $ne.i32($i406, 0);
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  $bb383:
    assume !($i407 == 1);
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb382:
    assume $i407 == 1;
    goto corral_source_split_11660;

  corral_source_split_11660:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2880} $i408 := __VERIFIER_nondet_int();
    call {:si_unique_call 2881} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i408);
    call {:si_unique_call 2882} {:cexpr "tmp___75"} boogie_si_record_i32($i408);
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    $i409 := $eq.i32($i408, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb385, $bb386;

  $bb386:
    assume !($i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2885} ldv_stop();
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb385:
    assume $i409 == 1;
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    $i410 := $M.92;
    goto corral_source_split_11663;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    $i411 := $eq.i32($i410, 1);
    goto corral_source_split_11664;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb387, $bb388;

  $bb388:
    assume !($i411 == 1);
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb387:
    assume $i411 == 1;
    goto corral_source_split_11666;

  corral_source_split_11666:
    assume {:verifier.code 0} true;
    $i412 := $load.i64($M.67, $p17);
    goto corral_source_split_11667;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2883} vslice_dummy_var_285 := rbd_image_refresh($p108, $p106, $p104, $i412);
    goto corral_source_split_11668;

  corral_source_split_11668:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2884} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb11:
    assume $i150 == 1;
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    $i399 := $M.91;
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    $i400 := $ne.i32($i399, 0);
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  $bb371:
    assume !($i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb370:
    assume $i400 == 1;
    goto corral_source_split_11648;

  corral_source_split_11648:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2874} $i401 := __VERIFIER_nondet_int();
    call {:si_unique_call 2875} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i401);
    call {:si_unique_call 2876} {:cexpr "tmp___74"} boogie_si_record_i32($i401);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    $i402 := $eq.i32($i401, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  $bb374:
    assume !($i402 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2879} ldv_stop();
    goto corral_source_split_11658;

  corral_source_split_11658:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb373:
    assume $i402 == 1;
    goto corral_source_split_11650;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    $i403 := $M.91;
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    $i404 := $eq.i32($i403, 1);
    goto corral_source_split_11652;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb375, $bb376;

  $bb376:
    assume !($i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb375:
    assume $i404 == 1;
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2877} vslice_dummy_var_284 := rbd_client_id_show($p100, $p102, $p103);
    goto corral_source_split_11655;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 2878} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_11656;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb9:
    assume $i149 == 1;
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    $i391 := $M.90;
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    $i392 := $ne.i32($i391, 0);
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  $bb359:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb358:
    assume $i392 == 1;
    goto corral_source_split_11635;

  corral_source_split_11635:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2868} $i393 := __VERIFIER_nondet_int();
    call {:si_unique_call 2869} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i393);
    call {:si_unique_call 2870} {:cexpr "tmp___73"} boogie_si_record_i32($i393);
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    $i394 := $eq.i32($i393, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  $bb362:
    assume !($i394 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2873} ldv_stop();
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb361:
    assume $i394 == 1;
    goto corral_source_split_11637;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    $i395 := $M.90;
    goto corral_source_split_11638;

  corral_source_split_11638:
    assume {:verifier.code 0} true;
    $i396 := $eq.i32($i395, 1);
    goto corral_source_split_11639;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb363, $bb364;

  $bb364:
    assume !($i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb363:
    assume $i396 == 1;
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    $i397 := $load.i64($M.67, $p16);
    goto corral_source_split_11642;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2871} vslice_dummy_var_283 := rbd_remove_single_major($p98, $p96, $i397);
    goto corral_source_split_11643;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 2872} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_11644;

  corral_source_split_11644:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb7:
    assume $i148 == 1;
    assume {:verifier.code 0} true;
    $i152 := $slt.i32($i145, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    $i153 := $slt.i32($i145, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i153 == 1);
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    $i384 := $M.89;
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    $i385 := $ne.i32($i384, 0);
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  $bb347:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb346:
    assume $i385 == 1;
    goto corral_source_split_11623;

  corral_source_split_11623:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2862} $i386 := __VERIFIER_nondet_int();
    call {:si_unique_call 2863} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i386);
    call {:si_unique_call 2864} {:cexpr "tmp___72"} boogie_si_record_i32($i386);
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    $i387 := $eq.i32($i386, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb349, $bb350;

  $bb350:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2867} ldv_stop();
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb349:
    assume $i387 == 1;
    goto corral_source_split_11625;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    $i388 := $M.89;
    goto corral_source_split_11626;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    $i389 := $eq.i32($i388, 1);
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb351, $bb352;

  $bb352:
    assume !($i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb351:
    assume $i389 == 1;
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2865} vslice_dummy_var_282 := rbd_snap_show($p95, $p92, $p93);
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 2866} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11631;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb18:
    assume $i153 == 1;
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    $i377 := $M.88;
    goto corral_source_split_11162;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    $i378 := $ne.i32($i377, 0);
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  $bb335:
    assume !($i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb334:
    assume $i378 == 1;
    goto corral_source_split_11611;

  corral_source_split_11611:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2856} $i379 := __VERIFIER_nondet_int();
    call {:si_unique_call 2857} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i379);
    call {:si_unique_call 2858} {:cexpr "tmp___71"} boogie_si_record_i32($i379);
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    $i380 := $eq.i32($i379, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  $bb338:
    assume !($i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2861} ldv_stop();
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb337:
    assume $i380 == 1;
    goto corral_source_split_11613;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    $i381 := $M.88;
    goto corral_source_split_11614;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    $i382 := $eq.i32($i381, 1);
    goto corral_source_split_11615;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb339, $bb340;

  $bb340:
    assume !($i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb339:
    assume $i382 == 1;
    goto corral_source_split_11617;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2859} vslice_dummy_var_281 := rbd_pool_id_show($p90, $p88, $p86);
    goto corral_source_split_11618;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 2860} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb16:
    assume $i152 == 1;
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    $i357 := $M.87;
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    $i358 := $ne.i32($i357, 0);
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb309, $bb310;

  $bb310:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb309:
    assume $i358 == 1;
    goto corral_source_split_11579;

  corral_source_split_11579:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2846} $i359 := __VERIFIER_nondet_int();
    call {:si_unique_call 2847} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i359);
    call {:si_unique_call 2848} {:cexpr "tmp___70"} boogie_si_record_i32($i359);
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    $i360 := $slt.i32($i359, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  $bb313:
    assume !($i360 == 1);
    assume {:verifier.code 0} true;
    $i361 := $slt.i32($i359, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i361 == 1);
    assume {:verifier.code 0} true;
    $i362 := $eq.i32($i359, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    assume !($i362 == 1);
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2855} ldv_stop();
    goto corral_source_split_11609;

  corral_source_split_11609:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb316:
    assume $i362 == 1;
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    $i374 := $M.87;
    goto corral_source_split_11586;

  corral_source_split_11586:
    assume {:verifier.code 0} true;
    $i375 := $eq.i32($i374, 1);
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  $bb329:
    assume !($i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb328:
    assume $i375 == 1;
    goto corral_source_split_11605;

  corral_source_split_11605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2853} vslice_dummy_var_280 := rbd_queue_rq($p85, $p80);
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 2854} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_11607;

  corral_source_split_11607:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb314:
    assume $i361 == 1;
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    $i370 := $M.87;
    goto corral_source_split_11582;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    $i371 := $eq.i32($i370, 1);
    goto corral_source_split_11583;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  $bb326:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb325:
    assume $i371 == 1;
    goto corral_source_split_11600;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    $i372 := $load.i32($M.67, $p13);
    goto corral_source_split_11601;

  corral_source_split_11601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2851} vslice_dummy_var_279 := blk_mq_map_queue($p78, $i372);
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 2852} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_11603;

  corral_source_split_11603:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb312:
    assume $i360 == 1;
    assume {:verifier.code 0} true;
    $i363 := $eq.i32($i359, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    assume !($i363 == 1);
    goto $bb318;

  $bb319:
    assume $i363 == 1;
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    $i364 := $M.87;
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    $i365 := $eq.i32($i364, 1);
    goto corral_source_split_11591;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  $bb322:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb321:
    assume $i365 == 1;
    goto corral_source_split_11593;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    $i366 := $load.i32($M.67, $p14);
    goto corral_source_split_11594;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    $i367 := $load.i32($M.67, $p12);
    goto corral_source_split_11595;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    $i368 := $load.i32($M.67, $p15);
    goto corral_source_split_11596;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2849} vslice_dummy_var_278 := rbd_init_request($p83, $p82, $i366, $i367, $i368);
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 2850} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_11598;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb5:
    assume $i147 == 1;
    assume {:verifier.code 0} true;
    $i154 := $slt.i32($i145, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    $i155 := $slt.i32($i145, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    $i156 := $slt.i32($i145, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i156 == 1);
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $i350 := $M.86;
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    $i351 := $ne.i32($i350, 0);
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  $bb298:
    assume !($i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb297:
    assume $i351 == 1;
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2840} $i352 := __VERIFIER_nondet_int();
    call {:si_unique_call 2841} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i352);
    call {:si_unique_call 2842} {:cexpr "tmp___69"} boogie_si_record_i32($i352);
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    $i353 := $eq.i32($i352, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb300, $bb301;

  $bb301:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2845} ldv_stop();
    goto corral_source_split_11577;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb300:
    assume $i353 == 1;
    goto corral_source_split_11569;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    $i354 := $M.86;
    goto corral_source_split_11570;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    $i355 := $eq.i32($i354, 1);
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb302:
    assume $i355 == 1;
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2843} vslice_dummy_var_277 := rbd_size_show($p74, $p76, $p72);
    goto corral_source_split_11574;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 2844} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb24:
    assume $i156 == 1;
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    $i342 := $M.85;
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    $i343 := $ne.i32($i342, 0);
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb285:
    assume $i343 == 1;
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2834} $i344 := __VERIFIER_nondet_int();
    call {:si_unique_call 2835} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i344);
    call {:si_unique_call 2836} {:cexpr "tmp___68"} boogie_si_record_i32($i344);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    $i345 := $eq.i32($i344, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i345 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2839} ldv_stop();
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb288:
    assume $i345 == 1;
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    $i346 := $M.85;
    goto corral_source_split_11557;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    $i347 := $eq.i32($i346, 1);
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb290:
    assume $i347 == 1;
    goto corral_source_split_11560;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    $i348 := $load.i64($M.67, $p11);
    goto corral_source_split_11561;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2837} vslice_dummy_var_276 := rbd_add_single_major($p70, $p71, $i348);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 2838} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_11563;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    goto $bb292;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i155 == 1;
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    $i335 := $M.84;
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    $i336 := $ne.i32($i335, 0);
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  $bb274:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb273:
    assume $i336 == 1;
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2828} $i337 := __VERIFIER_nondet_int();
    call {:si_unique_call 2829} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i337);
    call {:si_unique_call 2830} {:cexpr "tmp___67"} boogie_si_record_i32($i337);
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    $i338 := $eq.i32($i337, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  $bb277:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2833} ldv_stop();
    goto corral_source_split_11552;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb276:
    assume $i338 == 1;
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    $i339 := $M.84;
    goto corral_source_split_11545;

  corral_source_split_11545:
    assume {:verifier.code 0} true;
    $i340 := $eq.i32($i339, 1);
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb278:
    assume $i340 == 1;
    goto corral_source_split_11548;

  corral_source_split_11548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2831} vslice_dummy_var_275 := rbd_major_show($p68, $p66, $p64);
    goto corral_source_split_11549;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 2832} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb20:
    assume $i154 == 1;
    assume {:verifier.code 0} true;
    $i157 := $slt.i32($i145, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    $i158 := $slt.i32($i145, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i158 == 1);
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    $i328 := $M.83;
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    $i329 := $ne.i32($i328, 0);
    goto corral_source_split_11191;

  corral_source_split_11191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb261:
    assume $i329 == 1;
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2822} $i330 := __VERIFIER_nondet_int();
    call {:si_unique_call 2823} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i330);
    call {:si_unique_call 2824} {:cexpr "tmp___66"} boogie_si_record_i32($i330);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $i331 := $eq.i32($i330, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2827} ldv_stop();
    goto corral_source_split_11540;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb264:
    assume $i331 == 1;
    goto corral_source_split_11532;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    $i332 := $M.83;
    goto corral_source_split_11533;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    $i333 := $eq.i32($i332, 1);
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb266:
    assume $i333 == 1;
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2825} vslice_dummy_var_274 := rbd_pool_show($p62, $p60, $p63);
    goto corral_source_split_11537;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 2826} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_11538;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb28:
    assume $i158 == 1;
    goto corral_source_split_11185;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    $i321 := $M.82;
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    $i322 := $ne.i32($i321, 0);
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb249:
    assume $i322 == 1;
    goto corral_source_split_11518;

  corral_source_split_11518:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2816} $i323 := __VERIFIER_nondet_int();
    call {:si_unique_call 2817} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i323);
    call {:si_unique_call 2818} {:cexpr "tmp___65"} boogie_si_record_i32($i323);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $i324 := $eq.i32($i323, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2821} ldv_stop();
    goto corral_source_split_11528;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb252:
    assume $i324 == 1;
    goto corral_source_split_11520;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    $i325 := $M.82;
    goto corral_source_split_11521;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i325, 1);
    goto corral_source_split_11522;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb254:
    assume $i326 == 1;
    goto corral_source_split_11524;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2819} vslice_dummy_var_273 := rbd_parent_show($p55, $p57, $p58);
    goto corral_source_split_11525;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 2820} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb26:
    assume $i157 == 1;
    goto corral_source_split_11181;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    $i314 := $M.81;
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    $i315 := $ne.i32($i314, 0);
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb237:
    assume $i315 == 1;
    goto corral_source_split_11506;

  corral_source_split_11506:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2810} $i316 := __VERIFIER_nondet_int();
    call {:si_unique_call 2811} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i316);
    call {:si_unique_call 2812} {:cexpr "tmp___64"} boogie_si_record_i32($i316);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i316, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2815} ldv_stop();
    goto corral_source_split_11516;

  corral_source_split_11516:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb240:
    assume $i317 == 1;
    goto corral_source_split_11508;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    $i318 := $M.81;
    goto corral_source_split_11509;

  corral_source_split_11509:
    assume {:verifier.code 0} true;
    $i319 := $eq.i32($i318, 1);
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb242:
    assume $i319 == 1;
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2813} vslice_dummy_var_272 := rbd_image_id_show($p52, $p50, $p53);
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2814} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11514;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb3:
    assume $i146 == 1;
    assume {:verifier.code 0} true;
    $i159 := $slt.i32($i145, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    $i160 := $slt.i32($i145, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    $i161 := $slt.i32($i145, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    $i162 := $slt.i32($i145, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i162 == 1);
    goto corral_source_split_11201;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    $i307 := $M.80;
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    $i308 := $ne.i32($i307, 0);
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb225:
    assume $i308 == 1;
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2804} $i309 := __VERIFIER_nondet_int();
    call {:si_unique_call 2805} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i309);
    call {:si_unique_call 2806} {:cexpr "tmp___63"} boogie_si_record_i32($i309);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $i310 := $eq.i32($i309, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2809} ldv_stop();
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb228:
    assume $i310 == 1;
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    $i311 := $M.80;
    goto corral_source_split_11497;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    $i312 := $eq.i32($i311, 1);
    goto corral_source_split_11498;

  corral_source_split_11498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb230:
    assume $i312 == 1;
    goto corral_source_split_11500;

  corral_source_split_11500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2807} vslice_dummy_var_271 := rbd_features_show($p46, $p48, $p44);
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 2808} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_11502;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb36:
    assume $i162 == 1;
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    $i257 := $M.79;
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    $i258 := $ne.i32($i257, 0);
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb186:
    assume $i258 == 1;
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2785} $i259 := __VERIFIER_nondet_int();
    call {:si_unique_call 2786} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i259);
    call {:si_unique_call 2787} {:cexpr "tmp___62"} boogie_si_record_i32($i259);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $i260 := $slt.i32($i259, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    $i261 := $slt.i32($i259, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    $i262 := $eq.i32($i259, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    assume !($i262 == 1);
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2803} ldv_stop();
    goto corral_source_split_11492;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb193:
    assume $i262 == 1;
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    $i298 := $M.79;
    goto corral_source_split_11421;

  corral_source_split_11421:
    assume {:verifier.code 0} true;
    $i299 := $eq.i32($i298, 1);
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb216:
    assume $i299 == 1;
    goto corral_source_split_11478;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    $p300 := $M.68;
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    $i301 := $load.i32($M.67, $p8);
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2799} $i302 := rbd_open($p300, $i301);
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    $M.94 := $i302;
    call {:si_unique_call 2800} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i302);
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    $i303 := $M.94;
    goto corral_source_split_11483;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    $i304 := $eq.i32($i303, 0);
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb218:
    assume $i304 == 1;
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 2801} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(2);
    goto corral_source_split_11487;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    $i305 := $M.77;
    goto corral_source_split_11488;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    $i306 := $add.i32($i305, 1);
    goto corral_source_split_11489;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    $M.77 := $i306;
    call {:si_unique_call 2802} {:cexpr "ref_cnt"} boogie_si_record_i32($i306);
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb191:
    assume $i261 == 1;
    goto corral_source_split_11416;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    $i284 := $M.79;
    goto corral_source_split_11417;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i284, 1);
    goto corral_source_split_11418;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $i291 := $M.79;
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    $i292 := $eq.i32($i291, 2);
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb213:
    assume $i292 == 1;
    goto corral_source_split_11470;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    $p293 := $M.68;
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    $i294 := $load.i32($M.67, $p4);
    goto corral_source_split_11472;

  corral_source_split_11472:
    assume {:verifier.code 0} true;
    $i295 := $load.i32($M.67, $p10);
    goto corral_source_split_11473;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    $i296 := $load.i64($M.67, $p3);
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2797} vslice_dummy_var_270 := rbd_compat_ioctl($p293, $i294, $i295, $i296);
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 2798} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(2);
    goto corral_source_split_11476;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb210:
    assume $i285 == 1;
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    $p286 := $M.68;
    goto corral_source_split_11460;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    $i287 := $load.i32($M.67, $p4);
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    $i288 := $load.i32($M.67, $p10);
    goto corral_source_split_11462;

  corral_source_split_11462:
    assume {:verifier.code 0} true;
    $i289 := $load.i64($M.67, $p3);
    goto corral_source_split_11463;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2795} vslice_dummy_var_269 := rbd_compat_ioctl($p286, $i287, $i288, $i289);
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2796} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb189:
    assume $i260 == 1;
    assume {:verifier.code 0} true;
    $i263 := $slt.i32($i259, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i263 == 1);
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    $i270 := $M.79;
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, 1);
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $i277 := $M.79;
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i277, 2);
    goto corral_source_split_11449;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb207:
    assume $i278 == 1;
    goto corral_source_split_11451;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    $p279 := $M.68;
    goto corral_source_split_11452;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    $i280 := $load.i32($M.67, $p5);
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    $i281 := $load.i32($M.67, $p9);
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    $i282 := $load.i64($M.67, $p6);
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2793} vslice_dummy_var_268 := rbd_ioctl($p279, $i280, $i281, $i282);
    goto corral_source_split_11456;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 2794} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(2);
    goto corral_source_split_11457;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb204:
    assume $i271 == 1;
    goto corral_source_split_11440;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    $p272 := $M.68;
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    $i273 := $load.i32($M.67, $p5);
    goto corral_source_split_11442;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    $i274 := $load.i32($M.67, $p9);
    goto corral_source_split_11443;

  corral_source_split_11443:
    assume {:verifier.code 0} true;
    $i275 := $load.i64($M.67, $p6);
    goto corral_source_split_11444;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2791} vslice_dummy_var_267 := rbd_ioctl($p272, $i273, $i274, $i275);
    goto corral_source_split_11445;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2792} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_11446;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb196:
    assume $i263 == 1;
    assume {:verifier.code 0} true;
    $i264 := $eq.i32($i259, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    assume !($i264 == 1);
    goto $bb195;

  $bb198:
    assume $i264 == 1;
    goto corral_source_split_11428;

  corral_source_split_11428:
    assume {:verifier.code 0} true;
    $i265 := $M.79;
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 2);
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb200:
    assume $i266 == 1;
    goto corral_source_split_11432;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    $i267 := $load.i32($M.67, $p7);
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2788} rbd_release($p43, $i267);
    goto corral_source_split_11434;

  corral_source_split_11434:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2789} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_11435;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    $i268 := $M.77;
    goto corral_source_split_11436;

  corral_source_split_11436:
    assume {:verifier.code 0} true;
    $i269 := $sub.i32($i268, 1);
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    $M.77 := $i269;
    call {:si_unique_call 2790} {:cexpr "ref_cnt"} boogie_si_record_i32($i269);
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb34:
    assume $i161 == 1;
    goto corral_source_split_11193;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    $i240 := $M.78;
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    $i241 := $ne.i32($i240, 0);
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb156:
    assume $i241 == 1;
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2752} $i242 := __VERIFIER_nondet_int();
    call {:si_unique_call 2753} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i242);
    call {:si_unique_call 2754} {:cexpr "tmp___61"} boogie_si_record_i32($i242);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $i243 := $slt.i32($i242, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    $i244 := $eq.i32($i242, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    assume !($i244 == 1);
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2784} ldv_stop();
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb161:
    assume $i244 == 1;
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    $i250 := $M.78;
    goto corral_source_split_11358;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i250, 1);
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb174:
    assume $i251 == 1;
    goto corral_source_split_11375;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2758} $i252 := rbd_init();
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    $M.93 := $i252;
    call {:si_unique_call 2759} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i252);
    goto corral_source_split_11377;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    $i253 := $M.93;
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32($i253, 0);
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $i255 := $M.93;
    goto corral_source_split_11406;

  corral_source_split_11406:
    assume {:verifier.code 0} true;
    $i256 := $ne.i32($i255, 0);
    goto corral_source_split_11407;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb179:
    assume $i256 == 1;
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    $M.78 := 2;
    call {:si_unique_call 2783} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_11410;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2757} ldv_check_final_state();
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_11373;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb176:
    assume $i254 == 1;
    goto corral_source_split_11381;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    $M.78 := 3;
    call {:si_unique_call 2760} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_11382;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2761} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 2762} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 2763} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 2764} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 2765} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 2766} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_11388;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 2767} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 2768} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 2769} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_11391;

  corral_source_split_11391:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 2770} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 2771} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_11393;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2772} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 2773} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2774} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2775} ldv_initialize_block_device_operations_16();
    goto corral_source_split_11397;

  corral_source_split_11397:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 2776} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 2777} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(1);
    goto corral_source_split_11399;

  corral_source_split_11399:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 2778} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 2779} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 2780} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 2781} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_11403;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 2782} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb159:
    assume $i243 == 1;
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i242, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    assume !($i245 == 1);
    goto $bb163;

  $bb164:
    assume $i245 == 1;
    goto corral_source_split_11361;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    $i246 := $M.78;
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i246, 3);
    goto corral_source_split_11363;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    assume !($i247 == 1);
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb166:
    assume $i247 == 1;
    goto corral_source_split_11365;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    $i248 := $M.77;
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i248, 0);
    goto corral_source_split_11367;

  corral_source_split_11367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    assume !($i249 == 1);
    goto $bb168;

  $bb169:
    assume $i249 == 1;
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2755} rbd_exit();
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    $M.78 := 2;
    call {:si_unique_call 2756} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb32:
    assume $i160 == 1;
    assume {:verifier.code 0} true;
    $i163 := $slt.i32($i145, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    $i164 := $slt.i32($i145, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i164 == 1);
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    $i232 := $M.76;
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    $i233 := $ne.i32($i232, 0);
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb144:
    assume $i233 == 1;
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2746} $i234 := __VERIFIER_nondet_int();
    call {:si_unique_call 2747} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i234);
    call {:si_unique_call 2748} {:cexpr "tmp___60"} boogie_si_record_i32($i234);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2751} ldv_stop();
    goto corral_source_split_11353;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb147:
    assume $i235 == 1;
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    $i236 := $M.76;
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i236, 1);
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb149:
    assume $i237 == 1;
    goto corral_source_split_11348;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    $i238 := $load.i32($M.67, $p2);
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2749} vslice_dummy_var_266 := rbd_bus_is_visible($p39, $p41, $i238);
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 2750} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11351;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb40:
    assume $i164 == 1;
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    $i230 := $M.75;
    goto corral_source_split_11210;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    $i231 := $ne.i32($i230, 0);
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb141:
    assume $i231 == 1;
    goto corral_source_split_11339;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2745} invoke_work_1();
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb38:
    assume $i163 == 1;
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    $i222 := $M.74;
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    $i223 := $ne.i32($i222, 0);
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb129:
    assume $i223 == 1;
    goto corral_source_split_11326;

  corral_source_split_11326:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2739} $i224 := __VERIFIER_nondet_int();
    call {:si_unique_call 2740} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i224);
    call {:si_unique_call 2741} {:cexpr "tmp___59"} boogie_si_record_i32($i224);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i224, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2744} ldv_stop();
    goto corral_source_split_11337;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb132:
    assume $i225 == 1;
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    $i226 := $M.74;
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i226, 1);
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb134:
    assume $i227 == 1;
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    $i228 := $load.i64($M.67, $p1);
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2742} vslice_dummy_var_265 := rbd_add($p36, $p37, $i228);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 2743} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(1);
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    goto $bb136;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i159 == 1;
    assume {:verifier.code 0} true;
    $i165 := $slt.i32($i145, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    $i166 := $slt.i32($i145, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    $i167 := $slt.i32($i145, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i167 == 1);
    goto corral_source_split_11225;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    $i207 := $M.73;
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    $i208 := $ne.i32($i207, 0);
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb109:
    assume $i208 == 1;
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2729} $i209 := __VERIFIER_nondet_int();
    call {:si_unique_call 2730} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i209);
    call {:si_unique_call 2731} {:cexpr "tmp___58"} boogie_si_record_i32($i209);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i210 := $slt.i32($i209, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i209, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    assume !($i211 == 1);
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2738} ldv_stop();
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb114:
    assume $i211 == 1;
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    $i217 := $M.73;
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 1);
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb123:
    assume $i218 == 1;
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2735} vslice_dummy_var_264 := ldv_probe_2();
    goto corral_source_split_11318;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    $M.73 := 2;
    call {:si_unique_call 2736} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    $i220 := $M.77;
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    $i221 := $add.i32($i220, 1);
    goto corral_source_split_11321;

  corral_source_split_11321:
    assume {:verifier.code 0} true;
    $M.77 := $i221;
    call {:si_unique_call 2737} {:cexpr "ref_cnt"} boogie_si_record_i32($i221);
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb112:
    assume $i210 == 1;
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i209, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !($i212 == 1);
    goto $bb116;

  $bb117:
    assume $i212 == 1;
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    $i213 := $M.73;
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    $i214 := $eq.i32($i213, 2);
    goto corral_source_split_11308;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb119:
    assume $i214 == 1;
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2732} rbd_sysfs_dev_release($p34);
    goto corral_source_split_11311;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 2733} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    $i215 := $M.77;
    goto corral_source_split_11313;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    $i216 := $sub.i32($i215, 1);
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    $M.77 := $i216;
    call {:si_unique_call 2734} {:cexpr "ref_cnt"} boogie_si_record_i32($i216);
    goto corral_source_split_11315;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb46:
    assume $i167 == 1;
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    $i192 := $M.72;
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    $i193 := $ne.i32($i192, 0);
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb89:
    assume $i193 == 1;
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2719} $i194 := __VERIFIER_nondet_int();
    call {:si_unique_call 2720} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i194);
    call {:si_unique_call 2721} {:cexpr "tmp___57"} boogie_si_record_i32($i194);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i195 := $slt.i32($i194, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i194, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i196 == 1);
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2728} ldv_stop();
    goto corral_source_split_11298;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb94:
    assume $i196 == 1;
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    $i202 := $M.72;
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i202, 1);
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb103:
    assume $i203 == 1;
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2725} vslice_dummy_var_263 := ldv_probe_17();
    goto corral_source_split_11292;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    $M.72 := 2;
    call {:si_unique_call 2726} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(2);
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    $i205 := $M.77;
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    $i206 := $add.i32($i205, 1);
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    $M.77 := $i206;
    call {:si_unique_call 2727} {:cexpr "ref_cnt"} boogie_si_record_i32($i206);
    goto corral_source_split_11296;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb92:
    assume $i195 == 1;
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i194, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume !($i197 == 1);
    goto $bb96;

  $bb97:
    assume $i197 == 1;
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    $i198 := $M.72;
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i198, 2);
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb99:
    assume $i199 == 1;
    goto corral_source_split_11284;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2722} rbd_root_dev_release($p32);
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 2723} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    $i200 := $M.77;
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    $i201 := $sub.i32($i200, 1);
    goto corral_source_split_11288;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    $M.77 := $i201;
    call {:si_unique_call 2724} {:cexpr "ref_cnt"} boogie_si_record_i32($i201);
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb44:
    assume $i166 == 1;
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    $i185 := $M.71;
    goto corral_source_split_11218;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    $i186 := $ne.i32($i185, 0);
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb77:
    assume $i186 == 1;
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2713} $i187 := __VERIFIER_nondet_int();
    call {:si_unique_call 2714} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i187);
    call {:si_unique_call 2715} {:cexpr "tmp___56"} boogie_si_record_i32($i187);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2718} ldv_stop();
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb80:
    assume $i188 == 1;
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    $i189 := $M.71;
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i189, 1);
    goto corral_source_split_11266;

  corral_source_split_11266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb82:
    assume $i190 == 1;
    goto corral_source_split_11268;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2716} vslice_dummy_var_262 := rbd_name_show($p30, $p27, $p28);
    goto corral_source_split_11269;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 2717} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb42:
    assume $i165 == 1;
    assume {:verifier.code 0} true;
    $i168 := $slt.i32($i145, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i168 == 1);
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    $i177 := $M.70;
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    $i178 := $ne.i32($i177, 0);
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb65:
    assume $i178 == 1;
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2707} $i179 := __VERIFIER_nondet_int();
    call {:si_unique_call 2708} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i179);
    call {:si_unique_call 2709} {:cexpr "tmp___55"} boogie_si_record_i32($i179);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2712} ldv_stop();
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb68:
    assume $i180 == 1;
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    $i181 := $M.70;
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, 1);
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb70:
    assume $i182 == 1;
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    $i183 := $load.i64($M.67, $p0);
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2710} vslice_dummy_var_261 := rbd_remove($p24, $p25, $i183);
    goto corral_source_split_11257;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 2711} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb48:
    assume $i168 == 1;
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i145, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i169 == 1);
    goto $bb15;

  $bb50:
    assume $i169 == 1;
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    $i170 := $M.69;
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    $i171 := $ne.i32($i170, 0);
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb52:
    assume $i171 == 1;
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2701} $i172 := __VERIFIER_nondet_int();
    call {:si_unique_call 2702} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i172);
    call {:si_unique_call 2703} {:cexpr "tmp___54"} boogie_si_record_i32($i172);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2706} ldv_stop();
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb55:
    assume $i173 == 1;
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    $i174 := $M.69;
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i174, 1);
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb57:
    assume $i175 == 1;
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2704} vslice_dummy_var_260 := rbd_minor_show($p20, $p22, $p18);
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 2705} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb64_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2698} $i145 := __VERIFIER_nondet_int();
    call {:si_unique_call 2699} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i145);
    call {:si_unique_call 2700} {:cexpr "tmp___53"} boogie_si_record_i32($i145);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 920290);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11675;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    return;
}



const ldv_probe_17: ref;

axiom ldv_probe_17 == $sub.ref(0, 921322);

procedure ldv_probe_17() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_17() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11677;

  corral_source_split_11677:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2887} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2888} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_11678;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_2: ref;

axiom ldv_probe_2 == $sub.ref(0, 922354);

procedure ldv_probe_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11680;

  corral_source_split_11680:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2889} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2890} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rbd_exit: ref;

axiom rbd_exit == $sub.ref(0, 923386);

procedure rbd_exit();
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.23, $M.25, $M.27, $M.29, $M.22, $M.15, $M.11, $M.13, $M.14, $CurrAddr, $M.21, $M.18, $M.20, $M.19;



implementation rbd_exit()
{
  var $i0: i8;
  var $i1: i1;
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11683;

  corral_source_split_11683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2891} ida_destroy(rbd_dev_id_ida);
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2892} rbd_sysfs_cleanup();
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    $i0 := $M.31;
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i8.i1($i0);
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $M.1;
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2894} ldv_destroy_workqueue_20($p3);
    goto corral_source_split_11694;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2895} rbd_slab_exit();
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    $i2 := $M.37;
    goto corral_source_split_11690;

  corral_source_split_11690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2893} unregister_blkdev($i2, .str);
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rbd_init: ref;

axiom rbd_init == $sub.ref(0, 924418);

procedure rbd_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.37, $M.11, $M.15, $M.22, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.23, $M.25, $M.27, $M.29, $CurrAddr, $M.13, $M.14, $M.21, $M.18, $M.20, $M.19;



implementation rbd_init() returns ($r: i32)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i14: i8;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i8;
  var $i24: i1;
  var $i25: i32;
  var $i28: i8;
  var $i29: i1;
  var $i30: i32;
  var $i20: i32;
  var $p31: ref;
  var $i13: i32;
  var $i6: i32;
  var vslice_dummy_var_286: i32;
  var vslice_dummy_var_287: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2896} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2897} $i1 := libceph_compatible($0.ref);
    goto corral_source_split_11698;

  corral_source_split_11698:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2898} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_11700;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11705;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2900} $i7 := rbd_slab_init();
    call {:si_unique_call 2901} {:cexpr "rc"} boogie_si_record_i32($i7);
    goto corral_source_split_11712;

  corral_source_split_11712:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_11713;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2902} $p9 := __alloc_workqueue_key.ref.i32.i32.ref.ref(.str, 8, 0, $p0, .str.359);
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    $M.1 := $p9;
    goto corral_source_split_11718;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    $p10 := $M.1;
    goto corral_source_split_11719;

  corral_source_split_11719:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_11721;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i14 := $M.31;
    goto corral_source_split_11728;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_11729;

  corral_source_split_11729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2908} $i21 := rbd_sysfs_init();
    call {:si_unique_call 2909} {:cexpr "rc"} boogie_si_record_i32($i21);
    goto corral_source_split_11744;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_11745;

  corral_source_split_11745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i23 := $M.31;
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_11753;

  corral_source_split_11753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i24 == 1);
    goto corral_source_split_11759;

  corral_source_split_11759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2911} vslice_dummy_var_287 := printk.ref(.str.361);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_11710;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_11755;

  corral_source_split_11755:
    assume {:verifier.code 0} true;
    $i25 := $M.37;
    goto corral_source_split_11756;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2910} vslice_dummy_var_286 := printk.ref.i32(.str.360, $i25);
    goto corral_source_split_11757;

  corral_source_split_11757:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb22:
    assume $i22 == 1;
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i28 := $M.31;
    goto corral_source_split_11749;

  corral_source_split_11749:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i28);
    goto corral_source_split_11750;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i20 := $i21;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_11740;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    $p31 := $M.1;
    goto corral_source_split_11741;

  corral_source_split_11741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2907} ldv_destroy_workqueue_19($p31);
    goto corral_source_split_11742;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    $i13 := $i20;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_11725;

  corral_source_split_11725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2903} rbd_slab_exit();
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    $i6 := $i13;
    goto $bb6;

  $bb29:
    assume $i29 == 1;
    goto corral_source_split_11761;

  corral_source_split_11761:
    assume {:verifier.code 0} true;
    $i30 := $M.37;
    goto corral_source_split_11762;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2912} unregister_blkdev($i30, .str);
    goto corral_source_split_11763;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb15:
    assume $i15 == 1;
    goto corral_source_split_11731;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2904} $i16 := register_blkdev(0, .str);
    goto corral_source_split_11732;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    $M.37 := $i16;
    call {:si_unique_call 2905} {:cexpr "rbd_major"} boogie_si_record_i32($i16);
    goto corral_source_split_11733;

  corral_source_split_11733:
    assume {:verifier.code 0} true;
    $i17 := $M.37;
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_11735;

  corral_source_split_11735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_11737;

  corral_source_split_11737:
    assume {:verifier.code 0} true;
    $i19 := $M.37;
    call {:si_unique_call 2906} {:cexpr "rc"} boogie_si_record_i32($i19);
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb19;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_11723;

  corral_source_split_11723:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb13;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_11715;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb6;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_11707;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2899} rbd_warn.ref.ref($0.ref, .str.358);
    goto corral_source_split_11708;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 925450);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11765;

  corral_source_split_11765:
    assume {:verifier.code 0} true;
    $i0 := $M.60;
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_11767;

  corral_source_split_11767:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.95;
    goto corral_source_split_11772;

  corral_source_split_11772:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 1);
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.96;
    goto corral_source_split_11778;

  corral_source_split_11778:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 1);
    goto corral_source_split_11779;

  corral_source_split_11779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.97;
    goto corral_source_split_11784;

  corral_source_split_11784:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1);
    goto corral_source_split_11785;

  corral_source_split_11785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_11787;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2916} ldv_error();
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_11788;

  corral_source_split_11788:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_11781;

  corral_source_split_11781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2915} ldv_error();
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_11782;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_11775;

  corral_source_split_11775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2914} ldv_error();
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_11776;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_11769;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2913} ldv_error();
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_11770;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const libceph_compatible: ref;

axiom libceph_compatible == $sub.ref(0, 926482);

procedure libceph_compatible($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation libceph_compatible($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11790;

  corral_source_split_11790:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2917} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 2918} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_11791;

  corral_source_split_11791:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rbd_slab_init: ref;

axiom rbd_slab_init == $sub.ref(0, 927514);

procedure rbd_slab_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.15, $M.22;



implementation rbd_slab_init() returns ($r: i32)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i12: i32;
  var vslice_dummy_var_288: i32;
  var vslice_dummy_var_289: i32;
  var vslice_dummy_var_290: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11793;

  corral_source_split_11793:
    assume {:verifier.code 0} true;
    $p0 := $M.11;
    goto corral_source_split_11794;

  corral_source_split_11794:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_11795;

  corral_source_split_11795:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_11796;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_11797;

  corral_source_split_11797:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2919} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 2920} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_11799;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_11800;

  corral_source_split_11800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2923} $p8 := kmem_cache_create(.str.364, 192, 8, 0, $0.ref);
    goto corral_source_split_11805;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    $M.11 := $p8;
    goto corral_source_split_11806;

  corral_source_split_11806:
    assume {:verifier.code 0} true;
    $p9 := $M.11;
    goto corral_source_split_11807;

  corral_source_split_11807:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_11808;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $M.15;
    goto corral_source_split_11815;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_11816;

  corral_source_split_11816:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_11817;

  corral_source_split_11817:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_11818;

  corral_source_split_11818:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_11819;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2924} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 2925} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_11820;

  corral_source_split_11820:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_11821;

  corral_source_split_11821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2928} $p21 := kmem_cache_create(.str.366, 240, 8, 0, $0.ref);
    goto corral_source_split_11826;

  corral_source_split_11826:
    assume {:verifier.code 0} true;
    $M.15 := $p21;
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    $p22 := $M.15;
    goto corral_source_split_11828;

  corral_source_split_11828:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_11829;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_11830;

  corral_source_split_11830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p25 := $M.22;
    goto corral_source_split_11838;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_11839;

  corral_source_split_11839:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_11840;

  corral_source_split_11840:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_11841;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2929} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 2930} {:cexpr "tmp___1"} boogie_si_record_i64($i30);
    goto corral_source_split_11843;

  corral_source_split_11843:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2933} $p33 := kmem_cache_create(.str.368, 101, 1, 0, $0.ref);
    goto corral_source_split_11849;

  corral_source_split_11849:
    assume {:verifier.code 0} true;
    $M.22 := $p33;
    goto corral_source_split_11850;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    $p34 := $M.22;
    goto corral_source_split_11851;

  corral_source_split_11851:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_11852;

  corral_source_split_11852:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_11853;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p37 := $M.15;
    goto corral_source_split_11834;

  corral_source_split_11834:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_11835;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_11836;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p41 := $M.11;
    goto corral_source_split_11862;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2935} kmem_cache_destroy($p41);
    goto corral_source_split_11863;

  corral_source_split_11863:
    assume {:verifier.code 0} true;
    $M.11 := $0.ref;
    goto corral_source_split_11864;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_11813;

  corral_source_split_11813:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb24:
    assume $i39 == 1;
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    $p40 := $M.15;
    goto corral_source_split_11858;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2934} kmem_cache_destroy($p40);
    goto corral_source_split_11859;

  corral_source_split_11859:
    assume {:verifier.code 0} true;
    $M.15 := $0.ref;
    goto corral_source_split_11860;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i36 == 1;
    goto corral_source_split_11855;

  corral_source_split_11855:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb7;

  $bb17:
    assume $i31 == 1;
    goto corral_source_split_11846;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2931} vslice_dummy_var_290 := printk.ref.ref.i32.ref(.str.8, .str.362, 5675, .str.367);
    call {:si_unique_call 2932} devirtbounce(0, .str.2, 5675, 12);
    goto corral_source_split_11847;

  corral_source_split_11847:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    call rbd_slab_init_loop_$bb19();
    goto $bb19_last;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_11832;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_11823;

  corral_source_split_11823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2926} vslice_dummy_var_289 := printk.ref.ref.i32.ref(.str.8, .str.362, 5667, .str.365);
    call {:si_unique_call 2927} devirtbounce(0, .str.2, 5667, 12);
    goto corral_source_split_11824;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call rbd_slab_init_loop_$bb11();
    goto $bb11_last;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_11811;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_11802;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2921} vslice_dummy_var_288 := printk.ref.ref.i32.ref(.str.8, .str.362, 5659, .str.363);
    call {:si_unique_call 2922} devirtbounce(0, .str.2, 5659, 12);
    goto corral_source_split_11803;

  corral_source_split_11803:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call rbd_slab_init_loop_$bb3();
    goto $bb3_last;

  $bb19_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto $bb19_dummy;

  $bb11_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 928546);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2936} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2937} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11866;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2938} $p5 := external_alloc();
    goto corral_source_split_11867;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_11868;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const rbd_sysfs_init: ref;

axiom rbd_sysfs_init == $sub.ref(0, 929578);

procedure rbd_sysfs_init() returns ($r: i32);
  free requires assertsPassed;



implementation rbd_sysfs_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11870;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2939} $i0 := device_register(rbd_root_dev);
    call {:si_unique_call 2940} {:cexpr "ret"} boogie_si_record_i32($i0);
    goto corral_source_split_11871;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 0);
    goto corral_source_split_11872;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2941} $i3 := bus_register(rbd_bus_type);
    call {:si_unique_call 2942} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_11879;

  corral_source_split_11879:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11876;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_11881;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2943} device_unregister(rbd_root_dev);
    goto corral_source_split_11882;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_11874;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    $i2 := $i0;
    goto $bb3;
}



const ldv_destroy_workqueue_19: ref;

axiom ldv_destroy_workqueue_19 == $sub.ref(0, 930610);

procedure ldv_destroy_workqueue_19($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.23, $M.25, $M.27, $M.29, $M.13, $M.14, $CurrAddr, $M.21, $M.18, $M.20, $M.19;



implementation ldv_destroy_workqueue_19($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11884;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2944} destroy_workqueue($p0);
    goto corral_source_split_11885;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2945} call_and_disable_all_1(2);
    goto corral_source_split_11886;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    return;
}



const rbd_slab_exit: ref;

axiom rbd_slab_exit == $sub.ref(0, 931642);

procedure rbd_slab_exit();
  free requires assertsPassed;
  modifies $M.22, $M.15, $M.11;



implementation rbd_slab_exit()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var vslice_dummy_var_291: i32;
  var vslice_dummy_var_292: i32;
  var vslice_dummy_var_293: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11888;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    $p0 := $M.22;
    goto corral_source_split_11889;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_11890;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_11891;

  corral_source_split_11891:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_11893;

  corral_source_split_11893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2946} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 2947} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_11895;

  corral_source_split_11895:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $M.22;
    goto corral_source_split_11900;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2950} kmem_cache_destroy($p8);
    goto corral_source_split_11901;

  corral_source_split_11901:
    assume {:verifier.code 0} true;
    $M.22 := $0.ref;
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    $p9 := $M.15;
    goto corral_source_split_11903;

  corral_source_split_11903:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_11904;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_11905;

  corral_source_split_11905:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_11906;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_11907;

  corral_source_split_11907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2951} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 2952} {:cexpr "tmp___0"} boogie_si_record_i64($i14);
    goto corral_source_split_11908;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_11909;

  corral_source_split_11909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p17 := $M.15;
    goto corral_source_split_11914;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2955} kmem_cache_destroy($p17);
    goto corral_source_split_11915;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    $M.15 := $0.ref;
    goto corral_source_split_11916;

  corral_source_split_11916:
    assume {:verifier.code 0} true;
    $p18 := $M.11;
    goto corral_source_split_11917;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_11918;

  corral_source_split_11918:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_11919;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_11920;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_11921;

  corral_source_split_11921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2956} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 2957} {:cexpr "tmp___1"} boogie_si_record_i64($i23);
    goto corral_source_split_11922;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_11923;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $M.11;
    goto corral_source_split_11928;

  corral_source_split_11928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2960} kmem_cache_destroy($p26);
    goto corral_source_split_11929;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    $M.11 := $0.ref;
    goto corral_source_split_11930;

  corral_source_split_11930:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_11925;

  corral_source_split_11925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2958} vslice_dummy_var_293 := printk.ref.ref.i32.ref(.str.8, .str.354, 5702, .str.357);
    call {:si_unique_call 2959} devirtbounce(0, .str.2, 5702, 12);
    goto corral_source_split_11926;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call rbd_slab_exit_loop_$bb11();
    goto $bb11_last;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_11911;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2953} vslice_dummy_var_292 := printk.ref.ref.i32.ref(.str.8, .str.354, 5698, .str.356);
    call {:si_unique_call 2954} devirtbounce(0, .str.2, 5698, 12);
    goto corral_source_split_11912;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call rbd_slab_exit_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_11897;

  corral_source_split_11897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2948} vslice_dummy_var_291 := printk.ref.ref.i32.ref(.str.8, .str.354, 5694, .str.355);
    call {:si_unique_call 2949} devirtbounce(0, .str.2, 5694, 12);
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call rbd_slab_exit_loop_$bb3();
    goto $bb3_last;

  $bb11_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const kmem_cache_destroy: ref;

axiom kmem_cache_destroy == $sub.ref(0, 932674);

procedure kmem_cache_destroy($p0: ref);
  free requires assertsPassed;



implementation kmem_cache_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11932;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 933706);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    return;
}



const bus_register: ref;

axiom bus_register == $sub.ref(0, 934738);

procedure bus_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bus_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11936;

  corral_source_split_11936:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2961} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2962} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_11937;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kmem_cache_create: ref;

axiom kmem_cache_create == $sub.ref(0, 935770);

procedure kmem_cache_create($p0: ref, $i1: i64, $i2: i64, $i3: i64, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kmem_cache_create($p0: ref, $i1: i64, $i2: i64, $i3: i64, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2963} {:cexpr "kmem_cache_create:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 2964} {:cexpr "kmem_cache_create:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 2965} {:cexpr "kmem_cache_create:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_11939;

  corral_source_split_11939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2966} $p5 := external_alloc();
    goto corral_source_split_11940;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_11941;

  corral_source_split_11941:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ida_destroy: ref;

axiom ida_destroy == $sub.ref(0, 936802);

procedure ida_destroy($p0: ref);
  free requires assertsPassed;



implementation ida_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11943;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    return;
}



const rbd_sysfs_cleanup: ref;

axiom rbd_sysfs_cleanup == $sub.ref(0, 937834);

procedure rbd_sysfs_cleanup();
  free requires assertsPassed;



implementation rbd_sysfs_cleanup()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11945;

  corral_source_split_11945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2967} bus_unregister(rbd_bus_type);
    goto corral_source_split_11946;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2968} device_unregister(rbd_root_dev);
    goto corral_source_split_11947;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    return;
}



const ldv_destroy_workqueue_20: ref;

axiom ldv_destroy_workqueue_20 == $sub.ref(0, 938866);

procedure ldv_destroy_workqueue_20($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.23, $M.25, $M.27, $M.29, $M.13, $M.14, $CurrAddr, $M.21, $M.18, $M.20, $M.19;



implementation ldv_destroy_workqueue_20($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11949;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2969} destroy_workqueue($p0);
    goto corral_source_split_11950;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2970} call_and_disable_all_1(2);
    goto corral_source_split_11951;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    return;
}



const bus_unregister: ref;

axiom bus_unregister == $sub.ref(0, 939898);

procedure bus_unregister($p0: ref);
  free requires assertsPassed;



implementation bus_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11953;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 940930);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2971} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_11955;

  corral_source_split_11955:
    assume {:verifier.code 1} true;
    goto corral_source_split_11956;

  corral_source_split_11956:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_11957;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 941962);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 942994);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 944026);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11959;

  corral_source_split_11959:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_11960;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 945058);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 946090);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 947122);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 948154);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 949186);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 950218);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 951250);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 952282);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 953314);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 954346);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11962;

  corral_source_split_11962:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2972} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 2973} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2974} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_11963;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_11964;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_11968;

  corral_source_split_11968:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_11969;

  corral_source_split_11969:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2975} __VERIFIER_assume($i4);
    goto corral_source_split_11970;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_11966;

  corral_source_split_11966:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 955378);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 956410);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 957442);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 958474);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 959506);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11972;

  corral_source_split_11972:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2976} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 2977} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2978} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_11973;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_11974;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_11979;

  corral_source_split_11979:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2979} __VERIFIER_assume($i4);
    goto corral_source_split_11980;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_11976;

  corral_source_split_11976:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 960538);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 961570);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 962602);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 963634);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 964666);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11982;

  corral_source_split_11982:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2980} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2981} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2982} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2983} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2984} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 2985} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_11984;

  corral_source_split_11984:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2986} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2987} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 2988} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_11985;

  corral_source_split_11985:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_11986;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_11991;

  corral_source_split_11991:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2989} __VERIFIER_assume($i7);
    goto corral_source_split_11993;

  corral_source_split_11993:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_11994;

  corral_source_split_11994:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_12000;

  corral_source_split_12000:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_12001;

  corral_source_split_12001:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2990} __VERIFIER_assume($i11);
    goto corral_source_split_12002;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_11998;

  corral_source_split_11998:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11988;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_11989;

  corral_source_split_11989:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_11996;

  corral_source_split_11996:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 965698);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 966730);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 967762);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 968794);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 969826);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 970858);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 971890);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 972922);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 973954);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12004;

  corral_source_split_12004:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2991} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2992} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12005;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12006;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2993} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_12007;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_12008;

  corral_source_split_12008:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_12009;

  corral_source_split_12009:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_12010;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_12017;

  corral_source_split_12017:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_12018;

  corral_source_split_12018:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_12019;

  corral_source_split_12019:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_12020;

  corral_source_split_12020:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_12012;

  corral_source_split_12012:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_12013;

  corral_source_split_12013:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2994} __VERIFIER_assume($i10);
    goto corral_source_split_12014;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_12015;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 974986);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12022;

  corral_source_split_12022:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2995} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 2996} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2997} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_12023;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 976018);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12025;

  corral_source_split_12025:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2998} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2999} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_12026;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 977050);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 978082);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 3000} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 3001} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 979114);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 980146);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12028;

  corral_source_split_12028:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_12029;

  corral_source_split_12029:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 981178);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3002} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 3003} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_12031;

  corral_source_split_12031:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3004} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 3005} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_12032;

  corral_source_split_12032:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_12037;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_12038;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3006} $p6 := malloc($i5);
    goto corral_source_split_12039;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_12040;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_46 := $M.0;
    call {:si_unique_call 3007} cmdloc_dummy_var_47 := $memset.i8(cmdloc_dummy_var_46, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_47;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12042;

  corral_source_split_12042:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_12035;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 982210);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 983242);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.68, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.97, $M.96, $M.95, $M.60, $M.1, $M.0, $M.37, $M.99, $M.100, $M.101, $M.102, $M.31, $M.15, $M.22, $M.11, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 3008} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.68 := $0.ref;
    $M.23 := 0;
    call {:si_unique_call 3009} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    $M.24 := $0.ref;
    $M.25 := 0;
    call {:si_unique_call 3010} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    $M.26 := $0.ref;
    $M.27 := 0;
    call {:si_unique_call 3011} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    $M.28 := $0.ref;
    $M.29 := 0;
    call {:si_unique_call 3012} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.30 := $0.ref;
    $M.69 := 0;
    call {:si_unique_call 3013} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.70 := 0;
    call {:si_unique_call 3014} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(0);
    $M.71 := 0;
    call {:si_unique_call 3015} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.72 := 0;
    call {:si_unique_call 3016} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(0);
    $M.73 := 0;
    call {:si_unique_call 3017} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.74 := 0;
    call {:si_unique_call 3018} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(0);
    $M.75 := 0;
    call {:si_unique_call 3019} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.76 := 0;
    call {:si_unique_call 3020} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(0);
    $M.77 := 0;
    call {:si_unique_call 3021} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.78 := 0;
    call {:si_unique_call 3022} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.79 := 0;
    call {:si_unique_call 3023} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    $M.80 := 0;
    call {:si_unique_call 3024} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 3025} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.82 := 0;
    call {:si_unique_call 3026} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.83 := 0;
    call {:si_unique_call 3027} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.84 := 0;
    call {:si_unique_call 3028} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    $M.85 := 0;
    call {:si_unique_call 3029} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(0);
    $M.86 := 0;
    call {:si_unique_call 3030} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    $M.87 := 0;
    call {:si_unique_call 3031} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    $M.88 := 0;
    call {:si_unique_call 3032} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.89 := 0;
    call {:si_unique_call 3033} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.90 := 0;
    call {:si_unique_call 3034} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(0);
    $M.91 := 0;
    call {:si_unique_call 3035} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.92 := 0;
    call {:si_unique_call 3036} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.93 := 0;
    call {:si_unique_call 3037} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.94 := 0;
    call {:si_unique_call 3038} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.97 := 1;
    call {:si_unique_call 3039} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    $M.96 := 1;
    call {:si_unique_call 3040} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    $M.95 := 1;
    call {:si_unique_call 3041} {:cexpr "ldv_mutex_i_mutex_of_inode"} boogie_si_record_i32(1);
    $M.60 := 1;
    call {:si_unique_call 3042} {:cexpr "ldv_mutex_client_mutex"} boogie_si_record_i32(1);
    $M.1 := $0.ref;
    $M.0 := $store.ref($M.0, rbd_root_dev, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(216, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(288, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(312, 1)), .str);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(208, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(209, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(344, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(520, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(528, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(532, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(536, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(537, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(540, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(544, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(548, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(552, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(560, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(568, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(576, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(584, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(600, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(608, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1144, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1152, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1160, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1168, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1176, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1192, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1248, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1256, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1260, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1336, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1336, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1352, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1352, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1400, 1)), rbd_root_dev_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1408, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1416, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(rbd_root_dev, $mul.ref(0, 1424)), $mul.ref(1417, 1)), 0);
    $M.0 := $store.ref($M.0, dev_attr_refresh, .str.349);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_refresh, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 128);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_refresh, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_refresh, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_refresh, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_refresh, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_refresh, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_refresh, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_refresh, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_refresh, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_refresh, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_refresh, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_refresh, $mul.ref(0, 48)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_refresh, $mul.ref(0, 48)), $mul.ref(40, 1)), rbd_image_refresh);
    $M.0 := $store.ref($M.0, dev_attr_parent, .str.348);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_parent, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_parent, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_parent, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_parent, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_parent, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_parent, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_parent, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_parent, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_parent, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_parent, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_parent, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_parent, $mul.ref(0, 48)), $mul.ref(32, 1)), rbd_parent_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_parent, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_current_snap, .str.347);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_current_snap, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_current_snap, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_current_snap, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_current_snap, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_current_snap, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_current_snap, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_current_snap, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_current_snap, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_current_snap, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_current_snap, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_current_snap, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_current_snap, $mul.ref(0, 48)), $mul.ref(32, 1)), rbd_snap_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_current_snap, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_image_id, .str.346);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_image_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_image_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_image_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_image_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_image_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_image_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_image_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_image_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_image_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_image_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_image_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_image_id, $mul.ref(0, 48)), $mul.ref(32, 1)), rbd_image_id_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_image_id, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_name, .str.345);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(32, 1)), rbd_name_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_pool_id, .str.344);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_pool_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_pool_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_pool_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pool_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pool_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pool_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pool_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pool_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pool_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pool_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pool_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_pool_id, $mul.ref(0, 48)), $mul.ref(32, 1)), rbd_pool_id_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_pool_id, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_pool, .str.343);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_pool, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_pool, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_pool, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pool, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pool, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pool, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pool, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pool, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pool, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pool, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pool, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_pool, $mul.ref(0, 48)), $mul.ref(32, 1)), rbd_pool_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_pool, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_client_id, .str.342);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_client_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_client_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_client_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_client_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_client_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_client_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_client_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_client_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_client_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_client_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_client_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_client_id, $mul.ref(0, 48)), $mul.ref(32, 1)), rbd_client_id_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_client_id, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_minor, .str.341);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_minor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_minor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_minor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_minor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_minor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_minor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_minor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_minor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_minor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_minor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_minor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_minor, $mul.ref(0, 48)), $mul.ref(32, 1)), rbd_minor_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_minor, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_major, .str.340);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_major, $mul.ref(0, 48)), $mul.ref(32, 1)), rbd_major_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_major, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_features, .str.339);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_features, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_features, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_features, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_features, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_features, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_features, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_features, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_features, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_features, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_features, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_features, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_features, $mul.ref(0, 48)), $mul.ref(32, 1)), rbd_features_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_features, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_size, .str.338);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(32, 1)), rbd_size_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, rbd_attrs, dev_attr_size);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_attrs, $mul.ref(0, 104)), $mul.ref(1, 8)), dev_attr_features);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_attrs, $mul.ref(0, 104)), $mul.ref(2, 8)), dev_attr_major);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_attrs, $mul.ref(0, 104)), $mul.ref(3, 8)), dev_attr_minor);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_attrs, $mul.ref(0, 104)), $mul.ref(4, 8)), dev_attr_client_id);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_attrs, $mul.ref(0, 104)), $mul.ref(5, 8)), dev_attr_pool);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_attrs, $mul.ref(0, 104)), $mul.ref(6, 8)), dev_attr_pool_id);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_attrs, $mul.ref(0, 104)), $mul.ref(7, 8)), dev_attr_name);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_attrs, $mul.ref(0, 104)), $mul.ref(8, 8)), dev_attr_image_id);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_attrs, $mul.ref(0, 104)), $mul.ref(9, 8)), dev_attr_current_snap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_attrs, $mul.ref(0, 104)), $mul.ref(10, 8)), dev_attr_parent);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_attrs, $mul.ref(0, 104)), $mul.ref(11, 8)), dev_attr_refresh);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_attrs, $mul.ref(0, 104)), $mul.ref(12, 8)), $0.ref);
    $M.0 := $store.ref($M.0, rbd_attr_group, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_attr_group, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_attr_group, $mul.ref(0, 32)), $mul.ref(16, 1)), rbd_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_attr_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, rbd_attr_groups, rbd_attr_group);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_attr_groups, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, rbd_device_type, .str);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_device_type, $mul.ref(0, 48)), $mul.ref(8, 1)), rbd_attr_groups);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_device_type, $mul.ref(0, 48)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_device_type, $mul.ref(0, 48)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_device_type, $mul.ref(0, 48)), $mul.ref(32, 1)), rbd_sysfs_dev_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_device_type, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, bus_attr_remove_single_major, .str.337);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(bus_attr_remove_single_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 128);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(bus_attr_remove_single_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(bus_attr_remove_single_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_remove_single_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_remove_single_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_remove_single_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_remove_single_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_remove_single_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_remove_single_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_remove_single_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_remove_single_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bus_attr_remove_single_major, $mul.ref(0, 48)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bus_attr_remove_single_major, $mul.ref(0, 48)), $mul.ref(40, 1)), rbd_remove_single_major);
    $M.0 := $store.ref($M.0, bus_attr_add_single_major, .str.336);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(bus_attr_add_single_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 128);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(bus_attr_add_single_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(bus_attr_add_single_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_add_single_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_add_single_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_add_single_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_add_single_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_add_single_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_add_single_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_add_single_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_add_single_major, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bus_attr_add_single_major, $mul.ref(0, 48)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bus_attr_add_single_major, $mul.ref(0, 48)), $mul.ref(40, 1)), rbd_add_single_major);
    $M.0 := $store.ref($M.0, bus_attr_remove, .str.335);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(bus_attr_remove, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 128);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(bus_attr_remove, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(bus_attr_remove, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_remove, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_remove, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_remove, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_remove, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_remove, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_remove, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_remove, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_remove, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bus_attr_remove, $mul.ref(0, 48)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bus_attr_remove, $mul.ref(0, 48)), $mul.ref(40, 1)), rbd_remove);
    $M.0 := $store.ref($M.0, bus_attr_add, .str.334);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(bus_attr_add, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 128);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(bus_attr_add, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(bus_attr_add, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_add, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_add, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_add, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_add, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_add, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_add, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_add, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_add, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bus_attr_add, $mul.ref(0, 48)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bus_attr_add, $mul.ref(0, 48)), $mul.ref(40, 1)), rbd_add);
    $M.0 := $store.ref($M.0, rbd_bus_attrs, bus_attr_add);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_attrs, $mul.ref(0, 40)), $mul.ref(1, 8)), bus_attr_remove);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_attrs, $mul.ref(0, 40)), $mul.ref(2, 8)), bus_attr_add_single_major);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_attrs, $mul.ref(0, 40)), $mul.ref(3, 8)), bus_attr_remove_single_major);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_attrs, $mul.ref(0, 40)), $mul.ref(4, 8)), $0.ref);
    $M.0 := $store.ref($M.0, rbd_bus_group, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_group, $mul.ref(0, 32)), $mul.ref(8, 1)), rbd_bus_is_visible);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_group, $mul.ref(0, 32)), $mul.ref(16, 1)), rbd_bus_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, rbd_bus_groups, rbd_bus_group);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_groups, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, rbd_bus_type, .str);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(32, 1)), rbd_bus_groups);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, rbd_mq_ops, rbd_queue_rq);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_mq_ops, $mul.ref(0, 64)), $mul.ref(8, 1)), blk_mq_map_queue);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_mq_ops, $mul.ref(0, 64)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_mq_ops, $mul.ref(0, 64)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_mq_ops, $mul.ref(0, 64)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_mq_ops, $mul.ref(0, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_mq_ops, $mul.ref(0, 64)), $mul.ref(48, 1)), rbd_init_request);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_mq_ops, $mul.ref(0, 64)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, rbd_bd_ops, rbd_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bd_ops, $mul.ref(0, 104)), $mul.ref(8, 1)), rbd_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bd_ops, $mul.ref(0, 104)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bd_ops, $mul.ref(0, 104)), $mul.ref(24, 1)), rbd_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bd_ops, $mul.ref(0, 104)), $mul.ref(32, 1)), rbd_compat_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bd_ops, $mul.ref(0, 104)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bd_ops, $mul.ref(0, 104)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bd_ops, $mul.ref(0, 104)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bd_ops, $mul.ref(0, 104)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bd_ops, $mul.ref(0, 104)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bd_ops, $mul.ref(0, 104)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bd_ops, $mul.ref(0, 104)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_bd_ops, $mul.ref(0, 104)), $mul.ref(96, 1)), __this_module);
    $M.37 := 0;
    call {:si_unique_call 3043} {:cexpr "rbd_major"} boogie_si_record_i32(0);
    $M.99 := $store.ref($M.99, rbd_dev_id_ida, $0.ref);
    $M.99 := $store.ref($M.99, $add.ref($add.ref($add.ref(rbd_dev_id_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.99 := $store.i32($M.99, $add.ref($add.ref($add.ref(rbd_dev_id_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.99 := $store.i32($M.99, $add.ref($add.ref($add.ref(rbd_dev_id_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.99 := $store.i32($M.99, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_dev_id_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.99 := $store.i32($M.99, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_dev_id_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.99 := $store.i32($M.99, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_dev_id_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.99 := $store.ref($M.99, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_dev_id_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.99 := $store.ref($M.99, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_dev_id_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.99 := $store.ref($M.99, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_dev_id_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.99 := $store.ref($M.99, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_dev_id_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.99 := $store.ref($M.99, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_dev_id_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.327);
    $M.99 := $store.i32($M.99, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_dev_id_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.99 := $store.i64($M.99, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_dev_id_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.99 := $store.i32($M.99, $add.ref($add.ref($add.ref(rbd_dev_id_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(96, 1)), 0);
    $M.99 := $store.ref($M.99, $add.ref($add.ref($add.ref(rbd_dev_id_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.99 := $store.ref($M.99, $add.ref($add.ref(rbd_dev_id_ida, $mul.ref(0, 120)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, rbd_client_list, rbd_client_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_client_list, $mul.ref(0, 16)), $mul.ref(8, 1)), rbd_client_list);
    $M.0 := $store.i32($M.0, client_mutex, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(client_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.216);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(client_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(client_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(client_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(client_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(client_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(client_mutex, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(client_mutex, $mul.ref(0, 160)), $mul.ref(104, 1)), client_mutex);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(client_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(client_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(client_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(client_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.217);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(client_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(client_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.100 := $store.i32($M.100, rbd_opts_tokens, 0);
    $M.101 := $store.ref($M.101, $add.ref($add.ref($add.ref(rbd_opts_tokens, $mul.ref(0, 96)), $mul.ref(0, 16)), $mul.ref(8, 1)), .str.211);
    $M.100 := $store.i32($M.100, $add.ref($add.ref($add.ref(rbd_opts_tokens, $mul.ref(0, 96)), $mul.ref(1, 16)), $mul.ref(0, 1)), 3);
    $M.101 := $store.ref($M.101, $add.ref($add.ref($add.ref(rbd_opts_tokens, $mul.ref(0, 96)), $mul.ref(1, 16)), $mul.ref(8, 1)), .str.212);
    $M.100 := $store.i32($M.100, $add.ref($add.ref($add.ref(rbd_opts_tokens, $mul.ref(0, 96)), $mul.ref(2, 16)), $mul.ref(0, 1)), 3);
    $M.101 := $store.ref($M.101, $add.ref($add.ref($add.ref(rbd_opts_tokens, $mul.ref(0, 96)), $mul.ref(2, 16)), $mul.ref(8, 1)), .str.213);
    $M.100 := $store.i32($M.100, $add.ref($add.ref($add.ref(rbd_opts_tokens, $mul.ref(0, 96)), $mul.ref(3, 16)), $mul.ref(0, 1)), 4);
    $M.101 := $store.ref($M.101, $add.ref($add.ref($add.ref(rbd_opts_tokens, $mul.ref(0, 96)), $mul.ref(3, 16)), $mul.ref(8, 1)), .str.214);
    $M.100 := $store.i32($M.100, $add.ref($add.ref($add.ref(rbd_opts_tokens, $mul.ref(0, 96)), $mul.ref(4, 16)), $mul.ref(0, 1)), 4);
    $M.101 := $store.ref($M.101, $add.ref($add.ref($add.ref(rbd_opts_tokens, $mul.ref(0, 96)), $mul.ref(4, 16)), $mul.ref(8, 1)), .str.215);
    $M.100 := $store.i32($M.100, $add.ref($add.ref($add.ref(rbd_opts_tokens, $mul.ref(0, 96)), $mul.ref(5, 16)), $mul.ref(0, 1)), 5);
    $M.101 := $store.ref($M.101, $add.ref($add.ref($add.ref(rbd_opts_tokens, $mul.ref(0, 96)), $mul.ref(5, 16)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, rbd_dev_list, rbd_dev_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rbd_dev_list, $mul.ref(0, 16)), $mul.ref(8, 1)), rbd_dev_list);
    $M.102 := $store.i32($M.102, rbd_dev_list_lock, 0);
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref($add.ref(rbd_dev_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref($add.ref(rbd_dev_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.102 := $store.ref($M.102, $add.ref($add.ref($add.ref($add.ref(rbd_dev_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.102 := $store.ref($M.102, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_dev_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.102 := $store.ref($M.102, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_dev_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.102 := $store.ref($M.102, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_dev_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.102 := $store.ref($M.102, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_dev_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.180);
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_dev_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_dev_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.31 := 0;
    call {:si_unique_call 3044} {:cexpr "single_major"} boogie_si_record_i8(0);
    $M.102 := $store.i32($M.102, rbd_client_list_lock, 0);
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref($add.ref(rbd_client_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref($add.ref(rbd_client_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.102 := $store.ref($M.102, $add.ref($add.ref($add.ref($add.ref(rbd_client_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.102 := $store.ref($M.102, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_client_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.102 := $store.ref($M.102, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_client_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.102 := $store.ref($M.102, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rbd_client_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.102 := $store.ref($M.102, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_client_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.171);
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_client_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref($add.ref($add.ref(rbd_client_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.15 := $0.ref;
    $M.22 := $0.ref;
    $M.11 := $0.ref;
    $M.0 := $store.i8($M.0, .str, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 4)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 4)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.1, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(4, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(10, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(13, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(14, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.5, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 5)), $mul.ref(1, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 5)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 5)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.9, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(6, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(7, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(8, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(13, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(14, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(18, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(20, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(21, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(22, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(23, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(24, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(25, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(26, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(27, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(28, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(29, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(30, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(31, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(32, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(33, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(34, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(35, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(36, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, .str.12, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(6, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(7, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(8, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(13, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(14, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(18, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(20, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(21, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(22, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(23, 1)), 33);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(24, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(25, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(26, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(27, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(28, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(29, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(30, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(31, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(32, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(33, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(34, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(35, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(36, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, .str.13, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(15, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(18, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(19, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(20, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(21, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(22, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(23, 1)), 126);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(24, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(25, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(27, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(28, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, .str.14, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(2, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(7, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(8, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(9, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(11, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(12, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(16, 1)), 126);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(17, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(20, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(22, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(24, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(25, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(27, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(28, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, .str.15, 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(6, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(11, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(14, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(19, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(20, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(22, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(23, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(24, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.172, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 5)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 5)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 5)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.173, 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 6)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 6)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 6)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 6)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.174, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 8)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 8)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 8)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 8)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 8)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 8)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.174, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.175, 63);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 4)), $mul.ref(1, 1)), 63);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 4)), $mul.ref(2, 1)), 63);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.175, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.161, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 20)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 20)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 20)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 20)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 20)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 20)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 20)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 20)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 20)), $mul.ref(10, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 20)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 20)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 20)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 20)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 20)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 20)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 20)), $mul.ref(17, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 20)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.110, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 20)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 20)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 20)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 20)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 20)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 20)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 20)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 20)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 20)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 20)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 20)), $mul.ref(12, 1)), 33);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 20)), $mul.ref(13, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 20)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 20)), $mul.ref(15, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 20)), $mul.ref(16, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 20)), $mul.ref(17, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 20)), $mul.ref(18, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.162, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(10, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(22, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.163, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(11, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(12, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(14, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(15, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(19, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(20, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(22, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(24, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(25, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(26, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(27, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(28, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(29, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(30, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(31, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(32, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(33, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(34, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, .str.164, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(9, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(17, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(22, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(23, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(24, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(25, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, .str.168, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 19)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 19)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 19)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 19)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 19)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 19)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 19)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 19)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 19)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 19)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 19)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 19)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 19)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 19)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.131, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(10, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(14, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(20, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(22, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.45, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(2, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(11, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(12, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(13, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(14, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(17, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(19, 1)), 33);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(20, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(22, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(23, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(24, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(25, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(26, 1)), 87);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(27, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(28, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(29, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(30, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, .str.111, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(11, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(12, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(14, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(15, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(19, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(20, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(22, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(24, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(25, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(26, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(27, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(28, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(29, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(30, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(31, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(32, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(33, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, .str.132, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(2, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(11, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(12, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(13, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(14, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(17, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(19, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(20, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(22, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(23, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(24, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(25, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(26, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(28, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(29, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(30, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(31, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(32, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(33, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(34, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(35, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(36, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(37, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(38, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(39, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(40, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(41, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(42, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(43, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(44, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(45, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(46, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(47, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(48, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(49, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(50, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(51, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 53)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i8($M.0, .str.68, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(2, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(14, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(20, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(23, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(24, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(25, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(26, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(27, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(28, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(29, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(30, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(31, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(32, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(33, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(34, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(35, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(36, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(37, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 39)), $mul.ref(38, 1)), 0);
    $M.0 := $store.i8($M.0, .str.133, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(2, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(11, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(12, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(15, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(19, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(20, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(22, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(24, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(25, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(26, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(28, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(29, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(30, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(31, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(32, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(33, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(34, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(35, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(36, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(37, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(38, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 40)), $mul.ref(39, 1)), 0);
    $M.0 := $store.i8($M.0, .str.134, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 20)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 20)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 20)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 20)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 20)), $mul.ref(6, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 20)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 20)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 20)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 20)), $mul.ref(10, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 20)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 20)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 20)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 20)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 20)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 20)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 20)), $mul.ref(17, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 20)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.135, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 20)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 20)), $mul.ref(2, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 20)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 20)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 20)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 20)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 20)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 20)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 20)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 20)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 20)), $mul.ref(12, 1)), 33);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 20)), $mul.ref(13, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 20)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 20)), $mul.ref(15, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 20)), $mul.ref(16, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 20)), $mul.ref(17, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 20)), $mul.ref(18, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.136, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(6, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(10, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(22, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.43, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(2, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(11, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(12, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(15, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(19, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(20, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(22, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(25, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(26, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(28, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(29, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(30, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(31, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, .str.59, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(2, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(11, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(12, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(13, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(14, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(17, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(19, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(20, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(22, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(23, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(24, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(25, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(26, 1)), 87);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(27, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(28, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(29, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(30, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, .str.71, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(2, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(13, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(17, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(20, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(21, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(22, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(23, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(24, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(25, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(26, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(27, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(28, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(29, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(30, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(31, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(32, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(33, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(34, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(35, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(36, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(37, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(38, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(39, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(40, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 42)), $mul.ref(41, 1)), 0);
    $M.0 := $store.i8($M.0, .str.137, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 23)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 23)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 23)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 23)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 23)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 23)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 23)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 23)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 23)), $mul.ref(10, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 23)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 23)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 23)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 23)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 23)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 23)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 23)), $mul.ref(17, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 23)), $mul.ref(18, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 23)), $mul.ref(19, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 23)), $mul.ref(20, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 23)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.156, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(10, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(13, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(20, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(21, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(22, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(23, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(24, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.58, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(2, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(11, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(12, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(15, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(19, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(20, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(22, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.157, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(10, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(13, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(21, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(22, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(23, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(24, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(25, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(26, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, .str.44, 33);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(3, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(7, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(15, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(21, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(24, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(25, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(26, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(27, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(28, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(29, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(30, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(31, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(32, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(33, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(34, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(35, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(36, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(37, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(38, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 40)), $mul.ref(39, 1)), 0);
    $M.0 := $store.i8($M.0, .str.158, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 13)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 13)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 13)), $mul.ref(3, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 13)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 13)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 13)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 13)), $mul.ref(7, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 13)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 13)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 13)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 13)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.149, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(3, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(7, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(12, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(13, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(16, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(20, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(21, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(23, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(24, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.102, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(6, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(10, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(18, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(19, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(20, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.54, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 21)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 21)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 21)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 21)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 21)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 21)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 21)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 21)), $mul.ref(10, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 21)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 21)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 21)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 21)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 21)), $mul.ref(16, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 21)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 21)), $mul.ref(18, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 21)), $mul.ref(19, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.57, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(8, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(9, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(12, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(13, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(17, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(18, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(22, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(23, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(24, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(25, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(26, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(27, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(28, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(29, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(30, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, .str.60, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(7, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(8, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(19, 1)), 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(20, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(22, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(23, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(24, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(25, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(26, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(27, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(28, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(29, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(30, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(31, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(32, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(33, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(34, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(35, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(36, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, .str.61, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(2, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(11, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(12, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(13, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(14, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(21, 1)), 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(22, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(23, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(24, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(25, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(26, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(27, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(28, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(29, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(30, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(31, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(32, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(33, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(34, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(35, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 37)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i8($M.0, .str.62, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(7, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(8, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(14, 1)), 91);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(15, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(16, 1)), 93);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(17, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(18, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(19, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(21, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(22, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(24, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(25, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(26, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(27, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(28, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(29, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(30, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(31, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(32, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(33, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(34, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(35, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(36, 1)), 87);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(37, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(38, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(39, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(40, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 42)), $mul.ref(41, 1)), 0);
    $M.0 := $store.i8($M.0, .str.63, 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 23)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 23)), $mul.ref(2, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 23)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 23)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 23)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 23)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 23)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 23)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 23)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 23)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 23)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 23)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 23)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 23)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 23)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 23)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 23)), $mul.ref(17, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 23)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 23)), $mul.ref(19, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 23)), $mul.ref(20, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 23)), $mul.ref(21, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.101, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(11, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(20, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(23, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.93, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(2, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(12, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(20, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(21, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(22, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(23, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(24, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(25, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(26, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(28, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(29, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(30, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(31, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(32, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(33, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, .str.100, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(20, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(23, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.97, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 22)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 22)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 22)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 22)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 22)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 22)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 22)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 22)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 22)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 22)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 22)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 22)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 22)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 22)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 22)), $mul.ref(17, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 22)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 22)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 22)), $mul.ref(20, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.94, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(8, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(18, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(20, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(21, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.64, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 22)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 22)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 22)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 22)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 22)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 22)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 22)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 22)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 22)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 22)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 22)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 22)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 22)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 22)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 22)), $mul.ref(17, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 22)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 22)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 22)), $mul.ref(20, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.84, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(10, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(14, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(22, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(23, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(24, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(25, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(26, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(27, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(28, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(29, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(30, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(31, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(32, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, .str.85, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(2, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(11, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(12, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(14, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(18, 1)), 33);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(19, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(21, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(22, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(23, 1)), 74);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(24, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(25, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(26, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(27, 1)), 81);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(28, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(29, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(30, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(31, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(32, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(33, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(34, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(35, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(36, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(37, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(38, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 40)), $mul.ref(39, 1)), 0);
    $M.0 := $store.i8($M.0, .str.67, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.69, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(2, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(11, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(12, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(15, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(19, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(20, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(22, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(25, 1)), 33);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(26, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(28, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(29, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(30, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(31, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, .str.70, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(2, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(11, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(12, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(16, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(20, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(21, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(22, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(23, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(24, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(25, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(26, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(27, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(28, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(29, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(30, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(31, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(32, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(33, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(34, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(35, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 37)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i8($M.0, .str.77, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(20, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(22, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(23, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(24, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(25, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(26, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(27, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, .str.78, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(13, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(22, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(23, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(24, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(25, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(26, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(27, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(28, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(29, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(30, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(31, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(32, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(33, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(34, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, .str.79, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 12)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 12)), $mul.ref(2, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 12)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 12)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 12)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 12)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 12)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 12)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.80, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(2, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(11, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(12, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(15, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(18, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(19, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(24, 1)), 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(25, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(26, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(27, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(28, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(29, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(30, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(31, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(32, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(33, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(34, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(35, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(36, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(37, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(38, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(39, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(40, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(41, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(42, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(43, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(44, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(45, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(46, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(47, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(48, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(49, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(50, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(51, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(52, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(53, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(54, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 56)), $mul.ref(55, 1)), 0);
    $M.0 := $store.i8($M.0, .str.72, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(13, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(22, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(24, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.73, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 20)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 20)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 20)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 20)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 20)), $mul.ref(6, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 20)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 20)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 20)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 20)), $mul.ref(10, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 20)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 20)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 20)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 20)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 20)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 20)), $mul.ref(16, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 20)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.37, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 23)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 23)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 23)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 23)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 23)), $mul.ref(6, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 23)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 23)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 23)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 23)), $mul.ref(10, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 23)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 23)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 23)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 23)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 23)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 23)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 23)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 23)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 23)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 23)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 23)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.38, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(2, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(13, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(17, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(20, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(21, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(22, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(24, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(25, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(26, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(27, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, .str.140, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(10, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(22, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(23, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(24, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(25, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(27, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, .str.141, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(6, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(7, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(8, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(16, 1)), 33);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(17, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(19, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(20, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(21, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(22, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.142, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(6, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(11, 1)), 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(14, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(19, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(20, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(21, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(22, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(23, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(24, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(25, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(26, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(27, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(28, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(29, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(30, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(31, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(32, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(33, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(34, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(35, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 37)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i8($M.0, .str.143, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(10, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(22, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(23, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(24, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(25, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(27, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(28, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(29, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(30, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(31, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(32, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(33, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(34, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(35, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(36, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, .str.144, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 14)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 14)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 14)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 14)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 14)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 14)), $mul.ref(6, 1)), 33);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 14)), $mul.ref(7, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 14)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 14)), $mul.ref(9, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 14)), $mul.ref(10, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 14)), $mul.ref(11, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 14)), $mul.ref(12, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.145, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.146, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 21)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 21)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 21)), $mul.ref(3, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 21)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 21)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 21)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 21)), $mul.ref(7, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 21)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 21)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 21)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 21)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 21)), $mul.ref(13, 1)), 33);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 21)), $mul.ref(14, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 21)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 21)), $mul.ref(16, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 21)), $mul.ref(17, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 21)), $mul.ref(18, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 21)), $mul.ref(19, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.147, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(2, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(13, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(17, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(20, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(21, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(22, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(23, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(24, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(25, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(26, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(27, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(28, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(29, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(30, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(31, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(32, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(33, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(34, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(35, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(36, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(37, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(38, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(39, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(40, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(41, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 43)), $mul.ref(42, 1)), 0);
    $M.0 := $store.i8($M.0, .str.148, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(10, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(12, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(14, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(15, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(18, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(19, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(20, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(23, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(24, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(25, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(26, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(27, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(28, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(29, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(30, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(31, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(32, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(33, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(34, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(35, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(36, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, .str.150, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 8)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 8)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 8)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 8)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 8)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 8)), $mul.ref(6, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.154, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(10, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(15, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(16, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(17, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(21, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(22, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(23, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(24, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(25, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(26, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, .str.155, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(2, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(11, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(12, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(14, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(18, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(19, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(21, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(22, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(23, 1)), 74);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(24, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(25, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(26, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(27, 1)), 81);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(28, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(29, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(30, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(31, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(32, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(33, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(34, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(35, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(36, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(37, 1)), 124);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(38, 1)), 124);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(39, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(40, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(41, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(42, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(43, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(44, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(45, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(46, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(47, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(48, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(49, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(50, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(51, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(52, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(53, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(54, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(55, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(56, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(57, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(58, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(59, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(60, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(61, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(62, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(63, 1)), 74);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(64, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(65, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(66, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(67, 1)), 81);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(68, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(69, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(70, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(71, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(72, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(73, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(74, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(75, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(76, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(77, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(78, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 80)), $mul.ref(79, 1)), 0);
    $M.0 := $store.i8($M.0, .str.139, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 12)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 12)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 12)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 12)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 12)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 12)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 12)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 12)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.107, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 21)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 21)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 21)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 21)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 21)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 21)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 21)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 21)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 21)), $mul.ref(10, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 21)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 21)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 21)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 21)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 21)), $mul.ref(16, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 21)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 21)), $mul.ref(18, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 21)), $mul.ref(19, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.112, 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(4, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(6, 1)), 33);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(7, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(9, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(10, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(11, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(13, 1)), 87);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(14, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(15, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(16, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(17, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.113, 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(4, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(6, 1)), 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(10, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(14, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(19, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(20, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(22, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(23, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(24, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(25, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(26, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(27, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(28, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(29, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(30, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(31, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(32, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(33, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(34, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(35, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(36, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(37, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 39)), $mul.ref(38, 1)), 0);
    $M.0 := $store.i8($M.0, .str.114, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 5)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 5)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 5)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.115, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(5, 1)), 94);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(7, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(8, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(9, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(12, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(14, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(15, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(18, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(19, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(20, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(23, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(24, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(25, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(26, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(27, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(28, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(29, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(30, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(31, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(32, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(33, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(34, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(35, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(36, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(37, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(38, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(39, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(40, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(41, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(42, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(43, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(44, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(45, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(46, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(47, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 49)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, .str.122, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(10, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(18, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(19, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(20, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.116, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(10, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(18, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(19, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(21, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.117, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(2, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(11, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(12, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(13, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(14, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(21, 1)), 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(22, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(24, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(25, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(26, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(27, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(28, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(29, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(30, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(31, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(32, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(33, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(34, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(35, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(36, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, .str.118, 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 23)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 23)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 23)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 23)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 23)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 23)), $mul.ref(6, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 23)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 23)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 23)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 23)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 23)), $mul.ref(11, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 23)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 23)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 23)), $mul.ref(14, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 23)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 23)), $mul.ref(16, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 23)), $mul.ref(17, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 23)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 23)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 23)), $mul.ref(20, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 23)), $mul.ref(21, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.119, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 23)), $mul.ref(1, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 23)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 23)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 23)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 23)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 23)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 23)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 23)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 23)), $mul.ref(9, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 23)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 23)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 23)), $mul.ref(12, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 23)), $mul.ref(13, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 23)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 23)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 23)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 23)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 23)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 23)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 23)), $mul.ref(20, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 23)), $mul.ref(21, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.119, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.120, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(11, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(12, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(14, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(15, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(19, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(20, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(22, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(25, 1)), 33);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(26, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(28, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(29, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(30, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(31, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, .str.121, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(11, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(12, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(14, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(16, 1)), 33);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(17, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(19, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(20, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(21, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(22, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.152, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(10, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(21, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(22, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(23, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(24, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.153, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(12, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(22, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(23, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(24, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(25, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(26, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(27, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(28, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(29, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(30, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(31, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(32, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(33, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(34, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(35, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(36, 1)), 124);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(37, 1)), 124);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(38, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(39, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(40, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(41, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(42, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(43, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(44, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(45, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(46, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(47, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(48, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(49, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(50, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(51, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(52, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(53, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(54, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(55, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(56, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(57, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(58, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(59, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(60, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(61, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(62, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(63, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(64, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(65, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(66, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(67, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(68, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(69, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(70, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(71, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(72, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(73, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(74, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(75, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.153, $mul.ref(0, 77)), $mul.ref(76, 1)), 0);
    $M.0 := $store.i8($M.0, .str.81, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 23)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 23)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 23)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 23)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 23)), $mul.ref(6, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 23)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 23)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 23)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 23)), $mul.ref(10, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 23)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 23)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 23)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 23)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 23)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 23)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 23)), $mul.ref(17, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 23)), $mul.ref(18, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 23)), $mul.ref(19, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 23)), $mul.ref(20, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 23)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.138, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 23)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 23)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 23)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 23)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 23)), $mul.ref(6, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 23)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 23)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 23)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 23)), $mul.ref(10, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 23)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 23)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 23)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 23)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 23)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 23)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 23)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 23)), $mul.ref(18, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 23)), $mul.ref(19, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 23)), $mul.ref(20, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 23)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.26, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 21)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 21)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 21)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 21)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 21)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 21)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 21)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 21)), $mul.ref(10, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 21)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 21)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 21)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 21)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 21)), $mul.ref(16, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 21)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 21)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 21)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.29, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 10)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 10)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 10)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 10)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 10)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 10)), $mul.ref(6, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 10)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 10)), $mul.ref(8, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.30, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(6, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(11, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(12, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(14, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(19, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(22, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(23, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(24, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(25, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(26, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(27, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(28, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(29, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(30, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(31, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(32, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(33, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(34, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(35, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(36, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(37, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(38, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(39, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(40, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(41, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(42, 1)), 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(43, 1)), 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(44, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(45, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(46, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(47, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(48, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(49, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(50, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(51, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(52, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(53, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(54, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(55, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(56, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 58)), $mul.ref(57, 1)), 0);
    $M.0 := $store.i8($M.0, .str.31, 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(3, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(5, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(7, 1)), 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(8, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(10, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(12, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(13, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(14, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(15, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(16, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(17, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(18, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(20, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(21, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(22, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.128, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 20)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 20)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 20)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 20)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 20)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 20)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 20)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 20)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 20)), $mul.ref(10, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 20)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 20)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 20)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 20)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 20)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 20)), $mul.ref(16, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 20)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.49, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(5, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(11, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(12, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(20, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(21, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(23, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(24, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(25, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(26, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(28, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(29, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(30, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(31, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, .str.42, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(10, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(14, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(21, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(22, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.48, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(2, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(12, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(20, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(21, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(22, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(23, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(24, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(25, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(26, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(28, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(29, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(30, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(31, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(32, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(33, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(34, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(35, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(36, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(37, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 39)), $mul.ref(38, 1)), 0);
    $M.103 := $store.i8($M.103, .str.32, 37);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.32, $mul.ref(0, 11)), $mul.ref(1, 1)), 115);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.32, $mul.ref(0, 11)), $mul.ref(2, 1)), 46);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.32, $mul.ref(0, 11)), $mul.ref(3, 1)), 37);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.32, $mul.ref(0, 11)), $mul.ref(4, 1)), 48);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.32, $mul.ref(0, 11)), $mul.ref(5, 1)), 49);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.32, $mul.ref(0, 11)), $mul.ref(6, 1)), 50);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.32, $mul.ref(0, 11)), $mul.ref(7, 1)), 108);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.32, $mul.ref(0, 11)), $mul.ref(8, 1)), 108);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.32, $mul.ref(0, 11)), $mul.ref(9, 1)), 120);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.32, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.103 := $store.i8($M.103, .str.33, 37);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.33, $mul.ref(0, 11)), $mul.ref(1, 1)), 115);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.33, $mul.ref(0, 11)), $mul.ref(2, 1)), 46);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.33, $mul.ref(0, 11)), $mul.ref(3, 1)), 37);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.33, $mul.ref(0, 11)), $mul.ref(4, 1)), 48);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.33, $mul.ref(0, 11)), $mul.ref(5, 1)), 49);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.33, $mul.ref(0, 11)), $mul.ref(6, 1)), 54);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.33, $mul.ref(0, 11)), $mul.ref(7, 1)), 108);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.33, $mul.ref(0, 11)), $mul.ref(8, 1)), 108);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.33, $mul.ref(0, 11)), $mul.ref(9, 1)), 120);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.33, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.22, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 23)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 23)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 23)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 23)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 23)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 23)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 23)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 23)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 23)), $mul.ref(10, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 23)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 23)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 23)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 23)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 23)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 23)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 23)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 23)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 23)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 23)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 23)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.25, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(9, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(18, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(21, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(22, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(23, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(24, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.334, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.334, $mul.ref(0, 4)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.334, $mul.ref(0, 4)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.334, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.192, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(15, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(18, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(19, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(20, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(21, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(22, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(24, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(25, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(26, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(27, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(28, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.192, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, .str.193, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.193, $mul.ref(0, 11)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.193, $mul.ref(0, 11)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.193, $mul.ref(0, 11)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.193, $mul.ref(0, 11)), $mul.ref(4, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.193, $mul.ref(0, 11)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.193, $mul.ref(0, 11)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.193, $mul.ref(0, 11)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.193, $mul.ref(0, 11)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.193, $mul.ref(0, 11)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.193, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.184, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(17, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(20, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(23, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(24, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(25, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(26, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(28, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(29, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(30, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(31, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(32, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(33, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(34, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(35, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(36, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(37, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(38, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.184, $mul.ref(0, 40)), $mul.ref(39, 1)), 0);
    $M.0 := $store.i8($M.0, .str.186, 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.186, $mul.ref(0, 23)), $mul.ref(1, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.186, $mul.ref(0, 23)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.186, $mul.ref(0, 23)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.186, $mul.ref(0, 23)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.186, $mul.ref(0, 23)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.186, $mul.ref(0, 23)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.186, $mul.ref(0, 23)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.186, $mul.ref(0, 23)), $mul.ref(8, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.186, $mul.ref(0, 23)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.186, $mul.ref(0, 23)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.186, $mul.ref(0, 23)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.186, $mul.ref(0, 23)), $mul.ref(12, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.186, $mul.ref(0, 23)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.186, $mul.ref(0, 23)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.186, $mul.ref(0, 23)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.186, $mul.ref(0, 23)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.186, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.186, $mul.ref(0, 23)), $mul.ref(18, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.186, $mul.ref(0, 23)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.186, $mul.ref(0, 23)), $mul.ref(20, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.186, $mul.ref(0, 23)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.186, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.185, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.185, $mul.ref(0, 20)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.185, $mul.ref(0, 20)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.185, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.185, $mul.ref(0, 20)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.185, $mul.ref(0, 20)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.185, $mul.ref(0, 20)), $mul.ref(6, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.185, $mul.ref(0, 20)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.185, $mul.ref(0, 20)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.185, $mul.ref(0, 20)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.185, $mul.ref(0, 20)), $mul.ref(10, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.185, $mul.ref(0, 20)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.185, $mul.ref(0, 20)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.185, $mul.ref(0, 20)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.185, $mul.ref(0, 20)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.185, $mul.ref(0, 20)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.185, $mul.ref(0, 20)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.185, $mul.ref(0, 20)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.185, $mul.ref(0, 20)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.185, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.104 := $store.i8($M.104, .str.322, 37);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.322, $mul.ref(0, 5)), $mul.ref(1, 1)), 115);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.322, $mul.ref(0, 5)), $mul.ref(2, 1)), 37);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.322, $mul.ref(0, 5)), $mul.ref(3, 1)), 100);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.322, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.351, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.351, $mul.ref(0, 15)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.351, $mul.ref(0, 15)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.351, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.351, $mul.ref(0, 15)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.351, $mul.ref(0, 15)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.351, $mul.ref(0, 15)), $mul.ref(6, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.351, $mul.ref(0, 15)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.351, $mul.ref(0, 15)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.351, $mul.ref(0, 15)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.351, $mul.ref(0, 15)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.351, $mul.ref(0, 15)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.351, $mul.ref(0, 15)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.351, $mul.ref(0, 15)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.351, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.281, 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(7, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(9, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(10, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(17, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(21, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(22, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(24, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.281, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.271, 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.271, $mul.ref(0, 22)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.271, $mul.ref(0, 22)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.271, $mul.ref(0, 22)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.271, $mul.ref(0, 22)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.271, $mul.ref(0, 22)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.271, $mul.ref(0, 22)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.271, $mul.ref(0, 22)), $mul.ref(7, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.271, $mul.ref(0, 22)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.271, $mul.ref(0, 22)), $mul.ref(9, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.271, $mul.ref(0, 22)), $mul.ref(10, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.271, $mul.ref(0, 22)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.271, $mul.ref(0, 22)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.271, $mul.ref(0, 22)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.271, $mul.ref(0, 22)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.271, $mul.ref(0, 22)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.271, $mul.ref(0, 22)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.271, $mul.ref(0, 22)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.271, $mul.ref(0, 22)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.271, $mul.ref(0, 22)), $mul.ref(19, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.271, $mul.ref(0, 22)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.271, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.105 := $store.i8($M.105, .str.328, 114);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.328, $mul.ref(0, 6)), $mul.ref(1, 1)), 98);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.328, $mul.ref(0, 6)), $mul.ref(2, 1)), 100);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.328, $mul.ref(0, 6)), $mul.ref(3, 1)), 37);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.328, $mul.ref(0, 6)), $mul.ref(4, 1)), 100);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.328, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.324, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.324, $mul.ref(0, 15)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.324, $mul.ref(0, 15)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.324, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.324, $mul.ref(0, 15)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.324, $mul.ref(0, 15)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.324, $mul.ref(0, 15)), $mul.ref(6, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.324, $mul.ref(0, 15)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.324, $mul.ref(0, 15)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.324, $mul.ref(0, 15)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.324, $mul.ref(0, 15)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.324, $mul.ref(0, 15)), $mul.ref(11, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.324, $mul.ref(0, 15)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.324, $mul.ref(0, 15)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.324, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.228, 87);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(1, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(2, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(3, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(4, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(5, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(6, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(7, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(9, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(18, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(21, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(22, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(23, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(24, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(25, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(26, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(28, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(29, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(30, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(31, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(32, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(33, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(34, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(35, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(36, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(37, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(38, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(39, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(40, 1)), 33);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.228, $mul.ref(0, 42)), $mul.ref(41, 1)), 0);
    $M.0 := $store.i8($M.0, .str.229, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.229, $mul.ref(0, 20)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.229, $mul.ref(0, 20)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.229, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.229, $mul.ref(0, 20)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.229, $mul.ref(0, 20)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.229, $mul.ref(0, 20)), $mul.ref(6, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.229, $mul.ref(0, 20)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.229, $mul.ref(0, 20)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.229, $mul.ref(0, 20)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.229, $mul.ref(0, 20)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.229, $mul.ref(0, 20)), $mul.ref(11, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.229, $mul.ref(0, 20)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.229, $mul.ref(0, 20)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.229, $mul.ref(0, 20)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.229, $mul.ref(0, 20)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.229, $mul.ref(0, 20)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.229, $mul.ref(0, 20)), $mul.ref(17, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.229, $mul.ref(0, 20)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.229, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.317, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.317, $mul.ref(0, 23)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.317, $mul.ref(0, 23)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.317, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.317, $mul.ref(0, 23)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.317, $mul.ref(0, 23)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.317, $mul.ref(0, 23)), $mul.ref(6, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.317, $mul.ref(0, 23)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.317, $mul.ref(0, 23)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.317, $mul.ref(0, 23)), $mul.ref(9, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.317, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.317, $mul.ref(0, 23)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.317, $mul.ref(0, 23)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.317, $mul.ref(0, 23)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.317, $mul.ref(0, 23)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.317, $mul.ref(0, 23)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.317, $mul.ref(0, 23)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.317, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.317, $mul.ref(0, 23)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.317, $mul.ref(0, 23)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.317, $mul.ref(0, 23)), $mul.ref(20, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.317, $mul.ref(0, 23)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.317, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.319, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(13, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(22, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(24, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(25, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(26, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(27, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(28, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(29, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(30, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(31, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(32, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(33, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(34, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(35, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.319, $mul.ref(0, 37)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i8($M.0, .str.320, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(8, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(21, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(22, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(23, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(24, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(25, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(27, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(28, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(29, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(30, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(31, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(32, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(33, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(34, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(35, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(36, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(37, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(38, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.320, $mul.ref(0, 40)), $mul.ref(39, 1)), 0);
    $M.0 := $store.i8($M.0, .str.321, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(13, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(20, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(22, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(24, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(25, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(26, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(27, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(28, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(29, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(30, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.321, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, .str.304, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.304, $mul.ref(0, 21)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.304, $mul.ref(0, 21)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.304, $mul.ref(0, 21)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.304, $mul.ref(0, 21)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.304, $mul.ref(0, 21)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.304, $mul.ref(0, 21)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.304, $mul.ref(0, 21)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.304, $mul.ref(0, 21)), $mul.ref(8, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.304, $mul.ref(0, 21)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.304, $mul.ref(0, 21)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.304, $mul.ref(0, 21)), $mul.ref(11, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.304, $mul.ref(0, 21)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.304, $mul.ref(0, 21)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.304, $mul.ref(0, 21)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.304, $mul.ref(0, 21)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.304, $mul.ref(0, 21)), $mul.ref(16, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.304, $mul.ref(0, 21)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.304, $mul.ref(0, 21)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.304, $mul.ref(0, 21)), $mul.ref(19, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.304, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.305, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(10, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(17, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(20, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(22, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.305, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.200, 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.297, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.297, $mul.ref(0, 21)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.297, $mul.ref(0, 21)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.297, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.297, $mul.ref(0, 21)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.297, $mul.ref(0, 21)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.297, $mul.ref(0, 21)), $mul.ref(6, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.297, $mul.ref(0, 21)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.297, $mul.ref(0, 21)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.297, $mul.ref(0, 21)), $mul.ref(9, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.297, $mul.ref(0, 21)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.297, $mul.ref(0, 21)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.297, $mul.ref(0, 21)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.297, $mul.ref(0, 21)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.297, $mul.ref(0, 21)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.297, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.297, $mul.ref(0, 21)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.297, $mul.ref(0, 21)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.297, $mul.ref(0, 21)), $mul.ref(18, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.297, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.297, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.306, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.306, $mul.ref(0, 19)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.306, $mul.ref(0, 19)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.306, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.306, $mul.ref(0, 19)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.306, $mul.ref(0, 19)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.306, $mul.ref(0, 19)), $mul.ref(6, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.306, $mul.ref(0, 19)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.306, $mul.ref(0, 19)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.306, $mul.ref(0, 19)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.306, $mul.ref(0, 19)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.306, $mul.ref(0, 19)), $mul.ref(11, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.306, $mul.ref(0, 19)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.306, $mul.ref(0, 19)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.306, $mul.ref(0, 19)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.306, $mul.ref(0, 19)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.306, $mul.ref(0, 19)), $mul.ref(16, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.306, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.306, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.307, 33);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(7, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(8, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(9, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(14, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(15, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(17, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(19, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(21, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(22, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(23, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(24, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(25, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.307, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, .str.308, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.308, $mul.ref(0, 14)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.308, $mul.ref(0, 14)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.308, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.308, $mul.ref(0, 14)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.308, $mul.ref(0, 14)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.308, $mul.ref(0, 14)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.308, $mul.ref(0, 14)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.308, $mul.ref(0, 14)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.308, $mul.ref(0, 14)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.308, $mul.ref(0, 14)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.308, $mul.ref(0, 14)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.308, $mul.ref(0, 14)), $mul.ref(12, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.308, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.267, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.267, $mul.ref(0, 23)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.267, $mul.ref(0, 23)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.267, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.267, $mul.ref(0, 23)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.267, $mul.ref(0, 23)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.267, $mul.ref(0, 23)), $mul.ref(6, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.267, $mul.ref(0, 23)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.267, $mul.ref(0, 23)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.267, $mul.ref(0, 23)), $mul.ref(9, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.267, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.267, $mul.ref(0, 23)), $mul.ref(11, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.267, $mul.ref(0, 23)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.267, $mul.ref(0, 23)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.267, $mul.ref(0, 23)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.267, $mul.ref(0, 23)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.267, $mul.ref(0, 23)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.267, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.267, $mul.ref(0, 23)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.267, $mul.ref(0, 23)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.267, $mul.ref(0, 23)), $mul.ref(20, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.267, $mul.ref(0, 23)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.267, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.289, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(6, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(9, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(21, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.289, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.285, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(6, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(9, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(18, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(20, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(21, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(22, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(23, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.285, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.286, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(19, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(20, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(21, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(24, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(25, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(26, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(27, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(28, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(29, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(30, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(31, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(32, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(33, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(34, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(35, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(36, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(37, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(38, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(39, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(40, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(41, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(42, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(43, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.286, $mul.ref(0, 45)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i8($M.0, .str.287, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(21, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(22, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(24, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(25, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(26, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(27, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(28, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(29, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(30, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(31, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(32, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(33, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(34, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(35, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(36, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(37, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(38, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(39, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(40, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(41, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.287, $mul.ref(0, 43)), $mul.ref(42, 1)), 0);
    $M.0 := $store.i8($M.0, .str.277, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(6, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(9, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(12, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(13, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(18, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(21, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(22, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(23, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.277, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.261, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(6, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(18, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(19, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(21, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(24, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(25, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(26, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(28, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(29, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(30, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(31, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(32, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(33, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(34, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.261, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, .str.262, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(2, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(8, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.262, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.106 := $store.i8($M.106, .str.266, 60);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(1, 1)), 60);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(2, 1)), 60);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(3, 1)), 32);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(4, 1)), 82);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(5, 1)), 97);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(6, 1)), 100);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(7, 1)), 111);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(8, 1)), 115);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(9, 1)), 32);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(10, 1)), 66);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(11, 1)), 108);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(12, 1)), 111);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(13, 1)), 99);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(14, 1)), 107);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(15, 1)), 32);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(16, 1)), 68);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(17, 1)), 101);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(18, 1)), 118);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(19, 1)), 105);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(20, 1)), 99);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(21, 1)), 101);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(22, 1)), 32);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(23, 1)), 73);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(24, 1)), 109);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(25, 1)), 97);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(26, 1)), 103);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(27, 1)), 101);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(28, 1)), 32);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(29, 1)), 62);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(30, 1)), 62);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(31, 1)), 62);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(32, 1)), 10);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.266, $mul.ref(0, 34)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, .str.252, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.252, $mul.ref(0, 13)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.252, $mul.ref(0, 13)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.252, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.252, $mul.ref(0, 13)), $mul.ref(4, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.252, $mul.ref(0, 13)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.252, $mul.ref(0, 13)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.252, $mul.ref(0, 13)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.252, $mul.ref(0, 13)), $mul.ref(8, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.252, $mul.ref(0, 13)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.252, $mul.ref(0, 13)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.252, $mul.ref(0, 13)), $mul.ref(11, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.252, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.255, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.255, $mul.ref(0, 19)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.255, $mul.ref(0, 19)), $mul.ref(2, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.255, $mul.ref(0, 19)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.255, $mul.ref(0, 19)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.255, $mul.ref(0, 19)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.255, $mul.ref(0, 19)), $mul.ref(6, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.255, $mul.ref(0, 19)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.255, $mul.ref(0, 19)), $mul.ref(8, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.255, $mul.ref(0, 19)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.255, $mul.ref(0, 19)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.255, $mul.ref(0, 19)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.255, $mul.ref(0, 19)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.255, $mul.ref(0, 19)), $mul.ref(13, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.255, $mul.ref(0, 19)), $mul.ref(14, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.255, $mul.ref(0, 19)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.255, $mul.ref(0, 19)), $mul.ref(16, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.255, $mul.ref(0, 19)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.255, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.256, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.256, $mul.ref(0, 18)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.256, $mul.ref(0, 18)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.256, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.256, $mul.ref(0, 18)), $mul.ref(4, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.256, $mul.ref(0, 18)), $mul.ref(5, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.256, $mul.ref(0, 18)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.256, $mul.ref(0, 18)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.256, $mul.ref(0, 18)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.256, $mul.ref(0, 18)), $mul.ref(9, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.256, $mul.ref(0, 18)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.256, $mul.ref(0, 18)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.256, $mul.ref(0, 18)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.256, $mul.ref(0, 18)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.256, $mul.ref(0, 18)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.256, $mul.ref(0, 18)), $mul.ref(15, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.256, $mul.ref(0, 18)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.256, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.257, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.257, $mul.ref(0, 20)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.257, $mul.ref(0, 20)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.257, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.257, $mul.ref(0, 20)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.257, $mul.ref(0, 20)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.257, $mul.ref(0, 20)), $mul.ref(6, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.257, $mul.ref(0, 20)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.257, $mul.ref(0, 20)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.257, $mul.ref(0, 20)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.257, $mul.ref(0, 20)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.257, $mul.ref(0, 20)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.257, $mul.ref(0, 20)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.257, $mul.ref(0, 20)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.257, $mul.ref(0, 20)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.257, $mul.ref(0, 20)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.257, $mul.ref(0, 20)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.257, $mul.ref(0, 20)), $mul.ref(17, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.257, $mul.ref(0, 20)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.257, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.107 := $store.i8($M.107, .str.232, 37);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.232, $mul.ref(0, 5)), $mul.ref(1, 1)), 115);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.232, $mul.ref(0, 5)), $mul.ref(2, 1)), 37);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.232, $mul.ref(0, 5)), $mul.ref(3, 1)), 115);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.232, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.247, 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.247, $mul.ref(0, 5)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.247, $mul.ref(0, 5)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.247, $mul.ref(0, 5)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.247, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.248, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.248, $mul.ref(0, 12)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.248, $mul.ref(0, 12)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.248, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.248, $mul.ref(0, 12)), $mul.ref(4, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.248, $mul.ref(0, 12)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.248, $mul.ref(0, 12)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.248, $mul.ref(0, 12)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.248, $mul.ref(0, 12)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.248, $mul.ref(0, 12)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.248, $mul.ref(0, 12)), $mul.ref(10, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.248, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.233, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.233, $mul.ref(0, 8)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.233, $mul.ref(0, 8)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.233, $mul.ref(0, 8)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.233, $mul.ref(0, 8)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.233, $mul.ref(0, 8)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.233, $mul.ref(0, 8)), $mul.ref(6, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.233, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.234, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.234, $mul.ref(0, 17)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.234, $mul.ref(0, 17)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.234, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.234, $mul.ref(0, 17)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.234, $mul.ref(0, 17)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.234, $mul.ref(0, 17)), $mul.ref(6, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.234, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.234, $mul.ref(0, 17)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.234, $mul.ref(0, 17)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.234, $mul.ref(0, 17)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.234, $mul.ref(0, 17)), $mul.ref(11, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.234, $mul.ref(0, 17)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.234, $mul.ref(0, 17)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.234, $mul.ref(0, 17)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.234, $mul.ref(0, 17)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.234, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.240, 0);
    $M.0 := $store.i8($M.0, .str.218, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 18)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 18)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 18)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 18)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 18)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 18)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 18)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 18)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 18)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 18)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 18)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 18)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 18)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 18)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.218, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.196, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(13, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(18, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(21, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(22, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(23, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(24, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(25, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(26, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(27, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(28, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(29, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(30, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.196, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, .str.197, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 20)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 20)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 20)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 20)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 20)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 20)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 20)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 20)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 20)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 20)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 20)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 20)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 20)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 20)), $mul.ref(14, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 20)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 20)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 20)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.197, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.198, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 22)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 22)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 22)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 22)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 22)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 22)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 22)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 22)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 22)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 22)), $mul.ref(10, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 22)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 22)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 22)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 22)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 22)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 22)), $mul.ref(16, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 22)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 22)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 22)), $mul.ref(20, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.198, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.199, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 23)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 23)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 23)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 23)), $mul.ref(4, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 23)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 23)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 23)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 23)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 23)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 23)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 23)), $mul.ref(11, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 23)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 23)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 23)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 23)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 23)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 23)), $mul.ref(17, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 23)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 23)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 23)), $mul.ref(21, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.199, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.203, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 21)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 21)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 21)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 21)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 21)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 21)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 21)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 21)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 21)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 21)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 21)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 21)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 21)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 21)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 21)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 21)), $mul.ref(17, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 21)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 21)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.203, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.108 := $store.i8($M.108, .str.201, 32);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.201, $mul.ref(0, 7)), $mul.ref(1, 1)), 12);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.201, $mul.ref(0, 7)), $mul.ref(2, 1)), 10);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.201, $mul.ref(0, 7)), $mul.ref(3, 1)), 13);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.201, $mul.ref(0, 7)), $mul.ref(4, 1)), 9);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.201, $mul.ref(0, 7)), $mul.ref(5, 1)), 11);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.201, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.335, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.335, $mul.ref(0, 7)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.335, $mul.ref(0, 7)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.335, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.335, $mul.ref(0, 7)), $mul.ref(4, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.335, $mul.ref(0, 7)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.335, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.177, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 14)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 14)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 14)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 14)), $mul.ref(4, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 14)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 14)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 14)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 14)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 14)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 14)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 14)), $mul.ref(11, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 14)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.336, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.336, $mul.ref(0, 17)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.336, $mul.ref(0, 17)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.336, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.336, $mul.ref(0, 17)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.336, $mul.ref(0, 17)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.336, $mul.ref(0, 17)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.336, $mul.ref(0, 17)), $mul.ref(7, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.336, $mul.ref(0, 17)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.336, $mul.ref(0, 17)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.336, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.336, $mul.ref(0, 17)), $mul.ref(11, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.336, $mul.ref(0, 17)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.336, $mul.ref(0, 17)), $mul.ref(13, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.336, $mul.ref(0, 17)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.336, $mul.ref(0, 17)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.336, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.337, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.337, $mul.ref(0, 20)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.337, $mul.ref(0, 20)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.337, $mul.ref(0, 20)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.337, $mul.ref(0, 20)), $mul.ref(4, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.337, $mul.ref(0, 20)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.337, $mul.ref(0, 20)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.337, $mul.ref(0, 20)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.337, $mul.ref(0, 20)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.337, $mul.ref(0, 20)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.337, $mul.ref(0, 20)), $mul.ref(10, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.337, $mul.ref(0, 20)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.337, $mul.ref(0, 20)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.337, $mul.ref(0, 20)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.337, $mul.ref(0, 20)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.337, $mul.ref(0, 20)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.337, $mul.ref(0, 20)), $mul.ref(16, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.337, $mul.ref(0, 20)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.337, $mul.ref(0, 20)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.337, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.338, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.338, $mul.ref(0, 5)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.338, $mul.ref(0, 5)), $mul.ref(2, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.338, $mul.ref(0, 5)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.338, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.109 := $store.i8($M.109, .str.377, 37);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(.str.377, $mul.ref(0, 6)), $mul.ref(1, 1)), 108);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(.str.377, $mul.ref(0, 6)), $mul.ref(2, 1)), 108);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(.str.377, $mul.ref(0, 6)), $mul.ref(3, 1)), 117);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(.str.377, $mul.ref(0, 6)), $mul.ref(4, 1)), 10);
    $M.109 := $store.i8($M.109, $add.ref($add.ref(.str.377, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.339, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.339, $mul.ref(0, 9)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.339, $mul.ref(0, 9)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.339, $mul.ref(0, 9)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.339, $mul.ref(0, 9)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.339, $mul.ref(0, 9)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.339, $mul.ref(0, 9)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.339, $mul.ref(0, 9)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.339, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, .str.371, 48);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.371, $mul.ref(0, 11)), $mul.ref(1, 1)), 120);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.371, $mul.ref(0, 11)), $mul.ref(2, 1)), 37);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.371, $mul.ref(0, 11)), $mul.ref(3, 1)), 48);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.371, $mul.ref(0, 11)), $mul.ref(4, 1)), 49);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.371, $mul.ref(0, 11)), $mul.ref(5, 1)), 54);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.371, $mul.ref(0, 11)), $mul.ref(6, 1)), 108);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.371, $mul.ref(0, 11)), $mul.ref(7, 1)), 108);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.371, $mul.ref(0, 11)), $mul.ref(8, 1)), 120);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.371, $mul.ref(0, 11)), $mul.ref(9, 1)), 10);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.371, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.340, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.340, $mul.ref(0, 6)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.340, $mul.ref(0, 6)), $mul.ref(2, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.340, $mul.ref(0, 6)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.340, $mul.ref(0, 6)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.340, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.111 := $store.i8($M.111, .str.176, 37);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.176, $mul.ref(0, 4)), $mul.ref(1, 1)), 100);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.176, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.176, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.112 := $store.i8($M.112, .str.376, 40);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.376, $mul.ref(0, 8)), $mul.ref(1, 1)), 110);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.376, $mul.ref(0, 8)), $mul.ref(2, 1)), 111);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.376, $mul.ref(0, 8)), $mul.ref(3, 1)), 110);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.376, $mul.ref(0, 8)), $mul.ref(4, 1)), 101);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.376, $mul.ref(0, 8)), $mul.ref(5, 1)), 41);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.376, $mul.ref(0, 8)), $mul.ref(6, 1)), 10);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.376, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.341, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.341, $mul.ref(0, 6)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.341, $mul.ref(0, 6)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.341, $mul.ref(0, 6)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.341, $mul.ref(0, 6)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.341, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.342, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.342, $mul.ref(0, 10)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.342, $mul.ref(0, 10)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.342, $mul.ref(0, 10)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.342, $mul.ref(0, 10)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.342, $mul.ref(0, 10)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.342, $mul.ref(0, 10)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.342, $mul.ref(0, 10)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.342, $mul.ref(0, 10)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.342, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.113 := $store.i8($M.113, .str.379, 99);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.379, $mul.ref(0, 12)), $mul.ref(1, 1)), 108);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.379, $mul.ref(0, 12)), $mul.ref(2, 1)), 105);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.379, $mul.ref(0, 12)), $mul.ref(3, 1)), 101);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.379, $mul.ref(0, 12)), $mul.ref(4, 1)), 110);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.379, $mul.ref(0, 12)), $mul.ref(5, 1)), 116);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.379, $mul.ref(0, 12)), $mul.ref(6, 1)), 37);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.379, $mul.ref(0, 12)), $mul.ref(7, 1)), 108);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.379, $mul.ref(0, 12)), $mul.ref(8, 1)), 108);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.379, $mul.ref(0, 12)), $mul.ref(9, 1)), 100);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.379, $mul.ref(0, 12)), $mul.ref(10, 1)), 10);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.379, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.343, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.343, $mul.ref(0, 5)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.343, $mul.ref(0, 5)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.343, $mul.ref(0, 5)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.343, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.114 := $store.i8($M.114, .str.189, 37);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.189, $mul.ref(0, 4)), $mul.ref(1, 1)), 115);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.189, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.189, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.344, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.344, $mul.ref(0, 8)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.344, $mul.ref(0, 8)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.344, $mul.ref(0, 8)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.344, $mul.ref(0, 8)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.344, $mul.ref(0, 8)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.344, $mul.ref(0, 8)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.344, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.345, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.345, $mul.ref(0, 5)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.345, $mul.ref(0, 5)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.345, $mul.ref(0, 5)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.345, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.115 := $store.i8($M.115, .str.190, 40);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(1, 1)), 117);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(2, 1)), 110);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(3, 1)), 107);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(4, 1)), 110);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(5, 1)), 111);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(6, 1)), 119);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(7, 1)), 110);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(8, 1)), 41);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(9, 1)), 10);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.346, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.346, $mul.ref(0, 9)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.346, $mul.ref(0, 9)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.346, $mul.ref(0, 9)), $mul.ref(3, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.346, $mul.ref(0, 9)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.346, $mul.ref(0, 9)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.346, $mul.ref(0, 9)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.346, $mul.ref(0, 9)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.346, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.347, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.347, $mul.ref(0, 13)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.347, $mul.ref(0, 13)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.347, $mul.ref(0, 13)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.347, $mul.ref(0, 13)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.347, $mul.ref(0, 13)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.347, $mul.ref(0, 13)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.347, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.347, $mul.ref(0, 13)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.347, $mul.ref(0, 13)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.347, $mul.ref(0, 13)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.347, $mul.ref(0, 13)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.347, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.348, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.348, $mul.ref(0, 7)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.348, $mul.ref(0, 7)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.348, $mul.ref(0, 7)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.348, $mul.ref(0, 7)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.348, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.348, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i8($M.116, .str.372, 40);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.372, $mul.ref(0, 19)), $mul.ref(1, 1)), 110);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.372, $mul.ref(0, 19)), $mul.ref(2, 1)), 111);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.372, $mul.ref(0, 19)), $mul.ref(3, 1)), 32);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.372, $mul.ref(0, 19)), $mul.ref(4, 1)), 112);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.372, $mul.ref(0, 19)), $mul.ref(5, 1)), 97);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.372, $mul.ref(0, 19)), $mul.ref(6, 1)), 114);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.372, $mul.ref(0, 19)), $mul.ref(7, 1)), 101);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.372, $mul.ref(0, 19)), $mul.ref(8, 1)), 110);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.372, $mul.ref(0, 19)), $mul.ref(9, 1)), 116);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.372, $mul.ref(0, 19)), $mul.ref(10, 1)), 32);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.372, $mul.ref(0, 19)), $mul.ref(11, 1)), 105);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.372, $mul.ref(0, 19)), $mul.ref(12, 1)), 109);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.372, $mul.ref(0, 19)), $mul.ref(13, 1)), 97);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.372, $mul.ref(0, 19)), $mul.ref(14, 1)), 103);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.372, $mul.ref(0, 19)), $mul.ref(15, 1)), 101);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.372, $mul.ref(0, 19)), $mul.ref(16, 1)), 41);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.372, $mul.ref(0, 19)), $mul.ref(17, 1)), 10);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.372, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.374, 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.374, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.375, 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.375, $mul.ref(0, 10)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.375, $mul.ref(0, 10)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.375, $mul.ref(0, 10)), $mul.ref(3, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.375, $mul.ref(0, 10)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.375, $mul.ref(0, 10)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.375, $mul.ref(0, 10)), $mul.ref(6, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.375, $mul.ref(0, 10)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.375, $mul.ref(0, 10)), $mul.ref(8, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.375, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.117 := $store.i8($M.117, .str.373, 37);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(1, 1)), 115);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(2, 1)), 112);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(3, 1)), 111);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(4, 1)), 111);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(5, 1)), 108);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(6, 1)), 95);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(7, 1)), 105);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(8, 1)), 100);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(9, 1)), 32);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(10, 1)), 37);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(11, 1)), 108);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(12, 1)), 108);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(13, 1)), 117);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(14, 1)), 10);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(15, 1)), 112);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(16, 1)), 111);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(17, 1)), 111);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(18, 1)), 108);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(19, 1)), 95);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(20, 1)), 110);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(21, 1)), 97);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(22, 1)), 109);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(23, 1)), 101);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(24, 1)), 32);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(25, 1)), 37);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(26, 1)), 115);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(27, 1)), 10);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(28, 1)), 105);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(29, 1)), 109);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(30, 1)), 97);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(31, 1)), 103);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(32, 1)), 101);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(33, 1)), 95);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(34, 1)), 105);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(35, 1)), 100);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(36, 1)), 32);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(37, 1)), 37);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(38, 1)), 115);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(39, 1)), 10);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(40, 1)), 105);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(41, 1)), 109);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(42, 1)), 97);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(43, 1)), 103);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(44, 1)), 101);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(45, 1)), 95);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(46, 1)), 110);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(47, 1)), 97);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(48, 1)), 109);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(49, 1)), 101);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(50, 1)), 32);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(51, 1)), 37);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(52, 1)), 115);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(53, 1)), 10);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(54, 1)), 115);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(55, 1)), 110);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(56, 1)), 97);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(57, 1)), 112);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(58, 1)), 95);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(59, 1)), 105);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(60, 1)), 100);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(61, 1)), 32);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(62, 1)), 37);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(63, 1)), 108);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(64, 1)), 108);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(65, 1)), 117);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(66, 1)), 10);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(67, 1)), 115);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(68, 1)), 110);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(69, 1)), 97);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(70, 1)), 112);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(71, 1)), 95);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(72, 1)), 110);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(73, 1)), 97);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(74, 1)), 109);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(75, 1)), 101);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(76, 1)), 32);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(77, 1)), 37);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(78, 1)), 115);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(79, 1)), 10);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(80, 1)), 111);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(81, 1)), 118);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(82, 1)), 101);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(83, 1)), 114);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(84, 1)), 108);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(85, 1)), 97);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(86, 1)), 112);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(87, 1)), 32);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(88, 1)), 37);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(89, 1)), 108);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(90, 1)), 108);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(91, 1)), 117);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(92, 1)), 10);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.373, $mul.ref(0, 94)), $mul.ref(93, 1)), 0);
    $M.0 := $store.i8($M.0, .str.349, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.349, $mul.ref(0, 8)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.349, $mul.ref(0, 8)), $mul.ref(2, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.349, $mul.ref(0, 8)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.349, $mul.ref(0, 8)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.349, $mul.ref(0, 8)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.349, $mul.ref(0, 8)), $mul.ref(6, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.349, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.358, 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(6, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(17, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(20, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(22, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(24, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(25, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(26, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(27, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(28, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(29, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(30, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(31, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(32, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(33, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.358, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    call {:si_unique_call 3045} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 984274);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 985306);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 986338);

procedure devirtbounce.2(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 987370);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(rbd_osd_req_callback, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3046} rbd_osd_req_callback($p1, $p2);
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 988402);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 989434);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 990466);

procedure devirtbounce.6(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.13, $M.14, $M.18, $CurrAddr, $M.20, $M.21, $M.19;



implementation devirtbounce.6(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i23 := $eq.ref(rbd_root_dev_release, $p0);
    assume true;
    goto $bb15, $bb29;

  $bb29:
    assume !($i23 == 1);
    $i22 := $eq.ref(rbd_sysfs_dev_release, $p0);
    assume {:branchcond $i22} true;
    goto $bb14, $bb28;

  $bb28:
    assume !($i22 == 1);
    $i21 := $eq.ref(rbd_dev_device_release, $p0);
    assume true;
    goto $bb13, $bb27;

  $bb27:
    assume !($i21 == 1);
    $i20 := $eq.ref(rbd_img_obj_callback, $p0);
    assume true;
    goto $bb12, $bb26;

  $bb26:
    assume !($i20 == 1);
    $i19 := $eq.ref(rbd_img_obj_copyup_callback, $p0);
    assume true;
    goto $bb11, $bb25;

  $bb25:
    assume !($i19 == 1);
    $i18 := $eq.ref(rbd_img_obj_parent_read_full_callback, $p0);
    assume true;
    goto $bb10, $bb24;

  $bb24:
    assume !($i18 == 1);
    $i17 := $eq.ref(rbd_img_parent_read_callback, $p0);
    assume true;
    goto $bb9, $bb23;

  $bb23:
    assume !($i17 == 1);
    $i16 := $eq.ref(rbd_img_obj_exists_callback, $p0);
    assume {:branchcond $i16} true;
    goto $bb8, $bb22;

  $bb22:
    assume !($i16 == 1);
    $i15 := $eq.ref(rbd_obj_request_destroy, $p0);
    assume true;
    goto $bb7, $bb21;

  $bb21:
    assume !($i15 == 1);
    $i14 := $eq.ref(rbd_client_release, $p0);
    assume true;
    goto $bb6, $bb20;

  $bb20:
    assume !($i14 == 1);
    $i13 := $eq.ref(rbd_spec_free, $p0);
    assume {:branchcond $i13} true;
    goto $bb5, $bb19;

  $bb19:
    assume !($i13 == 1);
    $i12 := $eq.ref(rbd_img_request_destroy, $p0);
    assume {:branchcond $i12} true;
    goto $bb4, $bb18;

  $bb18:
    assume !($i12 == 1);
    $i11 := $eq.ref(rbd_parent_request_destroy, $p0);
    assume {:branchcond $i11} true;
    goto $bb3, $bb17;

  $bb17:
    assume !($i11 == 1);
    $i10 := $eq.ref(rbd_queue_workfn, $p0);
    assume {:branchcond $i10} true;
    goto $bb2, $bb16;

  $bb16:
    assume !($i10 == 1);
    assume false;
    return;

  $bb2:
    assume $i10 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3047} rbd_queue_workfn($p1);
    return;

  $bb3:
    assume $i11 == 1;
    call {:si_unique_call 3048} rbd_parent_request_destroy(arg);
    return;

  $bb4:
    assume $i12 == 1;
    call {:si_unique_call 3049} rbd_img_request_destroy(arg);
    return;

  $bb5:
    assume $i13 == 1;
    call {:si_unique_call 3050} rbd_spec_free(arg);
    return;

  $bb6:
    assume $i14 == 1;
    call {:si_unique_call 3051} rbd_client_release(arg);
    return;

  $bb7:
    assume $i15 == 1;
    call {:si_unique_call 3052} rbd_obj_request_destroy(arg);
    return;

  $bb8:
    assume $i16 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3053} rbd_img_obj_exists_callback($p2);
    return;

  $bb9:
    assume $i17 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3054} rbd_img_parent_read_callback($p3);
    return;

  $bb10:
    assume $i18 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3055} rbd_img_obj_parent_read_full_callback($p4);
    return;

  $bb11:
    assume $i19 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3056} rbd_img_obj_copyup_callback($p5);
    return;

  $bb12:
    assume $i20 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3057} rbd_img_obj_callback($p6);
    return;

  $bb13:
    assume $i21 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3058} rbd_dev_device_release($p7);
    return;

  $bb14:
    assume $i22 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3059} rbd_sysfs_dev_release($p8);
    return;

  $bb15:
    assume $i23 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3060} rbd_root_dev_release($p9);
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 991498);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 992530);

procedure devirtbounce.8(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.13, $M.14, $M.18, $CurrAddr, $M.20, $M.21, $M.19;



implementation devirtbounce.8(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i25 := $eq.ref(rbd_root_dev_release, $p0);
    assume true;
    goto $bb15, $bb29;

  $bb29:
    assume !($i25 == 1);
    $i24 := $eq.ref(rbd_sysfs_dev_release, $p0);
    assume true;
    goto $bb14, $bb28;

  $bb28:
    assume !($i24 == 1);
    $i23 := $eq.ref(rbd_dev_device_release, $p0);
    assume true;
    goto $bb13, $bb27;

  $bb27:
    assume !($i23 == 1);
    $i22 := $eq.ref(rbd_img_obj_callback, $p0);
    assume {:branchcond $i22} true;
    goto $bb12, $bb26;

  $bb26:
    assume !($i22 == 1);
    $i21 := $eq.ref(rbd_img_obj_copyup_callback, $p0);
    assume true;
    goto $bb11, $bb25;

  $bb25:
    assume !($i21 == 1);
    $i20 := $eq.ref(rbd_img_obj_parent_read_full_callback, $p0);
    assume true;
    goto $bb10, $bb24;

  $bb24:
    assume !($i20 == 1);
    $i19 := $eq.ref(rbd_img_parent_read_callback, $p0);
    assume true;
    goto $bb9, $bb23;

  $bb23:
    assume !($i19 == 1);
    $i18 := $eq.ref(rbd_img_obj_exists_callback, $p0);
    assume true;
    goto $bb8, $bb22;

  $bb22:
    assume !($i18 == 1);
    $i17 := $eq.ref(rbd_obj_request_destroy, $p0);
    assume true;
    goto $bb7, $bb21;

  $bb21:
    assume !($i17 == 1);
    $i16 := $eq.ref(rbd_client_release, $p0);
    assume {:branchcond $i16} true;
    goto $bb6, $bb20;

  $bb20:
    assume !($i16 == 1);
    $i15 := $eq.ref(rbd_spec_free, $p0);
    assume true;
    goto $bb5, $bb19;

  $bb19:
    assume !($i15 == 1);
    $i14 := $eq.ref(rbd_img_request_destroy, $p0);
    assume true;
    goto $bb4, $bb18;

  $bb18:
    assume !($i14 == 1);
    $i13 := $eq.ref(rbd_parent_request_destroy, $p0);
    assume {:branchcond $i13} true;
    goto $bb3, $bb17;

  $bb17:
    assume !($i13 == 1);
    $i12 := $eq.ref(rbd_queue_workfn, $p0);
    assume {:branchcond $i12} true;
    goto $bb2, $bb16;

  $bb16:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3061} rbd_queue_workfn($p1);
    return;

  $bb3:
    assume $i13 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3062} rbd_parent_request_destroy($p2);
    return;

  $bb4:
    assume $i14 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3063} rbd_img_request_destroy($p3);
    return;

  $bb5:
    assume $i15 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3064} rbd_spec_free($p4);
    return;

  $bb6:
    assume $i16 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3065} rbd_client_release($p5);
    return;

  $bb7:
    assume $i17 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3066} rbd_obj_request_destroy($p6);
    return;

  $bb8:
    assume $i18 == 1;
    call {:si_unique_call 3067} rbd_img_obj_exists_callback(arg);
    return;

  $bb9:
    assume $i19 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3068} rbd_img_parent_read_callback($p7);
    return;

  $bb10:
    assume $i20 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3069} rbd_img_obj_parent_read_full_callback($p8);
    return;

  $bb11:
    assume $i21 == 1;
    call {:si_unique_call 3070} rbd_img_obj_copyup_callback(arg);
    return;

  $bb12:
    assume $i22 == 1;
    call {:si_unique_call 3071} rbd_img_obj_callback(arg);
    return;

  $bb13:
    assume $i23 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3072} rbd_dev_device_release($p9);
    return;

  $bb14:
    assume $i24 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3073} rbd_sysfs_dev_release($p10);
    return;

  $bb15:
    assume $i25 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3074} rbd_root_dev_release($p11);
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 993562);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 994594);

procedure devirtbounce.10(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 995626);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 996658);

procedure devirtbounce.12(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 997690);

procedure devirtbounce.13(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 998722);

procedure devirtbounce.14(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.13, $M.14, $M.18, $CurrAddr, $M.20, $M.21, $M.19;



implementation devirtbounce.14(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i26 := $eq.ref(rbd_root_dev_release, $p0);
    assume true;
    goto $bb15, $bb29;

  $bb29:
    assume !($i26 == 1);
    $i25 := $eq.ref(rbd_sysfs_dev_release, $p0);
    assume true;
    goto $bb14, $bb28;

  $bb28:
    assume !($i25 == 1);
    $i24 := $eq.ref(rbd_dev_device_release, $p0);
    assume true;
    goto $bb13, $bb27;

  $bb27:
    assume !($i24 == 1);
    $i23 := $eq.ref(rbd_img_obj_callback, $p0);
    assume true;
    goto $bb12, $bb26;

  $bb26:
    assume !($i23 == 1);
    $i22 := $eq.ref(rbd_img_obj_copyup_callback, $p0);
    assume {:branchcond $i22} true;
    goto $bb11, $bb25;

  $bb25:
    assume !($i22 == 1);
    $i21 := $eq.ref(rbd_img_obj_parent_read_full_callback, $p0);
    assume true;
    goto $bb10, $bb24;

  $bb24:
    assume !($i21 == 1);
    $i20 := $eq.ref(rbd_img_parent_read_callback, $p0);
    assume true;
    goto $bb9, $bb23;

  $bb23:
    assume !($i20 == 1);
    $i19 := $eq.ref(rbd_img_obj_exists_callback, $p0);
    assume true;
    goto $bb8, $bb22;

  $bb22:
    assume !($i19 == 1);
    $i18 := $eq.ref(rbd_obj_request_destroy, $p0);
    assume true;
    goto $bb7, $bb21;

  $bb21:
    assume !($i18 == 1);
    $i17 := $eq.ref(rbd_client_release, $p0);
    assume true;
    goto $bb6, $bb20;

  $bb20:
    assume !($i17 == 1);
    $i16 := $eq.ref(rbd_spec_free, $p0);
    assume {:branchcond $i16} true;
    goto $bb5, $bb19;

  $bb19:
    assume !($i16 == 1);
    $i15 := $eq.ref(rbd_img_request_destroy, $p0);
    assume true;
    goto $bb4, $bb18;

  $bb18:
    assume !($i15 == 1);
    $i14 := $eq.ref(rbd_parent_request_destroy, $p0);
    assume true;
    goto $bb3, $bb17;

  $bb17:
    assume !($i14 == 1);
    $i13 := $eq.ref(rbd_queue_workfn, $p0);
    assume {:branchcond $i13} true;
    goto $bb2, $bb16;

  $bb16:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3075} rbd_queue_workfn($p1);
    return;

  $bb3:
    assume $i14 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3076} rbd_parent_request_destroy($p2);
    return;

  $bb4:
    assume $i15 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3077} rbd_img_request_destroy($p3);
    return;

  $bb5:
    assume $i16 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3078} rbd_spec_free($p4);
    return;

  $bb6:
    assume $i17 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3079} rbd_client_release($p5);
    return;

  $bb7:
    assume $i18 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3080} rbd_obj_request_destroy($p6);
    return;

  $bb8:
    assume $i19 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3081} rbd_img_obj_exists_callback($p7);
    return;

  $bb9:
    assume $i20 == 1;
    call {:si_unique_call 3082} rbd_img_parent_read_callback(arg);
    return;

  $bb10:
    assume $i21 == 1;
    call {:si_unique_call 3083} rbd_img_obj_parent_read_full_callback(arg);
    return;

  $bb11:
    assume $i22 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3084} rbd_img_obj_copyup_callback($p8);
    return;

  $bb12:
    assume $i23 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3085} rbd_img_obj_callback($p9);
    return;

  $bb13:
    assume $i24 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3086} rbd_dev_device_release($p10);
    return;

  $bb14:
    assume $i25 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3087} rbd_sysfs_dev_release($p11);
    return;

  $bb15:
    assume $i26 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3088} rbd_root_dev_release($p12);
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 999754);

procedure devirtbounce.15(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: ref;

const $u1: ref;

const $u2: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.68, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.97, $M.96, $M.95, $M.60, $M.1, $M.0, $M.37, $M.99, $M.100, $M.101, $M.102, $M.31, $M.15, $M.22, $M.11, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 3089} __SMACK_static_init();
    call {:si_unique_call 3090} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.67, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.23, $M.25, $M.27, $M.29, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.93, $M.68, $M.94, $M.32, $M.33, $M.34, $M.57, $M.56, $M.24, $M.26, $M.28, $M.30, $M.97, $M.96, $M.95, $M.60, $M.1, $M.37, $M.99, $M.100, $M.101, $M.102, $M.31, $M.15, $M.22, $M.11, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $CurrAddr, $M.13, $M.14, $M.35, $M.21, $M.58, $M.61, $M.38, $M.39, $M.45, $M.46, $M.47, $M.18, $M.40, $M.41, $M.42, $M.43, $M.44, $M.20, $M.59, $M.19;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation rbd_release_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} rbd_release_loop_$bb3();
    return;

  exit:
    return;
}



procedure rbd_release_loop_$bb3();



implementation rbd_queue_workfn_loop_$bb38()
{

  entry:
    goto $bb38, exit;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb38_dummy;

  $bb38_dummy:
    call {:si_unique_call 1} rbd_queue_workfn_loop_$bb38();
    return;

  exit:
    return;
}



procedure rbd_queue_workfn_loop_$bb38();



implementation rbd_queue_workfn_loop_$bb28()
{

  entry:
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb28_dummy;

  $bb28_dummy:
    call {:si_unique_call 1} rbd_queue_workfn_loop_$bb28();
    return;

  exit:
    return;
}



procedure rbd_queue_workfn_loop_$bb28();



implementation rbd_img_request_fill_loop_$bb56(in_$p0: ref, in_$i129: i64, in_$p133: ref, in_$p134: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$i143: i64, in_$i144: i1, in_$p131: ref, in_$p132: ref) returns (out_$p133: ref, out_$p134: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$i143: i64, out_$i144: i1, out_$p131: ref, out_$p132: ref)
{

  entry:
    out_$p133, out_$p134, out_$p136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$i143, out_$i144, out_$p131, out_$p132 := in_$p133, in_$p134, in_$p136, in_$p137, in_$p138, in_$p139, in_$p140, in_$p141, in_$p142, in_$i143, in_$i144, in_$p131, in_$p132;
    goto $bb56, exit;

  $bb56:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1607;

  $bb58:
    assume out_$i144 == 1;
    assume {:verifier.code 0} true;
    out_$p131, out_$p132 := out_$p132, out_$p139;
    goto $bb58_dummy;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    out_$i144 := $ne.i64(out_$i143, in_$i129);
    goto corral_source_split_1620;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    out_$i143 := $p2i.ref.i64(out_$p142);
    goto corral_source_split_1619;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(out_$p141, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1618;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    out_$p141 := $bitcast.ref.ref(out_$p140);
    goto corral_source_split_1617;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(out_$p132, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_1616;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref(out_$p138, $mul.ref($sub.ref(0, 48), 240));
    goto corral_source_split_1615;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    out_$p138 := $bitcast.ref.ref(out_$p137);
    goto corral_source_split_1614;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    out_$p137 := $load.ref($M.0, out_$p136);
    goto corral_source_split_1613;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref($add.ref(out_$p134, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_1612;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    out_$p134 := $bitcast.ref.ref(out_$p133);
    goto corral_source_split_1611;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(out_$p132, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_1610;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} rbd_img_obj_request_del(in_$p0, out_$p131);
    goto corral_source_split_1609;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb58_dummy:
    call {:si_unique_call 1} out_$p133, out_$p134, out_$p136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$i143, out_$i144, out_$p131, out_$p132 := rbd_img_request_fill_loop_$bb56(in_$p0, in_$i129, out_$p133, out_$p134, out_$p136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$i143, out_$i144, out_$p131, out_$p132);
    return;

  exit:
    return;
}



procedure rbd_img_request_fill_loop_$bb56(in_$p0: ref, in_$i129: i64, in_$p133: ref, in_$p134: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$i143: i64, in_$i144: i1, in_$p131: ref, in_$p132: ref) returns (out_$p133: ref, out_$p134: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$i143: i64, out_$i144: i1, out_$p131: ref, out_$p132: ref);
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_img_request_fill_loop_$bb34()
{

  entry:
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb34_dummy;

  $bb34_dummy:
    call {:si_unique_call 1} rbd_img_request_fill_loop_$bb34();
    return;

  exit:
    return;
}



procedure rbd_img_request_fill_loop_$bb34();



implementation rbd_img_request_fill_loop_$bb21(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$p4: ref, in_$p7: ref, in_$i35: i32, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$i60: i64, in_$i61: i64, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i32, in_$i68: i64, in_$i69: i64, in_$i70: i1, in_$i72: i32, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$i80: i1, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i64, in_$i91: i64, in_$i92: i1, in_$i93: i32, in_$i94: i32, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$p81: ref, in_$i98: i1, in_$i99: i32, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$i108: i64, in_$i109: i64, in_$i110: i1, in_$i54: i64, in_$i55: i64, in_$p56: ref) returns (out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$i60: i64, out_$i61: i64, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i32, out_$i68: i64, out_$i69: i64, out_$i70: i1, out_$i72: i32, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$i80: i1, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i64, out_$i91: i64, out_$i92: i1, out_$i93: i32, out_$i94: i32, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$p81: ref, out_$i98: i1, out_$i99: i32, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$i108: i64, out_$i109: i64, out_$i110: i1, out_$i54: i64, out_$i55: i64, out_$p56: ref)
{

  entry:
    out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p81, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i54, out_$i55, out_$p56 := in_$p57, in_$i58, in_$i59, in_$i60, in_$i61, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i72, in_$p73, in_$p74, in_$p75, in_$p76, in_$p77, in_$p78, in_$i79, in_$i80, in_$i82, in_$p83, in_$p84, in_$p85, in_$i86, in_$p87, in_$p88, in_$p89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$p96, in_$p97, in_$p81, in_$i98, in_$i99, in_$p100, in_$i101, in_$i102, in_$p103, in_$p104, in_$p105, in_$p106, in_$p107, in_$i108, in_$i109, in_$i110, in_$i54, in_$i55, in_$p56;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1493;

  $bb49:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$i54, out_$i55, out_$p56 := out_$i109, out_$i108, out_$p81;
    goto $bb49_dummy;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.i64(out_$i109, 0);
    goto corral_source_split_1599;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    out_$i109 := $sub.i64(out_$i54, out_$i61);
    call {:si_unique_call 297} {:cexpr "resid"} boogie_si_record_i64(out_$i109);
    goto corral_source_split_1598;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    out_$i108 := $add.i64(out_$i55, out_$i61);
    call {:si_unique_call 296} {:cexpr "img_offset"} boogie_si_record_i64(out_$i108);
    goto corral_source_split_1597;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} rbd_img_request_get(in_$p0);
    goto corral_source_split_1596;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} rbd_img_obj_request_fill(out_$p62, out_$p100, in_$i35, 0);
    goto corral_source_split_1595;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p107, out_$i55);
    goto corral_source_split_1594;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p106, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1593;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    out_$p106 := $bitcast.ref.ref(out_$p105);
    goto corral_source_split_1592;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(out_$p62, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_1591;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p104, rbd_img_obj_callback);
    goto corral_source_split_1590;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p62, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_1589;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p103, out_$p100);
    goto corral_source_split_1588;

  $bb48:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(out_$p62, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_1587;

  $bb47:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i64(out_$i101, 0);
    goto corral_source_split_1562;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    out_$i101 := $p2i.ref.i64(out_$p100);
    goto corral_source_split_1561;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} out_$p100 := rbd_osd_req_create(in_$p7, in_$i35, out_$i99, out_$p62);
    goto corral_source_split_1560;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    out_$i99 := (if out_$i98 == 1 then 2 else 1);
    goto corral_source_split_1559;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(in_$i35, 0);
    goto corral_source_split_1558;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_1557;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p81 := out_$p97;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p81 := out_$p56;
    goto $bb39;

  $bb37:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i64(out_$i79, 0);
    goto corral_source_split_1553;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    out_$i79 := $p2i.ref.i64(out_$p78);
    goto corral_source_split_1552;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.0, out_$p77);
    goto corral_source_split_1551;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(out_$p76);
    goto corral_source_split_1550;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p62, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_1549;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p75, out_$p73);
    goto corral_source_split_1548;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    out_$p75 := $bitcast.ref.ref(out_$p74);
    goto corral_source_split_1547;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p62, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_1546;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} out_$p73 := bio_chain_clone_range(in_$p3, in_$p4, out_$i72, 32);
    goto corral_source_split_1545;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i72 := $trunc.i64.i32(out_$i61);
    call {:si_unique_call 288} {:cexpr "clone_size"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_1544;

  $bb33:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, 0);
    goto corral_source_split_1536;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} out_$i69 := ldv__builtin_expect(out_$i68, 0);
    call {:si_unique_call 285} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i69);
    goto corral_source_split_1535;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i67);
    goto corral_source_split_1534;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i1.i32(out_$i66);
    goto corral_source_split_1533;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    out_$i66 := $ugt.i64(out_$i61, 4294967295);
    goto corral_source_split_1532;

  $bb30:
    assume out_$i65 == 1;
    goto corral_source_split_1531;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(in_$i1, 1);
    goto corral_source_split_1529;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} rbd_img_obj_request_add(in_$p0, out_$p62);
    goto corral_source_split_1528;

  $bb28:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i64(out_$i63, 0);
    goto corral_source_split_1524;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_1523;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} rbd_segment_name_free(out_$p57);
    goto corral_source_split_1522;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} out_$p62 := rbd_obj_request_create(out_$p57, out_$i60, out_$i61, in_$i1);
    goto corral_source_split_1521;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} out_$i61 := rbd_segment_length(in_$p7, out_$i55, out_$i54);
    call {:si_unique_call 280} {:cexpr "length"} boogie_si_record_i64(out_$i61);
    goto corral_source_split_1520;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} out_$i60 := rbd_segment_offset(in_$p7, out_$i55);
    call {:si_unique_call 278} {:cexpr "offset"} boogie_si_record_i64(out_$i60);
    goto corral_source_split_1519;

  $bb24:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i64(out_$i58, 0);
    goto corral_source_split_1497;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    out_$i58 := $p2i.ref.i64(out_$p57);
    goto corral_source_split_1496;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} out_$p57 := rbd_segment_name(in_$p7, out_$i55);
    goto corral_source_split_1495;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb41:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    out_$p97 := out_$p56;
    goto $bb45;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    out_$p97 := out_$p96;
    goto $bb45;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref(out_$p56, $mul.ref(out_$i95, 8));
    goto corral_source_split_1583;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i32.i64(out_$i94);
    goto corral_source_split_1582;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_1581;

  $bb43:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    out_$i94 := out_$i86;
    goto $bb44;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    out_$i94 := out_$i93;
    goto $bb44;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    out_$i93 := $sub.i32(out_$i86, 1);
    call {:si_unique_call 293} {:cexpr "page_count___0"} boogie_si_record_i32(out_$i93);
    goto corral_source_split_1579;

  $bb42:
    assume out_$i92 == 1;
    goto corral_source_split_1578;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    out_$i92 := $ne.i64(out_$i91, 0);
    goto corral_source_split_1576;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    out_$i91 := $and.i64(out_$i90, 4095);
    goto corral_source_split_1575;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    out_$i90 := $add.i64(out_$i60, out_$i61);
    goto corral_source_split_1574;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p89, out_$i86);
    goto corral_source_split_1573;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p88, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1572;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    out_$p88 := $bitcast.ref.ref(out_$p87);
    goto corral_source_split_1571;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p62, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_1570;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} out_$i86 := calc_pages_for(out_$i60, out_$i61);
    call {:si_unique_call 292} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_1569;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p85, out_$p56);
    goto corral_source_split_1568;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p84, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1567;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    out_$p84 := $bitcast.ref.ref(out_$p83);
    goto corral_source_split_1566;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p62, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_1565;

  $bb40:
    assume out_$i82 == 1;
    goto corral_source_split_1564;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(in_$i1, 2);
    goto corral_source_split_1539;

  $bb31:
    assume !(out_$i65 == 1);
    goto corral_source_split_1538;

  $bb49_dummy:
    call {:si_unique_call 1} out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p81, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i54, out_$i55, out_$p56 := rbd_img_request_fill_loop_$bb21(in_$p0, in_$i1, in_$p3, in_$p4, in_$p7, in_$i35, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p81, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i54, out_$i55, out_$p56);
    return;

  exit:
    return;
}



procedure rbd_img_request_fill_loop_$bb21(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$p4: ref, in_$p7: ref, in_$i35: i32, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$i60: i64, in_$i61: i64, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i32, in_$i68: i64, in_$i69: i64, in_$i70: i1, in_$i72: i32, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$i80: i1, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i64, in_$i91: i64, in_$i92: i1, in_$i93: i32, in_$i94: i32, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$p81: ref, in_$i98: i1, in_$i99: i32, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$i108: i64, in_$i109: i64, in_$i110: i1, in_$i54: i64, in_$i55: i64, in_$p56: ref) returns (out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$i60: i64, out_$i61: i64, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i32, out_$i68: i64, out_$i69: i64, out_$i70: i1, out_$i72: i32, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$i80: i1, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i64, out_$i91: i64, out_$i92: i1, out_$i93: i32, out_$i94: i32, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$p81: ref, out_$i98: i1, out_$i99: i32, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$i108: i64, out_$i109: i64, out_$i110: i1, out_$i54: i64, out_$i55: i64, out_$p56: ref);
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.21, $M.0, $M.13, $M.14;



implementation rbd_img_request_fill_loop_$bb12()
{

  entry:
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb12_dummy;

  $bb12_dummy:
    call {:si_unique_call 1} rbd_img_request_fill_loop_$bb12();
    return;

  exit:
    return;
}



procedure rbd_img_request_fill_loop_$bb12();



implementation rbd_img_request_fill_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} rbd_img_request_fill_loop_$bb6();
    return;

  exit:
    return;
}



procedure rbd_img_request_fill_loop_$bb6();



implementation rbd_img_request_submit_loop_$bb7(in_$i36: i64, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$p44: ref, in_$p45: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p38: ref, in_$p39: ref) returns (out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$p44: ref, out_$p45: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p38: ref, out_$p39: ref)
{

  entry:
    out_$i40, out_$i41, out_$i42, out_$p44, out_$p45, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p38, out_$p39 := in_$i40, in_$i41, in_$i42, in_$p44, in_$p45, in_$p47, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$p38, in_$p39;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1672;

  $bb13:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$p38, out_$p39 := out_$p50, out_$p38;
    goto $bb13_dummy;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, in_$i36);
    goto corral_source_split_1691;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_1690;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p52, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1689;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(out_$p51);
    goto corral_source_split_1688;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p38, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_1687;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref(out_$p49, $mul.ref($sub.ref(0, 48), 240));
    goto corral_source_split_1686;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_1685;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_1684;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_1683;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_1682;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p38, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_1681;

  $bb10:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i40;
    assume true;
    goto $bb10;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_1675;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} out_$i40 := rbd_img_obj_request_submit(out_$p39);
    call {:si_unique_call 305} {:cexpr "ret"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_1674;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i40, out_$i41, out_$i42, out_$p44, out_$p45, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p38, out_$p39 := rbd_img_request_submit_loop_$bb7(in_$i36, out_$i40, out_$i41, out_$i42, out_$p44, out_$p45, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p38, out_$p39);
    return;

  exit:
    return;
}



procedure rbd_img_request_submit_loop_$bb7(in_$i36: i64, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$p44: ref, in_$p45: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p38: ref, in_$p39: ref) returns (out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$p44: ref, out_$p45: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p38: ref, out_$p39: ref);
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.14, $M.0, $CurrAddr, $M.21, $M.18, $M.20, $M.19;



implementation rbd_img_request_put_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} rbd_img_request_put_loop_$bb3();
    return;

  exit:
    return;
}



procedure rbd_img_request_put_loop_$bb3();



implementation rbd_img_request_destroy_loop_$bb14()
{

  entry:
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb14_dummy:
    call {:si_unique_call 1} rbd_img_request_destroy_loop_$bb14();
    return;

  exit:
    return;
}



procedure rbd_img_request_destroy_loop_$bb14();



implementation rbd_img_request_destroy_loop_$bb7(in_$p3: ref, in_$i38: i64, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p40: ref, in_$p41: ref) returns (out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p40: ref, out_$p41: ref)
{

  entry:
    out_$p42, out_$p43, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p40, out_$p41 := in_$p42, in_$p43, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$p51, in_$i52, in_$i53, in_$p40, in_$p41;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1833;

  $bb9:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$p40, out_$p41 := out_$p48, out_$p40;
    goto $bb9_dummy;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i64(out_$i52, in_$i38);
    goto corral_source_split_1846;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    out_$i52 := $p2i.ref.i64(out_$p51);
    goto corral_source_split_1845;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p50, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1844;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_1843;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p40, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_1842;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(out_$p47, $mul.ref($sub.ref(0, 48), 240));
    goto corral_source_split_1841;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_1840;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_1839;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_1838;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p42);
    goto corral_source_split_1837;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p40, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_1836;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} rbd_img_obj_request_del(in_$p3, out_$p41);
    goto corral_source_split_1835;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p42, out_$p43, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p40, out_$p41 := rbd_img_request_destroy_loop_$bb7(in_$p3, in_$i38, out_$p42, out_$p43, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p40, out_$p41);
    return;

  exit:
    return;
}



procedure rbd_img_request_destroy_loop_$bb7(in_$p3: ref, in_$i38: i64, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p40: ref, in_$p41: ref) returns (out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p40: ref, out_$p41: ref);
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_img_obj_request_del_loop_$bb25()
{

  entry:
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb25_dummy;

  $bb25_dummy:
    call {:si_unique_call 1} rbd_img_obj_request_del_loop_$bb25();
    return;

  exit:
    return;
}



procedure rbd_img_obj_request_del_loop_$bb25();



implementation rbd_img_obj_request_del_loop_$bb21()
{

  entry:
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb21_dummy;

  $bb21_dummy:
    call {:si_unique_call 1} rbd_img_obj_request_del_loop_$bb21();
    return;

  exit:
    return;
}



procedure rbd_img_obj_request_del_loop_$bb21();



implementation rbd_img_obj_request_del_loop_$bb14()
{

  entry:
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb14_dummy:
    call {:si_unique_call 1} rbd_img_obj_request_del_loop_$bb14();
    return;

  exit:
    return;
}



procedure rbd_img_obj_request_del_loop_$bb14();



implementation rbd_img_obj_request_del_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb10_dummy:
    call {:si_unique_call 1} rbd_img_obj_request_del_loop_$bb10();
    return;

  exit:
    return;
}



procedure rbd_img_obj_request_del_loop_$bb10();



implementation rbd_img_obj_request_del_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} rbd_img_obj_request_del_loop_$bb3();
    return;

  exit:
    return;
}



procedure rbd_img_obj_request_del_loop_$bb3();



implementation rbd_dev_remove_parent_loop_$bb23()
{

  entry:
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb23_dummy;

  $bb23_dummy:
    call {:si_unique_call 1} rbd_dev_remove_parent_loop_$bb23();
    return;

  exit:
    return;
}



procedure rbd_dev_remove_parent_loop_$bb23();



implementation rbd_dev_remove_parent_loop_$bb19()
{

  entry:
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb19_dummy;

  $bb19_dummy:
    call {:si_unique_call 1} rbd_dev_remove_parent_loop_$bb19();
    return;

  exit:
    return;
}



procedure rbd_dev_remove_parent_loop_$bb19();



implementation rbd_dev_remove_parent_loop_$bb9(in_$i13: i64, in_$i15: i1, in_$p11: ref, in_$p12: ref, in_$p18: ref, in_$p14: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$p16: ref, in_$p17: ref) returns (out_$i13: i64, out_$i15: i1, out_$p11: ref, out_$p12: ref, out_$p18: ref, out_$p14: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$p16: ref, out_$p17: ref)
{

  entry:
    out_$i13, out_$i15, out_$p11, out_$p12, out_$p18, out_$p14, out_$i19, out_$i20, out_$p21, out_$p22, out_$p16, out_$p17 := in_$i13, in_$i15, in_$p11, in_$p12, in_$p18, in_$p14, in_$i19, in_$i20, in_$p21, in_$p22, in_$p16, in_$p17;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2086;

  $bb11:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$p11, out_$p12 := out_$p14, out_$p11;
    goto $bb11_dummy;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    out_$p16, out_$p17 := out_$p11, out_$p14;
    assume true;
    goto $bb11;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i64(out_$i13, 0);
    goto corral_source_split_2093;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_2092;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume out_$i20 == 1;
    goto corral_source_split_2097;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    out_$p21, out_$p22 := out_$p12, out_$p11;
    assume true;
    goto $bb13;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, 0);
    goto corral_source_split_2090;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_2089;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p18);
    goto corral_source_split_2088;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p11, $mul.ref(0, 2192)), $mul.ref(320, 1));
    goto corral_source_split_2087;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i13, out_$i15, out_$p11, out_$p12, out_$p18, out_$p14, out_$i19, out_$i20, out_$p21, out_$p22, out_$p16, out_$p17 := rbd_dev_remove_parent_loop_$bb9(out_$i13, out_$i15, out_$p11, out_$p12, out_$p18, out_$p14, out_$i19, out_$i20, out_$p21, out_$p22, out_$p16, out_$p17);
    return;

  exit:
    return;
}



procedure rbd_dev_remove_parent_loop_$bb9(in_$i13: i64, in_$i15: i1, in_$p11: ref, in_$p12: ref, in_$p18: ref, in_$p14: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$p16: ref, in_$p17: ref) returns (out_$i13: i64, out_$i15: i1, out_$p11: ref, out_$p12: ref, out_$p18: ref, out_$p14: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$p16: ref, out_$p17: ref);



implementation rbd_dev_remove_parent_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i13: i64, in_$i15: i1, in_$p11: ref, in_$p12: ref, in_$p18: ref, in_$p14: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$p16: ref, in_$p17: ref, in_$p9: ref, in_$p10: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$i27: i32, in_$i28: i64, in_$i29: i64, in_$i30: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$i38: i32, in_$i39: i64, in_$i40: i64, in_$i41: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i1) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i13: i64, out_$i15: i1, out_$p11: ref, out_$p12: ref, out_$p18: ref, out_$p14: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$p16: ref, out_$p17: ref, out_$p9: ref, out_$p10: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$i27: i32, out_$i28: i64, out_$i29: i64, out_$i30: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$i38: i32, out_$i39: i64, out_$i40: i64, out_$i41: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i1)
{

  entry:
    out_$p5, out_$p6, out_$i7, out_$i8, out_$i13, out_$i15, out_$p11, out_$p12, out_$p18, out_$p14, out_$i19, out_$i20, out_$p21, out_$p22, out_$p16, out_$p17, out_$p9, out_$p10, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48 := in_$p5, in_$p6, in_$i7, in_$i8, in_$i13, in_$i15, in_$p11, in_$p12, in_$p18, in_$p14, in_$i19, in_$i20, in_$p21, in_$p22, in_$p16, in_$p17, in_$p9, in_$p10, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$p32, in_$p33, in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb25:
    assume {:verifier.code 0} true;
    assume out_$i48 == 1;
    goto $bb25_dummy;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i64(out_$i47, 0);
    goto corral_source_split_2136;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    out_$i47 := $p2i.ref.i64(out_$p46);
    goto corral_source_split_2135;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, in_$p1);
    goto corral_source_split_2134;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p45, $0.ref);
    goto corral_source_split_2133;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p23, $mul.ref(0, 2192)), $mul.ref(296, 1));
    goto corral_source_split_2132;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} rbd_spec_put(out_$p44);
    goto corral_source_split_2131;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_2130;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p23, $mul.ref(0, 2192)), $mul.ref(296, 1));
    goto corral_source_split_2129;

  $bb22:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i64(out_$i40, 0);
    goto corral_source_split_2124;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} out_$i40 := ldv__builtin_expect(out_$i39, 0);
    call {:si_unique_call 407} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i40);
    goto corral_source_split_2123;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i38);
    goto corral_source_split_2122;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i1.i32(out_$i37);
    goto corral_source_split_2121;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i64(out_$i36, 0);
    goto corral_source_split_2120;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p35);
    goto corral_source_split_2119;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_2118;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p23, $mul.ref(0, 2192)), $mul.ref(296, 1));
    goto corral_source_split_2117;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p33, 0);
    goto corral_source_split_2116;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p23, $mul.ref(0, 2192)), $mul.ref(304, 1));
    goto corral_source_split_2115;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p32, $0.ref);
    goto corral_source_split_2114;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p23, $mul.ref(0, 2192)), $mul.ref(320, 1));
    goto corral_source_split_2113;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} rbd_dev_image_release(out_$p24);
    goto corral_source_split_2112;

  $bb18:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, 0);
    goto corral_source_split_2107;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} out_$i29 := ldv__builtin_expect(out_$i28, 0);
    call {:si_unique_call 402} {:cexpr "tmp"} boogie_si_record_i64(out_$i29);
    goto corral_source_split_2106;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i27);
    goto corral_source_split_2105;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i1.i32(out_$i26);
    goto corral_source_split_2104;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i64(out_$i25, 0);
    goto corral_source_split_2103;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_2102;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2101;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p23, out_$p24 := out_$p9, out_$p10;
    goto $bb15;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    out_$p23, out_$p24 := out_$p21, out_$p22;
    goto $bb15;

  $bb14:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2099;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    out_$p21, out_$p22 := out_$p12, out_$p11;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, 0);
    goto corral_source_split_2090;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_2089;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p18);
    goto corral_source_split_2088;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p11, $mul.ref(0, 2192)), $mul.ref(320, 1));
    goto corral_source_split_2087;

  $bb9:
    call out_$i13, out_$i15, out_$p11, out_$p12, out_$p18, out_$p14, out_$i19, out_$i20, out_$p21, out_$p22, out_$p16, out_$p17 := rbd_dev_remove_parent_loop_$bb9(out_$i13, out_$i15, out_$p11, out_$p12, out_$p18, out_$p14, out_$i19, out_$i20, out_$p21, out_$p22, out_$p16, out_$p17);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2086;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    out_$p11, out_$p12 := out_$p6, in_$p0;
    goto $bb9;

  $bb11:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$p11, out_$p12 := out_$p14, out_$p11;
    assume false;
    return;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    out_$p16, out_$p17 := out_$p11, out_$p14;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i64(out_$i13, 0);
    goto corral_source_split_2093;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_2092;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume out_$i20 == 1;
    goto corral_source_split_2097;

  $bb6:
    assume out_$i8 == 1;
    goto corral_source_split_2084;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    out_$p9, out_$p10 := in_$p0, out_$p6;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_2082;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64(out_$p6);
    goto corral_source_split_2081;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_2080;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2192)), $mul.ref(320, 1));
    goto corral_source_split_2079;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i8 == 1);
    goto $bb8;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    out_$p9, out_$p10 := out_$p16, out_$p17;
    goto $bb8;

  $bb12:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2095;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$i7, out_$i8, out_$i13, out_$i15, out_$p11, out_$p12, out_$p18, out_$p14, out_$i19, out_$i20, out_$p21, out_$p22, out_$p16, out_$p17, out_$p9, out_$p10, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48 := rbd_dev_remove_parent_loop_$bb4(in_$p0, in_$p1, out_$p5, out_$p6, out_$i7, out_$i8, out_$i13, out_$i15, out_$p11, out_$p12, out_$p18, out_$p14, out_$i19, out_$i20, out_$p21, out_$p22, out_$p16, out_$p17, out_$p9, out_$p10, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48);
    return;

  exit:
    return;
}



procedure rbd_dev_remove_parent_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i13: i64, in_$i15: i1, in_$p11: ref, in_$p12: ref, in_$p18: ref, in_$p14: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$p16: ref, in_$p17: ref, in_$p9: ref, in_$p10: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$i27: i32, in_$i28: i64, in_$i29: i64, in_$i30: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$i38: i32, in_$i39: i64, in_$i40: i64, in_$i41: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i1) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i13: i64, out_$i15: i1, out_$p11: ref, out_$p12: ref, out_$p18: ref, out_$p14: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$p16: ref, out_$p17: ref, out_$p9: ref, out_$p10: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$i27: i32, out_$i28: i64, out_$i29: i64, out_$i30: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$i38: i32, out_$i39: i64, out_$i40: i64, out_$i41: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i1);
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.14, $M.18, $CurrAddr, $M.20, $M.21, $M.19;



implementation rbd_obj_request_put_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} rbd_obj_request_put_loop_$bb3();
    return;

  exit:
    return;
}



procedure rbd_obj_request_put_loop_$bb3();



implementation rbd_obj_request_destroy_loop_$bb20()
{

  entry:
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb20_dummy;

  $bb20_dummy:
    call {:si_unique_call 1} rbd_obj_request_destroy_loop_$bb20();
    return;

  exit:
    return;
}



procedure rbd_obj_request_destroy_loop_$bb20();



implementation rbd_obj_request_destroy_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb10_dummy:
    call {:si_unique_call 1} rbd_obj_request_destroy_loop_$bb10();
    return;

  exit:
    return;
}



procedure rbd_obj_request_destroy_loop_$bb10();



implementation rbd_obj_request_destroy_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} rbd_obj_request_destroy_loop_$bb6();
    return;

  exit:
    return;
}



procedure rbd_obj_request_destroy_loop_$bb6();



implementation bio_chain_put_loop_$bb4(in_$p4: ref, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$p3: ref) returns (out_$p4: ref, out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$p3: ref)
{

  entry:
    out_$p4, out_$p5, out_$i6, out_$i7, out_$p3 := in_$p4, in_$p5, in_$i6, in_$i7, in_$p3;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2485;

  $bb6:
    assume out_$i7 == 1;
    assume {:verifier.code 0} true;
    out_$p3 := out_$p5;
    goto $bb6_dummy;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    out_$i7 := $ne.i64(out_$i6, 0);
    goto corral_source_split_2491;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    out_$i6 := $p2i.ref.i64(out_$p5);
    goto corral_source_split_2490;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} bio_put(out_$p3);
    goto corral_source_split_2489;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    out_$p5 := $load.ref($M.0, out_$p4);
    goto corral_source_split_2488;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref(out_$p3, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_2487;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p4, out_$p5, out_$i6, out_$i7, out_$p3 := bio_chain_put_loop_$bb4(out_$p4, out_$p5, out_$i6, out_$i7, out_$p3);
    return;

  exit:
    return;
}



procedure bio_chain_put_loop_$bb4(in_$p4: ref, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$p3: ref) returns (out_$p4: ref, out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$p3: ref);



implementation img_obj_request_simple_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb10_dummy:
    call {:si_unique_call 1} img_obj_request_simple_loop_$bb10();
    return;

  exit:
    return;
}



procedure img_obj_request_simple_loop_$bb10();



implementation img_obj_request_simple_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} img_obj_request_simple_loop_$bb6();
    return;

  exit:
    return;
}



procedure img_obj_request_simple_loop_$bb6();



implementation rbd_img_obj_parent_read_full_loop_$bb27()
{

  entry:
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb27_dummy;

  $bb27_dummy:
    call {:si_unique_call 1} rbd_img_obj_parent_read_full_loop_$bb27();
    return;

  exit:
    return;
}



procedure rbd_img_obj_parent_read_full_loop_$bb27();



implementation rbd_img_obj_parent_read_full_loop_$bb21()
{

  entry:
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb21_dummy;

  $bb21_dummy:
    call {:si_unique_call 1} rbd_img_obj_parent_read_full_loop_$bb21();
    return;

  exit:
    return;
}



procedure rbd_img_obj_parent_read_full_loop_$bb21();



implementation rbd_img_obj_parent_read_full_loop_$bb17()
{

  entry:
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb17_dummy:
    call {:si_unique_call 1} rbd_img_obj_parent_read_full_loop_$bb17();
    return;

  exit:
    return;
}



procedure rbd_img_obj_parent_read_full_loop_$bb17();



implementation rbd_img_obj_parent_read_full_loop_$bb13()
{

  entry:
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb13_dummy;

  $bb13_dummy:
    call {:si_unique_call 1} rbd_img_obj_parent_read_full_loop_$bb13();
    return;

  exit:
    return;
}



procedure rbd_img_obj_parent_read_full_loop_$bb13();



implementation rbd_img_obj_parent_read_full_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} rbd_img_obj_parent_read_full_loop_$bb6();
    return;

  exit:
    return;
}



procedure rbd_img_obj_parent_read_full_loop_$bb6();



implementation rbd_img_obj_exists_submit_loop_$bb11()
{

  entry:
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb11_dummy:
    call {:si_unique_call 1} rbd_img_obj_exists_submit_loop_$bb11();
    return;

  exit:
    return;
}



procedure rbd_img_obj_exists_submit_loop_$bb11();



implementation rbd_obj_request_create_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} rbd_obj_request_create_loop_$bb6();
    return;

  exit:
    return;
}



procedure rbd_obj_request_create_loop_$bb6();



implementation rbd_osd_req_create_loop_$bb35()
{

  entry:
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb35_dummy;

  $bb35_dummy:
    call {:si_unique_call 1} rbd_osd_req_create_loop_$bb35();
    return;

  exit:
    return;
}



procedure rbd_osd_req_create_loop_$bb35();



implementation rbd_osd_req_create_loop_$bb24()
{

  entry:
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb24_dummy;

  $bb24_dummy:
    call {:si_unique_call 1} rbd_osd_req_create_loop_$bb24();
    return;

  exit:
    return;
}



procedure rbd_osd_req_create_loop_$bb24();



implementation rbd_osd_req_create_loop_$bb16()
{

  entry:
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb16_dummy;

  $bb16_dummy:
    call {:si_unique_call 1} rbd_osd_req_create_loop_$bb16();
    return;

  exit:
    return;
}



procedure rbd_osd_req_create_loop_$bb16();



implementation rbd_img_obj_exists_callback_loop_$bb11()
{

  entry:
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb11_dummy:
    call {:si_unique_call 1} rbd_img_obj_exists_callback_loop_$bb11();
    return;

  exit:
    return;
}



procedure rbd_img_obj_exists_callback_loop_$bb11();



implementation rbd_img_obj_exists_callback_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} rbd_img_obj_exists_callback_loop_$bb7();
    return;

  exit:
    return;
}



procedure rbd_img_obj_exists_callback_loop_$bb7();



implementation rbd_img_obj_exists_callback_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} rbd_img_obj_exists_callback_loop_$bb3();
    return;

  exit:
    return;
}



procedure rbd_img_obj_exists_callback_loop_$bb3();



implementation rbd_osd_req_format_read_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} rbd_osd_req_format_read_loop_$bb3();
    return;

  exit:
    return;
}



procedure rbd_osd_req_format_read_loop_$bb3();



implementation rbd_osd_req_callback_loop_$bb78()
{

  entry:
    goto $bb78, exit;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb78_dummy;

  $bb78_dummy:
    call {:si_unique_call 1} rbd_osd_req_callback_loop_$bb78();
    return;

  exit:
    return;
}



procedure rbd_osd_req_callback_loop_$bb78();



implementation rbd_osd_req_callback_loop_$bb32()
{

  entry:
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb32_dummy;

  $bb32_dummy:
    call {:si_unique_call 1} rbd_osd_req_callback_loop_$bb32();
    return;

  exit:
    return;
}



procedure rbd_osd_req_callback_loop_$bb32();



implementation rbd_osd_req_callback_loop_$bb28()
{

  entry:
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb28_dummy;

  $bb28_dummy:
    call {:si_unique_call 1} rbd_osd_req_callback_loop_$bb28();
    return;

  exit:
    return;
}



procedure rbd_osd_req_callback_loop_$bb28();



implementation rbd_osd_req_callback_loop_$bb21()
{

  entry:
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb21_dummy;

  $bb21_dummy:
    call {:si_unique_call 1} rbd_osd_req_callback_loop_$bb21();
    return;

  exit:
    return;
}



procedure rbd_osd_req_callback_loop_$bb21();



implementation rbd_osd_req_callback_loop_$bb16()
{

  entry:
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb16_dummy;

  $bb16_dummy:
    call {:si_unique_call 1} rbd_osd_req_callback_loop_$bb16();
    return;

  exit:
    return;
}



procedure rbd_osd_req_callback_loop_$bb16();



implementation rbd_osd_req_callback_loop_$bb12()
{

  entry:
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb12_dummy;

  $bb12_dummy:
    call {:si_unique_call 1} rbd_osd_req_callback_loop_$bb12();
    return;

  exit:
    return;
}



procedure rbd_osd_req_callback_loop_$bb12();



implementation rbd_osd_req_callback_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} rbd_osd_req_callback_loop_$bb6();
    return;

  exit:
    return;
}



procedure rbd_osd_req_callback_loop_$bb6();



implementation rbd_img_parent_read_loop_$bb21()
{

  entry:
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb21_dummy;

  $bb21_dummy:
    call {:si_unique_call 1} rbd_img_parent_read_loop_$bb21();
    return;

  exit:
    return;
}



procedure rbd_img_parent_read_loop_$bb21();



implementation rbd_img_parent_read_loop_$bb14()
{

  entry:
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb14_dummy:
    call {:si_unique_call 1} rbd_img_parent_read_loop_$bb14();
    return;

  exit:
    return;
}



procedure rbd_img_parent_read_loop_$bb14();



implementation rbd_img_parent_read_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb10_dummy:
    call {:si_unique_call 1} rbd_img_parent_read_loop_$bb10();
    return;

  exit:
    return;
}



procedure rbd_img_parent_read_loop_$bb10();



implementation rbd_img_parent_read_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} rbd_img_parent_read_loop_$bb6();
    return;

  exit:
    return;
}



procedure rbd_img_parent_read_loop_$bb6();



implementation rbd_img_obj_request_read_callback_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} rbd_img_obj_request_read_callback_loop_$bb6();
    return;

  exit:
    return;
}



procedure rbd_img_obj_request_read_callback_loop_$bb6();



implementation zero_bio_chain_loop_$bb9(in_$i1: i32, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p13: ref, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$p35: ref, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i17: i32, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i64, in_$p48: ref, in_$i49: i32, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i64, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i1, in_$i63: i32, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$i69: i64, in_$p71: ref, in_$i72: i32, in_$p73: ref, in_$i74: i32, in_$i75: i32, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i39: i32, in_$p8: ref, in_cmdloc_dummy_var_14: [ref]i8, in_cmdloc_dummy_var_15: [ref]i8, in_cmdloc_dummy_var_16: [ref]i8, in_cmdloc_dummy_var_17: [ref]i8, in_cmdloc_dummy_var_18: [ref]i8) returns (out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$p35: ref, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i17: i32, out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i64, out_$p48: ref, out_$i49: i32, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i64, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i1, out_$i63: i32, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$i69: i64, out_$p71: ref, out_$i72: i32, out_$p73: ref, out_$i74: i32, out_$i75: i32, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i39: i32, out_cmdloc_dummy_var_14: [ref]i8, out_cmdloc_dummy_var_15: [ref]i8, out_cmdloc_dummy_var_16: [ref]i8, out_cmdloc_dummy_var_17: [ref]i8, out_cmdloc_dummy_var_18: [ref]i8)
{

  entry:
    out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i17, out_$p40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$p78, out_$i39, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18 := in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$p27, in_$p28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i17, in_$p40, in_$i41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p48, in_$i49, in_$p50, in_$i51, in_$i52, in_$p53, in_$p54, in_$p55, in_$i56, in_$i57, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$p64, in_$p65, in_$p66, in_$p67, in_$i68, in_$i69, in_$p71, in_$i72, in_$p73, in_$i74, in_$i75, in_$p76, in_$p77, in_$p78, in_$i39, in_cmdloc_dummy_var_14, in_cmdloc_dummy_var_15, in_cmdloc_dummy_var_16, in_cmdloc_dummy_var_17, in_cmdloc_dummy_var_18;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4118;

  $bb17:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := out_$i34;
    goto $bb17_dummy;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i34;
    assume true;
    goto $bb17;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_4175;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, in_$p13);
    goto corral_source_split_4174;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} bio_advance_iter(in_$p8, in_$p3, out_$i36);
    goto corral_source_split_4173;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.18, out_$p35);
    goto corral_source_split_4172;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4171;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i33, out_$i17);
    call {:si_unique_call 905} {:cexpr "pos"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_4170;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.18, out_$p32);
    goto corral_source_split_4169;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4168;

  $bb12:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} bvec_kunmap_irq(out_$p25, in_$p4);
    goto corral_source_split_4166;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 903} out_cmdloc_dummy_var_15 := $memset.i8(out_cmdloc_dummy_var_14, out_$p27, 0, out_$i31, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_15;
    goto corral_source_split_4165;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i32.i64(out_$i30);
    goto corral_source_split_4164;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    out_$i30 := $sub.i32(out_$i29, out_$i24);
    goto corral_source_split_4163;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.18, out_$p28);
    goto corral_source_split_4162;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4161;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref(out_$p25, $mul.ref(out_$i26, 1));
    goto corral_source_split_4160;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i24);
    goto corral_source_split_4159;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} out_$p25 := bvec_kmap_irq(in_$p2, in_$p4);
    goto corral_source_split_4158;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4157;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    out_$i24 := 0;
    goto $bb15;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i22;
    goto $bb15;

  $bb13:
    assume out_$i23 == 1;
    goto corral_source_split_4153;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    out_$i23 := $sgt.i32(out_$i22, 0);
    goto corral_source_split_4151;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    out_$i22 := $sub.i32(in_$i1, out_$i17);
    call {:si_unique_call 901} {:cexpr "_max1"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_4150;

  $bb11:
    assume out_$i21 == 1;
    goto corral_source_split_4149;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    out_$i21 := $ugt.i32(out_$i20, in_$i1);
    goto corral_source_split_4147;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i19, out_$i17);
    goto corral_source_split_4146;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.18, out_$p18);
    goto corral_source_split_4145;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4144;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_16 := $M.18;
    out_cmdloc_dummy_var_17 := $M.18;
    call {:si_unique_call 907} out_cmdloc_dummy_var_18 := $memcpy.i8(out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_$p77, out_$p78, 16, $zext.i32.i64(8), 0 == 1);
    $M.18 := out_cmdloc_dummy_var_18;
    goto corral_source_split_4201;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_4200;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_4199;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, out_$p76, out_$i75);
    goto corral_source_split_4198;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4197;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i72, out_$i74);
    goto corral_source_split_4196;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.0, out_$p73);
    goto corral_source_split_4195;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4194;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i32($M.0, out_$p71);
    goto corral_source_split_4193;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p66, $mul.ref(out_$i69, 16)), $mul.ref(12, 1));
    goto corral_source_split_4192;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    goto corral_source_split_4191;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i32.i64(out_$i68);
    goto corral_source_split_4190;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.0, out_$p67);
    goto corral_source_split_4189;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4188;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_4187;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p8, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_4186;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, out_$p64, out_$i63);
    goto corral_source_split_4185;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4184;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_4183;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i52;
    goto $bb21;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i41;
    goto $bb21;

  $bb19:
    assume out_$i62 == 1;
    goto corral_source_split_4179;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    out_$i62 := $ult.i32(out_$i41, out_$i52);
    goto corral_source_split_4142;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, out_$p61, out_$p60);
    goto corral_source_split_4141;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4140;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_4139;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p54, $mul.ref(out_$i57, 16)), $mul.ref(0, 1));
    goto corral_source_split_4138;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    goto corral_source_split_4137;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i32.i64(out_$i56);
    goto corral_source_split_4136;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.0, out_$p55);
    goto corral_source_split_4135;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4134;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_4133;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p8, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_4132;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    out_$i52 := $sub.i32(out_$i49, out_$i51);
    call {:si_unique_call 900} {:cexpr "_min2"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_4131;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.0, out_$p50);
    goto corral_source_split_4130;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4129;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, out_$p48);
    goto corral_source_split_4128;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p43, $mul.ref(out_$i46, 16)), $mul.ref(8, 1));
    goto corral_source_split_4127;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    goto corral_source_split_4126;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i32.i64(out_$i45);
    goto corral_source_split_4125;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_4124;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4123;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_4122;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p8, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_4121;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.0, out_$p40);
    call {:si_unique_call 899} {:cexpr "_min1"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_4120;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4119;

  $bb20:
    assume !(out_$i62 == 1);
    goto corral_source_split_4181;

  $bb14:
    assume !(out_$i23 == 1);
    goto corral_source_split_4155;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i17, out_$p40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$p78, out_$i39, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18 := zero_bio_chain_loop_$bb9(in_$i1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p13, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i17, out_$p40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$p78, out_$i39, in_$p8, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18);
    return;

  exit:
    return;
}



procedure zero_bio_chain_loop_$bb9(in_$i1: i32, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p13: ref, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$p35: ref, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i17: i32, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i64, in_$p48: ref, in_$i49: i32, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i64, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i1, in_$i63: i32, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$i69: i64, in_$p71: ref, in_$i72: i32, in_$p73: ref, in_$i74: i32, in_$i75: i32, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i39: i32, in_$p8: ref, in_cmdloc_dummy_var_14: [ref]i8, in_cmdloc_dummy_var_15: [ref]i8, in_cmdloc_dummy_var_16: [ref]i8, in_cmdloc_dummy_var_17: [ref]i8, in_cmdloc_dummy_var_18: [ref]i8) returns (out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$p35: ref, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i17: i32, out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i64, out_$p48: ref, out_$i49: i32, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i64, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i1, out_$i63: i32, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$i69: i64, out_$p71: ref, out_$i72: i32, out_$p73: ref, out_$i74: i32, out_$i75: i32, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i39: i32, out_cmdloc_dummy_var_14: [ref]i8, out_cmdloc_dummy_var_15: [ref]i8, out_cmdloc_dummy_var_16: [ref]i8, out_cmdloc_dummy_var_17: [ref]i8, out_cmdloc_dummy_var_18: [ref]i8);
  modifies $M.0, $M.20, $M.18;



implementation zero_bio_chain_loop_$bb4(in_$i1: i32, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$p35: ref, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i17: i32, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i64, in_$p48: ref, in_$i49: i32, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i64, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i1, in_$i63: i32, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$i69: i64, in_$p71: ref, in_$i72: i32, in_$p73: ref, in_$i74: i32, in_$i75: i32, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i39: i32, in_$i16: i32, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p8: ref, in_$i9: i32, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8, in_cmdloc_dummy_var_14: [ref]i8, in_cmdloc_dummy_var_15: [ref]i8, in_cmdloc_dummy_var_16: [ref]i8, in_cmdloc_dummy_var_17: [ref]i8, in_cmdloc_dummy_var_18: [ref]i8) returns (out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$p35: ref, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i17: i32, out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i64, out_$p48: ref, out_$i49: i32, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i64, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i1, out_$i63: i32, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$i69: i64, out_$p71: ref, out_$i72: i32, out_$p73: ref, out_$i74: i32, out_$i75: i32, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i39: i32, out_$i16: i32, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p8: ref, out_$i9: i32, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8, out_cmdloc_dummy_var_14: [ref]i8, out_cmdloc_dummy_var_15: [ref]i8, out_cmdloc_dummy_var_16: [ref]i8, out_cmdloc_dummy_var_17: [ref]i8, out_cmdloc_dummy_var_18: [ref]i8)
{

  entry:
    out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i17, out_$p40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$p78, out_$i39, out_$i16, out_$p79, out_$p80, out_$i81, out_$i82, out_$p8, out_$i9, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18 := in_$p10, in_$p11, in_$p12, in_$p13, in_$i14, in_$i15, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$p27, in_$p28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i17, in_$p40, in_$i41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p48, in_$i49, in_$p50, in_$i51, in_$i52, in_$p53, in_$p54, in_$p55, in_$i56, in_$i57, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$p64, in_$p65, in_$p66, in_$p67, in_$i68, in_$i69, in_$p71, in_$i72, in_$p73, in_$i74, in_$i75, in_$p76, in_$p77, in_$p78, in_$i39, in_$i16, in_$p79, in_$p80, in_$i81, in_$i82, in_$p8, in_$i9, in_cmdloc_dummy_var_11, in_cmdloc_dummy_var_12, in_cmdloc_dummy_var_13, in_cmdloc_dummy_var_14, in_cmdloc_dummy_var_15, in_cmdloc_dummy_var_16, in_cmdloc_dummy_var_17, in_cmdloc_dummy_var_18;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4106;

  $bb23:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$p8, out_$i9 := out_$p80, out_$i16;
    goto $bb23_dummy;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i64(out_$i81, 0);
    goto corral_source_split_4206;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    out_$i81 := $p2i.ref.i64(out_$p80);
    goto corral_source_split_4205;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.0, out_$p79);
    goto corral_source_split_4204;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p8, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_4203;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i15 == 1);
    goto $bb8;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i39;
    goto $bb8;

  $bb18:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4177;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i34;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_4175;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, out_$p13);
    goto corral_source_split_4174;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} bio_advance_iter(out_$p8, in_$p3, out_$i36);
    goto corral_source_split_4173;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.18, out_$p35);
    goto corral_source_split_4172;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4171;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i33, out_$i17);
    call {:si_unique_call 905} {:cexpr "pos"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_4170;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.18, out_$p32);
    goto corral_source_split_4169;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4168;

  $bb12:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} bvec_kunmap_irq(out_$p25, in_$p4);
    goto corral_source_split_4166;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 903} out_cmdloc_dummy_var_15 := $memset.i8(out_cmdloc_dummy_var_14, out_$p27, 0, out_$i31, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_15;
    goto corral_source_split_4165;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i32.i64(out_$i30);
    goto corral_source_split_4164;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    out_$i30 := $sub.i32(out_$i29, out_$i24);
    goto corral_source_split_4163;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.18, out_$p28);
    goto corral_source_split_4162;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4161;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref(out_$p25, $mul.ref(out_$i26, 1));
    goto corral_source_split_4160;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i24);
    goto corral_source_split_4159;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} out_$p25 := bvec_kmap_irq(in_$p2, in_$p4);
    goto corral_source_split_4158;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4157;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    out_$i24 := 0;
    goto $bb15;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i22;
    goto $bb15;

  $bb13:
    assume out_$i23 == 1;
    goto corral_source_split_4153;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    out_$i23 := $sgt.i32(out_$i22, 0);
    goto corral_source_split_4151;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    out_$i22 := $sub.i32(in_$i1, out_$i17);
    call {:si_unique_call 901} {:cexpr "_max1"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_4150;

  $bb11:
    assume out_$i21 == 1;
    goto corral_source_split_4149;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    out_$i21 := $ugt.i32(out_$i20, in_$i1);
    goto corral_source_split_4147;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i19, out_$i17);
    goto corral_source_split_4146;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.18, out_$p18);
    goto corral_source_split_4145;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4144;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_16 := $M.18;
    out_cmdloc_dummy_var_17 := $M.18;
    call {:si_unique_call 907} out_cmdloc_dummy_var_18 := $memcpy.i8(out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_$p77, out_$p78, 16, $zext.i32.i64(8), 0 == 1);
    $M.18 := out_cmdloc_dummy_var_18;
    goto corral_source_split_4201;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_4200;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_4199;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, out_$p76, out_$i75);
    goto corral_source_split_4198;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4197;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i72, out_$i74);
    goto corral_source_split_4196;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.0, out_$p73);
    goto corral_source_split_4195;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4194;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i32($M.0, out_$p71);
    goto corral_source_split_4193;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p66, $mul.ref(out_$i69, 16)), $mul.ref(12, 1));
    goto corral_source_split_4192;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    goto corral_source_split_4191;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i32.i64(out_$i68);
    goto corral_source_split_4190;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.0, out_$p67);
    goto corral_source_split_4189;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4188;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_4187;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p8, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_4186;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, out_$p64, out_$i63);
    goto corral_source_split_4185;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4184;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_4183;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i52;
    goto $bb21;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i41;
    goto $bb21;

  $bb19:
    assume out_$i62 == 1;
    goto corral_source_split_4179;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    out_$i62 := $ult.i32(out_$i41, out_$i52);
    goto corral_source_split_4142;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, out_$p61, out_$p60);
    goto corral_source_split_4141;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4140;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_4139;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p54, $mul.ref(out_$i57, 16)), $mul.ref(0, 1));
    goto corral_source_split_4138;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    goto corral_source_split_4137;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i32.i64(out_$i56);
    goto corral_source_split_4136;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.0, out_$p55);
    goto corral_source_split_4135;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4134;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_4133;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p8, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_4132;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    out_$i52 := $sub.i32(out_$i49, out_$i51);
    call {:si_unique_call 900} {:cexpr "_min2"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_4131;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.0, out_$p50);
    goto corral_source_split_4130;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4129;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, out_$p48);
    goto corral_source_split_4128;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p43, $mul.ref(out_$i46, 16)), $mul.ref(8, 1));
    goto corral_source_split_4127;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    goto corral_source_split_4126;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i32.i64(out_$i45);
    goto corral_source_split_4125;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_4124;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4123;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_4122;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p8, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_4121;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.0, out_$p40);
    call {:si_unique_call 899} {:cexpr "_min1"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_4120;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4119;

  $bb9:
    call out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i17, out_$p40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$p78, out_$i39, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18 := zero_bio_chain_loop_$bb9(in_$i1, in_$p2, in_$p3, in_$p4, in_$p5, out_$p13, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i17, out_$p40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$p78, out_$i39, out_$p8, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4118;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i9;
    goto $bb9;

  $bb17:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := out_$i34;
    assume false;
    return;

  $bb6:
    assume out_$i15 == 1;
    goto corral_source_split_4116;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i9;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_4114;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_4113;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4112;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_11 := $M.0;
    out_cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 898} out_cmdloc_dummy_var_13 := $memcpy.i8(out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_$p11, out_$p12, 24, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_13;
    goto corral_source_split_4111;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p10);
    goto corral_source_split_4110;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4109;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p8, $mul.ref(0, 136)), $mul.ref(32, 1));
    goto corral_source_split_4108;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb20:
    assume !(out_$i62 == 1);
    goto corral_source_split_4181;

  $bb14:
    assume !(out_$i23 == 1);
    goto corral_source_split_4155;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i17, out_$p40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$p78, out_$i39, out_$i16, out_$p79, out_$p80, out_$i81, out_$i82, out_$p8, out_$i9, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18 := zero_bio_chain_loop_$bb4(in_$i1, in_$p2, in_$p3, in_$p4, in_$p5, out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i17, out_$p40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$p78, out_$i39, out_$i16, out_$p79, out_$p80, out_$i81, out_$i82, out_$p8, out_$i9, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18);
    return;

  exit:
    return;
}



procedure zero_bio_chain_loop_$bb4(in_$i1: i32, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$p35: ref, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i17: i32, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i64, in_$p48: ref, in_$i49: i32, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i64, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i1, in_$i63: i32, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$i69: i64, in_$p71: ref, in_$i72: i32, in_$p73: ref, in_$i74: i32, in_$i75: i32, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i39: i32, in_$i16: i32, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p8: ref, in_$i9: i32, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8, in_cmdloc_dummy_var_14: [ref]i8, in_cmdloc_dummy_var_15: [ref]i8, in_cmdloc_dummy_var_16: [ref]i8, in_cmdloc_dummy_var_17: [ref]i8, in_cmdloc_dummy_var_18: [ref]i8) returns (out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$p35: ref, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i17: i32, out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i64, out_$p48: ref, out_$i49: i32, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i64, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i1, out_$i63: i32, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$i69: i64, out_$p71: ref, out_$i72: i32, out_$p73: ref, out_$i74: i32, out_$i75: i32, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i39: i32, out_$i16: i32, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p8: ref, out_$i9: i32, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8, out_cmdloc_dummy_var_14: [ref]i8, out_cmdloc_dummy_var_15: [ref]i8, out_cmdloc_dummy_var_16: [ref]i8, out_cmdloc_dummy_var_17: [ref]i8, out_cmdloc_dummy_var_18: [ref]i8);
  modifies $M.0, $M.20, $M.18;



implementation zero_pages_loop_$bb12(in_$i2: i64, in_$i17: i64, in_$i18: i64, in_$i19: i64, in_$i20: i1, in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i64, in_$p29: ref, in_$i30: i1, in_$p15: ref, in_$i16: i64, in_cmdloc_dummy_var_19: [ref]i8, in_cmdloc_dummy_var_20: [ref]i8) returns (out_$i17: i64, out_$i18: i64, out_$i19: i64, out_$i20: i1, out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i64, out_$p29: ref, out_$i30: i1, out_$p15: ref, out_$i16: i64, out_cmdloc_dummy_var_19: [ref]i8, out_cmdloc_dummy_var_20: [ref]i8)
{

  entry:
    out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$p15, out_$i16, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20 := in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$p15, in_$i16, in_cmdloc_dummy_var_19, in_cmdloc_dummy_var_20;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4232;

  $bb20:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$p15, out_$i16 := out_$p29, out_$i28;
    goto $bb20_dummy;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    out_$i30 := $ult.i64(out_$i28, in_$i2);
    goto corral_source_split_4263;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(out_$p15, $mul.ref(1, 8));
    goto corral_source_split_4262;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i64(out_$i16, out_$i21);
    call {:si_unique_call 933} {:cexpr "offset"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_4261;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} arch_local_irq_restore(out_$i22);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} trace_hardirqs_off();
    goto corral_source_split_4256;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} arch_local_irq_restore(out_$i22);
    goto corral_source_split_4255;

  $bb17:
    assume out_$i27 == 1;
    goto corral_source_split_4254;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_4252;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} out_$i26 := arch_irqs_disabled_flags(out_$i22);
    call {:si_unique_call 928} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_4251;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} __kunmap_atomic(out_$p24);
    goto corral_source_split_4250;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 925} out_cmdloc_dummy_var_20 := $memset.i8(out_cmdloc_dummy_var_19, out_$p25, 0, out_$i21, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_20;
    goto corral_source_split_4249;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p24, $mul.ref(out_$i17, 1));
    goto corral_source_split_4248;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} out_$p24 := kmap_atomic(out_$p23);
    goto corral_source_split_4247;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p15);
    goto corral_source_split_4246;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} trace_hardirqs_off();
    goto corral_source_split_4245;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} out_$i22 := arch_local_irq_save();
    call {:si_unique_call 922} {:cexpr "flags"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_4244;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4243;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i19;
    goto $bb16;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i18;
    goto $bb16;

  $bb14:
    assume out_$i20 == 1;
    goto corral_source_split_4239;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    out_$i20 := $ult.i64(out_$i18, out_$i19);
    goto corral_source_split_4237;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    out_$i19 := $sub.i64(in_$i2, out_$i16);
    call {:si_unique_call 920} {:cexpr "__min2"} boogie_si_record_i64(out_$i19);
    goto corral_source_split_4236;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    out_$i18 := $sub.i64(4096, out_$i17);
    call {:si_unique_call 919} {:cexpr "__min1"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_4235;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i17 := $and.i64(out_$i16, 4095);
    call {:si_unique_call 918} {:cexpr "page_offset___0"} boogie_si_record_i64(out_$i17);
    goto corral_source_split_4234;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb15:
    assume !(out_$i20 == 1);
    goto corral_source_split_4241;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} trace_hardirqs_on();
    goto corral_source_split_4259;

  $bb18:
    assume !(out_$i27 == 1);
    goto corral_source_split_4258;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$p15, out_$i16, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20 := zero_pages_loop_$bb12(in_$i2, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$p15, out_$i16, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20);
    return;

  exit:
    return;
}



procedure zero_pages_loop_$bb12(in_$i2: i64, in_$i17: i64, in_$i18: i64, in_$i19: i64, in_$i20: i1, in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i64, in_$p29: ref, in_$i30: i1, in_$p15: ref, in_$i16: i64, in_cmdloc_dummy_var_19: [ref]i8, in_cmdloc_dummy_var_20: [ref]i8) returns (out_$i17: i64, out_$i18: i64, out_$i19: i64, out_$i20: i1, out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i64, out_$p29: ref, out_$i30: i1, out_$p15: ref, out_$i16: i64, out_cmdloc_dummy_var_19: [ref]i8, out_cmdloc_dummy_var_20: [ref]i8);
  modifies $M.19, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21;



implementation zero_pages_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} zero_pages_loop_$bb7();
    return;

  exit:
    return;
}



procedure zero_pages_loop_$bb7();



implementation zero_pages_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} zero_pages_loop_$bb3();
    return;

  exit:
    return;
}



procedure zero_pages_loop_$bb3();



implementation arch_local_irq_restore_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_irq_restore_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_irq_restore_loop_$bb3();



implementation arch_local_save_flags_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_save_flags_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_save_flags_loop_$bb3();



implementation arch_local_irq_disable_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_irq_disable_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_irq_disable_loop_$bb3();



implementation bvec_iter_advance_loop_$bb13(in_$p0: ref, in_$p1: ref, in_$p31: ref, in_$i32: i32, in_$p33: ref, in_$i34: i32, in_$i35: i64, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i32, in_$p47: ref, in_$i48: i32, in_$i49: i32, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$p57: ref, in_$i58: i32, in_$i59: i64, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$i69: i1, in_$i30: i32) returns (out_$p31: ref, out_$i32: i32, out_$p33: ref, out_$i34: i32, out_$i35: i64, out_$p37: ref, out_$i38: i32, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i32, out_$p47: ref, out_$i48: i32, out_$i49: i32, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$p57: ref, out_$i58: i32, out_$i59: i64, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$p68: ref, out_$i69: i1, out_$i30: i32)
{

  entry:
    out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i30 := in_$p31, in_$i32, in_$p33, in_$i34, in_$i35, in_$p37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$p50, in_$p51, in_$i52, in_$i53, in_$p54, in_$p55, in_$i56, in_$p57, in_$i58, in_$i59, in_$p61, in_$i62, in_$i63, in_$p64, in_$p65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i30;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4476;

  $bb24:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := out_$i46;
    goto $bb24_dummy;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i46, 0);
    goto corral_source_split_4533;

  $bb22:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p68, out_$i67);
    goto corral_source_split_4531;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4530;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i66, 1);
    goto corral_source_split_4529;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, out_$p65);
    goto corral_source_split_4528;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4527;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p64, 0);
    goto corral_source_split_4526;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4525;

  $bb21:
    assume out_$i63 == 1;
    goto corral_source_split_4524;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i56, out_$i62);
    goto corral_source_split_4522;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, out_$p61);
    goto corral_source_split_4521;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(out_$i59, 16)), $mul.ref(8, 1));
    goto corral_source_split_4520;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    goto corral_source_split_4519;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i32.i64(out_$i58);
    goto corral_source_split_4518;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, out_$p57);
    goto corral_source_split_4517;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4516;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.0, out_$p55);
    goto corral_source_split_4515;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4514;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p54, out_$i53);
    goto corral_source_split_4513;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4512;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i32(out_$i52, out_$i45);
    goto corral_source_split_4511;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.0, out_$p51);
    goto corral_source_split_4510;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4509;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p50, out_$i49);
    goto corral_source_split_4508;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4507;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    out_$i49 := $sub.i32(out_$i48, out_$i45);
    goto corral_source_split_4506;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    goto corral_source_split_4505;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4504;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    out_$i46 := $sub.i32(out_$i30, out_$i45);
    call {:si_unique_call 998} {:cexpr "bytes"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_4503;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4502;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i43;
    goto $bb20;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i30;
    goto $bb20;

  $bb18:
    assume out_$i44 == 1;
    goto corral_source_split_4498;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    out_$i44 := $ult.i32(out_$i30, out_$i43);
    goto corral_source_split_4496;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4495;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i41;
    goto $bb17;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i32;
    goto $bb17;

  $bb15:
    assume out_$i42 == 1;
    goto corral_source_split_4491;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    out_$i42 := $ult.i32(out_$i32, out_$i41);
    goto corral_source_split_4489;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    out_$i41 := $sub.i32(out_$i38, out_$i40);
    call {:si_unique_call 997} {:cexpr "_min2___0"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_4488;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.0, out_$p39);
    goto corral_source_split_4487;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4486;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, out_$p37);
    goto corral_source_split_4485;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(out_$i35, 16)), $mul.ref(8, 1));
    goto corral_source_split_4484;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    goto corral_source_split_4483;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i32.i64(out_$i34);
    goto corral_source_split_4482;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_4481;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4480;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.0, out_$p31);
    call {:si_unique_call 996} {:cexpr "_min1___0"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_4479;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4478;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb16:
    assume !(out_$i42 == 1);
    goto corral_source_split_4493;

  $bb19:
    assume !(out_$i44 == 1);
    goto corral_source_split_4500;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i30 := bvec_iter_advance_loop_$bb13(in_$p0, in_$p1, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i30);
    return;

  exit:
    return;
}



procedure bvec_iter_advance_loop_$bb13(in_$p0: ref, in_$p1: ref, in_$p31: ref, in_$i32: i32, in_$p33: ref, in_$i34: i32, in_$i35: i64, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i32, in_$p47: ref, in_$i48: i32, in_$i49: i32, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$p57: ref, in_$i58: i32, in_$i59: i64, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$i69: i1, in_$i30: i32) returns (out_$p31: ref, out_$i32: i32, out_$p33: ref, out_$i34: i32, out_$i35: i64, out_$p37: ref, out_$i38: i32, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i32, out_$p47: ref, out_$i48: i32, out_$i49: i32, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$p57: ref, out_$i58: i32, out_$i59: i64, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$p68: ref, out_$i69: i1, out_$i30: i32);
  modifies $M.0;



implementation rbd_parent_request_create_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} rbd_parent_request_create_loop_$bb3();
    return;

  exit:
    return;
}



procedure rbd_parent_request_create_loop_$bb3();



implementation rbd_img_parent_read_callback_loop_$bb29()
{

  entry:
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb29_dummy;

  $bb29_dummy:
    call {:si_unique_call 1} rbd_img_parent_read_callback_loop_$bb29();
    return;

  exit:
    return;
}



procedure rbd_img_parent_read_callback_loop_$bb29();



implementation rbd_img_parent_read_callback_loop_$bb14()
{

  entry:
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb14_dummy:
    call {:si_unique_call 1} rbd_img_parent_read_callback_loop_$bb14();
    return;

  exit:
    return;
}



procedure rbd_img_parent_read_callback_loop_$bb14();



implementation rbd_img_parent_read_callback_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb10_dummy:
    call {:si_unique_call 1} rbd_img_parent_read_callback_loop_$bb10();
    return;

  exit:
    return;
}



procedure rbd_img_parent_read_callback_loop_$bb10();



implementation rbd_img_parent_read_callback_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} rbd_img_parent_read_callback_loop_$bb6();
    return;

  exit:
    return;
}



procedure rbd_img_parent_read_callback_loop_$bb6();



implementation rbd_img_obj_parent_read_full_callback_loop_$bb37()
{

  entry:
    goto $bb37, exit;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb37_dummy;

  $bb37_dummy:
    call {:si_unique_call 1} rbd_img_obj_parent_read_full_callback_loop_$bb37();
    return;

  exit:
    return;
}



procedure rbd_img_obj_parent_read_full_callback_loop_$bb37();



implementation rbd_img_obj_parent_read_full_callback_loop_$bb33()
{

  entry:
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb33_dummy;

  $bb33_dummy:
    call {:si_unique_call 1} rbd_img_obj_parent_read_full_callback_loop_$bb33();
    return;

  exit:
    return;
}



procedure rbd_img_obj_parent_read_full_callback_loop_$bb33();



implementation rbd_img_obj_parent_read_full_callback_loop_$bb29()
{

  entry:
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb29_dummy;

  $bb29_dummy:
    call {:si_unique_call 1} rbd_img_obj_parent_read_full_callback_loop_$bb29();
    return;

  exit:
    return;
}



procedure rbd_img_obj_parent_read_full_callback_loop_$bb29();



implementation rbd_img_obj_parent_read_full_callback_loop_$bb25()
{

  entry:
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb25_dummy;

  $bb25_dummy:
    call {:si_unique_call 1} rbd_img_obj_parent_read_full_callback_loop_$bb25();
    return;

  exit:
    return;
}



procedure rbd_img_obj_parent_read_full_callback_loop_$bb25();



implementation rbd_img_obj_parent_read_full_callback_loop_$bb18()
{

  entry:
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb18_dummy;

  $bb18_dummy:
    call {:si_unique_call 1} rbd_img_obj_parent_read_full_callback_loop_$bb18();
    return;

  exit:
    return;
}



procedure rbd_img_obj_parent_read_full_callback_loop_$bb18();



implementation rbd_img_obj_parent_read_full_callback_loop_$bb14()
{

  entry:
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb14_dummy:
    call {:si_unique_call 1} rbd_img_obj_parent_read_full_callback_loop_$bb14();
    return;

  exit:
    return;
}



procedure rbd_img_obj_parent_read_full_callback_loop_$bb14();



implementation rbd_img_obj_parent_read_full_callback_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb10_dummy:
    call {:si_unique_call 1} rbd_img_obj_parent_read_full_callback_loop_$bb10();
    return;

  exit:
    return;
}



procedure rbd_img_obj_parent_read_full_callback_loop_$bb10();



implementation rbd_img_obj_parent_read_full_callback_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} rbd_img_obj_parent_read_full_callback_loop_$bb6();
    return;

  exit:
    return;
}



procedure rbd_img_obj_parent_read_full_callback_loop_$bb6();



implementation rbd_osd_req_create_copyup_loop_$bb26()
{

  entry:
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb26_dummy;

  $bb26_dummy:
    call {:si_unique_call 1} rbd_osd_req_create_copyup_loop_$bb26();
    return;

  exit:
    return;
}



procedure rbd_osd_req_create_copyup_loop_$bb26();



implementation rbd_osd_req_create_copyup_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb10_dummy:
    call {:si_unique_call 1} rbd_osd_req_create_copyup_loop_$bb10();
    return;

  exit:
    return;
}



procedure rbd_osd_req_create_copyup_loop_$bb10();



implementation rbd_osd_req_create_copyup_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} rbd_osd_req_create_copyup_loop_$bb6();
    return;

  exit:
    return;
}



procedure rbd_osd_req_create_copyup_loop_$bb6();



implementation rbd_img_obj_copyup_callback_loop_$bb29()
{

  entry:
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb29_dummy;

  $bb29_dummy:
    call {:si_unique_call 1} rbd_img_obj_copyup_callback_loop_$bb29();
    return;

  exit:
    return;
}



procedure rbd_img_obj_copyup_callback_loop_$bb29();



implementation rbd_img_obj_copyup_callback_loop_$bb25()
{

  entry:
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb25_dummy;

  $bb25_dummy:
    call {:si_unique_call 1} rbd_img_obj_copyup_callback_loop_$bb25();
    return;

  exit:
    return;
}



procedure rbd_img_obj_copyup_callback_loop_$bb25();



implementation rbd_img_obj_copyup_callback_loop_$bb21()
{

  entry:
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb21_dummy;

  $bb21_dummy:
    call {:si_unique_call 1} rbd_img_obj_copyup_callback_loop_$bb21();
    return;

  exit:
    return;
}



procedure rbd_img_obj_copyup_callback_loop_$bb21();



implementation rbd_img_obj_copyup_callback_loop_$bb17()
{

  entry:
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb17_dummy:
    call {:si_unique_call 1} rbd_img_obj_copyup_callback_loop_$bb17();
    return;

  exit:
    return;
}



procedure rbd_img_obj_copyup_callback_loop_$bb17();



implementation rbd_img_obj_copyup_callback_loop_$bb13()
{

  entry:
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb13_dummy;

  $bb13_dummy:
    call {:si_unique_call 1} rbd_img_obj_copyup_callback_loop_$bb13();
    return;

  exit:
    return;
}



procedure rbd_img_obj_copyup_callback_loop_$bb13();



implementation rbd_img_obj_copyup_callback_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} rbd_img_obj_copyup_callback_loop_$bb6();
    return;

  exit:
    return;
}



procedure rbd_img_obj_copyup_callback_loop_$bb6();



implementation rbd_img_obj_callback_loop_$bb56()
{

  entry:
    goto $bb56, exit;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb56_dummy;

  $bb56_dummy:
    call {:si_unique_call 1} rbd_img_obj_callback_loop_$bb56();
    return;

  exit:
    return;
}



procedure rbd_img_obj_callback_loop_$bb56();



implementation rbd_img_obj_callback_loop_$bb42()
{

  entry:
    goto $bb42, exit;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb42_dummy;

  $bb42_dummy:
    call {:si_unique_call 1} rbd_img_obj_callback_loop_$bb42();
    return;

  exit:
    return;
}



procedure rbd_img_obj_callback_loop_$bb42();



implementation rbd_img_obj_callback_loop_$bb38()
{

  entry:
    goto $bb38, exit;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb38_dummy;

  $bb38_dummy:
    call {:si_unique_call 1} rbd_img_obj_callback_loop_$bb38();
    return;

  exit:
    return;
}



procedure rbd_img_obj_callback_loop_$bb38();



implementation rbd_img_obj_callback_loop_$bb34(in_$p15: ref, in_$i72: i64, in_$i79: i1, in_$i80: i1, in_$i81: i32, in_$i82: i64, in_$i83: i64, in_$i84: i1, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i64, in_$i91: i64, in_$i92: i1, in_$i94: i1, in_$i95: i8, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$i99: i8, in_$i100: i32, in_$i103: i1, in_$i104: i8, in_$i105: i32, in_$p106: ref, in_$p107: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$i117: i1, in_$p76: ref, in_$i77: i32, in_$i78: i8, in_$i118: i8, in_$i119: i32) returns (out_$i79: i1, out_$i80: i1, out_$i81: i32, out_$i82: i64, out_$i83: i64, out_$i84: i1, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i64, out_$i91: i64, out_$i92: i1, out_$i94: i1, out_$i95: i8, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$i99: i8, out_$i100: i32, out_$i103: i1, out_$i104: i8, out_$i105: i32, out_$p106: ref, out_$p107: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$i117: i1, out_$p76: ref, out_$i77: i32, out_$i78: i8, out_$i118: i8, out_$i119: i32)
{

  entry:
    out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p76, out_$i77, out_$i78, out_$i118, out_$i119 := in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$p86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i103, in_$i104, in_$i105, in_$p106, in_$p107, in_$p109, in_$p110, in_$p111, in_$p112, in_$p113, in_$p114, in_$p115, in_$i116, in_$i117, in_$p76, in_$i77, in_$i78, in_$i118, in_$i119;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5430;

  $bb51:
    assume out_$i117 == 1;
    assume {:verifier.code 0} true;
    out_$p76, out_$i77, out_$i78 := out_$p112, out_$i105, out_$i104;
    goto $bb51_dummy;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    out_$i118, out_$i119 := out_$i104, out_$i105;
    assume true;
    goto $bb51;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    out_$i117 := $ne.i64(out_$i116, in_$i72);
    goto corral_source_split_5490;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    out_$i116 := $p2i.ref.i64(out_$p115);
    goto corral_source_split_5489;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(out_$p114, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5488;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    out_$p114 := $bitcast.ref.ref(out_$p113);
    goto corral_source_split_5487;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(out_$p111, $mul.ref($sub.ref(0, 48), 240)), $mul.ref(32, 1));
    goto corral_source_split_5486;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref(out_$p111, $mul.ref($sub.ref(0, 48), 240));
    goto corral_source_split_5485;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    out_$p111 := $bitcast.ref.ref(out_$p110);
    goto corral_source_split_5484;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    out_$p110 := $load.ref($M.0, out_$p109);
    goto corral_source_split_5483;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($add.ref(out_$p107, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5482;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    out_$p107 := $bitcast.ref.ref(out_$p106);
    goto corral_source_split_5481;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p76, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_5480;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    out_$i105 := $add.i32(out_$i77, 1);
    call {:si_unique_call 1245} {:cexpr "which"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_5479;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i1.i8(out_$i103);
    call {:si_unique_call 1244} {:cexpr "more"} boogie_si_record_i8(out_$i104);
    goto corral_source_split_5478;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} out_$i103 := rbd_img_obj_end_request(out_$p76);
    goto corral_source_split_5477;

  $bb48:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    out_$i99, out_$i100 := out_$i78, out_$i77;
    assume true;
    goto $bb48;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i97, 0);
    goto corral_source_split_5460;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_5459;

  $bb45:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    out_$i97 := 1;
    goto $bb46;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    out_$i97 := 0;
    goto $bb46;

  $bb44:
    assume out_$i96 == 1;
    goto corral_source_split_5457;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    out_$i96 := $trunc.i8.i1(out_$i95);
    goto corral_source_split_5455;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i1.i8(out_$i94);
    call {:si_unique_call 1240} {:cexpr "tmp___10"} boogie_si_record_i8(out_$i95);
    goto corral_source_split_5454;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} out_$i94 := obj_request_done_test(out_$p76);
    goto corral_source_split_5453;

  $bb41:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    out_$i92 := $ne.i64(out_$i91, 0);
    goto corral_source_split_5448;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} out_$i91 := ldv__builtin_expect(out_$i90, 0);
    call {:si_unique_call 1236} {:cexpr "tmp___9"} boogie_si_record_i64(out_$i91);
    goto corral_source_split_5447;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    out_$i90 := $sext.i32.i64(out_$i89);
    goto corral_source_split_5446;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i1.i32(out_$i88);
    goto corral_source_split_5445;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    out_$i88 := $ule.i32(out_$i87, out_$i77);
    goto corral_source_split_5444;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.0, out_$p86);
    goto corral_source_split_5443;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p15, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_5442;

  $bb37:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i64(out_$i83, 0);
    goto corral_source_split_5437;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} out_$i83 := ldv__builtin_expect(out_$i82, 0);
    call {:si_unique_call 1232} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i83);
    goto corral_source_split_5436;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(out_$i81);
    goto corral_source_split_5435;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i1.i32(out_$i80);
    goto corral_source_split_5434;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    out_$i80 := $xor.i1(out_$i79, 1);
    goto corral_source_split_5433;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i79 := $trunc.i8.i1(out_$i78);
    goto corral_source_split_5432;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb51_dummy:
    call {:si_unique_call 1} out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p76, out_$i77, out_$i78, out_$i118, out_$i119 := rbd_img_obj_callback_loop_$bb34(in_$p15, in_$i72, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p76, out_$i77, out_$i78, out_$i118, out_$i119);
    return;

  exit:
    return;
}



procedure rbd_img_obj_callback_loop_$bb34(in_$p15: ref, in_$i72: i64, in_$i79: i1, in_$i80: i1, in_$i81: i32, in_$i82: i64, in_$i83: i64, in_$i84: i1, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i64, in_$i91: i64, in_$i92: i1, in_$i94: i1, in_$i95: i8, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$i99: i8, in_$i100: i32, in_$i103: i1, in_$i104: i8, in_$i105: i32, in_$p106: ref, in_$p107: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$i117: i1, in_$p76: ref, in_$i77: i32, in_$i78: i8, in_$i118: i8, in_$i119: i32) returns (out_$i79: i1, out_$i80: i1, out_$i81: i32, out_$i82: i64, out_$i83: i64, out_$i84: i1, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i64, out_$i91: i64, out_$i92: i1, out_$i94: i1, out_$i95: i8, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$i99: i8, out_$i100: i32, out_$i103: i1, out_$i104: i8, out_$i105: i32, out_$p106: ref, out_$p107: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$i117: i1, out_$p76: ref, out_$i77: i32, out_$i78: i8, out_$i118: i8, out_$i119: i32);
  modifies $M.0, $CurrAddr;



implementation rbd_img_obj_callback_loop_$bb25()
{

  entry:
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb25_dummy;

  $bb25_dummy:
    call {:si_unique_call 1} rbd_img_obj_callback_loop_$bb25();
    return;

  exit:
    return;
}



procedure rbd_img_obj_callback_loop_$bb25();



implementation rbd_img_obj_callback_loop_$bb21()
{

  entry:
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb21_dummy;

  $bb21_dummy:
    call {:si_unique_call 1} rbd_img_obj_callback_loop_$bb21();
    return;

  exit:
    return;
}



procedure rbd_img_obj_callback_loop_$bb21();



implementation rbd_img_obj_callback_loop_$bb17()
{

  entry:
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb17_dummy:
    call {:si_unique_call 1} rbd_img_obj_callback_loop_$bb17();
    return;

  exit:
    return;
}



procedure rbd_img_obj_callback_loop_$bb17();



implementation rbd_img_obj_callback_loop_$bb13()
{

  entry:
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb13_dummy;

  $bb13_dummy:
    call {:si_unique_call 1} rbd_img_obj_callback_loop_$bb13();
    return;

  exit:
    return;
}



procedure rbd_img_obj_callback_loop_$bb13();



implementation rbd_img_obj_callback_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} rbd_img_obj_callback_loop_$bb6();
    return;

  exit:
    return;
}



procedure rbd_img_obj_callback_loop_$bb6();



implementation rbd_img_obj_end_request_loop_$bb36()
{

  entry:
    goto $bb36, exit;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb36_dummy;

  $bb36_dummy:
    call {:si_unique_call 1} rbd_img_obj_end_request_loop_$bb36();
    return;

  exit:
    return;
}



procedure rbd_img_obj_end_request_loop_$bb36();



implementation rbd_img_obj_end_request_loop_$bb31()
{

  entry:
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb31_dummy;

  $bb31_dummy:
    call {:si_unique_call 1} rbd_img_obj_end_request_loop_$bb31();
    return;

  exit:
    return;
}



procedure rbd_img_obj_end_request_loop_$bb31();



implementation rbd_img_obj_end_request_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb10_dummy:
    call {:si_unique_call 1} rbd_img_obj_end_request_loop_$bb10();
    return;

  exit:
    return;
}



procedure rbd_img_obj_end_request_loop_$bb10();



implementation rbd_img_obj_end_request_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} rbd_img_obj_end_request_loop_$bb6();
    return;

  exit:
    return;
}



procedure rbd_img_obj_end_request_loop_$bb6();



implementation rbd_img_request_complete_loop_$bb9(in_$i32: i64, in_$p37: ref, in_$i38: i64, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$i35: i64, in_$p36: ref, in_$i52: i64) returns (out_$p37: ref, out_$i38: i64, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$i35: i64, out_$p36: ref, out_$i52: i64)
{

  entry:
    out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i35, out_$p36, out_$i52 := in_$p37, in_$i38, in_$i39, in_$p40, in_$p41, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$i50, in_$i51, in_$i35, in_$p36, in_$i52;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5698;

  $bb11:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i35, out_$p36 := out_$i39, out_$p46;
    goto $bb11_dummy;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i39;
    assume true;
    goto $bb11;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i50, in_$i32);
    goto corral_source_split_5713;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p49);
    goto corral_source_split_5712;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p48, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5711;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_5710;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p45, $mul.ref($sub.ref(0, 48), 240)), $mul.ref(32, 1));
    goto corral_source_split_5709;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref(out_$p45, $mul.ref($sub.ref(0, 48), 240));
    goto corral_source_split_5708;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_5707;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_5706;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(out_$p41, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5705;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(out_$p40);
    goto corral_source_split_5704;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p36, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_5703;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i64(out_$i38, out_$i35);
    call {:si_unique_call 1288} {:cexpr "xferred"} boogie_si_record_i64(out_$i39);
    goto corral_source_split_5702;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i64($M.0, out_$p37);
    goto corral_source_split_5701;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p36, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_5700;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i35, out_$p36, out_$i52 := rbd_img_request_complete_loop_$bb9(in_$i32, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i35, out_$p36, out_$i52);
    return;

  exit:
    return;
}



procedure rbd_img_request_complete_loop_$bb9(in_$i32: i64, in_$p37: ref, in_$i38: i64, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$i35: i64, in_$p36: ref, in_$i52: i64) returns (out_$p37: ref, out_$i38: i64, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$i35: i64, out_$p36: ref, out_$i52: i64);



implementation rbd_osd_req_format_write_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} rbd_osd_req_format_write_loop_$bb3();
    return;

  exit:
    return;
}



procedure rbd_osd_req_format_write_loop_$bb3();



implementation rbd_segment_length_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} rbd_segment_length_loop_$bb3();
    return;

  exit:
    return;
}



procedure rbd_segment_length_loop_$bb3();



implementation rbd_img_obj_request_add_loop_$bb11()
{

  entry:
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb11_dummy:
    call {:si_unique_call 1} rbd_img_obj_request_add_loop_$bb11();
    return;

  exit:
    return;
}



procedure rbd_img_obj_request_add_loop_$bb11();



implementation rbd_img_obj_request_add_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} rbd_img_obj_request_add_loop_$bb7();
    return;

  exit:
    return;
}



procedure rbd_img_obj_request_add_loop_$bb7();



implementation rbd_img_obj_request_add_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} rbd_img_obj_request_add_loop_$bb3();
    return;

  exit:
    return;
}



procedure rbd_img_obj_request_add_loop_$bb3();



implementation bio_chain_clone_range_loop_$bb13(in_$i3: i32, in_$i22: i64, in_$i23: i1, in_$i24: i32, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$i35: i32, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$p21: ref, in_$p46: ref, in_$i47: i32) returns (out_$i22: i64, out_$i23: i1, out_$i24: i32, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$i35: i32, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$p21: ref, out_$p46: ref, out_$i47: i32)
{

  entry:
    out_$i22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i35, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p18, out_$i19, out_$i20, out_$p21, out_$p46, out_$i47 := in_$i22, in_$i23, in_$i24, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$p31, in_$i32, in_$i33, in_$i35, in_$p37, in_$i38, in_$i39, in_$p40, in_$p41, in_$p42, in_$i43, in_$i44, in_$i45, in_$p18, in_$i19, in_$i20, in_$p21, in_$p46, in_$i47;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6022;

  $bb28:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$p18, out_$i19, out_$i20, out_$p21 := out_$p31, out_$i43, out_$i44, out_$p42;
    goto $bb28_dummy;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    out_$p46, out_$i47 := out_$p42, out_$i43;
    assume true;
    goto $bb28;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_6062;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    out_$i44 := $sub.i32(out_$i20, out_$i30);
    call {:si_unique_call 1384} {:cexpr "len"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_6061;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6060;

  $bb26:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$p42, out_$i43 := out_$p21, out_$i35;
    goto $bb27;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    out_$p42, out_$i43 := out_$p41, 0;
    goto $bb27;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_6058;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p21, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_6057;

  $bb25:
    assume out_$i39 == 1;
    goto corral_source_split_6056;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, out_$i35);
    goto corral_source_split_6054;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, out_$p37);
    goto corral_source_split_6053;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_6052;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i19, out_$i30);
    call {:si_unique_call 1383} {:cexpr "off"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_6051;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    goto corral_source_split_6050;

  $bb24:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p18, out_$p31);
    goto corral_source_split_6049;

  $bb23:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i64(out_$i32, 0);
    goto corral_source_split_6045;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(out_$p31);
    goto corral_source_split_6044;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} out_$p31 := bio_clone_range(out_$p21, out_$i19, out_$i30, in_$i3);
    goto corral_source_split_6043;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_6042;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i20;
    goto $bb21;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i28;
    goto $bb21;

  $bb19:
    assume out_$i29 == 1;
    goto corral_source_split_6038;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    out_$i29 := $ult.i32(out_$i28, out_$i20);
    goto corral_source_split_6036;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    out_$i28 := $sub.i32(out_$i27, out_$i19);
    call {:si_unique_call 1381} {:cexpr "__min1"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_6035;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_6034;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_6033;

  $bb16:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i20;
    assume true;
    goto $bb16;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i64(out_$i22, 0);
    goto corral_source_split_6025;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_6024;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb20:
    assume !(out_$i29 == 1);
    goto corral_source_split_6040;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i35, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p18, out_$i19, out_$i20, out_$p21, out_$p46, out_$i47 := bio_chain_clone_range_loop_$bb13(in_$i3, out_$i22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i35, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p18, out_$i19, out_$i20, out_$p21, out_$p46, out_$i47);
    return;

  exit:
    return;
}



procedure bio_chain_clone_range_loop_$bb13(in_$i3: i32, in_$i22: i64, in_$i23: i1, in_$i24: i32, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$i35: i32, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$p21: ref, in_$p46: ref, in_$i47: i32) returns (out_$i22: i64, out_$i23: i1, out_$i24: i32, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$i35: i32, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$p21: ref, out_$p46: ref, out_$i47: i32);
  modifies $M.0;



implementation __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1)
{

  entry:
    out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := in_$i11, in_$i10, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := out_$i14;
    goto $bb11_dummy;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i14;
    assume true;
    goto $bb11;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_6235;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} out_$i24 := ldv__builtin_expect(out_$i23, 0);
    call {:si_unique_call 1432} {:cexpr "tmp"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_6234;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i22);
    goto corral_source_split_6233;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i32(out_$i21);
    goto corral_source_split_6232;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i14, in_$i2);
    goto corral_source_split_6231;

  $bb9:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i10;
    assume true;
    goto $bb9;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_6227;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} out_$i18 := ldv__builtin_expect(out_$i17, 1);
    call {:si_unique_call 1430} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_6226;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_6225;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_6224;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, out_$i10);
    goto corral_source_split_6223;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} out_$i14 := atomic_cmpxchg(in_$p0, out_$i10, out_$i13);
    call {:si_unique_call 1428} {:cexpr "old"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_6222;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i10, in_$i1);
    goto corral_source_split_6221;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := __atomic_add_unless_loop_$bb4(in_$p0, in_$i1, in_$i2, out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25);
    return;

  exit:
    return;
}



procedure __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1);



implementation rbd_add_get_pool_id_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p6: ref, in_$p7: ref, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i64, in_$i35: i64, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i32, in_$p45: ref, in_$i46: i64, in_$p48: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i19: i32, in_$i54: i32, in_vslice_dummy_var_207: i32) returns (out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$p27: ref, out_$p28: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i64, out_$i35: i64, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i32, out_$p45: ref, out_$i46: i64, out_$p48: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i19: i32, out_$i54: i32, out_vslice_dummy_var_207: i32)
{

  entry:
    out_$i15, out_$i16, out_$i17, out_$i18, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p27, out_$p28, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$p48, out_$p50, out_$p51, out_$i52, out_$i53, out_$i19, out_$i54, out_vslice_dummy_var_207 := in_$i15, in_$i16, in_$i17, in_$i18, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$p27, in_$p28, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$i43, in_$i44, in_$p45, in_$i46, in_$p48, in_$p50, in_$p51, in_$i52, in_$i53, in_$i19, in_$i54, in_vslice_dummy_var_207;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6631;

  $bb13:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i15, out_$i16 := out_$i52, out_$i17;
    goto $bb13_dummy;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i52;
    assume true;
    goto $bb13;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, $sub.i32(0, 2));
    goto corral_source_split_6673;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} out_$i52 := ceph_pg_poolid_by_name(out_$p51, in_$p1);
    call {:si_unique_call 1537} {:cexpr "ret"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_6672;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_6671;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 3808)), $mul.ref(2608, 1)), $mul.ref(8, 1));
    goto corral_source_split_6670;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, in_$p7);
    goto corral_source_split_6669;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} out_vslice_dummy_var_207 := ceph_monc_wait_osdmap(out_$p42, out_$i44, out_$i46);
    goto corral_source_split_6668;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i64($M.0, out_$p45);
    goto corral_source_split_6667;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p6, $mul.ref(0, 216)), $mul.ref(160, 1));
    goto corral_source_split_6666;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    out_$i44 := $trunc.i64.i32(out_$i43);
    goto corral_source_split_6665;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.36, in_$p2);
    goto corral_source_split_6664;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p41, $mul.ref(0, 3808)), $mul.ref(712, 1));
    goto corral_source_split_6663;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_6662;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6661;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} ceph_monc_request_next_osdmap(out_$p39);
    goto corral_source_split_6660;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p38, $mul.ref(0, 3808)), $mul.ref(712, 1));
    goto corral_source_split_6659;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_6658;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6657;

  $bb11:
    assume out_$i36 == 1;
    goto corral_source_split_6656;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    out_$i36 := $ult.i64(out_$i34, out_$i35);
    goto corral_source_split_6654;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i64($M.36, in_$p2);
    goto corral_source_split_6653;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i32.i64(out_$i33);
    goto corral_source_split_6652;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_6651;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 472)), $mul.ref(16, 1));
    goto corral_source_split_6650;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_6649;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(out_$p28, $mul.ref(0, 3808)), $mul.ref(2608, 1)), $mul.ref(8, 1));
    goto corral_source_split_6648;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_6647;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6646;

  $bb8:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i23;
    assume true;
    goto $bb8;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i32(out_$i23, 0);
    goto corral_source_split_6640;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} out_$i23 := ceph_monc_do_get_version(out_$p22, .str.223, in_$p2);
    call {:si_unique_call 1533} {:cexpr "ret"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_6639;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 3808)), $mul.ref(712, 1));
    goto corral_source_split_6638;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_6637;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6636;

  $bb5:
    assume out_$i18 == 1;
    goto corral_source_split_6635;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i15;
    assume true;
    goto $bb5;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    out_$i18 := $sle.i32(out_$i16, 0);
    goto corral_source_split_6633;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i16, 1);
    call {:si_unique_call 1531} {:cexpr "tries"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_6632;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$i17, out_$i18, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p27, out_$p28, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$p48, out_$p50, out_$p51, out_$i52, out_$i53, out_$i19, out_$i54, out_vslice_dummy_var_207 := rbd_add_get_pool_id_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$p6, in_$p7, out_$i15, out_$i16, out_$i17, out_$i18, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p27, out_$p28, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$p48, out_$p50, out_$p51, out_$i52, out_$i53, out_$i19, out_$i54, out_vslice_dummy_var_207);
    return;

  exit:
    return;
}



procedure rbd_add_get_pool_id_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p6: ref, in_$p7: ref, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i64, in_$i35: i64, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i32, in_$p45: ref, in_$i46: i64, in_$p48: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i19: i32, in_$i54: i32, in_vslice_dummy_var_207: i32) returns (out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$p27: ref, out_$p28: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i64, out_$i35: i64, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i32, out_$p45: ref, out_$i46: i64, out_$p48: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i19: i32, out_$i54: i32, out_vslice_dummy_var_207: i32);



implementation rbd_dev_header_unwatch_sync_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} rbd_dev_header_unwatch_sync_loop_$bb7();
    return;

  exit:
    return;
}



procedure rbd_dev_header_unwatch_sync_loop_$bb7();



implementation rbd_dev_header_unwatch_sync_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} rbd_dev_header_unwatch_sync_loop_$bb3();
    return;

  exit:
    return;
}



procedure rbd_dev_header_unwatch_sync_loop_$bb3();



implementation rbd_snap_size_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} rbd_snap_size_loop_$bb6();
    return;

  exit:
    return;
}



procedure rbd_snap_size_loop_$bb6();



implementation rbd_snap_features_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} rbd_snap_features_loop_$bb6();
    return;

  exit:
    return;
}



procedure rbd_snap_features_loop_$bb6();



implementation rbd_obj_method_sync_loop_$bb29()
{

  entry:
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb29_dummy;

  $bb29_dummy:
    call {:si_unique_call 1} rbd_obj_method_sync_loop_$bb29();
    return;

  exit:
    return;
}



procedure rbd_obj_method_sync_loop_$bb29();



implementation rbd_dev_header_name_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} rbd_dev_header_name_loop_$bb6();
    return;

  exit:
    return;
}



procedure rbd_dev_header_name_loop_$bb6();



implementation rbd_dev_header_watch_sync_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} rbd_dev_header_watch_sync_loop_$bb7();
    return;

  exit:
    return;
}



procedure rbd_dev_header_watch_sync_loop_$bb7();



implementation rbd_dev_header_watch_sync_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} rbd_dev_header_watch_sync_loop_$bb3();
    return;

  exit:
    return;
}



procedure rbd_dev_header_watch_sync_loop_$bb3();



implementation rbd_dev_header_info_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} rbd_dev_header_info_loop_$bb6();
    return;

  exit:
    return;
}



procedure rbd_dev_header_info_loop_$bb6();



implementation rbd_spec_fill_snap_id_loop_$bb17()
{

  entry:
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb17_dummy:
    call {:si_unique_call 1} rbd_spec_fill_snap_id_loop_$bb17();
    return;

  exit:
    return;
}



procedure rbd_spec_fill_snap_id_loop_$bb17();



implementation rbd_spec_fill_snap_id_loop_$bb13()
{

  entry:
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb13_dummy;

  $bb13_dummy:
    call {:si_unique_call 1} rbd_spec_fill_snap_id_loop_$bb13();
    return;

  exit:
    return;
}



procedure rbd_spec_fill_snap_id_loop_$bb13();



implementation rbd_spec_fill_snap_id_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} rbd_spec_fill_snap_id_loop_$bb6();
    return;

  exit:
    return;
}



procedure rbd_spec_fill_snap_id_loop_$bb6();



implementation rbd_spec_fill_names_loop_$bb11()
{

  entry:
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb11_dummy:
    call {:si_unique_call 1} rbd_spec_fill_names_loop_$bb11();
    return;

  exit:
    return;
}



procedure rbd_spec_fill_names_loop_$bb11();



implementation rbd_spec_fill_names_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} rbd_spec_fill_names_loop_$bb7();
    return;

  exit:
    return;
}



procedure rbd_spec_fill_names_loop_$bb7();



implementation rbd_spec_fill_names_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} rbd_spec_fill_names_loop_$bb3();
    return;

  exit:
    return;
}



procedure rbd_spec_fill_names_loop_$bb3();



implementation rbd_dev_image_name_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} rbd_dev_image_name_loop_$bb3();
    return;

  exit:
    return;
}



procedure rbd_dev_image_name_loop_$bb3();



implementation rbd_snap_name_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb10_dummy:
    call {:si_unique_call 1} rbd_snap_name_loop_$bb10();
    return;

  exit:
    return;
}



procedure rbd_snap_name_loop_$bb10();



implementation _rbd_dev_v1_snap_name_loop_$bb8(in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$i19: i32, in_$p20: ref, in_$p26: ref) returns (out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$i19: i32, out_$p20: ref, out_$p26: ref)
{

  entry:
    out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i19, out_$p20, out_$p26 := in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i19, in_$p20, in_$p26;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9175;

  $bb10:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i19, out_$p20 := out_$i24, out_$p23;
    goto $bb10_dummy;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p23;
    assume true;
    goto $bb10;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i19, 0);
    goto corral_source_split_9181;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i19, 1);
    call {:si_unique_call 2143} {:cexpr "which"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_9180;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p20, $mul.ref(out_$i22, 1));
    goto corral_source_split_9179;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i64(out_$i21, 1);
    goto corral_source_split_9178;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} out_$i21 := strlen(out_$p20);
    call {:si_unique_call 2142} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i21);
    goto corral_source_split_9177;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i19, out_$p20, out_$p26 := _rbd_dev_v1_snap_name_loop_$bb8(out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i19, out_$p20, out_$p26);
    return;

  exit:
    return;
}



procedure _rbd_dev_v1_snap_name_loop_$bb8(in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$i19: i32, in_$p20: ref, in_$p26: ref) returns (out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$i19: i32, out_$p20: ref, out_$p26: ref);



implementation _rbd_dev_v1_snap_name_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} _rbd_dev_v1_snap_name_loop_$bb3();
    return;

  exit:
    return;
}



procedure _rbd_dev_v1_snap_name_loop_$bb3();



implementation ceph_encode_string_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} ceph_encode_string_loop_$bb3();
    return;

  exit:
    return;
}



procedure ceph_encode_string_loop_$bb3();



implementation rbd_v1_snap_id_by_name_loop_$bb4(in_$p1: ref, in_$p8: ref, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i11: i32, in_$p12: ref) returns (out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i11: i32, out_$p12: ref)
{

  entry:
    out_$i13, out_$i14, out_$i15, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i11, out_$p12 := in_$i13, in_$i14, in_$i15, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i11, in_$p12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9249;

  $bb10:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i11, out_$p12 := out_$i24, out_$p23;
    goto $bb10_dummy;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    out_$i26 := $ugt.i32(out_$i25, out_$i24);
    goto corral_source_split_9266;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, in_$p8);
    goto corral_source_split_9265;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i11, 1);
    call {:si_unique_call 2162} {:cexpr "which"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_9264;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p12, $mul.ref(out_$i22, 1));
    goto corral_source_split_9263;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i64(out_$i21, 1);
    goto corral_source_split_9262;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} out_$i21 := strlen(out_$p12);
    call {:si_unique_call 2161} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i21);
    goto corral_source_split_9261;

  $bb7:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i11;
    assume true;
    goto $bb7;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, 0);
    goto corral_source_split_9252;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2158} out_$i13 := strcmp(in_$p1, out_$p12);
    call {:si_unique_call 2159} {:cexpr "tmp"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_9251;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i13, out_$i14, out_$i15, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i11, out_$p12 := rbd_v1_snap_id_by_name_loop_$bb4(in_$p1, in_$p8, out_$i13, out_$i14, out_$i15, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i11, out_$p12);
    return;

  exit:
    return;
}



procedure rbd_v1_snap_id_by_name_loop_$bb4(in_$p1: ref, in_$p8: ref, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i11: i32, in_$p12: ref) returns (out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i11: i32, out_$p12: ref);



implementation rbd_v2_snap_id_by_name_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$i8: i64, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i1, in_$i14: i8, in_$i15: i1, in_$i16: i64, in_$i17: i1, in_$i18: i8, in_$i19: i64, in_$i23: i32, in_$i24: i1, in_$i25: i8, in_$i20: i8, in_$i26: i32, in_$i27: i1, in_$i5: i64, in_$i6: i8, in_$i7: i32, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i28: i8, in_$i29: i64) returns (out_$i8: i64, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i1, out_$i14: i8, out_$i15: i1, out_$i16: i64, out_$i17: i1, out_$i18: i8, out_$i19: i64, out_$i23: i32, out_$i24: i1, out_$i25: i8, out_$i20: i8, out_$i26: i32, out_$i27: i1, out_$i5: i64, out_$i6: i8, out_$i7: i32, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i28: i8, out_$i29: i64)
{

  entry:
    out_$i8, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i23, out_$i24, out_$i25, out_$i20, out_$i26, out_$i27, out_$i5, out_$i6, out_$i7, out_$p30, out_$i31, out_$i32, out_$i28, out_$i29 := in_$i8, in_$p10, in_$i11, in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i23, in_$i24, in_$i25, in_$i20, in_$i26, in_$i27, in_$i5, in_$i6, in_$i7, in_$p30, in_$i31, in_$i32, in_$i28, in_$i29;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9274;

  $bb12:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$i5, out_$i6, out_$i7 := out_$i11, out_$i20, out_$i26;
    goto $bb12_dummy;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    out_$i28, out_$i29 := out_$i20, out_$i11;
    assume true;
    goto $bb12;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    out_$i27 := $trunc.i8.i1(out_$i20);
    goto corral_source_split_9297;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i7, 1);
    call {:si_unique_call 2169} {:cexpr "which"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_9296;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9295;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i25;
    goto $bb7;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i6;
    goto $bb7;

  $bb5:
    assume out_$i17 == 1;
    goto corral_source_split_9291;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    out_$i18, out_$i19 := out_$i6, out_$i11;
    assume true;
    goto $bb5;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i64(out_$i16, $sub.i64(0, 2));
    goto corral_source_split_9289;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} out_$i16 := PTR_ERR(out_$p12);
    call {:si_unique_call 2168} {:cexpr "tmp"} boogie_si_record_i64(out_$i16);
    goto corral_source_split_9288;

  $bb3:
    assume out_$i15 == 1;
    goto corral_source_split_9287;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    out_$i15 := $trunc.i8.i1(out_$i14);
    goto corral_source_split_9285;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i1.i8(out_$i13);
    call {:si_unique_call 2166} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i14);
    goto corral_source_split_9284;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} out_$i13 := IS_ERR(out_$p12);
    goto corral_source_split_9283;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2164} out_$p12 := rbd_dev_v2_snap_name(in_$p0, out_$i11);
    goto corral_source_split_9282;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i64($M.0, out_$p10);
    call {:si_unique_call 2163} {:cexpr "snap_id"} boogie_si_record_i64(out_$i11);
    goto corral_source_split_9281;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 24)), $mul.ref(24, 1)), $mul.ref(out_$i8, 8));
    goto corral_source_split_9280;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i8 := $zext.i32.i64(out_$i7);
    goto corral_source_split_9279;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb13:
    assume out_$i32 == 1;
    goto corral_source_split_9307;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    out_$i28, out_$i29 := out_$i6, out_$i5;
    assume true;
    goto $bb13;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    out_$i32 := $ugt.i32(out_$i31, out_$i7);
    goto corral_source_split_9277;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, out_$p30);
    goto corral_source_split_9276;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9275;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} kfree(out_$p12);
    goto corral_source_split_9305;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i1.i8(out_$i24);
    call {:si_unique_call 2172} {:cexpr "found"} boogie_si_record_i8(out_$i25);
    goto corral_source_split_9304;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, 0);
    goto corral_source_split_9303;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} out_$i23 := strcmp(in_$p1, out_$p12);
    call {:si_unique_call 2171} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_9302;

  $bb4:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i8, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i23, out_$i24, out_$i25, out_$i20, out_$i26, out_$i27, out_$i5, out_$i6, out_$i7, out_$p30, out_$i31, out_$i32, out_$i28, out_$i29 := rbd_v2_snap_id_by_name_loop_$bb1(in_$p0, in_$p1, in_$p4, out_$i8, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i23, out_$i24, out_$i25, out_$i20, out_$i26, out_$i27, out_$i5, out_$i6, out_$i7, out_$p30, out_$i31, out_$i32, out_$i28, out_$i29);
    return;

  exit:
    return;
}



procedure rbd_v2_snap_id_by_name_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$i8: i64, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i1, in_$i14: i8, in_$i15: i1, in_$i16: i64, in_$i17: i1, in_$i18: i8, in_$i19: i64, in_$i23: i32, in_$i24: i1, in_$i25: i8, in_$i20: i8, in_$i26: i32, in_$i27: i1, in_$i5: i64, in_$i6: i8, in_$i7: i32, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i28: i8, in_$i29: i64) returns (out_$i8: i64, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i1, out_$i14: i8, out_$i15: i1, out_$i16: i64, out_$i17: i1, out_$i18: i8, out_$i19: i64, out_$i23: i32, out_$i24: i1, out_$i25: i8, out_$i20: i8, out_$i26: i32, out_$i27: i1, out_$i5: i64, out_$i6: i8, out_$i7: i32, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i28: i8, out_$i29: i64);
  modifies $M.59, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.56, $M.58, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_v1_header_info_loop_$bb4(in_$p0: ref, in_$i8: i64, in_$i9: i32, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i64, in_$i14: i64, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p5: ref, in_$i6: i64, in_$i7: i32, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i30: i64, in_$i31: i1, in_$i32: i64, in_$p33: ref, in_$i34: i1, in_$i35: i8, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$p45: ref) returns (out_$i8: i64, out_$i9: i32, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i64, out_$i14: i64, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p5: ref, out_$i6: i64, out_$i7: i32, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i30: i64, out_$i31: i1, out_$i32: i64, out_$p33: ref, out_$i34: i1, out_$i35: i8, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$p45: ref)
{

  entry:
    out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p5, out_$i6, out_$i7, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45 := in_$i8, in_$i9, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$i15, in_$p16, in_$p17, in_$i18, in_$i19, in_$p5, in_$i6, in_$i7, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$p40, in_$i41, in_$p42, in_$i43, in_$i44, in_$p45;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$p5, out_$i6, out_$i7 := out_$p16, out_$i15, out_$i9;
    goto $bb7_dummy;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i64(out_$i18, 0);
    goto corral_source_split_9334;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p17);
    goto corral_source_split_9333;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_9332;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} out_$p16 := kmalloc(out_$i15, 208);
    goto corral_source_split_9331;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i64(out_$i14, out_$i8);
    call {:si_unique_call 2178} {:cexpr "size"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_9330;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i64(out_$i13, 112);
    call {:si_unique_call 2177} {:cexpr "size"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_9329;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    out_$i13 := $mul.i64(out_$i12, 16);
    goto corral_source_split_9328;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i32.i64(out_$i9);
    goto corral_source_split_9327;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} kfree(out_$p11);
    goto corral_source_split_9326;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(out_$p10);
    goto corral_source_split_9325;

  $bb5:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9324;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    out_$i8, out_$i9, out_$p10, out_$p45 := out_$i41, out_$i43, out_$p5, out_$p5;
    assume true;
    goto $bb5;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, out_$i7);
    goto corral_source_split_9374;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, out_$p42);
    call {:si_unique_call 2188} {:cexpr "snap_count"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_9373;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p5, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_9372;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i64($M.0, out_$p40);
    call {:si_unique_call 2187} {:cexpr "names_size"} boogie_si_record_i64(out_$i41);
    goto corral_source_split_9371;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p5, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_9370;

  $bb21:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    out_$p39 := out_$p5;
    assume true;
    goto $bb21;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_9365;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_9364;

  $bb18:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    out_$i37 := 1;
    goto $bb19;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    out_$i37 := 0;
    goto $bb19;

  $bb17:
    assume out_$i36 == 1;
    goto corral_source_split_9362;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i8.i1(out_$i35);
    goto corral_source_split_9360;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i1.i8(out_$i34);
    call {:si_unique_call 2185} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i35);
    goto corral_source_split_9359;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} out_$i34 := rbd_dev_ondisk_valid(out_$p5);
    goto corral_source_split_9358;

  $bb15:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    out_$i32, out_$p33 := out_$i6, out_$p5;
    assume true;
    goto $bb15;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    out_$i31 := $ult.i64(out_$i30, out_$i6);
    goto corral_source_split_9353;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i24);
    goto corral_source_split_9352;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    out_$p26, out_$i27 := out_$p5, out_$i24;
    assume true;
    goto $bb11;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i24, 0);
    goto corral_source_split_9344;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2180} out_$i24 := rbd_obj_read_sync(in_$p0, out_$p22, 0, out_$i6, out_$p23);
    call {:si_unique_call 2181} {:cexpr "ret"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_9343;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p5);
    goto corral_source_split_9342;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_9341;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2192)), $mul.ref(240, 1));
    goto corral_source_split_9340;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p5, out_$i6, out_$i7, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45 := rbd_dev_v1_header_info_loop_$bb4(in_$p0, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p5, out_$i6, out_$i7, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45);
    return;

  exit:
    return;
}



procedure rbd_dev_v1_header_info_loop_$bb4(in_$p0: ref, in_$i8: i64, in_$i9: i32, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i64, in_$i14: i64, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p5: ref, in_$i6: i64, in_$i7: i32, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i30: i64, in_$i31: i1, in_$i32: i64, in_$p33: ref, in_$i34: i1, in_$i35: i8, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$p45: ref) returns (out_$i8: i64, out_$i9: i32, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i64, out_$i14: i64, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p5: ref, out_$i6: i64, out_$i7: i32, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i30: i64, out_$i31: i1, out_$i32: i64, out_$p33: ref, out_$i34: i1, out_$i35: i8, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$p45: ref);
  modifies $CurrAddr, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.14, $M.18, $M.20, $M.21, $M.19;



implementation rbd_dev_v2_snap_context_loop_$bb27(in_$p1: ref, in_$i45: i32, in_$p50: ref, in_$i56: i64, in_$i57: i64, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i55: i32) returns (out_$i56: i64, out_$i57: i64, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i55: i32)
{

  entry:
    out_$i56, out_$i57, out_$p59, out_$i60, out_$i61, out_$i55 := in_$i56, in_$i57, in_$p59, in_$i60, in_$i61, in_$i55;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_9553;

  $bb29:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$i55 := out_$i60;
    goto $bb29_dummy;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    out_$i61 := $ult.i32(out_$i60, in_$i45);
    goto corral_source_split_9560;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i32(out_$i55, 1);
    call {:si_unique_call 2239} {:cexpr "i"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_9559;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p59, out_$i56);
    goto corral_source_split_9558;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref(in_$p50, $mul.ref(0, 24)), $mul.ref(24, 1)), $mul.ref(out_$i57, 8));
    goto corral_source_split_9557;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i32.i64(out_$i55);
    goto corral_source_split_9556;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2238} out_$i56 := ceph_decode_64(in_$p1);
    goto corral_source_split_9555;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i56, out_$i57, out_$p59, out_$i60, out_$i61, out_$i55 := rbd_dev_v2_snap_context_loop_$bb27(in_$p1, in_$i45, in_$p50, out_$i56, out_$i57, out_$p59, out_$i60, out_$i61, out_$i55);
    return;

  exit:
    return;
}



procedure rbd_dev_v2_snap_context_loop_$bb27(in_$p1: ref, in_$i45: i32, in_$p50: ref, in_$i56: i64, in_$i57: i64, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i55: i32) returns (out_$i56: i64, out_$i57: i64, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i55: i32);
  modifies $M.0, $M.56;



implementation rbd_obj_read_sync_loop_$bb27()
{

  entry:
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb27_dummy;

  $bb27_dummy:
    call {:si_unique_call 1} rbd_obj_read_sync_loop_$bb27();
    return;

  exit:
    return;
}



procedure rbd_obj_read_sync_loop_$bb27();



implementation rbd_obj_read_sync_loop_$bb23()
{

  entry:
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb23_dummy;

  $bb23_dummy:
    call {:si_unique_call 1} rbd_obj_read_sync_loop_$bb23();
    return;

  exit:
    return;
}



procedure rbd_obj_read_sync_loop_$bb23();



implementation rbd_header_from_disk_loop_$bb23(in_$i22: i32, in_$p23: ref, in_$p40: ref, in_$p48: ref, in_$i51: i64, in_$p53: ref, in_$i54: i64, in_$i55: i64, in_$p57: ref, in_$i58: i64, in_$p60: ref, in_$i61: i64, in_$i62: i64, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$i50: i32) returns (out_$i51: i64, out_$p53: ref, out_$i54: i64, out_$i55: i64, out_$p57: ref, out_$i58: i64, out_$p60: ref, out_$i61: i64, out_$i62: i64, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$i50: i32)
{

  entry:
    out_$i51, out_$p53, out_$i54, out_$i55, out_$p57, out_$i58, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i50 := in_$i51, in_$p53, in_$i54, in_$i55, in_$p57, in_$i58, in_$p60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$i50;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_9999;

  $bb25:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    out_$i50 := out_$i64;
    goto $bb25_dummy;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    out_$i65 := $ult.i32(out_$i64, in_$i22);
    goto corral_source_split_10016;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(out_$i50, 1);
    call {:si_unique_call 2339} {:cexpr "i"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_10015;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p63, out_$i61);
    goto corral_source_split_10014;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(in_$p40, $mul.ref(out_$i62, 8));
    goto corral_source_split_10013;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i32.i64(out_$i50);
    goto corral_source_split_10012;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i64($M.0, out_$p60);
    goto corral_source_split_10011;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p48, $mul.ref(out_$i58, 16)), $mul.ref(8, 1));
    goto corral_source_split_10010;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    goto corral_source_split_10009;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i32.i64(out_$i50);
    goto corral_source_split_10008;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p57, out_$i54);
    goto corral_source_split_10007;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($add.ref(in_$p23, $mul.ref(0, 24)), $mul.ref(24, 1)), $mul.ref(out_$i55, 8));
    goto corral_source_split_10006;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i32.i64(out_$i50);
    goto corral_source_split_10005;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i64($M.0, out_$p53);
    goto corral_source_split_10004;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p48, $mul.ref(out_$i51, 16)), $mul.ref(0, 1));
    goto corral_source_split_10003;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    goto corral_source_split_10002;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i32.i64(out_$i50);
    goto corral_source_split_10001;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i51, out_$p53, out_$i54, out_$i55, out_$p57, out_$i58, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i50 := rbd_header_from_disk_loop_$bb23(in_$i22, in_$p23, in_$p40, in_$p48, out_$i51, out_$p53, out_$i54, out_$i55, out_$p57, out_$i58, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i50);
    return;

  exit:
    return;
}



procedure rbd_header_from_disk_loop_$bb23(in_$i22: i32, in_$p23: ref, in_$p40: ref, in_$p48: ref, in_$i51: i64, in_$p53: ref, in_$i54: i64, in_$i55: i64, in_$p57: ref, in_$i58: i64, in_$p60: ref, in_$i61: i64, in_$i62: i64, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$i50: i32) returns (out_$i51: i64, out_$p53: ref, out_$i54: i64, out_$i55: i64, out_$p57: ref, out_$i58: i64, out_$p60: ref, out_$i61: i64, out_$i62: i64, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$i50: i32);
  modifies $M.0;



implementation rbd_client_find_loop_$bb8(in_$p0: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p13: ref, in_$p30: ref) returns (out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p13: ref, out_$p30: ref)
{

  entry:
    out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p13, out_$p30 := in_$p14, in_$p15, in_$i16, in_$i17, in_$p18, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$p13, in_$p30;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_10236;

  $bb14:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$p13 := out_$p26;
    goto $bb14_dummy;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    out_$p30 := out_$p26;
    assume true;
    goto $bb14;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, $p2i.ref.i64(rbd_client_list));
    goto corral_source_split_10256;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_10255;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p25, $mul.ref($sub.ref(0, 16), 32)), $mul.ref(16, 1));
    goto corral_source_split_10254;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p25, $mul.ref($sub.ref(0, 16), 32));
    goto corral_source_split_10253;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_10252;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_10251;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_10250;

  $bb11:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    out_$p18 := out_$p13;
    assume true;
    goto $bb11;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, 0);
    goto corral_source_split_10241;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} out_$i16 := ceph_compare_options(in_$p0, out_$p15);
    call {:si_unique_call 2395} {:cexpr "tmp"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_10240;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_10239;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p13, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_10238;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p13, out_$p30 := rbd_client_find_loop_$bb8(in_$p0, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p13, out_$p30);
    return;

  exit:
    return;
}



procedure rbd_client_find_loop_$bb8(in_$p0: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p13: ref, in_$p30: ref) returns (out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p13: ref, out_$p30: ref);



implementation do_rbd_remove_loop_$bb11(in_$i10: i32, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p18: ref, in_$p31: ref) returns (out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p18: ref, out_$p31: ref)
{

  entry:
    out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p27, out_$p28, out_$i29, out_$i30, out_$p18, out_$p31 := in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$p24, in_$p27, in_$p28, in_$i29, in_$i30, in_$p18, in_$p31;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_10519;

  $bb17:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$p18 := out_$p28;
    goto $bb17_dummy;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    out_$p31 := out_$p20;
    assume true;
    goto $bb17;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, $p2i.ref.i64(rbd_dev_list));
    goto corral_source_split_10535;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_10534;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_10533;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p18, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10532;

  $bb14:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    out_$p24 := out_$p20;
    assume true;
    goto $bb14;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, in_$i10);
    goto corral_source_split_10525;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, out_$p21);
    goto corral_source_split_10524;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p19, $mul.ref($sub.ref(0, 744), 2192)), $mul.ref(0, 1));
    goto corral_source_split_10523;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref(out_$p19, $mul.ref($sub.ref(0, 744), 2192));
    goto corral_source_split_10522;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_10521;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p27, out_$p28, out_$i29, out_$i30, out_$p18, out_$p31 := do_rbd_remove_loop_$bb11(in_$i10, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p27, out_$p28, out_$i29, out_$i30, out_$p18, out_$p31);
    return;

  exit:
    return;
}



procedure do_rbd_remove_loop_$bb11(in_$i10: i32, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p18: ref, in_$p31: ref) returns (out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p18: ref, out_$p31: ref);



implementation rbd_parent_show_loop_$bb8(in_$p2: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i32, in_$i48: i64, in_$i49: i64, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$i16: i64, in_$p17: ref, in_$i56: i64) returns (out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i32, out_$i48: i64, out_$i49: i64, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$i16: i64, out_$p17: ref, out_$i56: i64)
{

  entry:
    out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i16, out_$p17, out_$i56 := in_$p18, in_$p19, in_$p20, in_$i21, in_$p22, in_$p23, in_$i24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$p33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$p40, in_$p41, in_$i42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$i16, in_$p17, in_$i56;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10755;

  $bb13:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$i16, out_$p17 := out_$i49, out_$p51;
    goto $bb13_dummy;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i49;
    assume true;
    goto $bb13;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, 0);
    goto corral_source_split_10799;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_10798;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_10797;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p51, $mul.ref(0, 2192)), $mul.ref(320, 1));
    goto corral_source_split_10796;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_10795;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p17, $mul.ref(0, 2192)), $mul.ref(320, 1));
    goto corral_source_split_10794;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i64(out_$i48, out_$i16);
    call {:si_unique_call 2535} {:cexpr "count"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_10793;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i47);
    goto corral_source_split_10792;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2533} out_$i47 := sprintf.ref.ref.ref.i64.ref.ref.ref.i64.ref.i64(out_$p20, .str.373, out_$p22, out_$i24, out_$p26, out_$p28, out_$p40, out_$i42, out_$p44, out_$i46);
    call {:si_unique_call 2534} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_10791;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i64($M.0, out_$p45);
    goto corral_source_split_10790;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p17, $mul.ref(0, 2192)), $mul.ref(304, 1));
    goto corral_source_split_10789;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_10788;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p19, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_10787;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i64($M.0, out_$p41);
    goto corral_source_split_10786;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p19, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_10785;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_10784;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    out_$p40 := .str.375;
    goto $bb12;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    out_$p40 := out_$p39;
    goto $bb12;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    out_$p39 := $i2p.i64.ref(out_$i38);
    goto corral_source_split_10780;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i37);
    goto corral_source_split_10779;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i1.i32(out_$i36);
    goto corral_source_split_10778;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i64(out_$i35, 0);
    goto corral_source_split_10777;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    out_$i35 := $p2i.ref.i64(out_$p34);
    goto corral_source_split_10776;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_10775;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p19, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_10774;

  $bb10:
    assume out_$i32 == 1;
    goto corral_source_split_10773;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, 0);
    goto corral_source_split_10771;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_10770;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_10769;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p19, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_10768;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_10767;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p19, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_10766;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_10765;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p19, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_10764;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.0, out_$p23);
    goto corral_source_split_10763;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p19, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_10762;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    out_$p22 := (if out_$i21 == 1 then .str.240 else .str.374);
    goto corral_source_split_10761;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i64(out_$i16, 0);
    goto corral_source_split_10760;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref(in_$p2, $mul.ref(out_$i16, 1));
    goto corral_source_split_10759;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_10758;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 2192)), $mul.ref(296, 1));
    goto corral_source_split_10757;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11:
    assume !(out_$i32 == 1);
    goto corral_source_split_10782;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i16, out_$p17, out_$i56 := rbd_parent_show_loop_$bb8(in_$p2, out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i16, out_$p17, out_$i56);
    return;

  exit:
    return;
}



procedure rbd_parent_show_loop_$bb8(in_$p2: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i32, in_$i48: i64, in_$i49: i64, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$i16: i64, in_$p17: ref, in_$i56: i64) returns (out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i32, out_$i48: i64, out_$i49: i64, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$i16: i64, out_$p17: ref, out_$i56: i64);



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$p36: ref, in_$p37: ref, in_$p39: ref, in_$p41: ref, in_$p43: ref, in_$p44: ref, in_$p46: ref, in_$p48: ref, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$p55: ref, in_$p57: ref, in_$p58: ref, in_$p60: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p66: ref, in_$p68: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p74: ref, in_$p76: ref, in_$p78: ref, in_$p80: ref, in_$p82: ref, in_$p83: ref, in_$p85: ref, in_$p86: ref, in_$p88: ref, in_$p90: ref, in_$p92: ref, in_$p93: ref, in_$p95: ref, in_$p96: ref, in_$p98: ref, in_$p100: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p106: ref, in_$p108: ref, in_$i145: i32, in_$i146: i1, in_$i147: i1, in_$i148: i1, in_$i149: i1, in_$i150: i1, in_$i151: i1, in_$i152: i1, in_$i153: i1, in_$i154: i1, in_$i155: i1, in_$i156: i1, in_$i157: i1, in_$i158: i1, in_$i159: i1, in_$i160: i1, in_$i161: i1, in_$i162: i1, in_$i163: i1, in_$i164: i1, in_$i165: i1, in_$i166: i1, in_$i167: i1, in_$i168: i1, in_$i169: i1, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i1, in_$i174: i32, in_$i175: i1, in_$i177: i32, in_$i178: i1, in_$i179: i32, in_$i180: i1, in_$i181: i32, in_$i182: i1, in_$i183: i64, in_$i185: i32, in_$i186: i1, in_$i187: i32, in_$i188: i1, in_$i189: i32, in_$i190: i1, in_$i192: i32, in_$i193: i1, in_$i194: i32, in_$i195: i1, in_$i196: i1, in_$i197: i1, in_$i198: i32, in_$i199: i1, in_$i200: i32, in_$i201: i32, in_$i202: i32, in_$i203: i1, in_$i205: i32, in_$i206: i32, in_$i207: i32, in_$i208: i1, in_$i209: i32, in_$i210: i1, in_$i211: i1, in_$i212: i1, in_$i213: i32, in_$i214: i1, in_$i215: i32, in_$i216: i32, in_$i217: i32, in_$i218: i1, in_$i220: i32, in_$i221: i32, in_$i222: i32, in_$i223: i1, in_$i224: i32, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$i228: i64, in_$i230: i32, in_$i231: i1, in_$i232: i32, in_$i233: i1, in_$i234: i32, in_$i235: i1, in_$i236: i32, in_$i237: i1, in_$i238: i32, in_$i240: i32, in_$i241: i1, in_$i242: i32, in_$i243: i1, in_$i244: i1, in_$i245: i1, in_$i246: i32, in_$i247: i1, in_$i248: i32, in_$i249: i1, in_$i250: i32, in_$i251: i1, in_$i252: i32, in_$i253: i32, in_$i254: i1, in_$i255: i32, in_$i256: i1, in_$i257: i32, in_$i258: i1, in_$i259: i32, in_$i260: i1, in_$i261: i1, in_$i262: i1, in_$i263: i1, in_$i264: i1, in_$i265: i32, in_$i266: i1, in_$i267: i32, in_$i268: i32, in_$i269: i32, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$i273: i32, in_$i274: i32, in_$i275: i64, in_$i277: i32, in_$i278: i1, in_$p279: ref, in_$i280: i32, in_$i281: i32, in_$i282: i64, in_$i284: i32, in_$i285: i1, in_$p286: ref, in_$i287: i32, in_$i288: i32, in_$i289: i64, in_$i291: i32, in_$i292: i1, in_$p293: ref, in_$i294: i32, in_$i295: i32, in_$i296: i64, in_$i298: i32, in_$i299: i1, in_$p300: ref, in_$i301: i32, in_$i302: i32, in_$i303: i32, in_$i304: i1, in_$i305: i32, in_$i306: i32, in_$i307: i32, in_$i308: i1, in_$i309: i32, in_$i310: i1, in_$i311: i32, in_$i312: i1, in_$i314: i32, in_$i315: i1, in_$i316: i32, in_$i317: i1, in_$i318: i32, in_$i319: i1, in_$i321: i32, in_$i322: i1, in_$i323: i32, in_$i324: i1, in_$i325: i32, in_$i326: i1, in_$i328: i32, in_$i329: i1, in_$i330: i32, in_$i331: i1, in_$i332: i32, in_$i333: i1, in_$i335: i32, in_$i336: i1, in_$i337: i32, in_$i338: i1, in_$i339: i32, in_$i340: i1, in_$i342: i32, in_$i343: i1, in_$i344: i32, in_$i345: i1, in_$i346: i32, in_$i347: i1, in_$i348: i64, in_$i350: i32, in_$i351: i1, in_$i352: i32, in_$i353: i1, in_$i354: i32, in_$i355: i1, in_$i357: i32, in_$i358: i1, in_$i359: i32, in_$i360: i1, in_$i361: i1, in_$i362: i1, in_$i363: i1, in_$i364: i32, in_$i365: i1, in_$i366: i32, in_$i367: i32, in_$i368: i32, in_$i370: i32, in_$i371: i1, in_$i372: i32, in_$i374: i32, in_$i375: i1, in_$i377: i32, in_$i378: i1, in_$i379: i32, in_$i380: i1, in_$i381: i32, in_$i382: i1, in_$i384: i32, in_$i385: i1, in_$i386: i32, in_$i387: i1, in_$i388: i32, in_$i389: i1, in_$i391: i32, in_$i392: i1, in_$i393: i32, in_$i394: i1, in_$i395: i32, in_$i396: i1, in_$i397: i64, in_$i399: i32, in_$i400: i1, in_$i401: i32, in_$i402: i1, in_$i403: i32, in_$i404: i1, in_$i406: i32, in_$i407: i1, in_$i408: i32, in_$i409: i1, in_$i410: i32, in_$i411: i1, in_$i412: i64, in_vslice_dummy_var_260: i64, in_vslice_dummy_var_261: i64, in_vslice_dummy_var_262: i64, in_vslice_dummy_var_263: i32, in_vslice_dummy_var_264: i32, in_vslice_dummy_var_265: i64, in_vslice_dummy_var_266: i16, in_vslice_dummy_var_267: i32, in_vslice_dummy_var_268: i32, in_vslice_dummy_var_269: i32, in_vslice_dummy_var_270: i32, in_vslice_dummy_var_271: i64, in_vslice_dummy_var_272: i64, in_vslice_dummy_var_273: i64, in_vslice_dummy_var_274: i64, in_vslice_dummy_var_275: i64, in_vslice_dummy_var_276: i64, in_vslice_dummy_var_277: i64, in_vslice_dummy_var_278: i32, in_vslice_dummy_var_279: ref, in_vslice_dummy_var_280: i32, in_vslice_dummy_var_281: i64, in_vslice_dummy_var_282: i64, in_vslice_dummy_var_283: i64, in_vslice_dummy_var_284: i64, in_vslice_dummy_var_285: i64) returns (out_$i145: i32, out_$i146: i1, out_$i147: i1, out_$i148: i1, out_$i149: i1, out_$i150: i1, out_$i151: i1, out_$i152: i1, out_$i153: i1, out_$i154: i1, out_$i155: i1, out_$i156: i1, out_$i157: i1, out_$i158: i1, out_$i159: i1, out_$i160: i1, out_$i161: i1, out_$i162: i1, out_$i163: i1, out_$i164: i1, out_$i165: i1, out_$i166: i1, out_$i167: i1, out_$i168: i1, out_$i169: i1, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i1, out_$i174: i32, out_$i175: i1, out_$i177: i32, out_$i178: i1, out_$i179: i32, out_$i180: i1, out_$i181: i32, out_$i182: i1, out_$i183: i64, out_$i185: i32, out_$i186: i1, out_$i187: i32, out_$i188: i1, out_$i189: i32, out_$i190: i1, out_$i192: i32, out_$i193: i1, out_$i194: i32, out_$i195: i1, out_$i196: i1, out_$i197: i1, out_$i198: i32, out_$i199: i1, out_$i200: i32, out_$i201: i32, out_$i202: i32, out_$i203: i1, out_$i205: i32, out_$i206: i32, out_$i207: i32, out_$i208: i1, out_$i209: i32, out_$i210: i1, out_$i211: i1, out_$i212: i1, out_$i213: i32, out_$i214: i1, out_$i215: i32, out_$i216: i32, out_$i217: i32, out_$i218: i1, out_$i220: i32, out_$i221: i32, out_$i222: i32, out_$i223: i1, out_$i224: i32, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$i228: i64, out_$i230: i32, out_$i231: i1, out_$i232: i32, out_$i233: i1, out_$i234: i32, out_$i235: i1, out_$i236: i32, out_$i237: i1, out_$i238: i32, out_$i240: i32, out_$i241: i1, out_$i242: i32, out_$i243: i1, out_$i244: i1, out_$i245: i1, out_$i246: i32, out_$i247: i1, out_$i248: i32, out_$i249: i1, out_$i250: i32, out_$i251: i1, out_$i252: i32, out_$i253: i32, out_$i254: i1, out_$i255: i32, out_$i256: i1, out_$i257: i32, out_$i258: i1, out_$i259: i32, out_$i260: i1, out_$i261: i1, out_$i262: i1, out_$i263: i1, out_$i264: i1, out_$i265: i32, out_$i266: i1, out_$i267: i32, out_$i268: i32, out_$i269: i32, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$i273: i32, out_$i274: i32, out_$i275: i64, out_$i277: i32, out_$i278: i1, out_$p279: ref, out_$i280: i32, out_$i281: i32, out_$i282: i64, out_$i284: i32, out_$i285: i1, out_$p286: ref, out_$i287: i32, out_$i288: i32, out_$i289: i64, out_$i291: i32, out_$i292: i1, out_$p293: ref, out_$i294: i32, out_$i295: i32, out_$i296: i64, out_$i298: i32, out_$i299: i1, out_$p300: ref, out_$i301: i32, out_$i302: i32, out_$i303: i32, out_$i304: i1, out_$i305: i32, out_$i306: i32, out_$i307: i32, out_$i308: i1, out_$i309: i32, out_$i310: i1, out_$i311: i32, out_$i312: i1, out_$i314: i32, out_$i315: i1, out_$i316: i32, out_$i317: i1, out_$i318: i32, out_$i319: i1, out_$i321: i32, out_$i322: i1, out_$i323: i32, out_$i324: i1, out_$i325: i32, out_$i326: i1, out_$i328: i32, out_$i329: i1, out_$i330: i32, out_$i331: i1, out_$i332: i32, out_$i333: i1, out_$i335: i32, out_$i336: i1, out_$i337: i32, out_$i338: i1, out_$i339: i32, out_$i340: i1, out_$i342: i32, out_$i343: i1, out_$i344: i32, out_$i345: i1, out_$i346: i32, out_$i347: i1, out_$i348: i64, out_$i350: i32, out_$i351: i1, out_$i352: i32, out_$i353: i1, out_$i354: i32, out_$i355: i1, out_$i357: i32, out_$i358: i1, out_$i359: i32, out_$i360: i1, out_$i361: i1, out_$i362: i1, out_$i363: i1, out_$i364: i32, out_$i365: i1, out_$i366: i32, out_$i367: i32, out_$i368: i32, out_$i370: i32, out_$i371: i1, out_$i372: i32, out_$i374: i32, out_$i375: i1, out_$i377: i32, out_$i378: i1, out_$i379: i32, out_$i380: i1, out_$i381: i32, out_$i382: i1, out_$i384: i32, out_$i385: i1, out_$i386: i32, out_$i387: i1, out_$i388: i32, out_$i389: i1, out_$i391: i32, out_$i392: i1, out_$i393: i32, out_$i394: i1, out_$i395: i32, out_$i396: i1, out_$i397: i64, out_$i399: i32, out_$i400: i1, out_$i401: i32, out_$i402: i1, out_$i403: i32, out_$i404: i1, out_$i406: i32, out_$i407: i1, out_$i408: i32, out_$i409: i1, out_$i410: i32, out_$i411: i1, out_$i412: i64, out_vslice_dummy_var_260: i64, out_vslice_dummy_var_261: i64, out_vslice_dummy_var_262: i64, out_vslice_dummy_var_263: i32, out_vslice_dummy_var_264: i32, out_vslice_dummy_var_265: i64, out_vslice_dummy_var_266: i16, out_vslice_dummy_var_267: i32, out_vslice_dummy_var_268: i32, out_vslice_dummy_var_269: i32, out_vslice_dummy_var_270: i32, out_vslice_dummy_var_271: i64, out_vslice_dummy_var_272: i64, out_vslice_dummy_var_273: i64, out_vslice_dummy_var_274: i64, out_vslice_dummy_var_275: i64, out_vslice_dummy_var_276: i64, out_vslice_dummy_var_277: i64, out_vslice_dummy_var_278: i32, out_vslice_dummy_var_279: ref, out_vslice_dummy_var_280: i32, out_vslice_dummy_var_281: i64, out_vslice_dummy_var_282: i64, out_vslice_dummy_var_283: i64, out_vslice_dummy_var_284: i64, out_vslice_dummy_var_285: i64)
{

  entry:
    out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$i273, out_$i274, out_$i275, out_$i277, out_$i278, out_$p279, out_$i280, out_$i281, out_$i282, out_$i284, out_$i285, out_$p286, out_$i287, out_$i288, out_$i289, out_$i291, out_$i292, out_$p293, out_$i294, out_$i295, out_$i296, out_$i298, out_$i299, out_$p300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i355, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i368, out_$i370, out_$i371, out_$i372, out_$i374, out_$i375, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i389, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i406, out_$i407, out_$i408, out_$i409, out_$i410, out_$i411, out_$i412, out_vslice_dummy_var_260, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263, out_vslice_dummy_var_264, out_vslice_dummy_var_265, out_vslice_dummy_var_266, out_vslice_dummy_var_267, out_vslice_dummy_var_268, out_vslice_dummy_var_269, out_vslice_dummy_var_270, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281, out_vslice_dummy_var_282, out_vslice_dummy_var_283, out_vslice_dummy_var_284, out_vslice_dummy_var_285 := in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i240, in_$i241, in_$i242, in_$i243, in_$i244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i253, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$p272, in_$i273, in_$i274, in_$i275, in_$i277, in_$i278, in_$p279, in_$i280, in_$i281, in_$i282, in_$i284, in_$i285, in_$p286, in_$i287, in_$i288, in_$i289, in_$i291, in_$i292, in_$p293, in_$i294, in_$i295, in_$i296, in_$i298, in_$i299, in_$p300, in_$i301, in_$i302, in_$i303, in_$i304, in_$i305, in_$i306, in_$i307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i312, in_$i314, in_$i315, in_$i316, in_$i317, in_$i318, in_$i319, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$i326, in_$i328, in_$i329, in_$i330, in_$i331, in_$i332, in_$i333, in_$i335, in_$i336, in_$i337, in_$i338, in_$i339, in_$i340, in_$i342, in_$i343, in_$i344, in_$i345, in_$i346, in_$i347, in_$i348, in_$i350, in_$i351, in_$i352, in_$i353, in_$i354, in_$i355, in_$i357, in_$i358, in_$i359, in_$i360, in_$i361, in_$i362, in_$i363, in_$i364, in_$i365, in_$i366, in_$i367, in_$i368, in_$i370, in_$i371, in_$i372, in_$i374, in_$i375, in_$i377, in_$i378, in_$i379, in_$i380, in_$i381, in_$i382, in_$i384, in_$i385, in_$i386, in_$i387, in_$i388, in_$i389, in_$i391, in_$i392, in_$i393, in_$i394, in_$i395, in_$i396, in_$i397, in_$i399, in_$i400, in_$i401, in_$i402, in_$i403, in_$i404, in_$i406, in_$i407, in_$i408, in_$i409, in_$i410, in_$i411, in_$i412, in_vslice_dummy_var_260, in_vslice_dummy_var_261, in_vslice_dummy_var_262, in_vslice_dummy_var_263, in_vslice_dummy_var_264, in_vslice_dummy_var_265, in_vslice_dummy_var_266, in_vslice_dummy_var_267, in_vslice_dummy_var_268, in_vslice_dummy_var_269, in_vslice_dummy_var_270, in_vslice_dummy_var_271, in_vslice_dummy_var_272, in_vslice_dummy_var_273, in_vslice_dummy_var_274, in_vslice_dummy_var_275, in_vslice_dummy_var_276, in_vslice_dummy_var_277, in_vslice_dummy_var_278, in_vslice_dummy_var_279, in_vslice_dummy_var_280, in_vslice_dummy_var_281, in_vslice_dummy_var_282, in_vslice_dummy_var_283, in_vslice_dummy_var_284, in_vslice_dummy_var_285;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2698} out_$i145 := __VERIFIER_nondet_int();
    call {:si_unique_call 2699} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i145);
    call {:si_unique_call 2700} {:cexpr "tmp___53"} boogie_si_record_i32(out_$i145);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb64_dummy;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb296:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb53:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb58:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 2705} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_11245;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2704} out_vslice_dummy_var_260 := rbd_minor_show(in_$p20, in_$p22, in_$p18);
    goto corral_source_split_11244;

  $bb57:
    assume out_$i175 == 1;
    goto corral_source_split_11243;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    out_$i175 := $eq.i32(out_$i174, 1);
    goto corral_source_split_11241;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    out_$i174 := $M.69;
    goto corral_source_split_11240;

  $bb55:
    assume out_$i173 == 1;
    goto corral_source_split_11239;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i173 := $eq.i32(out_$i172, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_11237:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2701} out_$i172 := __VERIFIER_nondet_int();
    call {:si_unique_call 2702} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i172);
    call {:si_unique_call 2703} {:cexpr "tmp___54"} boogie_si_record_i32(out_$i172);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume out_$i171 == 1;
    goto corral_source_split_11237;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    out_$i171 := $ne.i32(out_$i170, 0);
    goto corral_source_split_11235;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    out_$i170 := $M.69;
    goto corral_source_split_11234;

  $bb50:
    assume out_$i169 == 1;
    goto corral_source_split_11233;

  $bb48:
    assume out_$i168 == 1;
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i32(out_$i145, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb42:
    assume out_$i165 == 1;
    assume {:verifier.code 0} true;
    out_$i168 := $slt.i32(out_$i145, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb30:
    assume out_$i159 == 1;
    assume {:verifier.code 0} true;
    out_$i165 := $slt.i32(out_$i145, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb3:
    assume out_$i146 == 1;
    assume {:verifier.code 0} true;
    out_$i159 := $slt.i32(out_$i145, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i146 := $slt.i32(out_$i145, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2706} ldv_stop();
    goto corral_source_split_11247;

  $bb56:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb66:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb71:
    assume !(out_$i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 2711} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_11258;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2710} out_vslice_dummy_var_261 := rbd_remove(in_$p24, in_$p25, out_$i183);
    goto corral_source_split_11257;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    out_$i183 := $load.i64($M.67, in_$p0);
    goto corral_source_split_11256;

  $bb70:
    assume out_$i182 == 1;
    goto corral_source_split_11255;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    out_$i182 := $eq.i32(out_$i181, 1);
    goto corral_source_split_11253;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    out_$i181 := $M.70;
    goto corral_source_split_11252;

  $bb68:
    assume out_$i180 == 1;
    goto corral_source_split_11251;

  $bb67:
    assume {:verifier.code 0} true;
    out_$i180 := $eq.i32(out_$i179, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_11249:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2707} out_$i179 := __VERIFIER_nondet_int();
    call {:si_unique_call 2708} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i179);
    call {:si_unique_call 2709} {:cexpr "tmp___55"} boogie_si_record_i32(out_$i179);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb65:
    assume out_$i178 == 1;
    goto corral_source_split_11249;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    out_$i178 := $ne.i32(out_$i177, 0);
    goto corral_source_split_11231;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    out_$i177 := $M.70;
    goto corral_source_split_11230;

  $bb49:
    assume !(out_$i168 == 1);
    goto corral_source_split_11229;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2712} ldv_stop();
    goto corral_source_split_11260;

  $bb69:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb78:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb83:
    assume !(out_$i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 2717} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_11270;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2716} out_vslice_dummy_var_262 := rbd_name_show(in_$p30, in_$p27, in_$p28);
    goto corral_source_split_11269;

  $bb82:
    assume out_$i190 == 1;
    goto corral_source_split_11268;

  corral_source_split_11266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    out_$i190 := $eq.i32(out_$i189, 1);
    goto corral_source_split_11266;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    out_$i189 := $M.71;
    goto corral_source_split_11265;

  $bb80:
    assume out_$i188 == 1;
    goto corral_source_split_11264;

  $bb79:
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i187, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_11262:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2713} out_$i187 := __VERIFIER_nondet_int();
    call {:si_unique_call 2714} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i187);
    call {:si_unique_call 2715} {:cexpr "tmp___56"} boogie_si_record_i32(out_$i187);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb77:
    assume out_$i186 == 1;
    goto corral_source_split_11262;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    out_$i186 := $ne.i32(out_$i185, 0);
    goto corral_source_split_11219;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    out_$i185 := $M.71;
    goto corral_source_split_11218;

  $bb44:
    assume out_$i166 == 1;
    goto corral_source_split_11217;

  $bb43:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    out_$i166 := $slt.i32(out_$i145, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2718} ldv_stop();
    goto corral_source_split_11272;

  $bb81:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb90:
    assume !(out_$i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb100:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    $M.77 := out_$i201;
    call {:si_unique_call 2724} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i201);
    goto corral_source_split_11289;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    out_$i201 := $sub.i32(out_$i200, 1);
    goto corral_source_split_11288;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    out_$i200 := $M.77;
    goto corral_source_split_11287;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 2723} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_11286;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2722} rbd_root_dev_release(in_$p32);
    goto corral_source_split_11285;

  $bb99:
    assume out_$i199 == 1;
    goto corral_source_split_11284;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    out_$i199 := $eq.i32(out_$i198, 2);
    goto corral_source_split_11282;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    out_$i198 := $M.72;
    goto corral_source_split_11281;

  $bb97:
    assume out_$i197 == 1;
    goto corral_source_split_11280;

  $bb92:
    assume out_$i195 == 1;
    assume {:verifier.code 0} true;
    out_$i197 := $eq.i32(out_$i194, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb91:
    assume {:verifier.code 0} true;
    out_$i195 := $slt.i32(out_$i194, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_11274:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2719} out_$i194 := __VERIFIER_nondet_int();
    call {:si_unique_call 2720} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i194);
    call {:si_unique_call 2721} {:cexpr "tmp___57"} boogie_si_record_i32(out_$i194);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb89:
    assume out_$i193 == 1;
    goto corral_source_split_11274;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    out_$i193 := $ne.i32(out_$i192, 0);
    goto corral_source_split_11223;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    out_$i192 := $M.72;
    goto corral_source_split_11222;

  $bb46:
    assume out_$i167 == 1;
    goto corral_source_split_11221;

  $bb45:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    out_$i167 := $slt.i32(out_$i145, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb104:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    $M.77 := out_$i206;
    call {:si_unique_call 2727} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i206);
    goto corral_source_split_11296;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    out_$i206 := $add.i32(out_$i205, 1);
    goto corral_source_split_11295;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    out_$i205 := $M.77;
    goto corral_source_split_11294;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    $M.72 := 2;
    call {:si_unique_call 2726} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(2);
    goto corral_source_split_11293;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2725} out_vslice_dummy_var_263 := ldv_probe_17();
    goto corral_source_split_11292;

  $bb103:
    assume out_$i203 == 1;
    goto corral_source_split_11291;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    out_$i203 := $eq.i32(out_$i202, 1);
    goto corral_source_split_11278;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    out_$i202 := $M.72;
    goto corral_source_split_11277;

  $bb94:
    assume out_$i196 == 1;
    goto corral_source_split_11276;

  $bb93:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    out_$i196 := $eq.i32(out_$i194, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2728} ldv_stop();
    goto corral_source_split_11298;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb95:
    assume {:verifier.code 0} true;
    assume !(out_$i196 == 1);
    goto $bb96;

  $bb98:
    assume {:verifier.code 0} true;
    assume !(out_$i197 == 1);
    goto $bb96;

  $bb110:
    assume !(out_$i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb120:
    assume !(out_$i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    $M.77 := out_$i216;
    call {:si_unique_call 2734} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i216);
    goto corral_source_split_11315;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    out_$i216 := $sub.i32(out_$i215, 1);
    goto corral_source_split_11314;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    out_$i215 := $M.77;
    goto corral_source_split_11313;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 2733} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_11312;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2732} rbd_sysfs_dev_release(in_$p34);
    goto corral_source_split_11311;

  $bb119:
    assume out_$i214 == 1;
    goto corral_source_split_11310;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    out_$i214 := $eq.i32(out_$i213, 2);
    goto corral_source_split_11308;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    out_$i213 := $M.73;
    goto corral_source_split_11307;

  $bb117:
    assume out_$i212 == 1;
    goto corral_source_split_11306;

  $bb112:
    assume out_$i210 == 1;
    assume {:verifier.code 0} true;
    out_$i212 := $eq.i32(out_$i209, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb111:
    assume {:verifier.code 0} true;
    out_$i210 := $slt.i32(out_$i209, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_11300:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2729} out_$i209 := __VERIFIER_nondet_int();
    call {:si_unique_call 2730} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i209);
    call {:si_unique_call 2731} {:cexpr "tmp___58"} boogie_si_record_i32(out_$i209);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb109:
    assume out_$i208 == 1;
    goto corral_source_split_11300;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    out_$i208 := $ne.i32(out_$i207, 0);
    goto corral_source_split_11227;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    out_$i207 := $M.73;
    goto corral_source_split_11226;

  $bb47:
    assume !(out_$i167 == 1);
    goto corral_source_split_11225;

  $bb124:
    assume !(out_$i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_11321:
    assume {:verifier.code 0} true;
    $M.77 := out_$i221;
    call {:si_unique_call 2737} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i221);
    goto corral_source_split_11322;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    out_$i221 := $add.i32(out_$i220, 1);
    goto corral_source_split_11321;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    out_$i220 := $M.77;
    goto corral_source_split_11320;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    $M.73 := 2;
    call {:si_unique_call 2736} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_11319;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2735} out_vslice_dummy_var_264 := ldv_probe_2();
    goto corral_source_split_11318;

  $bb123:
    assume out_$i218 == 1;
    goto corral_source_split_11317;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    out_$i218 := $eq.i32(out_$i217, 1);
    goto corral_source_split_11304;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    out_$i217 := $M.73;
    goto corral_source_split_11303;

  $bb114:
    assume out_$i211 == 1;
    goto corral_source_split_11302;

  $bb113:
    assume !(out_$i210 == 1);
    assume {:verifier.code 0} true;
    out_$i211 := $eq.i32(out_$i209, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2738} ldv_stop();
    goto corral_source_split_11324;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb115:
    assume {:verifier.code 0} true;
    assume !(out_$i211 == 1);
    goto $bb116;

  $bb118:
    assume {:verifier.code 0} true;
    assume !(out_$i212 == 1);
    goto $bb116;

  $bb130:
    assume !(out_$i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb135:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 2743} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(1);
    goto corral_source_split_11335;

  SeqInstr_33:
    goto corral_source_split_11334;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2742} out_vslice_dummy_var_265 := rbd_add(in_$p36, in_$p37, out_$i228);
    goto SeqInstr_32;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    out_$i228 := $load.i64($M.67, in_$p1);
    goto corral_source_split_11333;

  $bb134:
    assume out_$i227 == 1;
    goto corral_source_split_11332;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    out_$i227 := $eq.i32(out_$i226, 1);
    goto corral_source_split_11330;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    out_$i226 := $M.74;
    goto corral_source_split_11329;

  $bb132:
    assume out_$i225 == 1;
    goto corral_source_split_11328;

  $bb131:
    assume {:verifier.code 0} true;
    out_$i225 := $eq.i32(out_$i224, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_11326:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2739} out_$i224 := __VERIFIER_nondet_int();
    call {:si_unique_call 2740} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i224);
    call {:si_unique_call 2741} {:cexpr "tmp___59"} boogie_si_record_i32(out_$i224);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb129:
    assume out_$i223 == 1;
    goto corral_source_split_11326;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    out_$i223 := $ne.i32(out_$i222, 0);
    goto corral_source_split_11207;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    out_$i222 := $M.74;
    goto corral_source_split_11206;

  $bb38:
    assume out_$i163 == 1;
    goto corral_source_split_11205;

  $bb32:
    assume out_$i160 == 1;
    assume {:verifier.code 0} true;
    out_$i163 := $slt.i32(out_$i145, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb31:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    out_$i160 := $slt.i32(out_$i145, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2744} ldv_stop();
    goto corral_source_split_11337;

  $bb133:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb142:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2745} invoke_work_1();
    goto corral_source_split_11340;

  $bb141:
    assume out_$i231 == 1;
    goto corral_source_split_11339;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    out_$i231 := $ne.i32(out_$i230, 0);
    goto corral_source_split_11211;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    out_$i230 := $M.75;
    goto corral_source_split_11210;

  $bb40:
    assume out_$i164 == 1;
    goto corral_source_split_11209;

  $bb39:
    assume !(out_$i163 == 1);
    assume {:verifier.code 0} true;
    out_$i164 := $slt.i32(out_$i145, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb145:
    assume !(out_$i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb150:
    assume !(out_$i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 2750} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11351;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2749} out_vslice_dummy_var_266 := rbd_bus_is_visible(in_$p39, in_$p41, out_$i238);
    goto corral_source_split_11350;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    out_$i238 := $load.i32($M.67, in_$p2);
    goto corral_source_split_11349;

  $bb149:
    assume out_$i237 == 1;
    goto corral_source_split_11348;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    out_$i237 := $eq.i32(out_$i236, 1);
    goto corral_source_split_11346;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    out_$i236 := $M.76;
    goto corral_source_split_11345;

  $bb147:
    assume out_$i235 == 1;
    goto corral_source_split_11344;

  $bb146:
    assume {:verifier.code 0} true;
    out_$i235 := $eq.i32(out_$i234, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  corral_source_split_11342:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2746} out_$i234 := __VERIFIER_nondet_int();
    call {:si_unique_call 2747} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i234);
    call {:si_unique_call 2748} {:cexpr "tmp___60"} boogie_si_record_i32(out_$i234);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb144:
    assume out_$i233 == 1;
    goto corral_source_split_11342;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    out_$i233 := $ne.i32(out_$i232, 0);
    goto corral_source_split_11215;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    out_$i232 := $M.76;
    goto corral_source_split_11214;

  $bb41:
    assume !(out_$i164 == 1);
    goto corral_source_split_11213;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2751} ldv_stop();
    goto corral_source_split_11353;

  $bb148:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb157:
    assume !(out_$i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb167:
    assume {:verifier.code 0} true;
    assume !(out_$i247 == 1);
    goto $bb168;

  $bb170:
    assume {:verifier.code 0} true;
    assume !(out_$i249 == 1);
    goto $bb168;

  corral_source_split_11367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    out_$i249 := $eq.i32(out_$i248, 0);
    goto corral_source_split_11367;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    out_$i248 := $M.77;
    goto corral_source_split_11366;

  $bb166:
    assume out_$i247 == 1;
    goto corral_source_split_11365;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    out_$i247 := $eq.i32(out_$i246, 3);
    goto corral_source_split_11363;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    out_$i246 := $M.78;
    goto corral_source_split_11362;

  $bb164:
    assume out_$i245 == 1;
    goto corral_source_split_11361;

  $bb159:
    assume out_$i243 == 1;
    assume {:verifier.code 0} true;
    out_$i245 := $eq.i32(out_$i242, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb158:
    assume {:verifier.code 0} true;
    out_$i243 := $slt.i32(out_$i242, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  corral_source_split_11355:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2752} out_$i242 := __VERIFIER_nondet_int();
    call {:si_unique_call 2753} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i242);
    call {:si_unique_call 2754} {:cexpr "tmp___61"} boogie_si_record_i32(out_$i242);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb156:
    assume out_$i241 == 1;
    goto corral_source_split_11355;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    out_$i241 := $ne.i32(out_$i240, 0);
    goto corral_source_split_11195;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    out_$i240 := $M.78;
    goto corral_source_split_11194;

  $bb34:
    assume out_$i161 == 1;
    goto corral_source_split_11193;

  $bb33:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    out_$i161 := $slt.i32(out_$i145, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb175:
    assume !(out_$i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb180:
    assume !(out_$i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180;

  corral_source_split_11406:
    assume {:verifier.code 0} true;
    out_$i256 := $ne.i32(out_$i255, 0);
    goto corral_source_split_11407;

  $bb178:
    assume {:verifier.code 0} true;
    out_$i255 := $M.93;
    goto corral_source_split_11406;

  $bb177:
    assume !(out_$i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    goto $bb178;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 2782} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_11404;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 2781} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_11403;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 2780} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_11402;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 2779} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_11401;

  corral_source_split_11399:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 2778} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_11400;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 2777} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(1);
    goto corral_source_split_11399;

  corral_source_split_11397:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 2776} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11398;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2775} ldv_initialize_block_device_operations_16();
    goto corral_source_split_11397;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2774} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_11396;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 2773} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_11395;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2772} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11394;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 2771} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_11393;

  corral_source_split_11391:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 2770} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_11392;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 2769} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_11391;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 2768} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_11390;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 2767} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_11389;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 2766} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_11388;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 2765} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_11387;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 2764} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11386;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 2763} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_11385;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 2762} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_11384;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2761} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11383;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    $M.78 := 3;
    call {:si_unique_call 2760} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_11382;

  $bb176:
    assume out_$i254 == 1;
    goto corral_source_split_11381;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    out_$i254 := $eq.i32(out_$i253, 0);
    goto corral_source_split_11379;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    out_$i253 := $M.93;
    goto corral_source_split_11378;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    $M.93 := out_$i252;
    call {:si_unique_call 2759} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i252);
    goto corral_source_split_11377;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2758} out_$i252 := rbd_init();
    goto corral_source_split_11376;

  $bb174:
    assume out_$i251 == 1;
    goto corral_source_split_11375;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    out_$i251 := $eq.i32(out_$i250, 1);
    goto corral_source_split_11359;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    out_$i250 := $M.78;
    goto corral_source_split_11358;

  $bb161:
    assume out_$i244 == 1;
    goto corral_source_split_11357;

  $bb160:
    assume !(out_$i243 == 1);
    assume {:verifier.code 0} true;
    out_$i244 := $eq.i32(out_$i242, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2784} ldv_stop();
    goto corral_source_split_11412;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb162:
    assume {:verifier.code 0} true;
    assume !(out_$i244 == 1);
    goto $bb163;

  $bb165:
    assume {:verifier.code 0} true;
    assume !(out_$i245 == 1);
    goto $bb163;

  $bb187:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb201:
    assume !(out_$i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    $M.77 := out_$i269;
    call {:si_unique_call 2790} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i269);
    goto corral_source_split_11438;

  corral_source_split_11436:
    assume {:verifier.code 0} true;
    out_$i269 := $sub.i32(out_$i268, 1);
    goto corral_source_split_11437;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    out_$i268 := $M.77;
    goto corral_source_split_11436;

  corral_source_split_11434:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2789} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_11435;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2788} rbd_release(in_$p43, out_$i267);
    goto corral_source_split_11434;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    out_$i267 := $load.i32($M.67, in_$p7);
    goto corral_source_split_11433;

  $bb200:
    assume out_$i266 == 1;
    goto corral_source_split_11432;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    out_$i266 := $eq.i32(out_$i265, 2);
    goto corral_source_split_11430;

  corral_source_split_11428:
    assume {:verifier.code 0} true;
    out_$i265 := $M.79;
    goto corral_source_split_11429;

  $bb198:
    assume out_$i264 == 1;
    goto corral_source_split_11428;

  $bb196:
    assume out_$i263 == 1;
    assume {:verifier.code 0} true;
    out_$i264 := $eq.i32(out_$i259, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb189:
    assume out_$i260 == 1;
    assume {:verifier.code 0} true;
    out_$i263 := $slt.i32(out_$i259, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb188:
    assume {:verifier.code 0} true;
    out_$i260 := $slt.i32(out_$i259, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_11414:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2785} out_$i259 := __VERIFIER_nondet_int();
    call {:si_unique_call 2786} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i259);
    call {:si_unique_call 2787} {:cexpr "tmp___62"} boogie_si_record_i32(out_$i259);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb186:
    assume out_$i258 == 1;
    goto corral_source_split_11414;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    out_$i258 := $ne.i32(out_$i257, 0);
    goto corral_source_split_11199;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    out_$i257 := $M.79;
    goto corral_source_split_11198;

  $bb36:
    assume out_$i162 == 1;
    goto corral_source_split_11197;

  $bb35:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    out_$i162 := $slt.i32(out_$i145, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb208:
    assume !(out_$i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 2794} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(2);
    goto corral_source_split_11457;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2793} out_vslice_dummy_var_268 := rbd_ioctl(out_$p279, out_$i280, out_$i281, out_$i282);
    goto corral_source_split_11456;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    out_$i282 := $load.i64($M.67, in_$p6);
    goto corral_source_split_11455;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    out_$i281 := $load.i32($M.67, in_$p9);
    goto corral_source_split_11454;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    out_$i280 := $load.i32($M.67, in_$p5);
    goto corral_source_split_11453;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    out_$p279 := $M.68;
    goto corral_source_split_11452;

  $bb207:
    assume out_$i278 == 1;
    goto corral_source_split_11451;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    out_$i278 := $eq.i32(out_$i277, 2);
    goto corral_source_split_11449;

  $bb206:
    assume {:verifier.code 0} true;
    out_$i277 := $M.79;
    goto corral_source_split_11448;

  $bb205:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2792} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_11446;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2791} out_vslice_dummy_var_267 := rbd_ioctl(out_$p272, out_$i273, out_$i274, out_$i275);
    goto corral_source_split_11445;

  corral_source_split_11443:
    assume {:verifier.code 0} true;
    out_$i275 := $load.i64($M.67, in_$p6);
    goto corral_source_split_11444;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    out_$i274 := $load.i32($M.67, in_$p9);
    goto corral_source_split_11443;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    out_$i273 := $load.i32($M.67, in_$p5);
    goto corral_source_split_11442;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    out_$p272 := $M.68;
    goto corral_source_split_11441;

  $bb204:
    assume out_$i271 == 1;
    goto corral_source_split_11440;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    out_$i271 := $eq.i32(out_$i270, 1);
    goto corral_source_split_11426;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    out_$i270 := $M.79;
    goto corral_source_split_11425;

  $bb197:
    assume !(out_$i263 == 1);
    goto corral_source_split_11424;

  $bb214:
    assume !(out_$i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 2798} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(2);
    goto corral_source_split_11476;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2797} out_vslice_dummy_var_270 := rbd_compat_ioctl(out_$p293, out_$i294, out_$i295, out_$i296);
    goto corral_source_split_11475;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    out_$i296 := $load.i64($M.67, in_$p3);
    goto corral_source_split_11474;

  corral_source_split_11472:
    assume {:verifier.code 0} true;
    out_$i295 := $load.i32($M.67, in_$p10);
    goto corral_source_split_11473;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    out_$i294 := $load.i32($M.67, in_$p4);
    goto corral_source_split_11472;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    out_$p293 := $M.68;
    goto corral_source_split_11471;

  $bb213:
    assume out_$i292 == 1;
    goto corral_source_split_11470;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    out_$i292 := $eq.i32(out_$i291, 2);
    goto corral_source_split_11468;

  $bb212:
    assume {:verifier.code 0} true;
    out_$i291 := $M.79;
    goto corral_source_split_11467;

  $bb211:
    assume !(out_$i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2796} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_11465;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2795} out_vslice_dummy_var_269 := rbd_compat_ioctl(out_$p286, out_$i287, out_$i288, out_$i289);
    goto corral_source_split_11464;

  corral_source_split_11462:
    assume {:verifier.code 0} true;
    out_$i289 := $load.i64($M.67, in_$p3);
    goto corral_source_split_11463;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    out_$i288 := $load.i32($M.67, in_$p10);
    goto corral_source_split_11462;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    out_$i287 := $load.i32($M.67, in_$p4);
    goto corral_source_split_11461;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    out_$p286 := $M.68;
    goto corral_source_split_11460;

  $bb210:
    assume out_$i285 == 1;
    goto corral_source_split_11459;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    out_$i285 := $eq.i32(out_$i284, 1);
    goto corral_source_split_11418;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    out_$i284 := $M.79;
    goto corral_source_split_11417;

  $bb191:
    assume out_$i261 == 1;
    goto corral_source_split_11416;

  $bb190:
    assume !(out_$i260 == 1);
    assume {:verifier.code 0} true;
    out_$i261 := $slt.i32(out_$i259, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb217:
    assume !(out_$i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb219:
    assume !(out_$i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    $M.77 := out_$i306;
    call {:si_unique_call 2802} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i306);
    goto corral_source_split_11490;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    out_$i306 := $add.i32(out_$i305, 1);
    goto corral_source_split_11489;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    out_$i305 := $M.77;
    goto corral_source_split_11488;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 2801} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(2);
    goto corral_source_split_11487;

  $bb218:
    assume out_$i304 == 1;
    goto corral_source_split_11486;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    out_$i304 := $eq.i32(out_$i303, 0);
    goto corral_source_split_11484;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    out_$i303 := $M.94;
    goto corral_source_split_11483;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    $M.94 := out_$i302;
    call {:si_unique_call 2800} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i302);
    goto corral_source_split_11482;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2799} out_$i302 := rbd_open(out_$p300, out_$i301);
    goto corral_source_split_11481;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    out_$i301 := $load.i32($M.67, in_$p8);
    goto corral_source_split_11480;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    out_$p300 := $M.68;
    goto corral_source_split_11479;

  $bb216:
    assume out_$i299 == 1;
    goto corral_source_split_11478;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  corral_source_split_11421:
    assume {:verifier.code 0} true;
    out_$i299 := $eq.i32(out_$i298, 1);
    goto corral_source_split_11422;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    out_$i298 := $M.79;
    goto corral_source_split_11421;

  $bb193:
    assume out_$i262 == 1;
    goto corral_source_split_11420;

  $bb192:
    assume !(out_$i261 == 1);
    assume {:verifier.code 0} true;
    out_$i262 := $eq.i32(out_$i259, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2803} ldv_stop();
    goto corral_source_split_11492;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb194:
    assume {:verifier.code 0} true;
    assume !(out_$i262 == 1);
    goto $bb195;

  $bb199:
    assume {:verifier.code 0} true;
    assume !(out_$i264 == 1);
    goto $bb195;

  $bb226:
    assume !(out_$i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb231:
    assume !(out_$i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 2808} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_11502;

  corral_source_split_11500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2807} out_vslice_dummy_var_271 := rbd_features_show(in_$p46, in_$p48, in_$p44);
    goto corral_source_split_11501;

  $bb230:
    assume out_$i312 == 1;
    goto corral_source_split_11500;

  corral_source_split_11498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    out_$i312 := $eq.i32(out_$i311, 1);
    goto corral_source_split_11498;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    out_$i311 := $M.80;
    goto corral_source_split_11497;

  $bb228:
    assume out_$i310 == 1;
    goto corral_source_split_11496;

  $bb227:
    assume {:verifier.code 0} true;
    out_$i310 := $eq.i32(out_$i309, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  corral_source_split_11494:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2804} out_$i309 := __VERIFIER_nondet_int();
    call {:si_unique_call 2805} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i309);
    call {:si_unique_call 2806} {:cexpr "tmp___63"} boogie_si_record_i32(out_$i309);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb225:
    assume out_$i308 == 1;
    goto corral_source_split_11494;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    out_$i308 := $ne.i32(out_$i307, 0);
    goto corral_source_split_11203;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    out_$i307 := $M.80;
    goto corral_source_split_11202;

  $bb37:
    assume !(out_$i162 == 1);
    goto corral_source_split_11201;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2809} ldv_stop();
    goto corral_source_split_11504;

  $bb229:
    assume !(out_$i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb238:
    assume !(out_$i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb243:
    assume !(out_$i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2814} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11514;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2813} out_vslice_dummy_var_272 := rbd_image_id_show(in_$p52, in_$p50, in_$p53);
    goto corral_source_split_11513;

  $bb242:
    assume out_$i319 == 1;
    goto corral_source_split_11512;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_11509:
    assume {:verifier.code 0} true;
    out_$i319 := $eq.i32(out_$i318, 1);
    goto corral_source_split_11510;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    out_$i318 := $M.81;
    goto corral_source_split_11509;

  $bb240:
    assume out_$i317 == 1;
    goto corral_source_split_11508;

  $bb239:
    assume {:verifier.code 0} true;
    out_$i317 := $eq.i32(out_$i316, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  corral_source_split_11506:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2810} out_$i316 := __VERIFIER_nondet_int();
    call {:si_unique_call 2811} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i316);
    call {:si_unique_call 2812} {:cexpr "tmp___64"} boogie_si_record_i32(out_$i316);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb237:
    assume out_$i315 == 1;
    goto corral_source_split_11506;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    out_$i315 := $ne.i32(out_$i314, 0);
    goto corral_source_split_11183;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    out_$i314 := $M.81;
    goto corral_source_split_11182;

  $bb26:
    assume out_$i157 == 1;
    goto corral_source_split_11181;

  $bb20:
    assume out_$i154 == 1;
    assume {:verifier.code 0} true;
    out_$i157 := $slt.i32(out_$i145, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb5:
    assume out_$i147 == 1;
    assume {:verifier.code 0} true;
    out_$i154 := $slt.i32(out_$i145, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb4:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    out_$i147 := $slt.i32(out_$i145, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_11516:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2815} ldv_stop();
    goto corral_source_split_11516;

  $bb241:
    assume !(out_$i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb250:
    assume !(out_$i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb255:
    assume !(out_$i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 2820} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_11526;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2819} out_vslice_dummy_var_273 := rbd_parent_show(in_$p55, in_$p57, in_$p58);
    goto corral_source_split_11525;

  $bb254:
    assume out_$i326 == 1;
    goto corral_source_split_11524;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    out_$i326 := $eq.i32(out_$i325, 1);
    goto corral_source_split_11522;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    out_$i325 := $M.82;
    goto corral_source_split_11521;

  $bb252:
    assume out_$i324 == 1;
    goto corral_source_split_11520;

  $bb251:
    assume {:verifier.code 0} true;
    out_$i324 := $eq.i32(out_$i323, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  corral_source_split_11518:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2816} out_$i323 := __VERIFIER_nondet_int();
    call {:si_unique_call 2817} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i323);
    call {:si_unique_call 2818} {:cexpr "tmp___65"} boogie_si_record_i32(out_$i323);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb249:
    assume out_$i322 == 1;
    goto corral_source_split_11518;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    out_$i322 := $ne.i32(out_$i321, 0);
    goto corral_source_split_11187;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    out_$i321 := $M.82;
    goto corral_source_split_11186;

  $bb28:
    assume out_$i158 == 1;
    goto corral_source_split_11185;

  $bb27:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    out_$i158 := $slt.i32(out_$i145, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2821} ldv_stop();
    goto corral_source_split_11528;

  $bb253:
    assume !(out_$i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb262:
    assume !(out_$i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb267:
    assume !(out_$i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 2826} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_11538;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2825} out_vslice_dummy_var_274 := rbd_pool_show(in_$p62, in_$p60, in_$p63);
    goto corral_source_split_11537;

  $bb266:
    assume out_$i333 == 1;
    goto corral_source_split_11536;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    out_$i333 := $eq.i32(out_$i332, 1);
    goto corral_source_split_11534;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    out_$i332 := $M.83;
    goto corral_source_split_11533;

  $bb264:
    assume out_$i331 == 1;
    goto corral_source_split_11532;

  $bb263:
    assume {:verifier.code 0} true;
    out_$i331 := $eq.i32(out_$i330, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  corral_source_split_11530:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2822} out_$i330 := __VERIFIER_nondet_int();
    call {:si_unique_call 2823} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i330);
    call {:si_unique_call 2824} {:cexpr "tmp___66"} boogie_si_record_i32(out_$i330);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb261:
    assume out_$i329 == 1;
    goto corral_source_split_11530;

  corral_source_split_11191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    out_$i329 := $ne.i32(out_$i328, 0);
    goto corral_source_split_11191;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    out_$i328 := $M.83;
    goto corral_source_split_11190;

  $bb29:
    assume !(out_$i158 == 1);
    goto corral_source_split_11189;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2827} ldv_stop();
    goto corral_source_split_11540;

  $bb265:
    assume !(out_$i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb274:
    assume !(out_$i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb279:
    assume !(out_$i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    goto $bb280;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 2832} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_11550;

  corral_source_split_11548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2831} out_vslice_dummy_var_275 := rbd_major_show(in_$p68, in_$p66, in_$p64);
    goto corral_source_split_11549;

  $bb278:
    assume out_$i340 == 1;
    goto corral_source_split_11548;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  corral_source_split_11545:
    assume {:verifier.code 0} true;
    out_$i340 := $eq.i32(out_$i339, 1);
    goto corral_source_split_11546;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    out_$i339 := $M.84;
    goto corral_source_split_11545;

  $bb276:
    assume out_$i338 == 1;
    goto corral_source_split_11544;

  $bb275:
    assume {:verifier.code 0} true;
    out_$i338 := $eq.i32(out_$i337, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  corral_source_split_11542:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2828} out_$i337 := __VERIFIER_nondet_int();
    call {:si_unique_call 2829} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i337);
    call {:si_unique_call 2830} {:cexpr "tmp___67"} boogie_si_record_i32(out_$i337);
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb273:
    assume out_$i336 == 1;
    goto corral_source_split_11542;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    out_$i336 := $ne.i32(out_$i335, 0);
    goto corral_source_split_11171;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    out_$i335 := $M.84;
    goto corral_source_split_11170;

  $bb22:
    assume out_$i155 == 1;
    goto corral_source_split_11169;

  $bb21:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    out_$i155 := $slt.i32(out_$i145, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2833} ldv_stop();
    goto corral_source_split_11552;

  $bb277:
    assume !(out_$i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb286:
    assume !(out_$i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb291:
    assume !(out_$i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    goto $bb292;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 2838} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_11563;

  SeqInstr_39:
    goto corral_source_split_11562;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2837} out_vslice_dummy_var_276 := rbd_add_single_major(in_$p70, in_$p71, out_$i348);
    goto SeqInstr_38;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    out_$i348 := $load.i64($M.67, in_$p11);
    goto corral_source_split_11561;

  $bb290:
    assume out_$i347 == 1;
    goto corral_source_split_11560;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    out_$i347 := $eq.i32(out_$i346, 1);
    goto corral_source_split_11558;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    out_$i346 := $M.85;
    goto corral_source_split_11557;

  $bb288:
    assume out_$i345 == 1;
    goto corral_source_split_11556;

  $bb287:
    assume {:verifier.code 0} true;
    out_$i345 := $eq.i32(out_$i344, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  corral_source_split_11554:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2834} out_$i344 := __VERIFIER_nondet_int();
    call {:si_unique_call 2835} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i344);
    call {:si_unique_call 2836} {:cexpr "tmp___68"} boogie_si_record_i32(out_$i344);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb285:
    assume out_$i343 == 1;
    goto corral_source_split_11554;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    out_$i343 := $ne.i32(out_$i342, 0);
    goto corral_source_split_11175;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    out_$i342 := $M.85;
    goto corral_source_split_11174;

  $bb24:
    assume out_$i156 == 1;
    goto corral_source_split_11173;

  $bb23:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    out_$i156 := $slt.i32(out_$i145, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2839} ldv_stop();
    goto corral_source_split_11565;

  $bb289:
    assume !(out_$i345 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb298:
    assume !(out_$i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb303:
    assume !(out_$i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    goto $bb304;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 2844} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_11575;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2843} out_vslice_dummy_var_277 := rbd_size_show(in_$p74, in_$p76, in_$p72);
    goto corral_source_split_11574;

  $bb302:
    assume out_$i355 == 1;
    goto corral_source_split_11573;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    out_$i355 := $eq.i32(out_$i354, 1);
    goto corral_source_split_11571;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    out_$i354 := $M.86;
    goto corral_source_split_11570;

  $bb300:
    assume out_$i353 == 1;
    goto corral_source_split_11569;

  $bb299:
    assume {:verifier.code 0} true;
    out_$i353 := $eq.i32(out_$i352, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb300, $bb301;

  corral_source_split_11567:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2840} out_$i352 := __VERIFIER_nondet_int();
    call {:si_unique_call 2841} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i352);
    call {:si_unique_call 2842} {:cexpr "tmp___69"} boogie_si_record_i32(out_$i352);
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb297:
    assume out_$i351 == 1;
    goto corral_source_split_11567;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    out_$i351 := $ne.i32(out_$i350, 0);
    goto corral_source_split_11179;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    out_$i350 := $M.86;
    goto corral_source_split_11178;

  $bb25:
    assume !(out_$i156 == 1);
    goto corral_source_split_11177;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2845} ldv_stop();
    goto corral_source_split_11577;

  $bb301:
    assume !(out_$i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb310:
    assume !(out_$i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb332:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb322:
    assume !(out_$i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb323;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    goto $bb323;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 2850} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_11598;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2849} out_vslice_dummy_var_278 := rbd_init_request(in_$p83, in_$p82, out_$i366, out_$i367, out_$i368);
    goto corral_source_split_11597;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    out_$i368 := $load.i32($M.67, in_$p15);
    goto corral_source_split_11596;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    out_$i367 := $load.i32($M.67, in_$p12);
    goto corral_source_split_11595;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    out_$i366 := $load.i32($M.67, in_$p14);
    goto corral_source_split_11594;

  $bb321:
    assume out_$i365 == 1;
    goto corral_source_split_11593;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    out_$i365 := $eq.i32(out_$i364, 1);
    goto corral_source_split_11591;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    out_$i364 := $M.87;
    goto corral_source_split_11590;

  $bb319:
    assume out_$i363 == 1;
    goto corral_source_split_11589;

  $bb312:
    assume out_$i360 == 1;
    assume {:verifier.code 0} true;
    out_$i363 := $eq.i32(out_$i359, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb311:
    assume {:verifier.code 0} true;
    out_$i360 := $slt.i32(out_$i359, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  corral_source_split_11579:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2846} out_$i359 := __VERIFIER_nondet_int();
    call {:si_unique_call 2847} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i359);
    call {:si_unique_call 2848} {:cexpr "tmp___70"} boogie_si_record_i32(out_$i359);
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb309:
    assume out_$i358 == 1;
    goto corral_source_split_11579;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb309, $bb310;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    out_$i358 := $ne.i32(out_$i357, 0);
    goto corral_source_split_11159;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    out_$i357 := $M.87;
    goto corral_source_split_11158;

  $bb16:
    assume out_$i152 == 1;
    goto corral_source_split_11157;

  $bb7:
    assume out_$i148 == 1;
    assume {:verifier.code 0} true;
    out_$i152 := $slt.i32(out_$i145, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb6:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    out_$i148 := $slt.i32(out_$i145, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb326:
    assume !(out_$i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  corral_source_split_11603:
    assume {:verifier.code 0} true;
    goto $bb327;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 2852} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_11603;

  corral_source_split_11601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2851} out_vslice_dummy_var_279 := blk_mq_map_queue(in_$p78, out_$i372);
    goto corral_source_split_11602;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    out_$i372 := $load.i32($M.67, in_$p13);
    goto corral_source_split_11601;

  $bb325:
    assume out_$i371 == 1;
    goto corral_source_split_11600;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    out_$i371 := $eq.i32(out_$i370, 1);
    goto corral_source_split_11583;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    out_$i370 := $M.87;
    goto corral_source_split_11582;

  $bb314:
    assume out_$i361 == 1;
    goto corral_source_split_11581;

  $bb313:
    assume !(out_$i360 == 1);
    assume {:verifier.code 0} true;
    out_$i361 := $slt.i32(out_$i359, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb329:
    assume !(out_$i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  corral_source_split_11607:
    assume {:verifier.code 0} true;
    goto $bb330;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 2854} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_11607;

  corral_source_split_11605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2853} out_vslice_dummy_var_280 := rbd_queue_rq(in_$p85, in_$p80);
    goto corral_source_split_11606;

  $bb328:
    assume out_$i375 == 1;
    goto corral_source_split_11605;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  corral_source_split_11586:
    assume {:verifier.code 0} true;
    out_$i375 := $eq.i32(out_$i374, 1);
    goto corral_source_split_11587;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    out_$i374 := $M.87;
    goto corral_source_split_11586;

  $bb316:
    assume out_$i362 == 1;
    goto corral_source_split_11585;

  $bb315:
    assume !(out_$i361 == 1);
    assume {:verifier.code 0} true;
    out_$i362 := $eq.i32(out_$i359, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  corral_source_split_11609:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2855} ldv_stop();
    goto corral_source_split_11609;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb317:
    assume {:verifier.code 0} true;
    assume !(out_$i362 == 1);
    goto $bb318;

  $bb320:
    assume {:verifier.code 0} true;
    assume !(out_$i363 == 1);
    goto $bb318;

  $bb335:
    assume !(out_$i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb342:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb341:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb340:
    assume !(out_$i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    goto $bb341;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 2860} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_11619;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2859} out_vslice_dummy_var_281 := rbd_pool_id_show(in_$p90, in_$p88, in_$p86);
    goto corral_source_split_11618;

  $bb339:
    assume out_$i382 == 1;
    goto corral_source_split_11617;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb339, $bb340;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    out_$i382 := $eq.i32(out_$i381, 1);
    goto corral_source_split_11615;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    out_$i381 := $M.88;
    goto corral_source_split_11614;

  $bb337:
    assume out_$i380 == 1;
    goto corral_source_split_11613;

  $bb336:
    assume {:verifier.code 0} true;
    out_$i380 := $eq.i32(out_$i379, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  corral_source_split_11611:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2856} out_$i379 := __VERIFIER_nondet_int();
    call {:si_unique_call 2857} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i379);
    call {:si_unique_call 2858} {:cexpr "tmp___71"} boogie_si_record_i32(out_$i379);
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb334:
    assume out_$i378 == 1;
    goto corral_source_split_11611;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    out_$i378 := $ne.i32(out_$i377, 0);
    goto corral_source_split_11163;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    out_$i377 := $M.88;
    goto corral_source_split_11162;

  $bb18:
    assume out_$i153 == 1;
    goto corral_source_split_11161;

  $bb17:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    out_$i153 := $slt.i32(out_$i145, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2861} ldv_stop();
    goto corral_source_split_11621;

  $bb338:
    assume !(out_$i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb347:
    assume !(out_$i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb354:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb356:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb352:
    assume !(out_$i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    goto $bb353;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 2866} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11631;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2865} out_vslice_dummy_var_282 := rbd_snap_show(in_$p95, in_$p92, in_$p93);
    goto corral_source_split_11630;

  $bb351:
    assume out_$i389 == 1;
    goto corral_source_split_11629;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb351, $bb352;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    out_$i389 := $eq.i32(out_$i388, 1);
    goto corral_source_split_11627;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    out_$i388 := $M.89;
    goto corral_source_split_11626;

  $bb349:
    assume out_$i387 == 1;
    goto corral_source_split_11625;

  $bb348:
    assume {:verifier.code 0} true;
    out_$i387 := $eq.i32(out_$i386, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb349, $bb350;

  corral_source_split_11623:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2862} out_$i386 := __VERIFIER_nondet_int();
    call {:si_unique_call 2863} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i386);
    call {:si_unique_call 2864} {:cexpr "tmp___72"} boogie_si_record_i32(out_$i386);
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb346:
    assume out_$i385 == 1;
    goto corral_source_split_11623;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    out_$i385 := $ne.i32(out_$i384, 0);
    goto corral_source_split_11167;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    out_$i384 := $M.89;
    goto corral_source_split_11166;

  $bb19:
    assume !(out_$i153 == 1);
    goto corral_source_split_11165;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2867} ldv_stop();
    goto corral_source_split_11633;

  $bb350:
    assume !(out_$i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb359:
    assume !(out_$i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb365:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb364:
    assume !(out_$i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb365;

  corral_source_split_11644:
    assume {:verifier.code 0} true;
    goto $bb365;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 2872} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_11644;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2871} out_vslice_dummy_var_283 := rbd_remove_single_major(in_$p98, in_$p96, out_$i397);
    goto corral_source_split_11643;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    out_$i397 := $load.i64($M.67, in_$p16);
    goto corral_source_split_11642;

  $bb363:
    assume out_$i396 == 1;
    goto corral_source_split_11641;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb363, $bb364;

  corral_source_split_11638:
    assume {:verifier.code 0} true;
    out_$i396 := $eq.i32(out_$i395, 1);
    goto corral_source_split_11639;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    out_$i395 := $M.90;
    goto corral_source_split_11638;

  $bb361:
    assume out_$i394 == 1;
    goto corral_source_split_11637;

  $bb360:
    assume {:verifier.code 0} true;
    out_$i394 := $eq.i32(out_$i393, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  corral_source_split_11635:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2868} out_$i393 := __VERIFIER_nondet_int();
    call {:si_unique_call 2869} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i393);
    call {:si_unique_call 2870} {:cexpr "tmp___73"} boogie_si_record_i32(out_$i393);
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb358:
    assume out_$i392 == 1;
    goto corral_source_split_11635;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    out_$i392 := $ne.i32(out_$i391, 0);
    goto corral_source_split_11147;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    out_$i391 := $M.90;
    goto corral_source_split_11146;

  $bb9:
    assume out_$i149 == 1;
    goto corral_source_split_11145;

  $bb8:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    out_$i149 := $slt.i32(out_$i145, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2873} ldv_stop();
    goto corral_source_split_11646;

  $bb362:
    assume !(out_$i394 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb371:
    assume !(out_$i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb380:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb377:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb376:
    assume !(out_$i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb377;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    goto $bb377;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 2878} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_11656;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2877} out_vslice_dummy_var_284 := rbd_client_id_show(in_$p100, in_$p102, in_$p103);
    goto corral_source_split_11655;

  $bb375:
    assume out_$i404 == 1;
    goto corral_source_split_11654;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb375, $bb376;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    out_$i404 := $eq.i32(out_$i403, 1);
    goto corral_source_split_11652;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    out_$i403 := $M.91;
    goto corral_source_split_11651;

  $bb373:
    assume out_$i402 == 1;
    goto corral_source_split_11650;

  $bb372:
    assume {:verifier.code 0} true;
    out_$i402 := $eq.i32(out_$i401, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  corral_source_split_11648:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2874} out_$i401 := __VERIFIER_nondet_int();
    call {:si_unique_call 2875} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i401);
    call {:si_unique_call 2876} {:cexpr "tmp___74"} boogie_si_record_i32(out_$i401);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb370:
    assume out_$i400 == 1;
    goto corral_source_split_11648;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    out_$i400 := $ne.i32(out_$i399, 0);
    goto corral_source_split_11151;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    out_$i399 := $M.91;
    goto corral_source_split_11150;

  $bb11:
    assume out_$i150 == 1;
    goto corral_source_split_11149;

  $bb10:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    out_$i150 := $slt.i32(out_$i145, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_11658:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2879} ldv_stop();
    goto corral_source_split_11658;

  $bb374:
    assume !(out_$i402 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb383:
    assume !(out_$i407 == 1);
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb389:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb388:
    assume !(out_$i411 == 1);
    assume {:verifier.code 0} true;
    goto $bb389;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    goto $bb389;

  corral_source_split_11668:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2884} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11669;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2883} out_vslice_dummy_var_285 := rbd_image_refresh(in_$p108, in_$p106, in_$p104, out_$i412);
    goto corral_source_split_11668;

  corral_source_split_11666:
    assume {:verifier.code 0} true;
    out_$i412 := $load.i64($M.67, in_$p17);
    goto corral_source_split_11667;

  $bb387:
    assume out_$i411 == 1;
    goto corral_source_split_11666;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb387, $bb388;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    out_$i411 := $eq.i32(out_$i410, 1);
    goto corral_source_split_11664;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    out_$i410 := $M.92;
    goto corral_source_split_11663;

  $bb385:
    assume out_$i409 == 1;
    goto corral_source_split_11662;

  $bb384:
    assume {:verifier.code 0} true;
    out_$i409 := $eq.i32(out_$i408, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb385, $bb386;

  corral_source_split_11660:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2880} out_$i408 := __VERIFIER_nondet_int();
    call {:si_unique_call 2881} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i408);
    call {:si_unique_call 2882} {:cexpr "tmp___75"} boogie_si_record_i32(out_$i408);
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb382:
    assume out_$i407 == 1;
    goto corral_source_split_11660;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    out_$i407 := $ne.i32(out_$i406, 0);
    goto corral_source_split_11155;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    out_$i406 := $M.92;
    goto corral_source_split_11154;

  $bb13:
    assume out_$i151 == 1;
    goto corral_source_split_11153;

  $bb12:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i145, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2885} ldv_stop();
    goto corral_source_split_11671;

  $bb386:
    assume !(out_$i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb391;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2886} ldv_stop();
    goto corral_source_split_11673;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i151 == 1);
    goto $bb15;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i169 == 1);
    goto $bb15;

  $bb64_dummy:
    call {:si_unique_call 1} out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$i273, out_$i274, out_$i275, out_$i277, out_$i278, out_$p279, out_$i280, out_$i281, out_$i282, out_$i284, out_$i285, out_$p286, out_$i287, out_$i288, out_$i289, out_$i291, out_$i292, out_$p293, out_$i294, out_$i295, out_$i296, out_$i298, out_$i299, out_$p300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i355, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i368, out_$i370, out_$i371, out_$i372, out_$i374, out_$i375, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i389, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i406, out_$i407, out_$i408, out_$i409, out_$i410, out_$i411, out_$i412, out_vslice_dummy_var_260, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263, out_vslice_dummy_var_264, out_vslice_dummy_var_265, out_vslice_dummy_var_266, out_vslice_dummy_var_267, out_vslice_dummy_var_268, out_vslice_dummy_var_269, out_vslice_dummy_var_270, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281, out_vslice_dummy_var_282, out_vslice_dummy_var_283, out_vslice_dummy_var_284, out_vslice_dummy_var_285 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p20, in_$p22, in_$p24, in_$p25, in_$p27, in_$p28, in_$p30, in_$p32, in_$p34, in_$p36, in_$p37, in_$p39, in_$p41, in_$p43, in_$p44, in_$p46, in_$p48, in_$p50, in_$p52, in_$p53, in_$p55, in_$p57, in_$p58, in_$p60, in_$p62, in_$p63, in_$p64, in_$p66, in_$p68, in_$p70, in_$p71, in_$p72, in_$p74, in_$p76, in_$p78, in_$p80, in_$p82, in_$p83, in_$p85, in_$p86, in_$p88, in_$p90, in_$p92, in_$p93, in_$p95, in_$p96, in_$p98, in_$p100, in_$p102, in_$p103, in_$p104, in_$p106, in_$p108, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$i273, out_$i274, out_$i275, out_$i277, out_$i278, out_$p279, out_$i280, out_$i281, out_$i282, out_$i284, out_$i285, out_$p286, out_$i287, out_$i288, out_$i289, out_$i291, out_$i292, out_$p293, out_$i294, out_$i295, out_$i296, out_$i298, out_$i299, out_$p300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i355, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i368, out_$i370, out_$i371, out_$i372, out_$i374, out_$i375, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i389, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i406, out_$i407, out_$i408, out_$i409, out_$i410, out_$i411, out_$i412, out_vslice_dummy_var_260, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263, out_vslice_dummy_var_264, out_vslice_dummy_var_265, out_vslice_dummy_var_266, out_vslice_dummy_var_267, out_vslice_dummy_var_268, out_vslice_dummy_var_269, out_vslice_dummy_var_270, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281, out_vslice_dummy_var_282, out_vslice_dummy_var_283, out_vslice_dummy_var_284, out_vslice_dummy_var_285);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$p36: ref, in_$p37: ref, in_$p39: ref, in_$p41: ref, in_$p43: ref, in_$p44: ref, in_$p46: ref, in_$p48: ref, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$p55: ref, in_$p57: ref, in_$p58: ref, in_$p60: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p66: ref, in_$p68: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p74: ref, in_$p76: ref, in_$p78: ref, in_$p80: ref, in_$p82: ref, in_$p83: ref, in_$p85: ref, in_$p86: ref, in_$p88: ref, in_$p90: ref, in_$p92: ref, in_$p93: ref, in_$p95: ref, in_$p96: ref, in_$p98: ref, in_$p100: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p106: ref, in_$p108: ref, in_$i145: i32, in_$i146: i1, in_$i147: i1, in_$i148: i1, in_$i149: i1, in_$i150: i1, in_$i151: i1, in_$i152: i1, in_$i153: i1, in_$i154: i1, in_$i155: i1, in_$i156: i1, in_$i157: i1, in_$i158: i1, in_$i159: i1, in_$i160: i1, in_$i161: i1, in_$i162: i1, in_$i163: i1, in_$i164: i1, in_$i165: i1, in_$i166: i1, in_$i167: i1, in_$i168: i1, in_$i169: i1, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i1, in_$i174: i32, in_$i175: i1, in_$i177: i32, in_$i178: i1, in_$i179: i32, in_$i180: i1, in_$i181: i32, in_$i182: i1, in_$i183: i64, in_$i185: i32, in_$i186: i1, in_$i187: i32, in_$i188: i1, in_$i189: i32, in_$i190: i1, in_$i192: i32, in_$i193: i1, in_$i194: i32, in_$i195: i1, in_$i196: i1, in_$i197: i1, in_$i198: i32, in_$i199: i1, in_$i200: i32, in_$i201: i32, in_$i202: i32, in_$i203: i1, in_$i205: i32, in_$i206: i32, in_$i207: i32, in_$i208: i1, in_$i209: i32, in_$i210: i1, in_$i211: i1, in_$i212: i1, in_$i213: i32, in_$i214: i1, in_$i215: i32, in_$i216: i32, in_$i217: i32, in_$i218: i1, in_$i220: i32, in_$i221: i32, in_$i222: i32, in_$i223: i1, in_$i224: i32, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$i228: i64, in_$i230: i32, in_$i231: i1, in_$i232: i32, in_$i233: i1, in_$i234: i32, in_$i235: i1, in_$i236: i32, in_$i237: i1, in_$i238: i32, in_$i240: i32, in_$i241: i1, in_$i242: i32, in_$i243: i1, in_$i244: i1, in_$i245: i1, in_$i246: i32, in_$i247: i1, in_$i248: i32, in_$i249: i1, in_$i250: i32, in_$i251: i1, in_$i252: i32, in_$i253: i32, in_$i254: i1, in_$i255: i32, in_$i256: i1, in_$i257: i32, in_$i258: i1, in_$i259: i32, in_$i260: i1, in_$i261: i1, in_$i262: i1, in_$i263: i1, in_$i264: i1, in_$i265: i32, in_$i266: i1, in_$i267: i32, in_$i268: i32, in_$i269: i32, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$i273: i32, in_$i274: i32, in_$i275: i64, in_$i277: i32, in_$i278: i1, in_$p279: ref, in_$i280: i32, in_$i281: i32, in_$i282: i64, in_$i284: i32, in_$i285: i1, in_$p286: ref, in_$i287: i32, in_$i288: i32, in_$i289: i64, in_$i291: i32, in_$i292: i1, in_$p293: ref, in_$i294: i32, in_$i295: i32, in_$i296: i64, in_$i298: i32, in_$i299: i1, in_$p300: ref, in_$i301: i32, in_$i302: i32, in_$i303: i32, in_$i304: i1, in_$i305: i32, in_$i306: i32, in_$i307: i32, in_$i308: i1, in_$i309: i32, in_$i310: i1, in_$i311: i32, in_$i312: i1, in_$i314: i32, in_$i315: i1, in_$i316: i32, in_$i317: i1, in_$i318: i32, in_$i319: i1, in_$i321: i32, in_$i322: i1, in_$i323: i32, in_$i324: i1, in_$i325: i32, in_$i326: i1, in_$i328: i32, in_$i329: i1, in_$i330: i32, in_$i331: i1, in_$i332: i32, in_$i333: i1, in_$i335: i32, in_$i336: i1, in_$i337: i32, in_$i338: i1, in_$i339: i32, in_$i340: i1, in_$i342: i32, in_$i343: i1, in_$i344: i32, in_$i345: i1, in_$i346: i32, in_$i347: i1, in_$i348: i64, in_$i350: i32, in_$i351: i1, in_$i352: i32, in_$i353: i1, in_$i354: i32, in_$i355: i1, in_$i357: i32, in_$i358: i1, in_$i359: i32, in_$i360: i1, in_$i361: i1, in_$i362: i1, in_$i363: i1, in_$i364: i32, in_$i365: i1, in_$i366: i32, in_$i367: i32, in_$i368: i32, in_$i370: i32, in_$i371: i1, in_$i372: i32, in_$i374: i32, in_$i375: i1, in_$i377: i32, in_$i378: i1, in_$i379: i32, in_$i380: i1, in_$i381: i32, in_$i382: i1, in_$i384: i32, in_$i385: i1, in_$i386: i32, in_$i387: i1, in_$i388: i32, in_$i389: i1, in_$i391: i32, in_$i392: i1, in_$i393: i32, in_$i394: i1, in_$i395: i32, in_$i396: i1, in_$i397: i64, in_$i399: i32, in_$i400: i1, in_$i401: i32, in_$i402: i1, in_$i403: i32, in_$i404: i1, in_$i406: i32, in_$i407: i1, in_$i408: i32, in_$i409: i1, in_$i410: i32, in_$i411: i1, in_$i412: i64, in_vslice_dummy_var_260: i64, in_vslice_dummy_var_261: i64, in_vslice_dummy_var_262: i64, in_vslice_dummy_var_263: i32, in_vslice_dummy_var_264: i32, in_vslice_dummy_var_265: i64, in_vslice_dummy_var_266: i16, in_vslice_dummy_var_267: i32, in_vslice_dummy_var_268: i32, in_vslice_dummy_var_269: i32, in_vslice_dummy_var_270: i32, in_vslice_dummy_var_271: i64, in_vslice_dummy_var_272: i64, in_vslice_dummy_var_273: i64, in_vslice_dummy_var_274: i64, in_vslice_dummy_var_275: i64, in_vslice_dummy_var_276: i64, in_vslice_dummy_var_277: i64, in_vslice_dummy_var_278: i32, in_vslice_dummy_var_279: ref, in_vslice_dummy_var_280: i32, in_vslice_dummy_var_281: i64, in_vslice_dummy_var_282: i64, in_vslice_dummy_var_283: i64, in_vslice_dummy_var_284: i64, in_vslice_dummy_var_285: i64) returns (out_$i145: i32, out_$i146: i1, out_$i147: i1, out_$i148: i1, out_$i149: i1, out_$i150: i1, out_$i151: i1, out_$i152: i1, out_$i153: i1, out_$i154: i1, out_$i155: i1, out_$i156: i1, out_$i157: i1, out_$i158: i1, out_$i159: i1, out_$i160: i1, out_$i161: i1, out_$i162: i1, out_$i163: i1, out_$i164: i1, out_$i165: i1, out_$i166: i1, out_$i167: i1, out_$i168: i1, out_$i169: i1, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i1, out_$i174: i32, out_$i175: i1, out_$i177: i32, out_$i178: i1, out_$i179: i32, out_$i180: i1, out_$i181: i32, out_$i182: i1, out_$i183: i64, out_$i185: i32, out_$i186: i1, out_$i187: i32, out_$i188: i1, out_$i189: i32, out_$i190: i1, out_$i192: i32, out_$i193: i1, out_$i194: i32, out_$i195: i1, out_$i196: i1, out_$i197: i1, out_$i198: i32, out_$i199: i1, out_$i200: i32, out_$i201: i32, out_$i202: i32, out_$i203: i1, out_$i205: i32, out_$i206: i32, out_$i207: i32, out_$i208: i1, out_$i209: i32, out_$i210: i1, out_$i211: i1, out_$i212: i1, out_$i213: i32, out_$i214: i1, out_$i215: i32, out_$i216: i32, out_$i217: i32, out_$i218: i1, out_$i220: i32, out_$i221: i32, out_$i222: i32, out_$i223: i1, out_$i224: i32, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$i228: i64, out_$i230: i32, out_$i231: i1, out_$i232: i32, out_$i233: i1, out_$i234: i32, out_$i235: i1, out_$i236: i32, out_$i237: i1, out_$i238: i32, out_$i240: i32, out_$i241: i1, out_$i242: i32, out_$i243: i1, out_$i244: i1, out_$i245: i1, out_$i246: i32, out_$i247: i1, out_$i248: i32, out_$i249: i1, out_$i250: i32, out_$i251: i1, out_$i252: i32, out_$i253: i32, out_$i254: i1, out_$i255: i32, out_$i256: i1, out_$i257: i32, out_$i258: i1, out_$i259: i32, out_$i260: i1, out_$i261: i1, out_$i262: i1, out_$i263: i1, out_$i264: i1, out_$i265: i32, out_$i266: i1, out_$i267: i32, out_$i268: i32, out_$i269: i32, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$i273: i32, out_$i274: i32, out_$i275: i64, out_$i277: i32, out_$i278: i1, out_$p279: ref, out_$i280: i32, out_$i281: i32, out_$i282: i64, out_$i284: i32, out_$i285: i1, out_$p286: ref, out_$i287: i32, out_$i288: i32, out_$i289: i64, out_$i291: i32, out_$i292: i1, out_$p293: ref, out_$i294: i32, out_$i295: i32, out_$i296: i64, out_$i298: i32, out_$i299: i1, out_$p300: ref, out_$i301: i32, out_$i302: i32, out_$i303: i32, out_$i304: i1, out_$i305: i32, out_$i306: i32, out_$i307: i32, out_$i308: i1, out_$i309: i32, out_$i310: i1, out_$i311: i32, out_$i312: i1, out_$i314: i32, out_$i315: i1, out_$i316: i32, out_$i317: i1, out_$i318: i32, out_$i319: i1, out_$i321: i32, out_$i322: i1, out_$i323: i32, out_$i324: i1, out_$i325: i32, out_$i326: i1, out_$i328: i32, out_$i329: i1, out_$i330: i32, out_$i331: i1, out_$i332: i32, out_$i333: i1, out_$i335: i32, out_$i336: i1, out_$i337: i32, out_$i338: i1, out_$i339: i32, out_$i340: i1, out_$i342: i32, out_$i343: i1, out_$i344: i32, out_$i345: i1, out_$i346: i32, out_$i347: i1, out_$i348: i64, out_$i350: i32, out_$i351: i1, out_$i352: i32, out_$i353: i1, out_$i354: i32, out_$i355: i1, out_$i357: i32, out_$i358: i1, out_$i359: i32, out_$i360: i1, out_$i361: i1, out_$i362: i1, out_$i363: i1, out_$i364: i32, out_$i365: i1, out_$i366: i32, out_$i367: i32, out_$i368: i32, out_$i370: i32, out_$i371: i1, out_$i372: i32, out_$i374: i32, out_$i375: i1, out_$i377: i32, out_$i378: i1, out_$i379: i32, out_$i380: i1, out_$i381: i32, out_$i382: i1, out_$i384: i32, out_$i385: i1, out_$i386: i32, out_$i387: i1, out_$i388: i32, out_$i389: i1, out_$i391: i32, out_$i392: i1, out_$i393: i32, out_$i394: i1, out_$i395: i32, out_$i396: i1, out_$i397: i64, out_$i399: i32, out_$i400: i1, out_$i401: i32, out_$i402: i1, out_$i403: i32, out_$i404: i1, out_$i406: i32, out_$i407: i1, out_$i408: i32, out_$i409: i1, out_$i410: i32, out_$i411: i1, out_$i412: i64, out_vslice_dummy_var_260: i64, out_vslice_dummy_var_261: i64, out_vslice_dummy_var_262: i64, out_vslice_dummy_var_263: i32, out_vslice_dummy_var_264: i32, out_vslice_dummy_var_265: i64, out_vslice_dummy_var_266: i16, out_vslice_dummy_var_267: i32, out_vslice_dummy_var_268: i32, out_vslice_dummy_var_269: i32, out_vslice_dummy_var_270: i32, out_vslice_dummy_var_271: i64, out_vslice_dummy_var_272: i64, out_vslice_dummy_var_273: i64, out_vslice_dummy_var_274: i64, out_vslice_dummy_var_275: i64, out_vslice_dummy_var_276: i64, out_vslice_dummy_var_277: i64, out_vslice_dummy_var_278: i32, out_vslice_dummy_var_279: ref, out_vslice_dummy_var_280: i32, out_vslice_dummy_var_281: i64, out_vslice_dummy_var_282: i64, out_vslice_dummy_var_283: i64, out_vslice_dummy_var_284: i64, out_vslice_dummy_var_285: i64);
  modifies $M.69, $M.70, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.21, $CurrAddr, $M.13, $M.14, $M.18, $M.20, $M.19, $M.71, $M.77, $M.72, $M.73, $M.74, $M.32, $M.33, $M.34, $M.35, $M.61, $M.56, $M.57, $M.38, $M.39, $M.60, $M.58, $M.40, $M.41, assertsPassed, $M.45, $M.46, $M.47, $M.59, $M.42, $M.43, $M.44, $M.23, $M.25, $M.27, $M.29, $M.76, $M.68, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.78, $M.93, $M.1, $M.37, $M.11, $M.15, $M.22, $M.94, $M.24, $M.26, $M.28, $M.30;



implementation rbd_slab_init_loop_$bb19()
{

  entry:
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb19_dummy;

  $bb19_dummy:
    call {:si_unique_call 1} rbd_slab_init_loop_$bb19();
    return;

  exit:
    return;
}



procedure rbd_slab_init_loop_$bb19();



implementation rbd_slab_init_loop_$bb11()
{

  entry:
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb11_dummy:
    call {:si_unique_call 1} rbd_slab_init_loop_$bb11();
    return;

  exit:
    return;
}



procedure rbd_slab_init_loop_$bb11();



implementation rbd_slab_init_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} rbd_slab_init_loop_$bb3();
    return;

  exit:
    return;
}



procedure rbd_slab_init_loop_$bb3();



implementation rbd_slab_exit_loop_$bb11()
{

  entry:
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb11_dummy:
    call {:si_unique_call 1} rbd_slab_exit_loop_$bb11();
    return;

  exit:
    return;
}



procedure rbd_slab_exit_loop_$bb11();



implementation rbd_slab_exit_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} rbd_slab_exit_loop_$bb7();
    return;

  exit:
    return;
}



procedure rbd_slab_exit_loop_$bb7();



implementation rbd_slab_exit_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} rbd_slab_exit_loop_$bb3();
    return;

  exit:
    return;
}



procedure rbd_slab_exit_loop_$bb3();


