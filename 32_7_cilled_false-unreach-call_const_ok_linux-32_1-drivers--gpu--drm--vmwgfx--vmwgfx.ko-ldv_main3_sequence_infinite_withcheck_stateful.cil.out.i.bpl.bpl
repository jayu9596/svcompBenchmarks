var $M.0: [ref]i8;

var $M.1: i32;

var $M.2: [ref]i32;

var $M.3: [ref]i64;

var $M.4: [ref]i64;

var $M.5: [ref]i8;

var $M.6: [ref]i32;

var $M.7: [ref]i8;

var $M.10: [ref]i32;

var $M.11: [ref]i64;

var $M.12: [ref]i64;

var $M.13: [ref]i8;

var $M.16: [ref]i8;

var $M.24: i64;

var $M.25: i64;

var $M.27: [ref]i64;

var $M.36: i32;

var $M.37: i32;

var $M.38: [ref]ref;

var $M.39: [ref]ref;

var $M.40: [ref]ref;

var $M.41: [ref]ref;

var $M.42: [ref]ref;

var $M.43: [ref]ref;

var $M.44: [ref]ref;

var $M.45: [ref]ref;

var $M.46: [ref]ref;

var $M.47: [ref]ref;

var $M.48: [ref]ref;

var $M.49: [ref]ref;

var $M.50: [ref]ref;

var $M.51: [ref]ref;

var $M.52: [ref]ref;

var $M.53: [ref]ref;

var $M.54: [ref]ref;

var $M.55: [ref]ref;

var $M.56: [ref]ref;

var $M.57: [ref]ref;

var $M.58: [ref]i8;

var $M.59: [ref]i8;

var $M.83: [ref]i32;

var $M.84: [ref]i32;

var $M.85: [ref]i32;

var $M.86: [ref]i32;

var $M.87: [ref]i32;

var $M.88: [ref]i32;

var $M.89: [ref]i64;

var $M.148: [ref]i32;

var $M.149: [ref]i32;

var $M.150: [ref]ref;

var $M.151: [ref]i32;

var $M.212: [ref]ref;

var $M.213: [ref]ref;

var $M.214: [ref]ref;

var $M.215: [ref]i8;

var $M.216: [ref]ref;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 1096056);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_mutex: ref;

axiom ldv_mutex == $sub.ref(0, 1028);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 2056);

const vmw_defio: ref;

axiom vmw_defio == $sub.ref(0, 3184);

const vmw_screen_object_crtc_funcs: ref;

axiom vmw_screen_object_crtc_funcs == $sub.ref(0, 4280);

const vmw_screen_object_encoder_funcs: ref;

axiom vmw_screen_object_encoder_funcs == $sub.ref(0, 5320);

const vmw_legacy_connector_funcs___0: ref;

axiom vmw_legacy_connector_funcs___0 == $sub.ref(0, 6416);

const __key___21: ref;

axiom __key___21 == $sub.ref(0, 7448);

const __key___18: ref;

axiom __key___18 == $sub.ref(0, 8480);

const vmw_legacy_crtc_funcs: ref;

axiom vmw_legacy_crtc_funcs == $sub.ref(0, 9576);

const vmw_legacy_encoder_funcs: ref;

axiom vmw_legacy_encoder_funcs == $sub.ref(0, 10616);

const vmw_legacy_connector_funcs: ref;

axiom vmw_legacy_connector_funcs == $sub.ref(0, 11712);

const vmw_ttm_func: ref;

axiom vmw_ttm_func == $sub.ref(0, 12760);

const {:count 2} gmr_vram_placement_flags: ref;

axiom gmr_vram_placement_flags == $sub.ref(0, 13792);

const {:count 3} evictable_placement_flags: ref;

axiom evictable_placement_flags == $sub.ref(0, 14828);

const vram_ne_placement_flags: ref;

axiom vram_ne_placement_flags == $sub.ref(0, 15856);

const sys_placement_flags: ref;

axiom sys_placement_flags == $sub.ref(0, 16884);

const gmr_ne_placement_flags: ref;

axiom gmr_ne_placement_flags == $sub.ref(0, 17912);

const {:count 2} vram_gmr_ne_placement_flags: ref;

axiom vram_gmr_ne_placement_flags == $sub.ref(0, 18944);

const gmr_placement_flags: ref;

axiom gmr_placement_flags == $sub.ref(0, 19972);

const {:count 2} vram_gmr_placement_flags: ref;

axiom vram_gmr_placement_flags == $sub.ref(0, 21004);

const vram_placement_flags: ref;

axiom vram_placement_flags == $sub.ref(0, 22032);

const {:count 121} vmw_sf_bpp: ref;

axiom vmw_sf_bpp == $sub.ref(0, 23298);

const vmw_fb_ops: ref;

axiom vmw_fb_ops == $sub.ref(0, 24514);

const __key___11: ref;

axiom __key___11 == $sub.ref(0, 25546);

const __key___10: ref;

axiom __key___10 == $sub.ref(0, 26578);

const __key___9: ref;

axiom __key___9 == $sub.ref(0, 27610);

const __key___8: ref;

axiom __key___8 == $sub.ref(0, 28642);

const __key___7: ref;

axiom __key___7 == $sub.ref(0, 29674);

const __key___6: ref;

axiom __key___6 == $sub.ref(0, 30706);

const __key___5: ref;

axiom __key___5 == $sub.ref(0, 31738);

const __key___4: ref;

axiom __key___4 == $sub.ref(0, 32770);

const vmw_pm_ops: ref;

axiom vmw_pm_ops == $sub.ref(0, 33978);

const {:count 2} vmw_pci_id_list: ref;

axiom vmw_pci_id_list == $sub.ref(0, 35066);

const vmw_pci_driver: ref;

axiom vmw_pci_driver == $sub.ref(0, 36338);

const vmwgfx_driver_fops: ref;

axiom vmwgfx_driver_fops == $sub.ref(0, 37570);

const {:count 21} vmw_ioctls: ref;

axiom vmw_ioctls == $sub.ref(0, 39098);

const driver: ref;

axiom driver == $sub.ref(0, 40586);

const {:count 13} __param_str_enable_fbdev: ref;

axiom __param_str_enable_fbdev == $sub.ref(0, 41623);

const vmw_framebuffer_surface_funcs: ref;

axiom vmw_framebuffer_surface_funcs == $sub.ref(0, 42671);

const vmw_framebuffer_dmabuf_funcs: ref;

axiom vmw_framebuffer_dmabuf_funcs == $sub.ref(0, 43719);

const {:count 19} vmw_kms_connector_builtin: ref;

axiom vmw_kms_connector_builtin == $sub.ref(0, 48847);

const vmw_kms_funcs: ref;

axiom vmw_kms_funcs == $sub.ref(0, 49887);

const {:count 1082} vmw_cmd_funcs: ref;

axiom vmw_cmd_funcs == $sub.ref(0, 59567);

const __key___20: ref;

axiom __key___20 == $sub.ref(0, 60599);

const __key___19: ref;

axiom __key___19 == $sub.ref(0, 61631);

const __key___17: ref;

axiom __key___17 == $sub.ref(0, 62663);

const __key___16: ref;

axiom __key___16 == $sub.ref(0, 63695);

const __key___15: ref;

axiom __key___15 == $sub.ref(0, 64727);

const __key___14: ref;

axiom __key___14 == $sub.ref(0, 65759);

const __key___13: ref;

axiom __key___13 == $sub.ref(0, 66791);

const vmw_user_stream_size: ref;

axiom vmw_user_stream_size == $sub.ref(0, 67823);

const vmw_user_surface_size: ref;

axiom vmw_user_surface_size == $sub.ref(0, 68855);

const vmw_user_context_size: ref;

axiom vmw_user_context_size == $sub.ref(0, 69887);

const __key___12: ref;

axiom __key___12 == $sub.ref(0, 70919);

const res_vmw_probe_29: ref;

axiom res_vmw_probe_29 == $sub.ref(0, 71947);

const res_vmw_driver_open_12: ref;

axiom res_vmw_driver_open_12 == $sub.ref(0, 72975);

const enable_fbdev: ref;

axiom enable_fbdev == $sub.ref(0, 74003);

const vmw_gmrid_manager_func: ref;

axiom vmw_gmrid_manager_func == $sub.ref(0, 75067);

const vmw_bo_driver: ref;

axiom vmw_bo_driver == $sub.ref(0, 76235);

const vmw_srf_placement: ref;

axiom vmw_srf_placement == $sub.ref(0, 77299);

const vmw_evictable_placement: ref;

axiom vmw_evictable_placement == $sub.ref(0, 78363);

const vmw_sys_placement: ref;

axiom vmw_sys_placement == $sub.ref(0, 79427);

const vmw_vram_ne_placement: ref;

axiom vmw_vram_ne_placement == $sub.ref(0, 80491);

const vmw_vram_sys_placement: ref;

axiom vmw_vram_sys_placement == $sub.ref(0, 81555);

const vmw_vram_gmr_ne_placement: ref;

axiom vmw_vram_gmr_ne_placement == $sub.ref(0, 82619);

const vmw_vram_gmr_placement: ref;

axiom vmw_vram_gmr_placement == $sub.ref(0, 83683);

const vmw_vram_placement: ref;

axiom vmw_vram_placement == $sub.ref(0, 84747);

const {:count 16} __mod_version1209: ref;

axiom __mod_version1209 == $sub.ref(0, 85787);

const {:count 34} __mod_license1205: ref;

axiom __mod_license1205 == $sub.ref(0, 86845);

const {:count 61} __mod_description1204: ref;

axiom __mod_description1204 == $sub.ref(0, 87930);

const {:count 30} __mod_author1203: ref;

axiom __mod_author1203 == $sub.ref(0, 88984);

const {:count 26} __mod_enable_fbdevtype195: ref;

axiom __mod_enable_fbdevtype195 == $sub.ref(0, 90034);

const __param_enable_fbdev: ref;

axiom __param_enable_fbdev == $sub.ref(0, 91090);

const {:count 38} __mod_enable_fbdev194: ref;

axiom __mod_enable_fbdev194 == $sub.ref(0, 92152);

const {:count 19} .str.248: ref;

axiom .str.248 == $sub.ref(0, 93195);

const {:count 22} .str.12: ref;

axiom .str.12 == $sub.ref(0, 94241);

const {:count 184} .str.85: ref;

axiom .str.85 == $sub.ref(0, 95449);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 27} .str.268: ref;

axiom .str.268 == $sub.ref(0, 96500);

const {:count 20} .str.269: ref;

axiom .str.269 == $sub.ref(0, 97544);

const {:count 21} .str.89: ref;

axiom .str.89 == $sub.ref(0, 98589);

const {:count 27} .str.270: ref;

axiom .str.270 == $sub.ref(0, 99640);

const param_ops_int: ref;

axiom param_ops_int == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 21} .str.257: ref;

axiom .str.257 == $sub.ref(0, 100685);

const {:count 185} .str.108: ref;

axiom .str.108 == $sub.ref(0, 101894);

const ttm_bo_manager_func: ref;

axiom ttm_bo_manager_func == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 18} .str.77: ref;

axiom .str.77 == $sub.ref(0, 102936);

const {:count 28} .str.78: ref;

axiom .str.78 == $sub.ref(0, 103988);

const {:count 56} .str.283: ref;

axiom .str.283 == $sub.ref(0, 105068);

const {:count 22} .str.282: ref;

axiom .str.282 == $sub.ref(0, 106114);

const {:count 30} .str.157: ref;

axiom .str.157 == $sub.ref(0, 107168);

const {:count 33} .str.151: ref;

axiom .str.151 == $sub.ref(0, 108225);

const {:count 18} .str.142: ref;

axiom .str.142 == $sub.ref(0, 109267);

const {:count 53} .str.143: ref;

axiom .str.143 == $sub.ref(0, 110344);

const {:count 29} .str.144: ref;

axiom .str.144 == $sub.ref(0, 111397);

const {:count 21} .str.64: ref;

axiom .str.64 == $sub.ref(0, 112442);

const {:count 36} .str.65: ref;

axiom .str.65 == $sub.ref(0, 113502);

const {:count 188} .str.61: ref;

axiom .str.61 == $sub.ref(0, 114714);

const {:count 18} .str.62: ref;

axiom .str.62 == $sub.ref(0, 115756);

const {:count 51} .str.63: ref;

axiom .str.63 == $sub.ref(0, 116831);

const .str: ref;

axiom .str == $sub.ref(0, 118051);

const {:count 27} .str.1: ref;

axiom .str.1 == $sub.ref(0, 119102);

const {:count 34} .str.2: ref;

axiom .str.2 == $sub.ref(0, 120160);

const {:count 18} .str.88: ref;

axiom .str.88 == $sub.ref(0, 121202);

const {:count 14} .str.284: ref;

axiom .str.284 == $sub.ref(0, 122240);

const {:count 24} .str.58: ref;

axiom .str.58 == $sub.ref(0, 123288);

const {:count 34} .str.59: ref;

axiom .str.59 == $sub.ref(0, 124346);

const {:count 53} .str.60: ref;

axiom .str.60 == $sub.ref(0, 125423);

const {:count 24} .str.137: ref;

axiom .str.137 == $sub.ref(0, 126471);

const {:count 35} .str.138: ref;

axiom .str.138 == $sub.ref(0, 127530);

const {:count 48} .str.139: ref;

axiom .str.139 == $sub.ref(0, 128602);

const {:count 24} .str.140: ref;

axiom .str.140 == $sub.ref(0, 129650);

const {:count 52} .str.141: ref;

axiom .str.141 == $sub.ref(0, 130726);

const {:count 42} .str.74: ref;

axiom .str.74 == $sub.ref(0, 131792);

const {:count 28} .str.155: ref;

axiom .str.155 == $sub.ref(0, 132844);

const {:count 25} .str.156: ref;

axiom .str.156 == $sub.ref(0, 133893);

const {:count 13} .str.152: ref;

axiom .str.152 == $sub.ref(0, 134930);

const {:count 40} .str.153: ref;

axiom .str.153 == $sub.ref(0, 135994);

const {:count 33} .str.154: ref;

axiom .str.154 == $sub.ref(0, 137051);

const {:count 22} .str.150: ref;

axiom .str.150 == $sub.ref(0, 138097);

const {:count 18} .str.148: ref;

axiom .str.148 == $sub.ref(0, 139139);

const {:count 34} .str.149: ref;

axiom .str.149 == $sub.ref(0, 140197);

const {:count 12} .str.145: ref;

axiom .str.145 == $sub.ref(0, 141233);

const {:count 24} .str.146: ref;

axiom .str.146 == $sub.ref(0, 142281);

const {:count 28} .str.147: ref;

axiom .str.147 == $sub.ref(0, 143333);

const {:count 21} .str.18: ref;

axiom .str.18 == $sub.ref(0, 144378);

const {:count 47} .str.19: ref;

axiom .str.19 == $sub.ref(0, 145449);

const {:count 42} .str.20: ref;

axiom .str.20 == $sub.ref(0, 146515);

const {:count 36} .str.21: ref;

axiom .str.21 == $sub.ref(0, 147575);

const {:count 44} .str.22: ref;

axiom .str.22 == $sub.ref(0, 148643);

const {:count 16} .str.14: ref;

axiom .str.14 == $sub.ref(0, 149683);

const {:count 18} .str.170: ref;

axiom .str.170 == $sub.ref(0, 150725);

const {:count 44} .str.171: ref;

axiom .str.171 == $sub.ref(0, 151793);

const {:count 46} .str.172: ref;

axiom .str.172 == $sub.ref(0, 152863);

const {:count 183} .str.23: ref;

axiom .str.23 == $sub.ref(0, 154070);

const {:count 38} .str.173: ref;

axiom .str.173 == $sub.ref(0, 155132);

const {:count 32} .str.179: ref;

axiom .str.179 == $sub.ref(0, 156188);

const {:count 53} .str.180: ref;

axiom .str.180 == $sub.ref(0, 157265);

const {:count 25} .str.177: ref;

axiom .str.177 == $sub.ref(0, 158314);

const {:count 44} .str.181: ref;

axiom .str.181 == $sub.ref(0, 159382);

const {:count 32} .str.182: ref;

axiom .str.182 == $sub.ref(0, 160438);

const {:count 31} .str.174: ref;

axiom .str.174 == $sub.ref(0, 161493);

const {:count 60} .str.175: ref;

axiom .str.175 == $sub.ref(0, 162577);

const {:count 32} .str.176: ref;

axiom .str.176 == $sub.ref(0, 163633);

const {:count 31} .str.178: ref;

axiom .str.178 == $sub.ref(0, 164688);

const {:count 186} .str.119: ref;

axiom .str.119 == $sub.ref(0, 165898);

const {:count 26} .str.86: ref;

axiom .str.86 == $sub.ref(0, 166948);

const {:count 36} .str.87: ref;

axiom .str.87 == $sub.ref(0, 168008);

const {:count 24} .str.160: ref;

axiom .str.160 == $sub.ref(0, 169056);

const {:count 46} .str.161: ref;

axiom .str.161 == $sub.ref(0, 170126);

const {:count 51} .str.99: ref;

axiom .str.99 == $sub.ref(0, 171201);

const {:count 23} .str.100: ref;

axiom .str.100 == $sub.ref(0, 172248);

const .str.222: ref;

axiom .str.222 == $sub.ref(0, 173273);

const {:count 5} .str.279: ref;

axiom .str.279 == $sub.ref(0, 174302);

const {:count 4} .str.30: ref;

axiom .str.30 == $sub.ref(0, 175330);

const {:count 26} .str.280: ref;

axiom .str.280 == $sub.ref(0, 176380);

const {:count 33} .str.281: ref;

axiom .str.281 == $sub.ref(0, 177437);

const {:count 187} .str.98: ref;

axiom .str.98 == $sub.ref(0, 178648);

const {:count 49} .str.101: ref;

axiom .str.101 == $sub.ref(0, 179721);

const {:count 22} .str.102: ref;

axiom .str.102 == $sub.ref(0, 180767);

const {:count 20} .str.167: ref;

axiom .str.167 == $sub.ref(0, 181811);

const {:count 42} .str.168: ref;

axiom .str.168 == $sub.ref(0, 182877);

const {:count 20} .str.5: ref;

axiom .str.5 == $sub.ref(0, 183921);

const {:count 26} .str.6: ref;

axiom .str.6 == $sub.ref(0, 184971);

const {:count 43} .str.7: ref;

axiom .str.7 == $sub.ref(0, 186038);

const {:count 28} .str.3: ref;

axiom .str.3 == $sub.ref(0, 187090);

const {:count 28} .str.4: ref;

axiom .str.4 == $sub.ref(0, 188142);

const {:count 23} .str.124: ref;

axiom .str.124 == $sub.ref(0, 189189);

const {:count 27} .str.159: ref;

axiom .str.159 == $sub.ref(0, 190240);

const {:count 35} .str.158: ref;

axiom .str.158 == $sub.ref(0, 191299);

const {:count 18} .str.129: ref;

axiom .str.129 == $sub.ref(0, 192341);

const {:count 31} .str.130: ref;

axiom .str.130 == $sub.ref(0, 193396);

const {:count 14} .str.131: ref;

axiom .str.131 == $sub.ref(0, 194434);

const {:count 38} .str.132: ref;

axiom .str.132 == $sub.ref(0, 195496);

const {:count 21} .str.133: ref;

axiom .str.133 == $sub.ref(0, 196541);

const {:count 31} .str.134: ref;

axiom .str.134 == $sub.ref(0, 197596);

const {:count 43} .str.135: ref;

axiom .str.135 == $sub.ref(0, 198663);

const {:count 31} .str.136: ref;

axiom .str.136 == $sub.ref(0, 199718);

const {:count 94} .str.127: ref;

axiom .str.127 == $sub.ref(0, 200836);

const {:count 27} .str.128: ref;

axiom .str.128 == $sub.ref(0, 201887);

const {:count 22} .str.125: ref;

axiom .str.125 == $sub.ref(0, 202933);

const {:count 43} .str.126: ref;

axiom .str.126 == $sub.ref(0, 204000);

const {:count 23} .str.169: ref;

axiom .str.169 == $sub.ref(0, 205047);

const {:count 20} .str.166: ref;

axiom .str.166 == $sub.ref(0, 206091);

const {:count 21} .str.164: ref;

axiom .str.164 == $sub.ref(0, 207136);

const {:count 41} .str.25: ref;

axiom .str.25 == $sub.ref(0, 208201);

const {:count 37} .str.165: ref;

axiom .str.165 == $sub.ref(0, 209262);

const {:count 7} .str.189: ref;

axiom .str.189 == $sub.ref(0, 210293);

const {:count 45} .str.190: ref;

axiom .str.190 == $sub.ref(0, 211362);

const {:count 9} .str.191: ref;

axiom .str.191 == $sub.ref(0, 212395);

const {:count 16} .str.246: ref;

axiom .str.246 == $sub.ref(0, 213435);

const {:count 34} .str.247: ref;

axiom .str.247 == $sub.ref(0, 214493);

const {:count 38} .str.245: ref;

axiom .str.245 == $sub.ref(0, 215555);

const {:count 10} .str.39: ref;

axiom .str.39 == $sub.ref(0, 216589);

const {:count 40} .str.40: ref;

axiom .str.40 == $sub.ref(0, 217653);

const {:count 182} .str.41: ref;

axiom .str.41 == $sub.ref(0, 218859);

const {:count 19} .str.28: ref;

axiom .str.28 == $sub.ref(0, 219902);

const {:count 46} .str.29: ref;

axiom .str.29 == $sub.ref(0, 220972);

const {:count 183} .str.36: ref;

axiom .str.36 == $sub.ref(0, 222179);

const {:count 15} .str.244: ref;

axiom .str.244 == $sub.ref(0, 223218);

const {:count 19} .str.183: ref;

axiom .str.183 == $sub.ref(0, 224261);

const {:count 28} .str.184: ref;

axiom .str.184 == $sub.ref(0, 225313);

const {:count 27} .str.185: ref;

axiom .str.185 == $sub.ref(0, 226364);

const {:count 32} .str.186: ref;

axiom .str.186 == $sub.ref(0, 227420);

const {:count 18} .str.79: ref;

axiom .str.79 == $sub.ref(0, 228462);

const {:count 13} .str.80: ref;

axiom .str.80 == $sub.ref(0, 229499);

const {:count 19} .str.81: ref;

axiom .str.81 == $sub.ref(0, 230542);

const {:count 20} .str.82: ref;

axiom .str.82 == $sub.ref(0, 231586);

const {:count 17} .str.83: ref;

axiom .str.83 == $sub.ref(0, 232627);

const {:count 48} .str.84: ref;

axiom .str.84 == $sub.ref(0, 233699);

const {:count 23} .str.105: ref;

axiom .str.105 == $sub.ref(0, 234746);

const {:count 24} .str.243: ref;

axiom .str.243 == $sub.ref(0, 235794);

const {:count 30} .str.90: ref;

axiom .str.90 == $sub.ref(0, 236848);

const {:count 183} .str.92: ref;

axiom .str.92 == $sub.ref(0, 238055);

const {:count 16} .str.196: ref;

axiom .str.196 == $sub.ref(0, 239095);

const {:count 44} .str.197: ref;

axiom .str.197 == $sub.ref(0, 240163);

const {:count 20} .str.198: ref;

axiom .str.198 == $sub.ref(0, 241207);

const {:count 24} .str.199: ref;

axiom .str.199 == $sub.ref(0, 242255);

const {:count 25} .str.200: ref;

axiom .str.200 == $sub.ref(0, 243304);

const {:count 25} .str.201: ref;

axiom .str.201 == $sub.ref(0, 244353);

const {:count 22} .str.202: ref;

axiom .str.202 == $sub.ref(0, 245399);

const {:count 23} .str.203: ref;

axiom .str.203 == $sub.ref(0, 246446);

const {:count 22} .str.204: ref;

axiom .str.204 == $sub.ref(0, 247492);

const {:count 26} .str.205: ref;

axiom .str.205 == $sub.ref(0, 248542);

const {:count 28} .str.206: ref;

axiom .str.206 == $sub.ref(0, 249594);

const {:count 36} .str.207: ref;

axiom .str.207 == $sub.ref(0, 250654);

const {:count 40} .str.208: ref;

axiom .str.208 == $sub.ref(0, 251718);

const {:count 60} .str.209: ref;

axiom .str.209 == $sub.ref(0, 252802);

const {:count 40} .str.210: ref;

axiom .str.210 == $sub.ref(0, 253866);

const {:count 40} .str.211: ref;

axiom .str.211 == $sub.ref(0, 254930);

const {:count 47} .str.212: ref;

axiom .str.212 == $sub.ref(0, 256001);

const {:count 46} .str.213: ref;

axiom .str.213 == $sub.ref(0, 257071);

const {:count 79} .str.214: ref;

axiom .str.214 == $sub.ref(0, 258174);

const {:count 22} .str.215: ref;

axiom .str.215 == $sub.ref(0, 259220);

const {:count 27} .str.216: ref;

axiom .str.216 == $sub.ref(0, 260271);

const {:count 45} .str.217: ref;

axiom .str.217 == $sub.ref(0, 261340);

const {:count 13} .str.218: ref;

axiom .str.218 == $sub.ref(0, 262377);

const {:count 71} .str.219: ref;

axiom .str.219 == $sub.ref(0, 263472);

const {:count 21} .str.220: ref;

axiom .str.220 == $sub.ref(0, 264517);

const {:count 42} .str.221: ref;

axiom .str.221 == $sub.ref(0, 265583);

const {:count 4} .str.223: ref;

axiom .str.223 == $sub.ref(0, 266611);

const {:count 45} .str.224: ref;

axiom .str.224 == $sub.ref(0, 267680);

const {:count 27} .str.225: ref;

axiom .str.225 == $sub.ref(0, 268731);

const {:count 10} .str.37: ref;

axiom .str.37 == $sub.ref(0, 269765);

const {:count 27} .str.38: ref;

axiom .str.38 == $sub.ref(0, 270816);

const {:count 44} .str.103: ref;

axiom .str.103 == $sub.ref(0, 271884);

const {:count 16} .str.104: ref;

axiom .str.104 == $sub.ref(0, 272924);

const {:count 32} .str.91: ref;

axiom .str.91 == $sub.ref(0, 273980);

const {:count 32} .str.120: ref;

axiom .str.120 == $sub.ref(0, 275036);

const {:count 64} .str.121: ref;

axiom .str.121 == $sub.ref(0, 276124);

const {:count 44} .str.122: ref;

axiom .str.122 == $sub.ref(0, 277192);

const {:count 22} .str.106: ref;

axiom .str.106 == $sub.ref(0, 278238);

const {:count 22} .str.107: ref;

axiom .str.107 == $sub.ref(0, 279284);

const {:count 20} .str.95: ref;

axiom .str.95 == $sub.ref(0, 280328);

const {:count 42} .str.96: ref;

axiom .str.96 == $sub.ref(0, 281394);

const {:count 39} .str.97: ref;

axiom .str.97 == $sub.ref(0, 282457);

const {:count 23} .str.278: ref;

axiom .str.278 == $sub.ref(0, 283504);

const {:count 24} .str.226: ref;

axiom .str.226 == $sub.ref(0, 284552);

const {:count 23} .str.227: ref;

axiom .str.227 == $sub.ref(0, 285599);

const {:count 20} .str.228: ref;

axiom .str.228 == $sub.ref(0, 286643);

const {:count 27} .str.229: ref;

axiom .str.229 == $sub.ref(0, 287694);

const {:count 29} .str.230: ref;

axiom .str.230 == $sub.ref(0, 288747);

const {:count 28} .str.231: ref;

axiom .str.231 == $sub.ref(0, 289799);

const {:count 26} .str.232: ref;

axiom .str.232 == $sub.ref(0, 290849);

const {:count 16} .str.233: ref;

axiom .str.233 == $sub.ref(0, 291889);

const {:count 27} .str.234: ref;

axiom .str.234 == $sub.ref(0, 292940);

const {:count 22} .str.235: ref;

axiom .str.235 == $sub.ref(0, 293986);

const {:count 23} .str.236: ref;

axiom .str.236 == $sub.ref(0, 295033);

const {:count 22} .str.237: ref;

axiom .str.237 == $sub.ref(0, 296079);

const {:count 30} .str.238: ref;

axiom .str.238 == $sub.ref(0, 297133);

const {:count 17} .str.239: ref;

axiom .str.239 == $sub.ref(0, 298174);

const {:count 20} .str.240: ref;

axiom .str.240 == $sub.ref(0, 299218);

const {:count 18} .str.241: ref;

axiom .str.241 == $sub.ref(0, 300260);

const {:count 29} .str.242: ref;

axiom .str.242 == $sub.ref(0, 301313);

const {:count 28} .str.33: ref;

axiom .str.33 == $sub.ref(0, 302365);

const {:count 22} .str.34: ref;

axiom .str.34 == $sub.ref(0, 303411);

const {:count 21} .str.35: ref;

axiom .str.35 == $sub.ref(0, 304456);

const {:count 27} .str.53: ref;

axiom .str.53 == $sub.ref(0, 305507);

const {:count 39} .str.54: ref;

axiom .str.54 == $sub.ref(0, 306570);

const {:count 36} .str.50: ref;

axiom .str.50 == $sub.ref(0, 307630);

const {:count 43} .str.51: ref;

axiom .str.51 == $sub.ref(0, 308697);

const {:count 25} .str.52: ref;

axiom .str.52 == $sub.ref(0, 309746);

const {:count 32} .str.55: ref;

axiom .str.55 == $sub.ref(0, 310802);

const {:count 17} .str.27: ref;

axiom .str.27 == $sub.ref(0, 311843);

const {:count 43} .str.26: ref;

axiom .str.26 == $sub.ref(0, 312910);

const {:count 18} .str.48: ref;

axiom .str.48 == $sub.ref(0, 313952);

const {:count 39} .str.49: ref;

axiom .str.49 == $sub.ref(0, 315015);

const {:count 16} .str.24: ref;

axiom .str.24 == $sub.ref(0, 316055);

const {:count 22} .str.114: ref;

axiom .str.114 == $sub.ref(0, 317101);

const {:count 50} .str.115: ref;

axiom .str.115 == $sub.ref(0, 318175);

const {:count 37} .str.116: ref;

axiom .str.116 == $sub.ref(0, 319236);

const {:count 37} .str.117: ref;

axiom .str.117 == $sub.ref(0, 320297);

const {:count 34} .str.118: ref;

axiom .str.118 == $sub.ref(0, 321355);

const {:count 30} .str.111: ref;

axiom .str.111 == $sub.ref(0, 322409);

const {:count 47} .str.112: ref;

axiom .str.112 == $sub.ref(0, 323480);

const {:count 30} .str.113: ref;

axiom .str.113 == $sub.ref(0, 324534);

const {:count 56} .str.110: ref;

axiom .str.110 == $sub.ref(0, 325614);

const {:count 46} .str.109: ref;

axiom .str.109 == $sub.ref(0, 326684);

const {:count 21} .str.44: ref;

axiom .str.44 == $sub.ref(0, 327729);

const {:count 30} .str.45: ref;

axiom .str.45 == $sub.ref(0, 328783);

const {:count 47} .str.46: ref;

axiom .str.46 == $sub.ref(0, 329854);

const {:count 32} .str.47: ref;

axiom .str.47 == $sub.ref(0, 330910);

const {:count 18} .str.8: ref;

axiom .str.8 == $sub.ref(0, 331952);

const {:count 28} .str.9: ref;

axiom .str.9 == $sub.ref(0, 333004);

const {:count 64} .str.10: ref;

axiom .str.10 == $sub.ref(0, 334092);

const {:count 24} .str.11: ref;

axiom .str.11 == $sub.ref(0, 335140);

const {:count 28} .str.70: ref;

axiom .str.70 == $sub.ref(0, 336192);

const {:count 38} .str.71: ref;

axiom .str.71 == $sub.ref(0, 337254);

const {:count 41} .str.72: ref;

axiom .str.72 == $sub.ref(0, 338319);

const {:count 27} .str.73: ref;

axiom .str.73 == $sub.ref(0, 339370);

const {:count 25} .str.66: ref;

axiom .str.66 == $sub.ref(0, 340419);

const {:count 46} .str.67: ref;

axiom .str.67 == $sub.ref(0, 341489);

const {:count 33} .str.68: ref;

axiom .str.68 == $sub.ref(0, 342546);

const {:count 25} .str.69: ref;

axiom .str.69 == $sub.ref(0, 343595);

const {:count 23} .str.263: ref;

axiom .str.263 == $sub.ref(0, 344642);

const {:count 54} .str.262: ref;

axiom .str.262 == $sub.ref(0, 345720);

const {:count 25} .str.56: ref;

axiom .str.56 == $sub.ref(0, 346769);

const {:count 46} .str.57: ref;

axiom .str.57 == $sub.ref(0, 347839);

const {:count 17} .str.258: ref;

axiom .str.258 == $sub.ref(0, 348880);

const {:count 35} .str.259: ref;

axiom .str.259 == $sub.ref(0, 349939);

const {:count 24} .str.260: ref;

axiom .str.260 == $sub.ref(0, 350987);

const {:count 23} .str.261: ref;

axiom .str.261 == $sub.ref(0, 352034);

const {:count 23} .str.75: ref;

axiom .str.75 == $sub.ref(0, 353081);

const {:count 45} .str.76: ref;

axiom .str.76 == $sub.ref(0, 354150);

const {:count 22} .str.264: ref;

axiom .str.264 == $sub.ref(0, 355196);

const {:count 16} .str.265: ref;

axiom .str.265 == $sub.ref(0, 356236);

const {:count 20} .str.266: ref;

axiom .str.266 == $sub.ref(0, 357280);

const {:count 19} .str.267: ref;

axiom .str.267 == $sub.ref(0, 358323);

const {:count 19} .str.42: ref;

axiom .str.42 == $sub.ref(0, 359366);

const {:count 38} .str.43: ref;

axiom .str.43 == $sub.ref(0, 360428);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 9} .str.93: ref;

axiom .str.93 == $sub.ref(0, 361461);

const {:count 41} .str.94: ref;

axiom .str.94 == $sub.ref(0, 362526);

const {:count 19} .str.194: ref;

axiom .str.194 == $sub.ref(0, 363569);

const {:count 34} .str.195: ref;

axiom .str.195 == $sub.ref(0, 364627);

const {:count 68} .str.193: ref;

axiom .str.193 == $sub.ref(0, 365719);

const {:count 17} .str.254: ref;

axiom .str.254 == $sub.ref(0, 366760);

const {:count 15} .str.255: ref;

axiom .str.255 == $sub.ref(0, 367799);

const {:count 23} .str.256: ref;

axiom .str.256 == $sub.ref(0, 368846);

const {:count 17} .str.249: ref;

axiom .str.249 == $sub.ref(0, 369887);

const {:count 13} .str.250: ref;

axiom .str.250 == $sub.ref(0, 370924);

const {:count 15} .str.251: ref;

axiom .str.251 == $sub.ref(0, 371963);

const {:count 49} .str.252: ref;

axiom .str.252 == $sub.ref(0, 373036);

const {:count 43} .str.253: ref;

axiom .str.253 == $sub.ref(0, 374103);

const {:count 16} .str.162: ref;

axiom .str.162 == $sub.ref(0, 375143);

const {:count 21} .str.163: ref;

axiom .str.163 == $sub.ref(0, 376188);

const kernel_stack: ref;

axiom kernel_stack == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 24} .str.271: ref;

axiom .str.271 == $sub.ref(0, 377236);

const {:count 20} .str.272: ref;

axiom .str.272 == $sub.ref(0, 378280);

const {:count 31} .str.273: ref;

axiom .str.273 == $sub.ref(0, 379335);

const {:count 37} .str.274: ref;

axiom .str.274 == $sub.ref(0, 380396);

const {:count 28} .str.275: ref;

axiom .str.275 == $sub.ref(0, 381448);

const {:count 20} .str.276: ref;

axiom .str.276 == $sub.ref(0, 382492);

const {:count 31} .str.277: ref;

axiom .str.277 == $sub.ref(0, 383547);

const {:count 25} .str.13: ref;

axiom .str.13 == $sub.ref(0, 384596);

const {:count 22} .str.31: ref;

axiom .str.31 == $sub.ref(0, 385642);

const {:count 37} .str.32: ref;

axiom .str.32 == $sub.ref(0, 386703);

const {:count 23} .str.15: ref;

axiom .str.15 == $sub.ref(0, 387750);

const {:count 38} .str.16: ref;

axiom .str.16 == $sub.ref(0, 388812);

const {:count 33} .str.17: ref;

axiom .str.17 == $sub.ref(0, 389869);

const {:count 184} .str.123: ref;

axiom .str.123 == $sub.ref(0, 391077);

const {:count 24} .str.285: ref;

axiom .str.285 == $sub.ref(0, 392125);

const {:count 20} .str.288: ref;

axiom .str.288 == $sub.ref(0, 393169);

const {:count 21} .str.286: ref;

axiom .str.286 == $sub.ref(0, 394214);

const {:count 23} .str.287: ref;

axiom .str.287 == $sub.ref(0, 395261);

const {:count 7} llvm.used: ref;

axiom llvm.used == $sub.ref(0, 396341);

const {:count 12} .str.187: ref;

axiom .str.187 == $sub.ref(0, 397377);

const {:count 26} .str.188: ref;

axiom .str.188 == $sub.ref(0, 398427);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 399459);

const {:count 3} .str.1.494: ref;

axiom .str.1.494 == $sub.ref(0, 400486);

const {:count 14} .str.495: ref;

axiom .str.495 == $sub.ref(0, 401524);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 402552);

const vmw_deferred_io: ref;

axiom vmw_deferred_io == $sub.ref(0, 403584);

procedure vmw_deferred_io($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, assertsPassed, $M.3, $M.4, $CurrAddr, $M.6, $M.11, $M.12, $M.13, $M.10, $M.16;



implementation vmw_deferred_io($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $i37: i64;
  var $i38: i1;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $i53: i1;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $i59: i64;
  var $i60: i32;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $i64: i32;
  var $i65: i64;
  var $i66: i64;
  var $i67: i64;
  var $i68: i32;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $i80: i64;
  var $i81: i64;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $i85: i32;
  var $p86: ref;
  var $i87: i64;
  var $i88: i64;
  var $p89: ref;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 0} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i2);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 1160);
    call {:si_unique_call 1} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i3);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 2} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i9);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 32);
    call {:si_unique_call 3} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i10);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i32($p11);
    call {:si_unique_call 4} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i12);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p8);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i12);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i15 := $sub.i64(0, $i14);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p13, $mul.ref($i15, 1));
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p1);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i19, $i20, $p21 := $sub.i64(0, 1), 0, $p16;
    goto $bb1;

  $bb1:
    call $i19, $i20, $p21, $i22, $i23, $p24, $i25, $i26, $i27, $i28, $i29, $i30, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $p42, $p43, $i44, $i45, $p46, $i47, $p48, $i49, $i50, $p51 := vmw_deferred_io_loop_$bb1($i18, $i19, $i20, $p21, $i22, $i23, $p24, $i25, $i26, $i27, $i28, $i29, $i30, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $p42, $p43, $i44, $i45, $p46, $i47, $p48, $i49, $i50, $p51);
    goto $bb1_last;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    call {:si_unique_call 5} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i22);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 32);
    call {:si_unique_call 6} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i23);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    call {:si_unique_call 7} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i25);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, $i18);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i27, $i28 := $i19, $i20;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i53 := $ult.i64($i27, $i28);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} vmw_fb_dirty_flush($p6);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i53 == 1;
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p0);
    call {:si_unique_call 19} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i54);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 368);
    call {:si_unique_call 20} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i55);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p56 := $i2p.i64.ref($i55);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    call {:si_unique_call 21} {:cexpr "__cil_tmp73"} boogie_si_record_i32($i57);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i57);
    call {:si_unique_call 22} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i58);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i59 := $udiv.i64($i27, $i58);
    call {:si_unique_call 23} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i59);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i64.i32($i59);
    call {:si_unique_call 24} {:cexpr "y1"} boogie_si_record_i32($i60);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p0);
    call {:si_unique_call 25} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i61);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, 368);
    call {:si_unique_call 26} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i62);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p63 := $i2p.i64.ref($i62);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    call {:si_unique_call 27} {:cexpr "__cil_tmp79"} boogie_si_record_i32($i64);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i65 := $zext.i32.i64($i64);
    call {:si_unique_call 28} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i65);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i66 := $udiv.i64($i28, $i65);
    call {:si_unique_call 29} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i66);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i67 := $add.i64($i66, 1);
    call {:si_unique_call 30} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i67);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i64.i32($i67);
    call {:si_unique_call 31} {:cexpr "y2"} boogie_si_record_i32($i68);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p6);
    call {:si_unique_call 32} {:cexpr "__cil_tmp83"} boogie_si_record_i64($i69);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, 160);
    call {:si_unique_call 33} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i70);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p71 := $i2p.i64.ref($i70);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $p72 := spinlock_check($p71);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $i73 := _raw_spin_lock_irqsave($p72);
    call {:si_unique_call 36} {:cexpr "flags"} boogie_si_record_i64($i73);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p6);
    call {:si_unique_call 37} {:cexpr "__cil_tmp87"} boogie_si_record_i64($i74);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i75 := $add.i64($i74, 188);
    call {:si_unique_call 38} {:cexpr "__cil_tmp88"} boogie_si_record_i64($i75);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p76 := $i2p.i64.ref($i75);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, 0);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p6);
    call {:si_unique_call 39} {:cexpr "__cil_tmp90"} boogie_si_record_i64($i77);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i78 := $add.i64($i77, 192);
    call {:si_unique_call 40} {:cexpr "__cil_tmp91"} boogie_si_record_i64($i78);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p79 := $i2p.i64.ref($i78);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, $i60);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p6);
    call {:si_unique_call 41} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i80);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i81 := $add.i64($i80, 196);
    call {:si_unique_call 42} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i81);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p0);
    call {:si_unique_call 43} {:cexpr "__cil_tmp95"} boogie_si_record_i64($i82);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, 160);
    call {:si_unique_call 44} {:cexpr "__cil_tmp96"} boogie_si_record_i64($i83);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p84 := $i2p.i64.ref($i83);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p86 := $i2p.i64.ref($i81);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, $i85);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p6);
    call {:si_unique_call 45} {:cexpr "__cil_tmp98"} boogie_si_record_i64($i87);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i88 := $add.i64($i87, 200);
    call {:si_unique_call 46} {:cexpr "__cil_tmp99"} boogie_si_record_i64($i88);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p89 := $i2p.i64.ref($i88);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, $i68);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p6);
    call {:si_unique_call 47} {:cexpr "__cil_tmp100"} boogie_si_record_i64($i90);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i91 := $add.i64($i90, 160);
    call {:si_unique_call 48} {:cexpr "__cil_tmp101"} boogie_si_record_i64($i91);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p92 := $i2p.i64.ref($i91);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} spin_unlock_irqrestore($p92, $i73);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb3:
    assume $i26 == 1;
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p21);
    call {:si_unique_call 8} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i29);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 16);
    call {:si_unique_call 9} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i30);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    call {:si_unique_call 10} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i32);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i33 := $shl.i64($i32, 12);
    call {:si_unique_call 11} {:cexpr "start"} boogie_si_record_i64($i33);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 4096);
    call {:si_unique_call 12} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i34);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i35 := $sub.i64($i34, 1);
    call {:si_unique_call 13} {:cexpr "end"} boogie_si_record_i64($i35);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i36 := $ult.i64($i19, $i33);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $i33;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i38 := $ugt.i64($i20, $i35);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $i35;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p21);
    call {:si_unique_call 14} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i40);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 32);
    call {:si_unique_call 15} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i41);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 16} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i44);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 32);
    call {:si_unique_call 17} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i45);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p46 := $i2p.i64.ref($i45);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i32($p46);
    call {:si_unique_call 18} {:cexpr "__cil_tmp67"} boogie_si_record_i32($i47);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p43);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i47);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i50 := $sub.i64(0, $i49);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p48, $mul.ref($i50, 1));
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i19, $i20, $p21 := $i37, $i39, $p51;
    goto corral_source_split_63_dummy;

  $bb10:
    assume $i38 == 1;
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i39 := $i20;
    goto $bb12;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i37 := $i19;
    goto $bb9;

  corral_source_split_63_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_20;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 404616);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 405648);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 406680);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 1} true;
    call {:si_unique_call 51} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 52} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 407712);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} _raw_spin_unlock_irqrestore($p2, $i1);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;
}



const vmw_fb_dirty_flush: ref;

axiom vmw_fb_dirty_flush == $sub.ref(0, 408744);

procedure vmw_fb_dirty_flush($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, assertsPassed, $M.3, $M.4, $CurrAddr, $M.6, $M.11, $M.12, $M.13, $M.10, $M.16;



implementation vmw_fb_dirty_flush($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i8;
  var $i27: i1;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $i36: i8;
  var $i37: i1;
  var $i38: i8;
  var $i39: i1;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $i54: i32;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i64;
  var $i67: i64;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i32;
  var $i73: i64;
  var $i74: i64;
  var $p75: ref;
  var $i76: i64;
  var $i77: i64;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $i88: i32;
  var $i89: i64;
  var $i90: i64;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $i101: i64;
  var $i102: i64;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $i107: i64;
  var $p108: ref;
  var $i109: i32;
  var $i110: i64;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $i118: i64;
  var $i119: i1;
  var $i120: i32;
  var $i121: i1;
  var $i122: i1;
  var $i123: i32;
  var $i124: i1;
  var $i125: i1;
  var $i126: i32;
  var $i127: i64;
  var $i128: i64;
  var $i129: i1;
  var $p131: ref;
  var $i132: i64;
  var $i133: i64;
  var $p134: ref;
  var $i135: i64;
  var $i136: i64;
  var $p137: ref;
  var $i138: i64;
  var $i139: i64;
  var $p140: ref;
  var $i141: i64;
  var $i142: i64;
  var $p143: ref;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    call {:si_unique_call 55} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i3);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 2600);
    call {:si_unique_call 56} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i4);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    call {:si_unique_call 57} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i8);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 368);
    call {:si_unique_call 58} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i9);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    call {:si_unique_call 59} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i11);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i12 := $udiv.i32($i11, 4);
    call {:si_unique_call 60} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i12);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p7);
    call {:si_unique_call 61} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i13);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 1120);
    call {:si_unique_call 62} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i14);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p0);
    call {:si_unique_call 63} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i18);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 144);
    call {:si_unique_call 64} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i19);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p2);
    call {:si_unique_call 65} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i23);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 134656);
    call {:si_unique_call 66} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i24);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i26);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p0);
    call {:si_unique_call 67} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i28);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 160);
    call {:si_unique_call 68} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i29);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $p31 := spinlock_check($p30);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $i32 := _raw_spin_lock_irqsave($p31);
    call {:si_unique_call 71} {:cexpr "flags"} boogie_si_record_i64($i32);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p0);
    call {:si_unique_call 72} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i33);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 184);
    call {:si_unique_call 73} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i34);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i34);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($i36);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i8($i37);
    call {:si_unique_call 74} {:cexpr "__cil_tmp50"} boogie_si_record_i8($i38);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i38);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i39 == 1);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p0);
    call {:si_unique_call 75} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i40);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 160);
    call {:si_unique_call 76} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i41);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} spin_unlock_irqrestore($p42, $i32);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p0);
    call {:si_unique_call 78} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i43);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 188);
    call {:si_unique_call 79} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i44);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    call {:si_unique_call 80} {:cexpr "x"} boogie_si_record_i32($i46);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p0);
    call {:si_unique_call 81} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i47);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 192);
    call {:si_unique_call 82} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i48);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i48);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    call {:si_unique_call 83} {:cexpr "y"} boogie_si_record_i32($i50);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p0);
    call {:si_unique_call 84} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i51);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 196);
    call {:si_unique_call 85} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i52);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    call {:si_unique_call 86} {:cexpr "_min1"} boogie_si_record_i32($i54);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p7);
    call {:si_unique_call 87} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i55);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 160);
    call {:si_unique_call 88} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i56);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    call {:si_unique_call 89} {:cexpr "_min2"} boogie_si_record_i32($i58);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i59 := $ult.i32($i54, $i58);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $i58;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32($i60, $i46);
    call {:si_unique_call 90} {:cexpr "w"} boogie_si_record_i32($i61);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p0);
    call {:si_unique_call 91} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i62);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 200);
    call {:si_unique_call 92} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i63);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p64 := $i2p.i64.ref($i63);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    call {:si_unique_call 93} {:cexpr "_min1___0"} boogie_si_record_i32($i65);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p7);
    call {:si_unique_call 94} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i66);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i67 := $add.i64($i66, 164);
    call {:si_unique_call 95} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i67);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p68 := $i2p.i64.ref($i67);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    call {:si_unique_call 96} {:cexpr "_min2___0"} boogie_si_record_i32($i69);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i70 := $ult.i32($i65, $i69);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $i69;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32($i71, $i50);
    call {:si_unique_call 97} {:cexpr "h"} boogie_si_record_i32($i72);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p0);
    call {:si_unique_call 98} {:cexpr "__cil_tmp88"} boogie_si_record_i64($i73);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i73, 196);
    call {:si_unique_call 99} {:cexpr "__cil_tmp89"} boogie_si_record_i64($i74);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p75 := $i2p.i64.ref($i74);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, 0);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p0);
    call {:si_unique_call 100} {:cexpr "__cil_tmp91"} boogie_si_record_i64($i76);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i77 := $add.i64($i76, 188);
    call {:si_unique_call 101} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i77);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p78 := $i2p.i64.ref($i77);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, 0);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p0);
    call {:si_unique_call 102} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i79);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i80 := $add.i64($i79, 200);
    call {:si_unique_call 103} {:cexpr "__cil_tmp95"} boogie_si_record_i64($i80);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p81 := $i2p.i64.ref($i80);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, 0);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p0);
    call {:si_unique_call 104} {:cexpr "__cil_tmp97"} boogie_si_record_i64($i82);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, 192);
    call {:si_unique_call 105} {:cexpr "__cil_tmp98"} boogie_si_record_i64($i83);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p84 := $i2p.i64.ref($i83);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, 0);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p0);
    call {:si_unique_call 106} {:cexpr "__cil_tmp99"} boogie_si_record_i64($i85);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 160);
    call {:si_unique_call 107} {:cexpr "__cil_tmp100"} boogie_si_record_i64($i86);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p87 := $i2p.i64.ref($i86);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} spin_unlock_irqrestore($p87, $i32);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i88 := $mul.i32($i50, $i12);
    call {:si_unique_call 109} {:cexpr "__cil_tmp103"} boogie_si_record_i32($i88);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p7);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i90 := $add.i64($i89, 344);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p91 := $i2p.i64.ref($i90);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i92 := $i88;
    goto $bb20;

  $bb20:
    call $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $p103, $i104, $i105, $i106, $i107, $p108, $i109, $i110, $p111, $p112, $i113, $i114 := vmw_fb_dirty_flush_loop_$bb20($p7, $i12, $p17, $p22, $i46, $i61, $p91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $p103, $i104, $i105, $i106, $i107, $p108, $i109, $i110, $p111, $p112, $i113, $i114);
    goto $bb20_last;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p91);
    call {:si_unique_call 110} {:cexpr "__cil_tmp107"} boogie_si_record_i32($i93);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i94 := $udiv.i32($i93, 4);
    call {:si_unique_call 111} {:cexpr "__cil_tmp108"} boogie_si_record_i32($i94);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i95 := $ult.i32($i92, $i94);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i95 == 1);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $p115 := vmw_fifo_reserve($p2, 20);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 114} {:cexpr "__cil_tmp129"} boogie_si_record_i64($i117);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p116);
    call {:si_unique_call 115} {:cexpr "__cil_tmp130"} boogie_si_record_i64($i118);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i119 := $eq.i64($i118, $i117);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i120 := $zext.i1.i32($i119);
    call {:si_unique_call 116} {:cexpr "__cil_tmp131"} boogie_si_record_i32($i120);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i122 := $xor.i1($i121, 1);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i123 := $zext.i1.i32($i122);
    call {:si_unique_call 117} {:cexpr "__cil_tmp132"} boogie_si_record_i32($i123);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i124 := $ne.i32($i123, 0);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i125 := $xor.i1($i124, 1);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i126 := $zext.i1.i32($i125);
    call {:si_unique_call 118} {:cexpr "__cil_tmp133"} boogie_si_record_i32($i126);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i127 := $sext.i32.i64($i126);
    call {:si_unique_call 119} {:cexpr "__cil_tmp134"} boogie_si_record_i64($i127);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $i128 := ldv__builtin_expect($i127, 0);
    call {:si_unique_call 121} {:cexpr "tmp___13"} boogie_si_record_i64($i128);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i129 := $ne.i64($i128, 0);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p116);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p131, 1);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($p116);
    call {:si_unique_call 133} {:cexpr "__cil_tmp135"} boogie_si_record_i64($i132);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i133 := $add.i64($i132, 4);
    call {:si_unique_call 134} {:cexpr "__cil_tmp136"} boogie_si_record_i64($i133);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p134 := $i2p.i64.ref($i133);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p134, $i46);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p116);
    call {:si_unique_call 135} {:cexpr "__cil_tmp138"} boogie_si_record_i64($i135);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i136 := $add.i64($i135, 8);
    call {:si_unique_call 136} {:cexpr "__cil_tmp139"} boogie_si_record_i64($i136);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p137 := $i2p.i64.ref($i136);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p137, $i50);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i138 := $p2i.ref.i64($p116);
    call {:si_unique_call 137} {:cexpr "__cil_tmp141"} boogie_si_record_i64($i138);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i139 := $add.i64($i138, 12);
    call {:si_unique_call 138} {:cexpr "__cil_tmp142"} boogie_si_record_i64($i139);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p140 := $i2p.i64.ref($i139);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p140, $i61);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $i141 := $p2i.ref.i64($p116);
    call {:si_unique_call 139} {:cexpr "__cil_tmp144"} boogie_si_record_i64($i141);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i142 := $add.i64($i141, 16);
    call {:si_unique_call 140} {:cexpr "__cil_tmp145"} boogie_si_record_i64($i142);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p143 := $i2p.i64.ref($i142);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p143, $i72);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} vmw_fifo_commit($p2, 20);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i129 == 1;
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} vslice_dummy_var_57 := drm_err.ref.ref(.str.248, .str.12);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i95 == 1;
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i92, $i46);
    call {:si_unique_call 112} {:cexpr "__cil_tmp111"} boogie_si_record_i32($i96);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i97 := $i96;
    goto $bb26;

  $bb26:
    call $i97, $i98, $i99, $i100, $i101, $i102, $p103, $i104, $i105, $i106, $i107, $p108, $i109, $i110, $p111, $p112, $i113 := vmw_fb_dirty_flush_loop_$bb26($p7, $p17, $p22, $i46, $i61, $i92, $i97, $i98, $i99, $i100, $i101, $i102, $p103, $i104, $i105, $i106, $i107, $p108, $i109, $i110, $p111, $p112, $i113);
    goto $bb26_last;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i92, $i46);
    call {:si_unique_call 122} {:cexpr "__cil_tmp113"} boogie_si_record_i32($i98);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i98, $i61);
    call {:si_unique_call 123} {:cexpr "__cil_tmp114"} boogie_si_record_i32($i99);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i100 := $ult.i32($i97, $i99);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i100 == 1);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i92, $i12);
    call {:si_unique_call 128} {:cexpr "i"} boogie_si_record_i32($i114);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i92 := $i114;
    goto corral_source_split_286_dummy;

  $bb28:
    assume $i100 == 1;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p7);
    call {:si_unique_call 124} {:cexpr "__cil_tmp117"} boogie_si_record_i64($i101);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i102 := $add.i64($i101, 344);
    call {:si_unique_call 125} {:cexpr "__cil_tmp118"} boogie_si_record_i64($i102);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p103 := $i2p.i64.ref($i102);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    call {:si_unique_call 126} {:cexpr "__cil_tmp119"} boogie_si_record_i32($i104);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i105 := $udiv.i32($i104, 4);
    call {:si_unique_call 127} {:cexpr "__cil_tmp120"} boogie_si_record_i32($i105);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i106 := $ult.i32($i97, $i105);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i106 == 1);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i106 == 1;
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i107 := $sext.i32.i64($i97);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p17, $mul.ref($i107, 4));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    call {:si_unique_call 129} {:cexpr "__cil_tmp123"} boogie_si_record_i32($i109);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i97);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p22, $mul.ref($i110, 4));
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} iowrite32($i109, $p112);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i97, 1);
    call {:si_unique_call 131} {:cexpr "k"} boogie_si_record_i32($i113);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i97 := $i113;
    goto corral_source_split_295_dummy;

  $bb17:
    assume $i70 == 1;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i71 := $i65;
    goto $bb19;

  $bb14:
    assume $i59 == 1;
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i60 := $i54;
    goto $bb16;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_295_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_266;

  corral_source_split_286_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_238;
}



const iowrite32: ref;

axiom iowrite32 == $sub.ref(0, 409776);

procedure iowrite32($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation iowrite32($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} {:cexpr "iowrite32:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    return;
}



const vmw_fifo_reserve: ref;

axiom vmw_fifo_reserve == $sub.ref(0, 410808);

procedure vmw_fifo_reserve($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, assertsPassed, $M.3, $M.4, $CurrAddr, $M.6, $M.11, $M.12, $M.13, $M.10, $M.16;



implementation vmw_fifo_reserve($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i1;
  var $i47: i32;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i1;
  var $i64: i32;
  var $i65: i64;
  var $i66: i64;
  var $i67: i1;
  var $i68: i64;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $i77: i32;
  var $i78: i1;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i76: i32;
  var $i82: i64;
  var $i83: i64;
  var $i84: i1;
  var $i87: i1;
  var $i88: i8;
  var $i89: i1;
  var $i90: i1;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i1;
  var $i95: i1;
  var $i96: i32;
  var $i97: i1;
  var $i98: i1;
  var $i99: i32;
  var $i100: i64;
  var $i101: i64;
  var $i102: i1;
  var $i103: i8;
  var $i85: i8;
  var $i86: i8;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i1;
  var $i110: i1;
  var $i111: i32;
  var $i112: i1;
  var $i113: i1;
  var $i114: i32;
  var $i115: i64;
  var $i116: i64;
  var $i117: i1;
  var $i119: i1;
  var $i120: i32;
  var $i121: i1;
  var $i122: i32;
  var $i123: i1;
  var $i124: i1;
  var $i125: i32;
  var $i126: i1;
  var $i127: i1;
  var $i128: i32;
  var $i129: i64;
  var $i130: i64;
  var $i131: i1;
  var $i118: i8;
  var $i104: i8;
  var $i105: i8;
  var $i132: i1;
  var $i133: i1;
  var $i134: i64;
  var $i135: i1;
  var $i136: i64;
  var $i137: i64;
  var $p138: ref;
  var $i139: i1;
  var $p140: ref;
  var $p141: ref;
  var $i142: i32;
  var $i143: i64;
  var $p144: ref;
  var $i147: i8;
  var $i148: i1;
  var $i149: i64;
  var $i150: i64;
  var $p151: ref;
  var $i152: i64;
  var $i153: i64;
  var $p154: ref;
  var $i155: i64;
  var $i156: i64;
  var $i157: i1;
  var $i158: i64;
  var $i159: i64;
  var $p160: ref;
  var $p161: ref;
  var $i163: i64;
  var $p164: ref;
  var $i165: i64;
  var $i166: i64;
  var $p168: ref;
  var $i169: i64;
  var $i170: i64;
  var $p171: ref;
  var $p172: ref;
  var $p174: ref;
  var $i175: i64;
  var $i176: i64;
  var $p177: ref;
  var $p146: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} {:cexpr "vmw_fifo_reserve:arg:bytes"} boogie_si_record_i32($i1);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 144} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i2);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 1856);
    call {:si_unique_call 145} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i3);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 146} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i5);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 2144);
    call {:si_unique_call 147} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i6);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p4);
    call {:si_unique_call 148} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i9);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 36);
    call {:si_unique_call 149} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i10);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 150} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i12);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 64);
    call {:si_unique_call 151} {:cexpr "reserveable"} boogie_si_record_i32($i13);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p4);
    call {:si_unique_call 152} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i14);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 40);
    call {:si_unique_call 153} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i15);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} mutex_lock($p16);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p8, $mul.ref(1, 4));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $i19 := ioread32($p18);
    call {:si_unique_call 156} {:cexpr "max"} boogie_si_record_i32($i19);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p8, $mul.ref(0, 4));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $i22 := ioread32($p21);
    call {:si_unique_call 158} {:cexpr "min"} boogie_si_record_i32($i22);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p8, $mul.ref(2, 4));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $i25 := ioread32($p24);
    call {:si_unique_call 160} {:cexpr "next_cmd"} boogie_si_record_i32($i25);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i19, $i22);
    call {:si_unique_call 161} {:cexpr "__cil_tmp42"} boogie_si_record_i32($i26);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i27 := $uge.i32($i1, $i26);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    call {:si_unique_call 162} {:cexpr "__cil_tmp43"} boogie_si_record_i32($i28);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i30 := $xor.i1($i29, 1);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    call {:si_unique_call 163} {:cexpr "__cil_tmp44"} boogie_si_record_i32($i31);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i33 := $xor.i1($i32, 1);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    call {:si_unique_call 164} {:cexpr "__cil_tmp45"} boogie_si_record_i32($i34);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    call {:si_unique_call 165} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i35);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 167} {:cexpr "tmp___7"} boogie_si_record_i64($i36);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p4);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    call {:si_unique_call 171} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i39);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i32($i40);
    call {:si_unique_call 172} {:cexpr "__cil_tmp48"} boogie_si_record_i32($i41);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i43 := $xor.i1($i42, 1);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i43);
    call {:si_unique_call 173} {:cexpr "__cil_tmp49"} boogie_si_record_i32($i44);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i46 := $xor.i1($i45, 1);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i46);
    call {:si_unique_call 174} {:cexpr "__cil_tmp50"} boogie_si_record_i32($i47);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    call {:si_unique_call 175} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i48);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i49 := ldv__builtin_expect($i48, 0);
    call {:si_unique_call 177} {:cexpr "tmp___8"} boogie_si_record_i64($i49);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 179} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i51);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p4);
    call {:si_unique_call 180} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i52);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 8);
    call {:si_unique_call 181} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i53);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i53);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    call {:si_unique_call 182} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i56);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, $i51);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i32($i57);
    call {:si_unique_call 183} {:cexpr "__cil_tmp58"} boogie_si_record_i32($i58);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i60 := $xor.i1($i59, 1);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i32($i60);
    call {:si_unique_call 184} {:cexpr "__cil_tmp59"} boogie_si_record_i32($i61);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i63 := $xor.i1($i62, 1);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i64 := $zext.i1.i32($i63);
    call {:si_unique_call 185} {:cexpr "__cil_tmp60"} boogie_si_record_i32($i64);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i64);
    call {:si_unique_call 186} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i65);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $i66 := ldv__builtin_expect($i65, 0);
    call {:si_unique_call 188} {:cexpr "tmp___9"} boogie_si_record_i64($i66);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i68 := $zext.i32.i64($i1);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p4);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p69, $i68);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    call $p70, $p71, $i72, $i73, $i74, $i75, $i77, $i78, $i79, $i80, $i81, $i76, $i82, $i83, $i84, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i85, $i86, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i118, $i104, $i105, $i132, $i133, $i134, $i135, $i147, $i148 := vmw_fifo_reserve_loop_$bb29($p0, $i1, $p8, $i13, $i19, $i22, $i25, $p70, $p71, $i72, $i73, $i74, $i75, $i77, $i78, $i79, $i80, $i81, $i76, $i82, $i83, $i84, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i85, $i86, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i118, $i104, $i105, $i132, $i133, $i134, $i135, $i147, $i148);
    goto $bb29_last;

  $bb30:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p8, $mul.ref(3, 4));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i72 := ioread32($p71);
    call {:si_unique_call 191} {:cexpr "tmp___10"} boogie_si_record_i32($i72);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i73 := $uge.i32($i25, $i72);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i73 == 1);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i25, $i1);
    call {:si_unique_call 193} {:cexpr "__cil_tmp72"} boogie_si_record_i32($i106);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i107 := $ult.i32($i106, $i72);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i108 := $zext.i1.i32($i107);
    call {:si_unique_call 194} {:cexpr "__cil_tmp73"} boogie_si_record_i32($i108);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i110 := $xor.i1($i109, 1);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i111 := $zext.i1.i32($i110);
    call {:si_unique_call 195} {:cexpr "__cil_tmp74"} boogie_si_record_i32($i111);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i113 := $xor.i1($i112, 1);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i114 := $zext.i1.i32($i113);
    call {:si_unique_call 196} {:cexpr "__cil_tmp75"} boogie_si_record_i32($i114);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i115 := $sext.i32.i64($i114);
    call {:si_unique_call 197} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i115);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $i116 := ldv__builtin_expect($i115, 1);
    call {:si_unique_call 199} {:cexpr "tmp___16"} boogie_si_record_i64($i116);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i117 := $ne.i64($i116, 0);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i117 == 1);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i8.i1(0);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $i120 := vmw_fifo_wait($p0, $i1, $i119, 750);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    call {:si_unique_call 215} {:cexpr "ret"} boogie_si_record_i32($i120);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i122 := $zext.i1.i32($i121);
    call {:si_unique_call 216} {:cexpr "__cil_tmp78"} boogie_si_record_i32($i122);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i124 := $xor.i1($i123, 1);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i125 := $zext.i1.i32($i124);
    call {:si_unique_call 217} {:cexpr "__cil_tmp79"} boogie_si_record_i32($i125);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i127 := $xor.i1($i126, 1);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i128 := $zext.i1.i32($i127);
    call {:si_unique_call 218} {:cexpr "__cil_tmp80"} boogie_si_record_i32($i128);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i129 := $sext.i32.i64($i128);
    call {:si_unique_call 219} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i129);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $i130 := ldv__builtin_expect($i129, 0);
    call {:si_unique_call 221} {:cexpr "tmp___15"} boogie_si_record_i64($i130);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i131 := $ne.i64($i130, 0);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i118 := 0;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i104, $i105 := 0, $i118;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i132 := $trunc.i8.i1($i105);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    $i147 := $i104;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i8.i1($i147);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb76_dummy;

  $bb72:
    assume $i148 == 1;
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i149 := $p2i.ref.i64($p4);
    call {:si_unique_call 227} {:cexpr "__cil_tmp89"} boogie_si_record_i64($i149);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i150 := $add.i64($i149, 32);
    call {:si_unique_call 228} {:cexpr "__cil_tmp90"} boogie_si_record_i64($i150);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p151 := $i2p.i64.ref($i150);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p151, 1);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i152 := $p2i.ref.i64($p4);
    call {:si_unique_call 229} {:cexpr "__cil_tmp91"} boogie_si_record_i64($i152);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i153 := $add.i64($i152, 24);
    call {:si_unique_call 230} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i153);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p154 := $i2p.i64.ref($i153);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i155 := $load.i64($M.0, $p154);
    call {:si_unique_call 231} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i155);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i156 := $zext.i32.i64($i1);
    call {:si_unique_call 232} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i156);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i157 := $ult.i64($i156, $i155);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i157 == 1);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i163 := $zext.i32.i64($i1);
    call {:si_unique_call 235} {:cexpr "__cil_tmp98"} boogie_si_record_i64($i163);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $p164 := vmalloc($i163);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i165 := $p2i.ref.i64($p4);
    call {:si_unique_call 237} {:cexpr "__cil_tmp99"} boogie_si_record_i64($i165);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i166 := $add.i64($i165, 8);
    call {:si_unique_call 238} {:cexpr "__cil_tmp100"} boogie_si_record_i64($i166);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p168 := $i2p.i64.ref($i166);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p168, $p164);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i169 := $p2i.ref.i64($p4);
    call {:si_unique_call 239} {:cexpr "__cil_tmp101"} boogie_si_record_i64($i169);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i170 := $add.i64($i169, 8);
    call {:si_unique_call 240} {:cexpr "__cil_tmp102"} boogie_si_record_i64($i170);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p171 := $i2p.i64.ref($i170);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.0, $p171);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p146 := $p172;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $r := $p146;
    return;

  $bb74:
    assume $i157 == 1;
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i158 := $p2i.ref.i64($p4);
    call {:si_unique_call 233} {:cexpr "__cil_tmp95"} boogie_si_record_i64($i158);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i159 := $add.i64($i158, 16);
    call {:si_unique_call 234} {:cexpr "__cil_tmp96"} boogie_si_record_i64($i159);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p160 := $i2p.i64.ref($i159);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p161 := $load.ref($M.0, $p160);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p146 := $p161;
    goto $bb68;

  $bb58:
    assume $i132 == 1;
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i13, 0);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i133 == 1);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i134 := $zext.i32.i64($i1);
    call {:si_unique_call 222} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i134);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i135 := $ule.i64($i134, 4);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i147 := 1;
    goto $bb71;

  $bb63:
    assume $i135 == 1;
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i136 := $p2i.ref.i64($p4);
    call {:si_unique_call 223} {:cexpr "__cil_tmp83"} boogie_si_record_i64($i136);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i137 := $add.i64($i136, 32);
    call {:si_unique_call 224} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i137);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p138 := $i2p.i64.ref($i137);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p138, 0);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i13, 0);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i142 := $lshr.i32($i25, 2);
    call {:si_unique_call 226} {:cexpr "__cil_tmp87"} boogie_si_record_i32($i142);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i143 := $zext.i32.i64($i142);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($p8, $mul.ref($i143, 4));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p146 := $p144;
    goto $bb68;

  $bb65:
    assume $i139 == 1;
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p8, $mul.ref(14, 4));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} iowrite32($i1, $p141);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb60:
    assume $i133 == 1;
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb55:
    assume $i131 == 1;
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p4);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p174, 0);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i175 := $p2i.ref.i64($p4);
    call {:si_unique_call 168} {:cexpr "__cil_tmp104"} boogie_si_record_i64($i175);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i176 := $add.i64($i175, 40);
    call {:si_unique_call 169} {:cexpr "__cil_tmp105"} boogie_si_record_i64($i176);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p177 := $i2p.i64.ref($i176);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} mutex_unlock($p177);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p146 := $0.ref;
    goto $bb68;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i117 == 1;
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i118 := 1;
    goto $bb54;

  $bb31:
    assume $i73 == 1;
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i25, $i1);
    call {:si_unique_call 192} {:cexpr "__cil_tmp64"} boogie_si_record_i32($i74);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i75 := $ult.i32($i74, $i19);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i75 == 1);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i25, $i1);
    call {:si_unique_call 200} {:cexpr "__cil_tmp65"} boogie_si_record_i32($i77);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, $i19);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i81 := 0;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i76 := $i81;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i76);
    call {:si_unique_call 201} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i82);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $i83 := ldv__builtin_expect($i82, 1);
    call {:si_unique_call 203} {:cexpr "tmp___14"} boogie_si_record_i64($i83);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i84 == 1);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $i87 := vmw_fifo_is_full($p0, $i1);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i88 := $zext.i1.i8($i87);
    call {:si_unique_call 205} {:cexpr "tmp___12"} boogie_si_record_i8($i88);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i8.i1($i88);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $i103 := 1;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i85, $i86 := $i103, 0;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i104, $i105 := $i85, $i86;
    goto $bb51;

  $bb45:
    assume $i89 == 1;
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i8.i1(0);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i91 := vmw_fifo_wait($p0, $i1, $i90, 750);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 207} {:cexpr "ret"} boogie_si_record_i32($i91);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i93 := $zext.i1.i32($i92);
    call {:si_unique_call 208} {:cexpr "__cil_tmp68"} boogie_si_record_i32($i93);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i95 := $xor.i1($i94, 1);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i96 := $zext.i1.i32($i95);
    call {:si_unique_call 209} {:cexpr "__cil_tmp69"} boogie_si_record_i32($i96);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i98 := $xor.i1($i97, 1);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i99 := $zext.i1.i32($i98);
    call {:si_unique_call 210} {:cexpr "__cil_tmp70"} boogie_si_record_i32($i99);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i100 := $sext.i32.i64($i99);
    call {:si_unique_call 211} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i100);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $i101 := ldv__builtin_expect($i100, 0);
    call {:si_unique_call 213} {:cexpr "tmp___11"} boogie_si_record_i64($i101);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i103 := 0;
    goto $bb50;

  $bb47:
    assume $i102 == 1;
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i84 == 1;
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i85, $i86 := 0, 1;
    goto $bb44;

  $bb36:
    assume $i78 == 1;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i79 := $ugt.i32($i72, $i22);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i80 := 0;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i81 := $i80;
    goto $bb41;

  $bb38:
    assume $i79 == 1;
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i80 := 1;
    goto $bb40;

  $bb33:
    assume $i75 == 1;
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i76 := 1;
    goto $bb35;

  $bb19:
    assume $i67 == 1;
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    call {:si_unique_call 189} devirtbounce(0, .str.85, 317, 12);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    call vmw_fifo_reserve_loop_$bb23();
    goto $bb23_last;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb24_dummy;

  $bb7:
    assume $i50 == 1;
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call {:si_unique_call 178} devirtbounce(0, .str.85, 316, 12);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call vmw_fifo_reserve_loop_$bb11();
    goto $bb11_last;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb12_dummy;

  $bb1:
    assume $i37 == 1;
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb76_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb24_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb12_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb12;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 411840);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} {:cexpr "ldv__builtin_expect:arg:val"} boogie_si_record_i64($i0);
    call {:si_unique_call 242} {:cexpr "ldv__builtin_expect:arg:res"} boogie_si_record_i64($i1);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const drm_err: ref;

axiom drm_err == $sub.ref(0, 412872);

procedure drm_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 1} true;
    call {:si_unique_call 243} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 244} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure drm_err.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_err.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 1} true;
    call {:si_unique_call 245} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 246} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure drm_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 1} true;
    call {:si_unique_call 247} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 248} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure drm_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);



procedure drm_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);



procedure drm_err.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32);



procedure drm_err.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_err.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 1} true;
    call {:si_unique_call 249} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 250} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure drm_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



procedure drm_err.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32) returns ($r: i32);



procedure drm_err.ref.ref.i32.i64($p0: ref, $p1: ref, p.2: i32, p.3: i64) returns ($r: i32);



const vmw_fifo_commit: ref;

axiom vmw_fifo_commit == $sub.ref(0, 413904);

procedure vmw_fifo_commit($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed;



implementation vmw_fifo_commit($p0: ref, $i1: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i1;
  var $i47: i32;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $i55: i8;
  var $i56: i1;
  var $i57: i1;
  var $i58: i64;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $i62: i1;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $i75: i64;
  var $i76: i64;
  var $p77: ref;
  var $i78: i8;
  var $i79: i1;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i64;
  var $p93: ref;
  var $i94: i64;
  var $i95: i64;
  var $p96: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} {:cexpr "vmw_fifo_commit:arg:bytes"} boogie_si_record_i32($i1);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 252} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i2);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 1856);
    call {:si_unique_call 253} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i3);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 254} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i5);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 2144);
    call {:si_unique_call 255} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i6);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(2, 4));
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $i11 := ioread32($p10);
    call {:si_unique_call 257} {:cexpr "tmp___7"} boogie_si_record_i32($i11);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p8, $mul.ref(1, 4));
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $i14 := ioread32($p13);
    call {:si_unique_call 259} {:cexpr "tmp___8"} boogie_si_record_i32($i14);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p8, $mul.ref(0, 4));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i17 := ioread32($p16);
    call {:si_unique_call 261} {:cexpr "tmp___9"} boogie_si_record_i32($i17);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p4);
    call {:si_unique_call 262} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i18);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 36);
    call {:si_unique_call 263} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i19);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    call {:si_unique_call 264} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i21);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 64);
    call {:si_unique_call 265} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i22);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 266} {:cexpr "reserveable"} boogie_si_record_i8($i24);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i1, 3);
    call {:si_unique_call 267} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i25);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    call {:si_unique_call 268} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i27);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i29 := $xor.i1($i28, 1);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    call {:si_unique_call 269} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i30);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i32 := $xor.i1($i31, 1);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    call {:si_unique_call 270} {:cexpr "__cil_tmp33"} boogie_si_record_i32($i33);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    call {:si_unique_call 271} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i34);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 273} {:cexpr "tmp___10"} boogie_si_record_i64($i35);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p4);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    call {:si_unique_call 275} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i38);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i1);
    call {:si_unique_call 276} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i39);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i40 := $ugt.i64($i39, $i38);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i32($i40);
    call {:si_unique_call 277} {:cexpr "__cil_tmp37"} boogie_si_record_i32($i41);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i43 := $xor.i1($i42, 1);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i43);
    call {:si_unique_call 278} {:cexpr "__cil_tmp38"} boogie_si_record_i32($i44);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i46 := $xor.i1($i45, 1);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i46);
    call {:si_unique_call 279} {:cexpr "__cil_tmp39"} boogie_si_record_i32($i47);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    call {:si_unique_call 280} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i48);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $i49 := ldv__builtin_expect($i48, 0);
    call {:si_unique_call 282} {:cexpr "tmp___11"} boogie_si_record_i64($i49);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p4);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p51, 0);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p4);
    call {:si_unique_call 284} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i52);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 32);
    call {:si_unique_call 285} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i53);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i53);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i8.i1($i55);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p4);
    call {:si_unique_call 295} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i72);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i72, 112);
    call {:si_unique_call 296} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i73);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p74 := $i2p.i64.ref($i73);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} down_write($p74);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p4);
    call {:si_unique_call 298} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i75);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i76 := $add.i64($i75, 32);
    call {:si_unique_call 299} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i76);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p77 := $i2p.i64.ref($i76);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i8.i1($i78);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i79 == 1);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i8.i1($i24);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i8.i1($i24);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    call {:si_unique_call 306} devirtbounce.1(0);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p4);
    call {:si_unique_call 307} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i91);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i92 := $add.i64($i91, 112);
    call {:si_unique_call 308} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i92);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p93 := $i2p.i64.ref($i92);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} up_write($p93);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} vmw_fifo_ping_host($p0, 1);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p4);
    call {:si_unique_call 311} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i94);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i95 := $add.i64($i94, 40);
    call {:si_unique_call 312} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i95);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p96 := $i2p.i64.ref($i95);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} mutex_unlock($p96);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i88 == 1;
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p8, $mul.ref(14, 4));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} iowrite32(0, $p90);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb37:
    assume $i80 == 1;
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i11, $i1);
    call {:si_unique_call 300} {:cexpr "next_cmd"} boogie_si_record_i32($i81);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i82 := $uge.i32($i81, $i14);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i85 := $i81;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} devirtbounce.1(0);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p8, $mul.ref(2, 4));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} iowrite32($i85, $p87);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb39:
    assume $i82 == 1;
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i83 := $sub.i32($i14, $i17);
    call {:si_unique_call 301} {:cexpr "__cil_tmp57"} boogie_si_record_i32($i83);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i84 := $sub.i32($i81, $i83);
    call {:si_unique_call 302} {:cexpr "next_cmd"} boogie_si_record_i32($i84);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i85 := $i84;
    goto $bb41;

  $bb34:
    assume $i79 == 1;
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb25:
    assume $i56 == 1;
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i8.i1($i24);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i57 == 1);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} vmw_fifo_slow_copy($p4, $p8, $i11, $i14, $i17, $i1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p4);
    call {:si_unique_call 288} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i58);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 8);
    call {:si_unique_call 289} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i59);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p60 := $i2p.i64.ref($i59);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i62 := $ne.ref($p61, $0.ref);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i62 == 1;
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p4);
    call {:si_unique_call 290} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i63);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 8);
    call {:si_unique_call 291} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i64);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p65 := $i2p.i64.ref($i64);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} vfree($p67);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p4);
    call {:si_unique_call 293} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i68);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i69 := $add.i64($i68, 8);
    call {:si_unique_call 294} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i69);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p71 := $i2p.i64.ref($i69);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p71, $0.ref);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i57 == 1;
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} vmw_fifo_res_copy($p4, $p8, $i11, $i14, $i17, $i1);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb15:
    assume $i50 == 1;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call {:si_unique_call 283} devirtbounce(0, .str.85, 432, 12);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    call vmw_fifo_commit_loop_$bb19();
    goto $bb19_last;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb20_dummy;

  $bb3:
    assume $i36 == 1;
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call {:si_unique_call 274} devirtbounce(0, .str.85, 431, 12);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call vmw_fifo_commit_loop_$bb7();
    goto $bb7_last;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb8_dummy;

  $bb20_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb8_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const ioread32: ref;

axiom ioread32 == $sub.ref(0, 414936);

procedure ioread32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioread32($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 1} true;
    call {:si_unique_call 314} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 315} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vmw_fifo_res_copy: ref;

axiom vmw_fifo_res_copy == $sub.ref(0, 415968);

procedure vmw_fifo_res_copy($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32);
  free requires assertsPassed;



implementation vmw_fifo_res_copy($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32)
{
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p18: ref;
  var $i23: i1;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} {:cexpr "vmw_fifo_res_copy:arg:next_cmd"} boogie_si_record_i32($i2);
    call {:si_unique_call 317} {:cexpr "vmw_fifo_res_copy:arg:max"} boogie_si_record_i32($i3);
    call {:si_unique_call 318} {:cexpr "vmw_fifo_res_copy:arg:min"} boogie_si_record_i32($i4);
    call {:si_unique_call 319} {:cexpr "vmw_fifo_res_copy:arg:bytes"} boogie_si_record_i32($i5);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i3, $i2);
    call {:si_unique_call 320} {:cexpr "chunk_size"} boogie_si_record_i32($i6);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 321} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i7);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 322} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i8);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 8);
    call {:si_unique_call 323} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i9);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    call {:si_unique_call 324} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i12);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, $i7);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    call {:si_unique_call 327} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i19);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 16);
    call {:si_unique_call 328} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i20);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    assume {:verifier.code 0} true;
    $p18 := $p22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i23 := $ult.i32($i5, $i6);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i6;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p1, $mul.ref(14, 4));
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} iowrite32($i5, $p26);
    call {:si_unique_call 331} devirtbounce.1(0);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i27 := $lshr.i32($i2, 2);
    call {:si_unique_call 332} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i27);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p1, $mul.ref($i28, 4));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p18);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i24);
    call {:si_unique_call 333} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i32);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} memcpy_toio($p30, $p31, $i32);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i5, $i24);
    call {:si_unique_call 335} {:cexpr "rest"} boogie_si_record_i32($i33);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i34 == 1;
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i35 := $lshr.i32($i4, 2);
    call {:si_unique_call 336} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i35);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i35);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p1, $mul.ref($i36, 4));
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i39 := $lshr.i32($i24, 2);
    call {:si_unique_call 337} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i39);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i39);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p18, $mul.ref($i40, 4));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i33);
    call {:si_unique_call 338} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i43);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} memcpy_toio($p38, $p42, $i43);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i23 == 1;
    call {:si_unique_call 329} {:cexpr "vmw_fifo_res_copy:arg:chunk_size"} boogie_si_record_i32($i5);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i24 := $i5;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    call {:si_unique_call 325} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i14);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 8);
    call {:si_unique_call 326} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i15);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p18 := $p17;
    goto $bb3;
}



const vmw_fifo_slow_copy: ref;

axiom vmw_fifo_slow_copy == $sub.ref(0, 417000);

procedure vmw_fifo_slow_copy($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32);
  free requires assertsPassed;



implementation vmw_fifo_slow_copy($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32)
{
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p17: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $i51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} {:cexpr "vmw_fifo_slow_copy:arg:next_cmd"} boogie_si_record_i32($i2);
    call {:si_unique_call 341} {:cexpr "vmw_fifo_slow_copy:arg:max"} boogie_si_record_i32($i3);
    call {:si_unique_call 342} {:cexpr "vmw_fifo_slow_copy:arg:min"} boogie_si_record_i32($i4);
    call {:si_unique_call 343} {:cexpr "vmw_fifo_slow_copy:arg:bytes"} boogie_si_record_i32($i5);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 344} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i6);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    call {:si_unique_call 345} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i7);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 8);
    call {:si_unique_call 346} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i8);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    call {:si_unique_call 347} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i11);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, $i6);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p0);
    call {:si_unique_call 350} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i18);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 16);
    call {:si_unique_call 351} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i19);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    assume {:verifier.code 0} true;
    $p17 := $p21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i22, $i23, $p24 := $i5, $i2, $p17;
    goto $bb4;

  $bb4:
    call $i22, $i23, $p24, $i25, $p26, $i27, $i28, $i29, $p30, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $p48, $i49, $i50, $i51 := vmw_fifo_slow_copy_loop_$bb4($p1, $i3, $i4, $i22, $i23, $p24, $i25, $p26, $i27, $i28, $i29, $p30, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $p48, $i49, $i50, $i51);
    goto $bb4_last;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i25 := $ugt.i32($i22, 0);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p24, $mul.ref(1, 4));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p24);
    call {:si_unique_call 352} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i27);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i28 := $lshr.i32($i23, 2);
    call {:si_unique_call 353} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i28);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i28);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p1, $mul.ref($i29, 4));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} iowrite32($i27, $p31);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i23);
    call {:si_unique_call 355} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i32);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 4);
    call {:si_unique_call 356} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i33);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i64.i32($i33);
    call {:si_unique_call 357} {:cexpr "next_cmd"} boogie_si_record_i32($i34);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, $i3);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i32($i35);
    call {:si_unique_call 358} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i36);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i38 := $xor.i1($i37, 1);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    call {:si_unique_call 359} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i39);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i41 := $xor.i1($i40, 1);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    call {:si_unique_call 360} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i42);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    call {:si_unique_call 361} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i43);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 363} {:cexpr "tmp___9"} boogie_si_record_i64($i44);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $i34;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} devirtbounce.1(0);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p1, $mul.ref(2, 4));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} iowrite32($i46, $p48);
    call {:si_unique_call 367} devirtbounce.1(0);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i22);
    call {:si_unique_call 368} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i49);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i50 := $sub.i64($i49, 4);
    call {:si_unique_call 369} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i50);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i64.i32($i50);
    call {:si_unique_call 370} {:cexpr "bytes"} boogie_si_record_i32($i51);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i22, $i23, $p24 := $i51, $i46, $p26;
    goto corral_source_split_840_dummy;

  $bb10:
    assume $i45 == 1;
    call {:si_unique_call 364} {:cexpr "vmw_fifo_slow_copy:arg:next_cmd"} boogie_si_record_i32($i4);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i46 := $i4;
    goto $bb12;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    call {:si_unique_call 348} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i13);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 8);
    call {:si_unique_call 349} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i14);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p17 := $p16;
    goto $bb3;

  corral_source_split_840_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_802;
}



const vfree: ref;

axiom vfree == $sub.ref(0, 418032);

procedure vfree($p0: ref);
  free requires assertsPassed;



implementation vfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    return;
}



const down_write: ref;

axiom down_write == $sub.ref(0, 419064);

procedure down_write($p0: ref);
  free requires assertsPassed;



implementation down_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    return;
}



const up_write: ref;

axiom up_write == $sub.ref(0, 420096);

procedure up_write($p0: ref);
  free requires assertsPassed;



implementation up_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    return;
}



const vmw_fifo_ping_host: ref;

axiom vmw_fifo_ping_host == $sub.ref(0, 421128);

procedure vmw_fifo_ping_host($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation vmw_fifo_ping_host($p0: ref, $i1: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} {:cexpr "vmw_fifo_ping_host:arg:reason"} boogie_si_record_i32($i1);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 372} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i2);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 2144);
    call {:si_unique_call 373} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i3);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 374} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i6);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 2184);
    call {:si_unique_call 375} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i7);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} mutex_lock($p8);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p5, $mul.ref(290, 4));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $i11 := ioread32($p10);
    call {:si_unique_call 378} {:cexpr "tmp___7"} boogie_si_record_i32($i11);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    call {:si_unique_call 379} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i14);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 381} {:cexpr "tmp___9"} boogie_si_record_i64($i15);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    call {:si_unique_call 384} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i19);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 2184);
    call {:si_unique_call 385} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i20);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} mutex_unlock($p21);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p5, $mul.ref(290, 4));
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} iowrite32(1, $p18);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} vmw_write($p0, 21, $i1);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb3;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 422160);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation mutex_unlock($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} ldv_blast_assert();
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.1 := 1;
    call {:si_unique_call 388} {:cexpr "ldv_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_blast_assert: ref;

axiom ldv_blast_assert == $sub.ref(0, 423192);

procedure ldv_blast_assert();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_blast_assert()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 389} __VERIFIER_error();
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 424224);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation mutex_lock($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} ldv_blast_assert();
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.1 := 2;
    call {:si_unique_call 391} {:cexpr "ldv_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmw_write: ref;

axiom vmw_write == $sub.ref(0, 425256);

procedure vmw_write($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation vmw_write($p0: ref, $i1: i32, $i2: i32)
{
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} {:cexpr "vmw_write:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 393} {:cexpr "vmw_write:arg:value"} boogie_si_record_i32($i2);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 394} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i3);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 2104);
    call {:si_unique_call 395} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i4);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 396} {:cexpr "__cil_tmp6"} boogie_si_record_i32($i6);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} outl($i1, $i6);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    call {:si_unique_call 398} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i7);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 2104);
    call {:si_unique_call 399} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i8);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    call {:si_unique_call 400} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i10);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    call {:si_unique_call 401} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i11);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} outl($i2, $i11);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    return;
}



const outl: ref;

axiom outl == $sub.ref(0, 426288);

procedure outl($i0: i32, $i1: i32);
  free requires assertsPassed;



implementation outl($i0: i32, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} {:cexpr "outl:arg:value"} boogie_si_record_i32($i0);
    call {:si_unique_call 404} {:cexpr "outl:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 405} devirtbounce.2(0, $i0, $i1);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    return;
}



const memcpy_toio: ref;

axiom memcpy_toio == $sub.ref(0, 427320);

procedure memcpy_toio($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation memcpy_toio($p0: ref, $p1: ref, $i2: i64)
{
  var vslice_dummy_var_58: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} {:cexpr "memcpy_toio:arg:count"} boogie_si_record_i64($i2);
    call {:si_unique_call 407} {:cexpr "memcpy_toio:arg:__len"} boogie_si_record_i64($i2);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} vslice_dummy_var_58 := memcpy($p0, $p1, $i2);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    return;
}



const memcpy: ref;

axiom memcpy == $sub.ref(0, 428352);

procedure memcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: ref);



const vmw_fifo_is_full: ref;

axiom vmw_fifo_is_full == $sub.ref(0, 429384);

procedure vmw_fifo_is_full($p0: ref, $i1: i32) returns ($r: i1);
  free requires assertsPassed;



implementation vmw_fifo_is_full($p0: ref, $i1: i32) returns ($r: i1)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} {:cexpr "vmw_fifo_is_full:arg:bytes"} boogie_si_record_i32($i1);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 410} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i2);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 2144);
    call {:si_unique_call 411} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i3);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(1, 4));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $i8 := ioread32($p7);
    call {:si_unique_call 413} {:cexpr "tmp___7"} boogie_si_record_i32($i8);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p5, $mul.ref(2, 4));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i11 := ioread32($p10);
    call {:si_unique_call 415} {:cexpr "tmp___8"} boogie_si_record_i32($i11);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p5, $mul.ref(0, 4));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $i14 := ioread32($p13);
    call {:si_unique_call 417} {:cexpr "tmp___9"} boogie_si_record_i32($i14);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p5, $mul.ref(3, 4));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $i17 := ioread32($p16);
    call {:si_unique_call 419} {:cexpr "tmp___10"} boogie_si_record_i32($i17);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i17, $i14);
    call {:si_unique_call 420} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i18);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i8, $i11);
    call {:si_unique_call 421} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i19);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, $i18);
    call {:si_unique_call 422} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i20);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i21 := $ule.i32($i20, $i1);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    call {:si_unique_call 423} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i22);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;
}



const vmw_fifo_wait: ref;

axiom vmw_fifo_wait == $sub.ref(0, 430416);

procedure vmw_fifo_wait($p0: ref, $i1: i32, $i2: i1, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, assertsPassed, $CurrAddr, $M.6, $M.11, $M.12, $M.13, $M.10, $M.16;



implementation vmw_fifo_wait($p0: ref, $i1: i32, $i2: i1, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $i52: i32;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $i59: i1;
  var $i60: i1;
  var $i61: i8;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $i88: i1;
  var $i89: i8;
  var $i90: i1;
  var $i91: i64;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $i96: i64;
  var $i97: i1;
  var $i98: i64;
  var $i92: i64;
  var $i99: i64;
  var $i100: i64;
  var $p101: ref;
  var $i102: i64;
  var $i104: i1;
  var $i105: i8;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $i110: i64;
  var $p112: ref;
  var $i113: i64;
  var $i114: i64;
  var $p115: ref;
  var $i116: i64;
  var $i117: i64;
  var $i118: i64;
  var $i119: i64;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $i123: i64;
  var $i124: i64;
  var $i125: i64;
  var $p126: ref;
  var $p127: ref;
  var $i128: i64;
  var $i129: i64;
  var $i130: i64;
  var $p131: ref;
  var $i132: i1;
  var $i133: i8;
  var $i134: i1;
  var $i135: i64;
  var $i137: i64;
  var $i138: i1;
  var $i139: i64;
  var $i136: i64;
  var $i140: i64;
  var $i141: i64;
  var $p142: ref;
  var $i143: i64;
  var $i103: i64;
  var $i144: i1;
  var $i145: i32;
  var $i146: i1;
  var $i147: i1;
  var $i148: i32;
  var $i149: i1;
  var $i150: i1;
  var $i151: i32;
  var $i152: i64;
  var $i153: i64;
  var $i154: i1;
  var $i156: i1;
  var $i157: i32;
  var $i158: i1;
  var $i159: i1;
  var $i160: i32;
  var $i161: i1;
  var $i162: i1;
  var $i163: i32;
  var $i164: i64;
  var $i165: i64;
  var $i166: i1;
  var $i167: i64;
  var $i155: i64;
  var $i168: i64;
  var $i169: i64;
  var $p170: ref;
  var $i171: i64;
  var $i172: i64;
  var $p173: ref;
  var $i174: i32;
  var $i175: i1;
  var $i176: i64;
  var $i177: i64;
  var $p178: ref;
  var $p179: ref;
  var $i180: i64;
  var $i181: i64;
  var $i182: i64;
  var $i183: i64;
  var $i184: i64;
  var $p185: ref;
  var $i186: i32;
  var $i187: i32;
  var $p188: ref;
  var $i189: i64;
  var $i190: i64;
  var $p191: ref;
  var $i192: i32;
  var $i193: i64;
  var $i194: i64;
  var $p195: ref;
  var $i196: i64;
  var $i197: i64;
  var $p198: ref;
  var $i199: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 426} {:cexpr "vmw_fifo_wait:arg:bytes"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i2);
    call {:si_unique_call 427} {:cexpr "vmw_fifo_wait:arg:interruptible"} boogie_si_record_i1($i2);
    call {:si_unique_call 428} {:cexpr "vmw_fifo_wait:arg:timeout"} boogie_si_record_i64($i3);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $i7 := vmw_fifo_is_full($p0, $i1);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 430} {:cexpr "tmp___7"} boogie_si_record_i8($i8);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    call {:si_unique_call 431} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i11);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 433} {:cexpr "tmp___9"} boogie_si_record_i64($i12);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} vmw_fifo_ping_host($p0, 2);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    call {:si_unique_call 435} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i15);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 2156);
    call {:si_unique_call 436} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i16);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    call {:si_unique_call 437} {:cexpr "__cil_tmp37"} boogie_si_record_i32($i18);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 262144);
    call {:si_unique_call 438} {:cexpr "__cil_tmp38"} boogie_si_record_i32($i19);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i6);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $i22 := vmw_fifo_wait_noirq($p0, $i1, $i21, $i3);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 440} {:cexpr "tmp___10"} boogie_si_record_i32($i22);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i14 := $i22;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    call {:si_unique_call 441} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i23);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 2184);
    call {:si_unique_call 442} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i24);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} mutex_lock($p25);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p0);
    call {:si_unique_call 444} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i26);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, 2976);
    call {:si_unique_call 445} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i27);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p28 := $i2p.i64.ref($i27);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i29 := atomic_add_return(1, $p28);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 447} {:cexpr "tmp___12"} boogie_si_record_i32($i29);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i30 := $sgt.i32($i29, 0);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p0);
    call {:si_unique_call 470} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i56);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i57 := $add.i64($i56, 2184);
    call {:si_unique_call 471} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i57);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p58 := $i2p.i64.ref($i57);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} mutex_unlock($p58);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i8.i1($i6);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i59 == 1);
    call {:si_unique_call 476} {:cexpr "vmw_fifo_wait:arg:__ret___0"} boogie_si_record_i64($i3);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $i104 := vmw_fifo_is_full($p0, $i1);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i105 := $zext.i1.i8($i104);
    call {:si_unique_call 478} {:cexpr "tmp___20"} boogie_si_record_i8($i105);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i8.i1($i105);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    $i143 := $i3;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i103 := $i143;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i144 := $eq.i64($i103, 0);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i145 := $zext.i1.i32($i144);
    call {:si_unique_call 499} {:cexpr "__cil_tmp95"} boogie_si_record_i32($i145);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i146 := $ne.i32($i145, 0);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i147 := $xor.i1($i146, 1);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i148 := $zext.i1.i32($i147);
    call {:si_unique_call 500} {:cexpr "__cil_tmp96"} boogie_si_record_i32($i148);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i149 := $ne.i32($i148, 0);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i150 := $xor.i1($i149, 1);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i151 := $zext.i1.i32($i150);
    call {:si_unique_call 501} {:cexpr "__cil_tmp97"} boogie_si_record_i32($i151);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i152 := $sext.i32.i64($i151);
    call {:si_unique_call 502} {:cexpr "__cil_tmp98"} boogie_si_record_i64($i152);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i153 := ldv__builtin_expect($i152, 0);
    call {:si_unique_call 504} {:cexpr "tmp___22"} boogie_si_record_i64($i153);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i154 := $ne.i64($i153, 0);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i154 == 1);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i156 := $sgt.i64($i103, 0);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i157 := $zext.i1.i32($i156);
    call {:si_unique_call 522} {:cexpr "__cil_tmp99"} boogie_si_record_i32($i157);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i159 := $xor.i1($i158, 1);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i160 := $zext.i1.i32($i159);
    call {:si_unique_call 523} {:cexpr "__cil_tmp100"} boogie_si_record_i32($i160);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i161 := $ne.i32($i160, 0);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i162 := $xor.i1($i161, 1);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i163 := $zext.i1.i32($i162);
    call {:si_unique_call 524} {:cexpr "__cil_tmp101"} boogie_si_record_i32($i163);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i164 := $sext.i32.i64($i163);
    call {:si_unique_call 525} {:cexpr "__cil_tmp102"} boogie_si_record_i64($i164);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $i165 := ldv__builtin_expect($i164, 1);
    call {:si_unique_call 527} {:cexpr "tmp___21"} boogie_si_record_i64($i165);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i166 := $ne.i64($i165, 0);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    $i167 := $i103;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i155 := $i167;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i168 := $p2i.ref.i64($p0);
    call {:si_unique_call 528} {:cexpr "__cil_tmp103"} boogie_si_record_i64($i168);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i169 := $add.i64($i168, 2184);
    call {:si_unique_call 529} {:cexpr "__cil_tmp104"} boogie_si_record_i64($i169);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p170 := $i2p.i64.ref($i169);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} mutex_lock($p170);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i171 := $p2i.ref.i64($p0);
    call {:si_unique_call 531} {:cexpr "__cil_tmp106"} boogie_si_record_i64($i171);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i172 := $add.i64($i171, 2976);
    call {:si_unique_call 532} {:cexpr "__cil_tmp107"} boogie_si_record_i64($i172);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p173 := $i2p.i64.ref($i172);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $i174 := atomic_dec_and_test($p173);
    call {:si_unique_call 534} {:cexpr "tmp___24"} boogie_si_record_i32($i174);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i175 := $ne.i32($i174, 0);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i196 := $p2i.ref.i64($p0);
    call {:si_unique_call 552} {:cexpr "__cil_tmp123"} boogie_si_record_i64($i196);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i197 := $add.i64($i196, 2184);
    call {:si_unique_call 553} {:cexpr "__cil_tmp124"} boogie_si_record_i64($i197);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p198 := $i2p.i64.ref($i197);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} mutex_unlock($p198);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i199 := $trunc.i64.i32($i155);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i14 := $i199;
    goto $bb6;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i175 == 1;
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i176 := $p2i.ref.i64($p0);
    call {:si_unique_call 535} {:cexpr "__cil_tmp109"} boogie_si_record_i64($i176);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i177 := $add.i64($i176, 2984);
    call {:si_unique_call 536} {:cexpr "__cil_tmp110"} boogie_si_record_i64($i177);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p178 := $i2p.i64.ref($i177);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $p179 := spinlock_check($p178);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $i180 := _raw_spin_lock_irqsave($p179);
    call {:si_unique_call 539} {:cexpr "irq_flags"} boogie_si_record_i64($i180);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i181 := $p2i.ref.i64($p0);
    call {:si_unique_call 540} {:cexpr "__cil_tmp112"} boogie_si_record_i64($i181);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i182 := $add.i64($i181, 3016);
    call {:si_unique_call 541} {:cexpr "__cil_tmp113"} boogie_si_record_i64($i182);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i183 := $p2i.ref.i64($p0);
    call {:si_unique_call 542} {:cexpr "__cil_tmp114"} boogie_si_record_i64($i183);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i184 := $add.i64($i183, 3016);
    call {:si_unique_call 543} {:cexpr "__cil_tmp115"} boogie_si_record_i64($i184);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $p185 := $i2p.i64.ref($i184);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.0, $p185);
    call {:si_unique_call 544} {:cexpr "__cil_tmp116"} boogie_si_record_i32($i186);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i187 := $and.i32($i186, $sub.i32(0, 3));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p188 := $i2p.i64.ref($i182);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p188, $i187);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i189 := $p2i.ref.i64($p0);
    call {:si_unique_call 545} {:cexpr "__cil_tmp117"} boogie_si_record_i64($i189);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i190 := $add.i64($i189, 3016);
    call {:si_unique_call 546} {:cexpr "__cil_tmp118"} boogie_si_record_i64($i190);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p191 := $i2p.i64.ref($i190);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i192 := $load.i32($M.0, $p191);
    call {:si_unique_call 547} {:cexpr "__cil_tmp119"} boogie_si_record_i32($i192);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} vmw_write($p0, 33, $i192);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i193 := $p2i.ref.i64($p0);
    call {:si_unique_call 549} {:cexpr "__cil_tmp120"} boogie_si_record_i64($i193);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i194 := $add.i64($i193, 2984);
    call {:si_unique_call 550} {:cexpr "__cil_tmp121"} boogie_si_record_i64($i194);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p195 := $i2p.i64.ref($i194);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} spin_unlock_irqrestore($p195, $i180);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    goto $bb71;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i166 == 1;
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i167 := 0;
    goto $bb62;

  $bb57:
    assume $i154 == 1;
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i155 := $sub.i64(0, 16);
    goto $bb59;

  $bb42:
    assume $i106 == 1;
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    call {:si_unique_call 505} $p107 := devirtbounce.3(0, current_task);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p5);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p108, 0);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p5);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i110 := $add.i64($i109, 8);
    call {:si_unique_call 506} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i110);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p112 := $i2p.i64.ref($i110);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p112, $p107);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p5);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i114 := $add.i64($i113, 16);
    call {:si_unique_call 507} {:cexpr "__cil_tmp83"} boogie_si_record_i64($i114);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p115 := $i2p.i64.ref($i114);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p115, autoremove_wake_function);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i116 := $p2i.ref.i64($p5);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i117 := $add.i64($i116, 24);
    call {:si_unique_call 508} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i117);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p5);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i119 := $add.i64($i118, 24);
    call {:si_unique_call 509} {:cexpr "__cil_tmp85"} boogie_si_record_i64($i119);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p120 := $i2p.i64.ref($i119);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p121 := $i2p.i64.ref($i117);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p121, $p120);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p5);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i123 := $add.i64($i122, 32);
    call {:si_unique_call 510} {:cexpr "__cil_tmp87"} boogie_si_record_i64($i123);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($p5);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i125 := $add.i64($i124, 24);
    call {:si_unique_call 511} {:cexpr "__cil_tmp88"} boogie_si_record_i64($i125);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p126 := $i2p.i64.ref($i125);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p127 := $i2p.i64.ref($i123);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p127, $p126);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i128 := $i3;
    goto $bb46;

  $bb46:
    call $i128, $i129, $i130, $p131, $i132, $i133, $i134, $i135, $i137, $i138, $i139 := vmw_fifo_wait_loop_$bb46($p0, $i1, $p5, $i128, $i129, $i130, $p131, $i132, $i133, $i134, $i135, $i137, $i138, $i139);
    goto $bb46_last;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i129 := $p2i.ref.i64($p0);
    call {:si_unique_call 512} {:cexpr "__cil_tmp89"} boogie_si_record_i64($i129);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i130 := $add.i64($i129, 2928);
    call {:si_unique_call 513} {:cexpr "__cil_tmp90"} boogie_si_record_i64($i130);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p131 := $i2p.i64.ref($i130);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} prepare_to_wait($p131, $p5, 2);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i132 := vmw_fifo_is_full($p0, $i1);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i133 := $zext.i1.i8($i132);
    call {:si_unique_call 516} {:cexpr "tmp___19"} boogie_si_record_i8($i133);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i8.i1($i133);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i135 := $i128;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i136 := $i135;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p0);
    call {:si_unique_call 519} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i140);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i141 := $add.i64($i140, 2928);
    call {:si_unique_call 520} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i141);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p142 := $i2p.i64.ref($i141);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} finish_wait($p142, $p5);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i143 := $i136;
    goto $bb56;

  $bb48:
    assume $i134 == 1;
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i137 := schedule_timeout($i128);
    call {:si_unique_call 518} {:cexpr "__ret___0"} boogie_si_record_i64($i137);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i138 := $ne.i64($i137, 0);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i139 := $i137;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i136 := $i139;
    goto $bb51;

  $bb52:
    assume $i138 == 1;
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i128 := $i137;
    goto $bb54_dummy;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i59 == 1;
    call {:si_unique_call 473} {:cexpr "vmw_fifo_wait:arg:__ret"} boogie_si_record_i64($i3);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $i60 := vmw_fifo_is_full($p0, $i1);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i8($i60);
    call {:si_unique_call 475} {:cexpr "tmp___17"} boogie_si_record_i8($i61);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i8.i1($i61);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i102 := $i3;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i103 := $i102;
    goto $bb41;

  $bb22:
    assume $i62 == 1;
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    call {:si_unique_call 479} $p63 := devirtbounce.3(0, current_task);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p4);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p64, 0);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p4);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i66 := $add.i64($i65, 8);
    call {:si_unique_call 480} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i66);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p68 := $i2p.i64.ref($i66);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $p63);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p4);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, 16);
    call {:si_unique_call 481} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i70);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p71 := $i2p.i64.ref($i70);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p71, autoremove_wake_function);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p4);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i72, 24);
    call {:si_unique_call 482} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i73);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p4);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i75 := $add.i64($i74, 24);
    call {:si_unique_call 483} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i75);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p76 := $i2p.i64.ref($i75);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p77 := $i2p.i64.ref($i73);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p77, $p76);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p4);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i79 := $add.i64($i78, 32);
    call {:si_unique_call 484} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i79);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p4);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i81 := $add.i64($i80, 24);
    call {:si_unique_call 485} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i81);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p82 := $i2p.i64.ref($i81);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p83 := $i2p.i64.ref($i79);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p83, $p82);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i84 := $i3;
    goto $bb26;

  $bb26:
    call $i84, $i85, $i86, $p87, $i88, $i89, $i90, $i91, $p93, $i94, $i95, $i96, $i97, $i98 := vmw_fifo_wait_loop_$bb26($p0, $i1, $p4, $i84, $i85, $i86, $p87, $i88, $i89, $i90, $i91, $p93, $i94, $i95, $i96, $i97, $i98);
    goto $bb26_last;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p0);
    call {:si_unique_call 486} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i85);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 2928);
    call {:si_unique_call 487} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i86);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p87 := $i2p.i64.ref($i86);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} prepare_to_wait($p87, $p4, 1);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $i88 := vmw_fifo_is_full($p0, $i1);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i89 := $zext.i1.i8($i88);
    call {:si_unique_call 490} {:cexpr "tmp___14"} boogie_si_record_i8($i89);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i8.i1($i89);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i91 := $i84;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i92 := $i91;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p0);
    call {:si_unique_call 494} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i99);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i100 := $add.i64($i99, 2928);
    call {:si_unique_call 495} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i100);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p101 := $i2p.i64.ref($i100);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} finish_wait($p101, $p4);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i102 := $i92;
    goto $bb40;

  $bb28:
    assume $i90 == 1;
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    call {:si_unique_call 491} $p93 := devirtbounce.3(0, current_task);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i94 := signal_pending($p93);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 493} {:cexpr "tmp___16"} boogie_si_record_i32($i94);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i95 == 1);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $i96 := schedule_timeout($i84);
    call {:si_unique_call 498} {:cexpr "__ret"} boogie_si_record_i64($i96);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i97 := $ne.i64($i96, 0);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i98 := $i96;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i92 := $i98;
    goto $bb31;

  $bb35:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i84 := $i96;
    goto $bb38_dummy;

  $bb32:
    assume $i95 == 1;
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i92 := $sub.i64(0, 512);
    goto $bb31;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    call {:si_unique_call 448} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i31);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 2984);
    call {:si_unique_call 449} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i32);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $p34 := spinlock_check($p33);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $i35 := _raw_spin_lock_irqsave($p34);
    call {:si_unique_call 452} {:cexpr "irq_flags"} boogie_si_record_i64($i35);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p0);
    call {:si_unique_call 453} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i36);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 2104);
    call {:si_unique_call 454} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i37);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    call {:si_unique_call 455} {:cexpr "__cil_tmp50"} boogie_si_record_i32($i39);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 8);
    call {:si_unique_call 456} {:cexpr "__cil_tmp51"} boogie_si_record_i32($i40);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} outl(2, $i40);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p0);
    call {:si_unique_call 458} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i41);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 3016);
    call {:si_unique_call 459} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i42);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p0);
    call {:si_unique_call 460} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i43);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 3016);
    call {:si_unique_call 461} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i44);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    call {:si_unique_call 462} {:cexpr "__cil_tmp57"} boogie_si_record_i32($i46);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i46, 2);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i42);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p0);
    call {:si_unique_call 463} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i49);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i49, 3016);
    call {:si_unique_call 464} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i50);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p51 := $i2p.i64.ref($i50);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    call {:si_unique_call 465} {:cexpr "__cil_tmp60"} boogie_si_record_i32($i52);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} vmw_write($p0, 33, $i52);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p0);
    call {:si_unique_call 467} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i53);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i53, 2984);
    call {:si_unique_call 468} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i54);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p55 := $i2p.i64.ref($i54);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} spin_unlock_irqrestore($p55, $i35);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb54_dummy:
    assume false;
    return;

  $bb46_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1138;

  $bb38_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1062;
}



const vmalloc: ref;

axiom vmalloc == $sub.ref(0, 431448);

procedure vmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation vmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} {:cexpr "vmalloc:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $p1 := external_alloc();
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 432480);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 1} true;
    call {:si_unique_call 557} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 558} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const vmw_fifo_wait_noirq: ref;

axiom vmw_fifo_wait_noirq == $sub.ref(0, 433512);

procedure vmw_fifo_wait_noirq($p0: ref, $i1: i32, $i2: i1, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.2, $M.0, $CurrAddr, $M.6, $M.1, assertsPassed, $M.11, $M.12, $M.10, $M.16, $M.13;



implementation vmw_fifo_wait_noirq($p0: ref, $i1: i32, $i2: i1, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i1;
  var $i40: i8;
  var $i41: i1;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i42: i32;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 562} {:cexpr "vmw_fifo_wait_noirq:arg:bytes"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i2);
    call {:si_unique_call 563} {:cexpr "vmw_fifo_wait_noirq:arg:interruptible"} boogie_si_record_i1($i2);
    call {:si_unique_call 564} {:cexpr "vmw_fifo_wait_noirq:arg:timeout"} boogie_si_record_i64($i3);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $M.3 := $store.i64($M.3, $p5, $i3);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, jiffies);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.3, $p5);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i8, $i9);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $M.4 := $store.i64($M.4, $p6, $i10);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.4, $p6);
    call {:si_unique_call 565} {:cexpr "end_jiffies"} boogie_si_record_i64($i11);
    call {:si_unique_call 566} $p12 := devirtbounce.3(0, current_task);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p4);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p13, 0);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p4);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 8);
    call {:si_unique_call 567} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i15);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i15);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p12);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p4);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 16);
    call {:si_unique_call 568} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i19);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, autoremove_wake_function);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p4);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 24);
    call {:si_unique_call 569} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i22);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p4);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 24);
    call {:si_unique_call 570} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i24);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i22);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p25);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p4);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 32);
    call {:si_unique_call 571} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i28);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p4);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 24);
    call {:si_unique_call 572} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i30);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i28);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p31);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} vslice_dummy_var_59 := printk.ref(.str.268);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i34, $i35, $i36, $i37, $p38, $i39, $i40, $i41, $i43, $i44, $i45, $i48, $p49, $i50, $i51, vslice_dummy_var_62 := vmw_fifo_wait_noirq_loop_$bb1($p0, $i1, $p4, $i7, $i11, $i34, $i35, $i36, $i37, $p38, $i39, $i40, $i41, $i43, $i44, $i45, $i48, $p49, $i50, $i51, vslice_dummy_var_62);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1($i7);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := 2;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p0);
    call {:si_unique_call 574} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i36);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 2928);
    call {:si_unique_call 575} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i37);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} prepare_to_wait($p38, $p4, $i35);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $i39 := vmw_fifo_is_full($p0, $i1);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i8($i39);
    call {:si_unique_call 578} {:cexpr "tmp___9"} boogie_si_record_i8($i40);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i40);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i41 == 1);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p0);
    call {:si_unique_call 581} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i52);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 2928);
    call {:si_unique_call 582} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i53);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i53);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} finish_wait($p54, $p4);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p0);
    call {:si_unique_call 584} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i55);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 2928);
    call {:si_unique_call 585} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i56);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} __wake_up($p57, 3, 0, $0.ref);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} vslice_dummy_var_60 := printk.ref(.str.270);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb6:
    assume $i41 == 1;
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, jiffies);
    call {:si_unique_call 579} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i43);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i44 := $sub.i64($i43, $i11);
    call {:si_unique_call 580} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i44);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i45 := $sge.i64($i44, 0);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} vslice_dummy_var_62 := schedule_timeout(1);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i8.i1($i7);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb18_dummy;

  $bb13:
    assume $i48 == 1;
    call {:si_unique_call 590} $p49 := devirtbounce.3(0, current_task);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $i50 := signal_pending($p49);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 592} {:cexpr "tmp___11"} boogie_si_record_i32($i50);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i51 == 1;
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 512);
    goto $bb9;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i45 == 1;
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} vslice_dummy_var_61 := drm_err.ref.ref(.str.269, .str.89);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 16);
    goto $bb9;

  $bb3:
    assume $i34 == 1;
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i35 := 1;
    goto $bb5;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb18_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb2;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 434544);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed, $M.6, $M.11, $M.12, $M.2, $CurrAddr, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 594} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(1 == 1);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} __xadd_wrong_size();
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i13 := $i0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i0, $i13);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume 1 == 1;
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    call {:si_unique_call 595} $i9 := devirtbounce.4(0, $p8, $i0, $p8);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 596} {:cexpr "__ret"} boogie_si_record_i32($i9);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $i9;
    goto $bb12;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const autoremove_wake_function: ref;

axiom autoremove_wake_function == $sub.ref(0, 435576);

procedure autoremove_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const prepare_to_wait: ref;

axiom prepare_to_wait == $sub.ref(0, 436608);

procedure prepare_to_wait($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation prepare_to_wait($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} {:cexpr "prepare_to_wait:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 437640);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.6, $CurrAddr, $M.3, $M.4, $M.10, $M.13, $M.16;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $i1 := test_tsk_thread_flag($p0, 2);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 603} {:cexpr "tmp___7"} boogie_si_record_i32($i1);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 604} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i4);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 606} {:cexpr "tmp___9"} boogie_si_record_i64($i5);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 438672);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 607} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 1} true;
    call {:si_unique_call 608} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 609} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 439704);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    return;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 440736);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    call {:si_unique_call 611} devirtbounce.5(0, $p2, $p1, $p2);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.5, $p1);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    call {:si_unique_call 612} {:cexpr "__cil_tmp3"} boogie_si_record_i32($i4);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 441768);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.6, $CurrAddr, $M.3, $M.4, $M.10, $M.13, $M.16;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 614} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 8);
    call {:si_unique_call 615} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $i7 := test_ti_thread_flag($p6, $i1);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 617} {:cexpr "tmp___7"} boogie_si_record_i32($i7);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 442800);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.6, $CurrAddr, $M.3, $M.4, $M.10, $M.13, $M.16;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 619} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 16);
    call {:si_unique_call 620} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i3);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $i6 := variable_test_bit($i1, $p5);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 622} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 443832);

procedure variable_test_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.6, $CurrAddr, $M.3, $M.4, $M.10, $M.13, $M.16;



implementation variable_test_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 624} $i2 := devirtbounce.6(0, $p1, $i0);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 625} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const __xadd_wrong_size: ref;

axiom __xadd_wrong_size == $sub.ref(0, 444864);

procedure __xadd_wrong_size();



const printk: ref;

axiom printk == $sub.ref(0, 445896);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 1} true;
    call {:si_unique_call 626} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 627} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 1} true;
    call {:si_unique_call 628} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 629} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64($p0: ref, p.1: i64) returns ($r: i32);



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 1} true;
    call {:si_unique_call 630} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 631} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 1} true;
    call {:si_unique_call 632} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 633} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 1} true;
    call {:si_unique_call 634} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 635} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 1} true;
    call {:si_unique_call 636} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 637} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 446928);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 639} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 447960);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    return;
}



const vmw_ttm_tt_create: ref;

axiom vmw_ttm_tt_create == $sub.ref(0, 448992);

procedure vmw_ttm_tt_create($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);



const ttm_pool_populate: ref;

axiom ttm_pool_populate == $sub.ref(0, 450024);

procedure ttm_pool_populate($p0: ref) returns ($r: i32);



const ttm_pool_unpopulate: ref;

axiom ttm_pool_unpopulate == $sub.ref(0, 451056);

procedure ttm_pool_unpopulate($p0: ref);



const vmw_invalidate_caches: ref;

axiom vmw_invalidate_caches == $sub.ref(0, 452088);

procedure vmw_invalidate_caches($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vmw_invalidate_caches($p0: ref, $i1: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} {:cexpr "vmw_invalidate_caches:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vmw_init_mem_type: ref;

axiom vmw_init_mem_type == $sub.ref(0, 453120);

procedure vmw_init_mem_type($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vmw_init_mem_type($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i32;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i32;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $i48: i32;
  var vslice_dummy_var_63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} {:cexpr "vmw_init_mem_type:arg:type"} boogie_si_record_i32($i1);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 2);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 3);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} vslice_dummy_var_63 := drm_err.ref.ref.i32(.str.77, .str.78, $i1);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32(0, 22);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $r := $i48;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p2);
    call {:si_unique_call 660} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i31);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 40);
    call {:si_unique_call 661} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i32);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, vmw_gmrid_manager_func);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p2);
    call {:si_unique_call 662} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i34);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 16);
    call {:si_unique_call 663} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i35);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p36, 0);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p2);
    call {:si_unique_call 664} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i37);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 12);
    call {:si_unique_call 665} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i38);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i39 := $or.i32(8, 2);
    call {:si_unique_call 666} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i39);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i38);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p2);
    call {:si_unique_call 667} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i41);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 32);
    call {:si_unique_call 668} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i42);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i42);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 65536);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p2);
    call {:si_unique_call 669} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i44);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 36);
    call {:si_unique_call 670} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i45);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p46 := $i2p.i64.ref($i45);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 65536);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb15;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p2);
    call {:si_unique_call 649} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i15);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 40);
    call {:si_unique_call 650} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i16);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, ttm_bo_manager_func);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p2);
    call {:si_unique_call 651} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i18);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 16);
    call {:si_unique_call 652} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i19);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, 0);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p2);
    call {:si_unique_call 653} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i21);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 12);
    call {:si_unique_call 654} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i22);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i23 := $or.i32(1, 2);
    call {:si_unique_call 655} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i23);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i22);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p2);
    call {:si_unique_call 656} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i25);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 32);
    call {:si_unique_call 657} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i26);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 65536);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p2);
    call {:si_unique_call 658} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i28);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 36);
    call {:si_unique_call 659} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i29);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 65536);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p2);
    call {:si_unique_call 643} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i6);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 12);
    call {:si_unique_call 644} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i7);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 2);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p2);
    call {:si_unique_call 645} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i9);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 32);
    call {:si_unique_call 646} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i10);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 65536);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p2);
    call {:si_unique_call 647} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i12);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 36);
    call {:si_unique_call 648} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i13);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 65536);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    goto $bb14;
}



const vmw_evict_flags: ref;

axiom vmw_evict_flags == $sub.ref(0, 454152);

procedure vmw_evict_flags($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vmw_evict_flags($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref(vmw_sys_placement);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 672} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p2, $p3, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    return;
}



const vmw_verify_access: ref;

axiom vmw_verify_access == $sub.ref(0, 455184);

procedure vmw_verify_access($p0: ref, $p1: ref) returns ($r: i32);



const vmw_sync_obj_signaled: ref;

axiom vmw_sync_obj_signaled == $sub.ref(0, 456216);

procedure vmw_sync_obj_signaled($p0: ref, $p1: ref) returns ($r: i1);



const vmw_sync_obj_wait: ref;

axiom vmw_sync_obj_wait == $sub.ref(0, 457248);

procedure vmw_sync_obj_wait($p0: ref, $p1: ref, $i2: i1, $i3: i1) returns ($r: i32);



const vmw_sync_obj_flush: ref;

axiom vmw_sync_obj_flush == $sub.ref(0, 458280);

procedure vmw_sync_obj_flush($p0: ref, $p1: ref) returns ($r: i32);



const vmw_sync_obj_unref: ref;

axiom vmw_sync_obj_unref == $sub.ref(0, 459312);

procedure vmw_sync_obj_unref($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $CurrAddr, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation vmw_sync_obj_unref($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} vmw_fence_obj_unreference($p1);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const vmw_sync_obj_ref: ref;

axiom vmw_sync_obj_ref == $sub.ref(0, 460344);

procedure vmw_sync_obj_ref($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr, $M.1, $M.2, assertsPassed, $M.11, $M.12, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation vmw_sync_obj_ref($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $p2 := vmw_fence_obj_reference($p1);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const vmw_ttm_fault_reserve_notify: ref;

axiom vmw_ttm_fault_reserve_notify == $sub.ref(0, 461376);

procedure vmw_ttm_fault_reserve_notify($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vmw_ttm_fault_reserve_notify($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vmw_ttm_io_mem_reserve: ref;

axiom vmw_ttm_io_mem_reserve == $sub.ref(0, 462408);

procedure vmw_ttm_io_mem_reserve($p0: ref, $p1: ref) returns ($r: i32);



const vmw_ttm_io_mem_free: ref;

axiom vmw_ttm_io_mem_free == $sub.ref(0, 463440);

procedure vmw_ttm_io_mem_free($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation vmw_ttm_io_mem_free($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    return;
}



const vmw_fence_obj_reference: ref;

axiom vmw_fence_obj_reference == $sub.ref(0, 464472);

procedure vmw_fence_obj_reference($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr, $M.1, $M.2, assertsPassed, $M.11, $M.12, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation vmw_fence_obj_reference($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p16: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 675} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i1);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 676} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, $i1);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 677} {:cexpr "__cil_tmp6"} boogie_si_record_i32($i4);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i6 := $xor.i1($i5, 1);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 678} {:cexpr "__cil_tmp7"} boogie_si_record_i32($i7);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i9 := $xor.i1($i8, 1);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 679} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i10);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    call {:si_unique_call 680} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i11);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 682} {:cexpr "tmp___7"} boogie_si_record_i64($i12);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p0);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} kref_get($p16);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p15 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $r := $p15;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p15 := $0.ref;
    goto $bb3;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 465504);

procedure kref_get($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr, $M.1, $M.2, assertsPassed, $M.11, $M.12, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $p22: ref;
  var vslice_dummy_var_64: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $i2 := atomic_read($p1);
    call {:si_unique_call 685} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i6 := $xor.i1($i5, 1);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 686} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i7);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i9 := $xor.i1($i8, 1);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 687} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i10);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    call {:si_unique_call 688} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i11);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 690} {:cexpr "tmp___1"} boogie_si_record_i64($i12);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i4, 0);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i15 := $xor.i1($i14, 1);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    call {:si_unique_call 692} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i16);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i18 := $xor.i1($i17, 1);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    call {:si_unique_call 693} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i19);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    call {:si_unique_call 694} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i20);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} vslice_dummy_var_64 := ldv__builtin_expect($i20, 0);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p0);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} atomic_inc($p22);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} warn_slowpath_null(.str.257, 41);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 466536);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1, $i3);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.6, $p1);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 467568);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 468600);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.6, $M.2, assertsPassed, $M.11, $M.12, $M.3, $M.4, $CurrAddr, $M.10, $M.16, $M.13;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 699} devirtbounce.7(0, $p1, $p1);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const vmw_fence_obj_unreference: ref;

axiom vmw_fence_obj_unreference == $sub.ref(0, 469632);

procedure vmw_fence_obj_unreference($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $CurrAddr, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation vmw_fence_obj_unreference($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var vslice_dummy_var_65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, $p0);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 700} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i2);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    call {:si_unique_call 701} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i3);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $i2);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 702} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i5);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i7 := $xor.i1($i6, 1);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 703} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i8);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i10 := $xor.i1($i9, 1);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 704} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i11);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    call {:si_unique_call 705} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i12);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 707} {:cexpr "tmp___7"} boogie_si_record_i64($i13);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p1);
    call {:si_unique_call 708} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i15);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 8);
    call {:si_unique_call 709} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i16);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p0, $0.ref);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p18);
    call {:si_unique_call 710} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i20);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 16);
    call {:si_unique_call 711} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i21);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} spin_lock_irq($p22);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $i24 := atomic_read($p23);
    call {:si_unique_call 714} {:cexpr "tmp___8"} boogie_si_record_i32($i24);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    call {:si_unique_call 715} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i27);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 717} {:cexpr "tmp___10"} boogie_si_record_i64($i28);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p1);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} vslice_dummy_var_65 := kref_put($p30, vmw_fence_obj_destroy_locked);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p18);
    call {:si_unique_call 720} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i32);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 16);
    call {:si_unique_call 721} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i33);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} spin_unlock_irq($p34);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call {:si_unique_call 718} devirtbounce(0, .str.108, 269, 12);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    call vmw_fence_obj_unreference_loop_$bb14();
    goto $bb14_last;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb9;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 470664);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} _raw_spin_lock_irq($p1);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    return;
}



const vmw_fence_obj_destroy_locked: ref;

axiom vmw_fence_obj_destroy_locked == $sub.ref(0, 471696);

procedure vmw_fence_obj_destroy_locked($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.6, assertsPassed, $M.2, $M.11, $M.12, $CurrAddr, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation vmw_fence_obj_destroy_locked($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i32($p1);
    call {:si_unique_call 724} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i2);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i2);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, $i4);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    call {:si_unique_call 725} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i8);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 8);
    call {:si_unique_call 726} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i9);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p7);
    call {:si_unique_call 727} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i12);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 16);
    call {:si_unique_call 728} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i13);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} list_del_init($p14);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p11);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    call {:si_unique_call 730} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i16);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i16, 1);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p11);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p11);
    call {:si_unique_call 731} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i19);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 16);
    call {:si_unique_call 732} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i20);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} spin_unlock_irq($p21);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p7);
    call {:si_unique_call 734} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i22);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 56);
    call {:si_unique_call 735} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i23);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i26 := $ne.ref($p25, $0.ref);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p7);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} kfree($p31);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p11);
    call {:si_unique_call 740} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i32);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 16);
    call {:si_unique_call 741} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i33);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} spin_lock_irq($p34);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p7);
    call {:si_unique_call 736} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i27);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 56);
    call {:si_unique_call 737} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i28);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    call {:si_unique_call 738} devirtbounce.8($p30, $p7);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_127:
    assume !assertsPassed;
    return;
}



const kref_put: ref;

axiom kref_put == $sub.ref(0, 472728);

procedure kref_put($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.1, assertsPassed, $M.2, $M.11, $M.12, $CurrAddr, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation kref_put($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $i2 := kref_sub($p0, 1, $p1);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 744} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 473760);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} _raw_spin_unlock_irq($p1);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 474792);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    return;
}



const kref_sub: ref;

axiom kref_sub == $sub.ref(0, 475824);

procedure kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.1, assertsPassed, $M.2, $M.11, $M.12, $CurrAddr, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var vslice_dummy_var_66: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} {:cexpr "kref_sub:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 747} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i3);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p2);
    call {:si_unique_call 748} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i4);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, $i3);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 749} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i6);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i8 := $xor.i1($i7, 1);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 750} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i9);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 751} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i14 := $xor.i1($i13, 1);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    call {:si_unique_call 752} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i15);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i17 := $xor.i1($i16, 1);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    call {:si_unique_call 753} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i18);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    call {:si_unique_call 754} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i19);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 756} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i12, 0);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i23 := $xor.i1($i22, 1);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    call {:si_unique_call 758} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i24);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i26 := $xor.i1($i25, 1);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    call {:si_unique_call 759} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i27);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    call {:si_unique_call 760} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i28);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} vslice_dummy_var_66 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 762} {:cexpr "kref_sub:arg:__cil_tmp19"} boogie_si_record_i32($i1);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p0);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $i31 := atomic_sub_and_test($i1, $p30);
    call {:si_unique_call 764} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb4:
    assume $i32 == 1;
    call {:si_unique_call 765} devirtbounce.9($p2, $p0);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i33 := 1;
    goto $bb6;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} warn_slowpath_null(.str.257, 66);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_sub_and_test: ref;

axiom atomic_sub_and_test == $sub.ref(0, 476856);

procedure atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 767} {:cexpr "atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    call {:si_unique_call 768} devirtbounce.10(0, $p3, $p2, $i0, $p3);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.7, $p2);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 477888);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} __list_del_entry($p0);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} INIT_LIST_HEAD($p0);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 478920);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} free_($p0);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 479952);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 772} $free($p0);
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 480984);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 482016);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 773} {:cexpr "__cil_tmp2"} boogie_si_record_i64($i2);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 8);
    call {:si_unique_call 774} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i3);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p0);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 483048);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    return;
}



const vmw_fence_obj_flush: ref;

axiom vmw_fence_obj_flush == $sub.ref(0, 484080);

procedure vmw_fence_obj_flush($p0: ref);



const vmw_fence_obj_wait: ref;

axiom vmw_fence_obj_wait == $sub.ref(0, 485112);

procedure vmw_fence_obj_wait($p0: ref, $i1: i32, $i2: i1, $i3: i1, $i4: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.1, $CurrAddr, assertsPassed, $M.6, $M.11, $M.12, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation vmw_fence_obj_wait($p0: ref, $i1: i32, $i2: i1, $i3: i1, $i4: i64) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $i17: i8;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i8;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $i54: i1;
  var $i55: i8;
  var $i56: i1;
  var $i57: i64;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i64;
  var $i63: i1;
  var $i64: i64;
  var $i58: i64;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $i28: i64;
  var $i69: i1;
  var $i70: i8;
  var $i71: i1;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i64;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $i84: i64;
  var $i85: i64;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $i95: i64;
  var $i96: i64;
  var $p97: ref;
  var $i98: i1;
  var $i99: i8;
  var $i100: i1;
  var $i101: i64;
  var $i103: i64;
  var $i104: i1;
  var $i105: i64;
  var $i102: i64;
  var $i106: i64;
  var $i107: i64;
  var $p108: ref;
  var $i72: i64;
  var $i68: i64;
  var $i109: i1;
  var $i110: i32;
  var $i111: i1;
  var $i112: i1;
  var $i113: i32;
  var $i114: i1;
  var $i115: i1;
  var $i116: i32;
  var $i117: i64;
  var $i118: i64;
  var $i119: i1;
  var $i121: i1;
  var $i122: i32;
  var $i123: i1;
  var $i124: i1;
  var $i125: i32;
  var $i126: i1;
  var $i127: i1;
  var $i128: i32;
  var $i129: i64;
  var $i130: i64;
  var $i131: i1;
  var $i132: i64;
  var $i120: i64;
  var $i133: i32;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 777} {:cexpr "vmw_fence_obj_wait:arg:flags"} boogie_si_record_i32($i1);
    call {:si_unique_call 778} {:cexpr "vmw_fence_obj_wait:arg:lazy"} boogie_si_record_i1($i2);
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i3);
    call {:si_unique_call 779} {:cexpr "vmw_fence_obj_wait:arg:interruptible"} boogie_si_record_i1($i3);
    call {:si_unique_call 780} {:cexpr "vmw_fence_obj_wait:arg:timeout"} boogie_si_record_i64($i4);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 781} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i8);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 8);
    call {:si_unique_call 782} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i9);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    call {:si_unique_call 783} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i12);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 8);
    call {:si_unique_call 784} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i13);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $i16 := vmw_fence_obj_signaled($p0, $i1);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 786} {:cexpr "tmp___7"} boogie_si_record_i8($i17);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    call {:si_unique_call 787} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i20);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $i21 := ldv__builtin_expect($i20, 1);
    call {:si_unique_call 789} {:cexpr "tmp___9"} boogie_si_record_i64($i21);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} vmw_fifo_ping_host($p15, 1);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} vmw_seqno_waiter_add($p15);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i7);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    call {:si_unique_call 795} {:cexpr "vmw_fence_obj_wait:arg:__ret___0"} boogie_si_record_i64($i4);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $i69 := vmw_fence_obj_signaled($p0, $i1);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i70 := $zext.i1.i8($i69);
    call {:si_unique_call 797} {:cexpr "tmp___17"} boogie_si_record_i8($i70);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i8.i1($i70);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i71 == 1);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    call {:si_unique_call 825} $p73 := devirtbounce.3(0, current_task);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p6);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p74, 0);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p6);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i76 := $add.i64($i75, 8);
    call {:si_unique_call 826} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i76);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p78 := $i2p.i64.ref($i76);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p78, $p73);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p6);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i80 := $add.i64($i79, 16);
    call {:si_unique_call 827} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i80);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p81 := $i2p.i64.ref($i80);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p81, autoremove_wake_function);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p6);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, 24);
    call {:si_unique_call 828} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i83);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p6);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i85 := $add.i64($i84, 24);
    call {:si_unique_call 829} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i85);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p86 := $i2p.i64.ref($i85);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p87 := $i2p.i64.ref($i83);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p87, $p86);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p6);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i89 := $add.i64($i88, 32);
    call {:si_unique_call 830} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i89);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p6);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i91 := $add.i64($i90, 24);
    call {:si_unique_call 831} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i91);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p92 := $i2p.i64.ref($i91);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p93 := $i2p.i64.ref($i89);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p93, $p92);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i94 := $i4;
    goto $bb35;

  $bb35:
    call $i94, $i95, $i96, $p97, $i98, $i99, $i100, $i101, $i103, $i104, $i105 := vmw_fence_obj_wait_loop_$bb35($p0, $i1, $p6, $i94, $i95, $i96, $p97, $i98, $i99, $i100, $i101, $i103, $i104, $i105);
    goto $bb35_last;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p0);
    call {:si_unique_call 832} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i95);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i96 := $add.i64($i95, 64);
    call {:si_unique_call 833} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i96);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p97 := $i2p.i64.ref($i96);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} prepare_to_wait($p97, $p6, 2);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $i98 := vmw_fence_obj_signaled($p0, $i1);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i99 := $zext.i1.i8($i98);
    call {:si_unique_call 836} {:cexpr "tmp___16"} boogie_si_record_i8($i99);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i8.i1($i99);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i101 := $i94;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $i103 := schedule_timeout($i94);
    call {:si_unique_call 841} {:cexpr "__ret___0"} boogie_si_record_i64($i103);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i104 := $ne.i64($i103, 0);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i105 := $i103;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i102 := $i105;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p0);
    call {:si_unique_call 837} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i106);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i107 := $add.i64($i106, 64);
    call {:si_unique_call 838} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i107);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p108 := $i2p.i64.ref($i107);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} finish_wait($p108, $p6);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i72 := $i102;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i68 := $i72;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} vmw_seqno_waiter_remove($p15);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i109 := $eq.i64($i68, 0);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i110 := $zext.i1.i32($i109);
    call {:si_unique_call 819} {:cexpr "__cil_tmp60"} boogie_si_record_i32($i110);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i112 := $xor.i1($i111, 1);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i113 := $zext.i1.i32($i112);
    call {:si_unique_call 820} {:cexpr "__cil_tmp61"} boogie_si_record_i32($i113);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i114 := $ne.i32($i113, 0);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i115 := $xor.i1($i114, 1);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i116 := $zext.i1.i32($i115);
    call {:si_unique_call 821} {:cexpr "__cil_tmp62"} boogie_si_record_i32($i116);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i117 := $sext.i32.i64($i116);
    call {:si_unique_call 822} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i117);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i118 := ldv__builtin_expect($i117, 0);
    call {:si_unique_call 824} {:cexpr "tmp___19"} boogie_si_record_i64($i118);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i119 := $ne.i64($i118, 0);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i119 == 1);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i121 := $sgt.i64($i68, 0);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i122 := $zext.i1.i32($i121);
    call {:si_unique_call 842} {:cexpr "__cil_tmp64"} boogie_si_record_i32($i122);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i124 := $xor.i1($i123, 1);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i125 := $zext.i1.i32($i124);
    call {:si_unique_call 843} {:cexpr "__cil_tmp65"} boogie_si_record_i32($i125);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i127 := $xor.i1($i126, 1);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i128 := $zext.i1.i32($i127);
    call {:si_unique_call 844} {:cexpr "__cil_tmp66"} boogie_si_record_i32($i128);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i129 := $sext.i32.i64($i128);
    call {:si_unique_call 845} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i129);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $i130 := ldv__builtin_expect($i129, 1);
    call {:si_unique_call 847} {:cexpr "tmp___18"} boogie_si_record_i64($i130);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i131 := $ne.i64($i130, 0);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    $i132 := $i68;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i120 := $i132;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i64.i32($i120);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i23 := $i133;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb48:
    assume $i131 == 1;
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i132 := 0;
    goto $bb50;

  $bb45:
    assume $i119 == 1;
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i120 := $sub.i64(0, 16);
    goto $bb47;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i104 == 1;
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i94 := $i103;
    goto $bb43_dummy;

  $bb37:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i102 := $i101;
    goto $bb39;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i71 == 1;
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i72 := $i4;
    goto $bb32;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i24 == 1;
    call {:si_unique_call 792} {:cexpr "vmw_fence_obj_wait:arg:__ret"} boogie_si_record_i64($i4);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i25 := vmw_fence_obj_signaled($p0, $i1);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i8($i25);
    call {:si_unique_call 794} {:cexpr "tmp___14"} boogie_si_record_i8($i26);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i26);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    call {:si_unique_call 798} $p29 := devirtbounce.3(0, current_task);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p5);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p30, 0);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p5);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 8);
    call {:si_unique_call 799} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i32);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i32);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p29);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p5);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 16);
    call {:si_unique_call 800} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i36);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i36);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, autoremove_wake_function);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p5);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 24);
    call {:si_unique_call 801} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i39);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p5);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 24);
    call {:si_unique_call 802} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i41);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i39);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $p42);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p5);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 32);
    call {:si_unique_call 803} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i45);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p5);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 24);
    call {:si_unique_call 804} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i47);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i45);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, $p48);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i50 := $i4;
    goto $bb15;

  $bb15:
    call $i50, $i51, $i52, $p53, $i54, $i55, $i56, $i57, $p59, $i60, $i61, $i62, $i63, $i64 := vmw_fence_obj_wait_loop_$bb15($p0, $i1, $p5, $i50, $i51, $i52, $p53, $i54, $i55, $i56, $i57, $p59, $i60, $i61, $i62, $i63, $i64);
    goto $bb15_last;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p0);
    call {:si_unique_call 805} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i51);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 64);
    call {:si_unique_call 806} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i52);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} prepare_to_wait($p53, $p5, 1);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $i54 := vmw_fence_obj_signaled($p0, $i1);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i8($i54);
    call {:si_unique_call 809} {:cexpr "tmp___11"} boogie_si_record_i8($i55);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i8.i1($i55);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i57 := $i50;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    call {:si_unique_call 813} $p59 := devirtbounce.3(0, current_task);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i60 := signal_pending($p59);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    call {:si_unique_call 815} {:cexpr "tmp___13"} boogie_si_record_i32($i60);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i61 == 1);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $i62 := schedule_timeout($i50);
    call {:si_unique_call 817} {:cexpr "__ret"} boogie_si_record_i64($i62);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i64 := $i62;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i58 := $i64;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p0);
    call {:si_unique_call 810} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i65);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i66 := $add.i64($i65, 64);
    call {:si_unique_call 811} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i66);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p67 := $i2p.i64.ref($i66);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} finish_wait($p67, $p5);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i28 := $i58;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i68 := $i28;
    goto $bb29;

  $bb24:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i50 := $i62;
    goto $bb27_dummy;

  $bb21:
    assume $i61 == 1;
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i58 := $sub.i64(0, 512);
    goto $bb19;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb19;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i28 := $i4;
    goto $bb12;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb3;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb43_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1887;

  $bb27_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1812;
}



const vmw_fence_obj_signaled: ref;

axiom vmw_fence_obj_signaled == $sub.ref(0, 486144);

procedure vmw_fence_obj_signaled($p0: ref, $i1: i32) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.6, assertsPassed, $M.2, $M.11, $M.12, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation vmw_fence_obj_signaled($p0: ref, $i1: i32) returns ($r: i1)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i25: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} {:cexpr "vmw_fence_obj_signaled:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 849} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i2);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 8);
    call {:si_unique_call 850} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i3);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    call {:si_unique_call 851} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i6);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 16);
    call {:si_unique_call 852} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i7);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $p9 := spinlock_check($p8);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $i10 := _raw_spin_lock_irqsave($p9);
    call {:si_unique_call 855} {:cexpr "irq_flags"} boogie_si_record_i64($i10);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p0);
    call {:si_unique_call 856} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i11);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 32);
    call {:si_unique_call 857} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i12);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    call {:si_unique_call 858} {:cexpr "signaled"} boogie_si_record_i32($i14);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p5);
    call {:si_unique_call 859} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i15);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 16);
    call {:si_unique_call 860} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i16);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} spin_unlock_irqrestore($p17, $i10);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p0);
    call {:si_unique_call 862} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i18);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 36);
    call {:si_unique_call 863} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i19);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    call {:si_unique_call 864} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i21);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i1, $i21);
    call {:si_unique_call 865} {:cexpr "flags"} boogie_si_record_i32($i22);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i14, $i22);
    call {:si_unique_call 866} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i23);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, $i22);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i14, 1);
    call {:si_unique_call 867} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i26);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p5);
    call {:si_unique_call 869} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i28);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 16);
    call {:si_unique_call 870} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i29);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $p31 := spinlock_check($p30);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $i32 := _raw_spin_lock_irqsave($p31);
    call {:si_unique_call 873} {:cexpr "irq_flags"} boogie_si_record_i64($i32);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p0);
    call {:si_unique_call 874} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i33);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 32);
    call {:si_unique_call 875} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i34);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i34);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    call {:si_unique_call 876} {:cexpr "signaled"} boogie_si_record_i32($i36);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p5);
    call {:si_unique_call 877} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i37);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 16);
    call {:si_unique_call 878} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i38);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i38);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} spin_unlock_irqrestore($p39, $i32);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i36, $i22);
    call {:si_unique_call 880} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i40);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, $i22);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    call {:si_unique_call 881} {:cexpr "__cil_tmp36"} boogie_si_record_i32($i42);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i25 := $i43;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} vmw_fences_update($p5);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb9;
}



const vmw_seqno_waiter_add: ref;

axiom vmw_seqno_waiter_add == $sub.ref(0, 487176);

procedure vmw_seqno_waiter_add($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed;



implementation vmw_seqno_waiter_add($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i1;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 882} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i1);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 2184);
    call {:si_unique_call 883} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i2);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} mutex_lock($p3);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 885} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i4);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 2968);
    call {:si_unique_call 886} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i5);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 887} {:cexpr "tmp___8"} boogie_si_record_i32($i7);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 888} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i8);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 2968);
    call {:si_unique_call 889} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i9);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    call {:si_unique_call 890} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i10);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 2968);
    call {:si_unique_call 891} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i11);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    call {:si_unique_call 892} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i13);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 1);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i9);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i7, 0);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p0);
    call {:si_unique_call 915} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i42);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, 2184);
    call {:si_unique_call 916} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i43);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i43);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} mutex_unlock($p44);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p0);
    call {:si_unique_call 893} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i17);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 2984);
    call {:si_unique_call 894} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i18);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $p20 := spinlock_check($p19);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $i21 := _raw_spin_lock_irqsave($p20);
    call {:si_unique_call 897} {:cexpr "irq_flags"} boogie_si_record_i64($i21);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p0);
    call {:si_unique_call 898} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i22);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 2104);
    call {:si_unique_call 899} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i23);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    call {:si_unique_call 900} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i25);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 8);
    call {:si_unique_call 901} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i26);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} outl(1, $i26);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p0);
    call {:si_unique_call 903} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i27);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 3016);
    call {:si_unique_call 904} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i28);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    call {:si_unique_call 905} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i29);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 3016);
    call {:si_unique_call 906} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i30);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    call {:si_unique_call 907} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i32);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i32, 1);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i28);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p0);
    call {:si_unique_call 908} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i35);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 3016);
    call {:si_unique_call 909} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i36);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i36);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    call {:si_unique_call 910} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i38);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} vmw_write($p0, 33, $i38);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p0);
    call {:si_unique_call 912} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i39);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 2984);
    call {:si_unique_call 913} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i40);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i40);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} spin_unlock_irqrestore($p41, $i21);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const vmw_seqno_waiter_remove: ref;

axiom vmw_seqno_waiter_remove == $sub.ref(0, 488208);

procedure vmw_seqno_waiter_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed;



implementation vmw_seqno_waiter_remove($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 918} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i1);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 2184);
    call {:si_unique_call 919} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i2);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} mutex_lock($p3);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 921} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i4);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 2968);
    call {:si_unique_call 922} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i5);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 923} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i6);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 2968);
    call {:si_unique_call 924} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i7);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 925} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i9);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i9, 1);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i5);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    call {:si_unique_call 926} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i12);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 2968);
    call {:si_unique_call 927} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i13);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    call {:si_unique_call 928} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i15);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p0);
    call {:si_unique_call 946} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i37);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 2184);
    call {:si_unique_call 947} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i38);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i38);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} mutex_unlock($p39);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p0);
    call {:si_unique_call 929} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i17);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 2984);
    call {:si_unique_call 930} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i18);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $p20 := spinlock_check($p19);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $i21 := _raw_spin_lock_irqsave($p20);
    call {:si_unique_call 933} {:cexpr "irq_flags"} boogie_si_record_i64($i21);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p0);
    call {:si_unique_call 934} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i22);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 3016);
    call {:si_unique_call 935} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i23);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p0);
    call {:si_unique_call 936} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i24);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 3016);
    call {:si_unique_call 937} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i25);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    call {:si_unique_call 938} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i27);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, $sub.i32(0, 2));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i23);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p0);
    call {:si_unique_call 939} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i30);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 3016);
    call {:si_unique_call 940} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i31);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    call {:si_unique_call 941} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i33);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} vmw_write($p0, 33, $i33);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p0);
    call {:si_unique_call 943} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i34);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 2984);
    call {:si_unique_call 944} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i35);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} spin_unlock_irqrestore($p36, $i21);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_181:
    assume !assertsPassed;
    return;
}



const vmw_fences_update: ref;

axiom vmw_fences_update == $sub.ref(0, 489240);

procedure vmw_fences_update($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.6, assertsPassed, $M.2, $M.11, $M.12, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation vmw_fences_update($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $i73: i64;
  var $i74: i64;
  var $p75: ref;
  var $i76: i64;
  var $i77: i64;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i64;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $i88: i64;
  var $i89: i64;
  var $p90: ref;
  var $i92: i1;
  var $i93: i8;
  var $i94: i64;
  var $i95: i64;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $i99: i64;
  var $i100: i64;
  var $p101: ref;
  var $i103: i64;
  var $i104: i64;
  var $p105: ref;
  var $i106: i1;
  var $i107: i1;
  var $i108: i32;
  var $i109: i1;
  var $i110: i1;
  var $i111: i32;
  var $i112: i64;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var vslice_dummy_var_67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 950} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i2);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 8);
    call {:si_unique_call 951} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i3);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    call {:si_unique_call 952} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i6);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 2144);
    call {:si_unique_call 953} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i7);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(6, 4));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $i12 := ioread32($p11);
    call {:si_unique_call 955} {:cexpr "seqno"} boogie_si_record_i32($i12);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb1;

  $bb1:
    call $i13, $i14, $i15, $p16, $p17, $i18, $i19, $i20, $p21, $p22, $i23, $i24, $p25, $i26, $p27, $i28, $i29, $p30, $p31, $i32, $i33, $p34, $p35, $i36, $i37, $p38, $i39, $p40, $i41, $i42, $p43, $p45, $p46, $i47, $i48, $p49, $i50, $i51, $i52, $p53, $i54, $i55, $i56, $i57, $p58, $i59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $p69, $i70, $i71, $p72, $i73, $i74, $p75, $i76, $i77, $p78, $i79, $i80, $p81, $p82, $i83, $i84, $p85, $i86, $p87, $i88, $i89, $p90, $i92, $i93, $i94, $i95, $p96, $i97, $i98, $i99, $i100, $p101, $i103, $i104, $p105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $p115, $p116, $i117, $i118, vslice_dummy_var_67 := vmw_fences_update_loop_$bb1($p0, $p1, $p9, $i13, $i14, $i15, $p16, $p17, $i18, $i19, $i20, $p21, $p22, $i23, $i24, $p25, $i26, $p27, $i28, $i29, $p30, $p31, $i32, $i33, $p34, $p35, $i36, $i37, $p38, $i39, $p40, $i41, $i42, $p43, $p45, $p46, $i47, $i48, $p49, $i50, $i51, $i52, $p53, $i54, $i55, $i56, $i57, $p58, $i59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $p69, $i70, $i71, $p72, $i73, $i74, $p75, $i76, $i77, $p78, $i79, $i80, $p81, $p82, $i83, $i84, $p85, $i86, $p87, $i88, $i89, $p90, $i92, $i93, $i94, $i95, $p96, $i97, $i98, $i99, $i100, $p101, $i103, $i104, $p105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $p115, $p116, $i117, $i118, vslice_dummy_var_67);
    goto $bb1_last;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    call {:si_unique_call 956} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i14);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 16);
    call {:si_unique_call 957} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i15);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} $p17 := spinlock_check($p16);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $i18 := _raw_spin_lock_irqsave($p17);
    call {:si_unique_call 960} {:cexpr "flags"} boogie_si_record_i64($i18);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    call {:si_unique_call 961} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i19);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 40);
    call {:si_unique_call 962} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i20);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 963} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i23);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 16);
    call {:si_unique_call 964} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i24);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i32($p25);
    call {:si_unique_call 965} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i26);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p22);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i26);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i29 := $sub.i64(0, $i28);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p27, $mul.ref($i29, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    call {:si_unique_call 966} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i32);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 16);
    call {:si_unique_call 967} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i33);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 968} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i36);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 16);
    call {:si_unique_call 969} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i37);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i32($p38);
    call {:si_unique_call 970} {:cexpr "__cil_tmp45"} boogie_si_record_i32($i39);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p35);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i39);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i42 := $sub.i64(0, $i41);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p40, $mul.ref($i42, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p45, $p46 := $p30, $p43;
    goto $bb8;

  $bb8:
    call $p45, $p46, $i47, $i48, $p49, $i50, $i51, $i52, $p53, $i54, $i55, $i56, $i57, $p58, $i59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $p69, $i70, $i71, $p72, $i73, $i74, $p75, $i76, $i77, $p78, $i79, $i80, $p81, $p82, $i83, $i84, $p85, $i86, $p87, $i88, $i89, $p90 := vmw_fences_update_loop_$bb8($p0, $p1, $i13, $p45, $p46, $i47, $i48, $p49, $i50, $i51, $i52, $p53, $i54, $i55, $i56, $i57, $p58, $i59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $p69, $i70, $i71, $p72, $i73, $i74, $p75, $i76, $i77, $p78, $i79, $i80, $p81, $p82, $i83, $i84, $p85, $i86, $p87, $i88, $i89, $p90);
    goto $bb8_last;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p0);
    call {:si_unique_call 971} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i47);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 40);
    call {:si_unique_call 972} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i48);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i48);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    call {:si_unique_call 973} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i50);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p45);
    call {:si_unique_call 974} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i51);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 16);
    call {:si_unique_call 975} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i52);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    call {:si_unique_call 976} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i54);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, $i50);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i55 == 1);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $i92 := vmw_fence_goal_new_locked($p0, $i13);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i93 := $zext.i1.i8($i92);
    call {:si_unique_call 982} {:cexpr "needs_rerun"} boogie_si_record_i8($i93);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p0);
    call {:si_unique_call 983} {:cexpr "__cil_tmp87"} boogie_si_record_i64($i94);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i95 := $add.i64($i94, 104);
    call {:si_unique_call 984} {:cexpr "__cil_tmp88"} boogie_si_record_i64($i95);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p96 := $i2p.i64.ref($i95);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $i97 := list_empty($p96);
    call {:si_unique_call 986} {:cexpr "tmp___8"} boogie_si_record_i32($i97);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i98 == 1);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p0);
    call {:si_unique_call 1008} {:cexpr "__cil_tmp91"} boogie_si_record_i64($i99);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i100 := $add.i64($i99, 56);
    call {:si_unique_call 1009} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i100);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p101 := $i2p.i64.ref($i100);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} vslice_dummy_var_67 := schedule_work($p101);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i103 := $p2i.ref.i64($p0);
    call {:si_unique_call 1011} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i103);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i104 := $add.i64($i103, 16);
    call {:si_unique_call 1012} {:cexpr "__cil_tmp95"} boogie_si_record_i64($i104);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $p105 := $i2p.i64.ref($i104);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} spin_unlock_irqrestore($p105, $i18);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i8.i1($i93);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i107 := $xor.i1($i106, 1);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i108 := $zext.i1.i32($i107);
    call {:si_unique_call 1014} {:cexpr "__cil_tmp97"} boogie_si_record_i32($i108);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i110 := $xor.i1($i109, 1);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i111 := $zext.i1.i32($i110);
    call {:si_unique_call 1015} {:cexpr "__cil_tmp98"} boogie_si_record_i32($i111);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i112 := $sext.i32.i64($i111);
    call {:si_unique_call 1016} {:cexpr "__cil_tmp99"} boogie_si_record_i64($i112);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $i113 := ldv__builtin_expect($i112, 0);
    call {:si_unique_call 1018} {:cexpr "tmp___9"} boogie_si_record_i64($i113);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i114 := $ne.i64($i113, 0);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i114 == 1;
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p9, $mul.ref(6, 4));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $i117 := ioread32($p116);
    call {:si_unique_call 1020} {:cexpr "new_seqno"} boogie_si_record_i32($i117);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, $i13);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i118 == 1;
    assume {:verifier.code 0} true;
    $i13 := $i117;
    goto $bb22_dummy;

  $bb17:
    assume $i98 == 1;
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i55 == 1;
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p45);
    call {:si_unique_call 977} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i56);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i57 := $add.i64($i56, 4);
    call {:si_unique_call 978} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i57);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p58 := $i2p.i64.ref($i57);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    call {:si_unique_call 979} {:cexpr "__cil_tmp60"} boogie_si_record_i32($i59);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32($i13, $i59);
    call {:si_unique_call 980} {:cexpr "__cil_tmp61"} boogie_si_record_i32($i60);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i61 := $ult.i32($i60, 2147483648);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i61 == 1);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14:
    assume $i61 == 1;
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p45);
    call {:si_unique_call 987} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i62);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 16);
    call {:si_unique_call 988} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i63);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p64 := $i2p.i64.ref($i63);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} list_del_init($p64);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p45);
    call {:si_unique_call 990} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i65);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i66 := $add.i64($i65, 32);
    call {:si_unique_call 991} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i66);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p45);
    call {:si_unique_call 992} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i67);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i67, 32);
    call {:si_unique_call 993} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i68);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p69 := $i2p.i64.ref($i68);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    call {:si_unique_call 994} {:cexpr "__cil_tmp69"} boogie_si_record_i32($i70);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i71 := $or.i32($i70, 1);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p72 := $i2p.i64.ref($i66);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} INIT_LIST_HEAD($p1);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p45);
    call {:si_unique_call 996} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i73);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i73, 40);
    call {:si_unique_call 997} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i74);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p75 := $i2p.i64.ref($i74);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} list_splice_init($p75, $p1);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} vmw_fences_perform_actions($p0, $p1);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p45);
    call {:si_unique_call 1000} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i76);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i77 := $add.i64($i76, 64);
    call {:si_unique_call 1001} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i77);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p78 := $i2p.i64.ref($i77);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} __wake_up($p78, 3, 0, $0.ref);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p46);
    call {:si_unique_call 1003} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i79);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i80 := $add.i64($i79, 16);
    call {:si_unique_call 1004} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i80);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p81 := $i2p.i64.ref($i80);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1005} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i83);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i84 := $add.i64($i83, 16);
    call {:si_unique_call 1006} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i84);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p85 := $i2p.i64.ref($i84);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i32($p85);
    call {:si_unique_call 1007} {:cexpr "__cil_tmp84"} boogie_si_record_i32($i86);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p82);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i88 := $zext.i32.i64($i86);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i89 := $sub.i64(0, $i88);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p87, $mul.ref($i89, 1));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p45, $p46 := $p46, $p90;
    goto corral_source_split_2215_dummy;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  corral_source_split_2215_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2145;

  $bb22_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2110;
}



const list_splice_init: ref;

axiom list_splice_init == $sub.ref(0, 490272);

procedure list_splice_init($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_splice_init($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} $i2 := list_empty($p0);
    call {:si_unique_call 1022} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} __list_splice($p0, $p1, $p5);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} INIT_LIST_HEAD($p0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmw_fences_perform_actions: ref;

axiom vmw_fences_perform_actions == $sub.ref(0, 491304);

procedure vmw_fences_perform_actions($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.6, assertsPassed, $M.2, $M.11, $M.12, $CurrAddr, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation vmw_fences_perform_actions($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i32($p4);
    call {:si_unique_call 1025} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i5);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i5);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64(0, $i7);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p6, $mul.ref($i8, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i32($p13);
    call {:si_unique_call 1026} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i14);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p12);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i14);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i17 := $sub.i64(0, $i16);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p15, $mul.ref($i17, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p1);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p21, $p22 := $p9, $p18;
    goto $bb1;

  $bb1:
    call $p21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $p48, $i49, $i50, $i51, $p52, $p53, $i54, $i55, $i56, $i57, $p58, $p59, $p60, $i61, $i62, $p63, $p64, $p65, $p66, $i67, $p68, $i69, $i70, $p71 := vmw_fences_perform_actions_loop_$bb1($p0, $i20, $p21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $p48, $i49, $i50, $i51, $p52, $p53, $i54, $i55, $i56, $i57, $p58, $p59, $p60, $i61, $i62, $p63, $p64, $p65, $p66, $i67, $p68, $i69, $i70, $p71);
    goto $bb1_last;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p21);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    call {:si_unique_call 1027} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i24);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, $i20);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p21);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} list_del_init($p26);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p21);
    call {:si_unique_call 1029} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i27);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 16);
    call {:si_unique_call 1030} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i28);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    call {:si_unique_call 1031} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i30);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i30);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i32 := $mul.i64($i31, 4);
    call {:si_unique_call 1032} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i32);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i33 := $add.i64(120, $i32);
    call {:si_unique_call 1033} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i33);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p0);
    call {:si_unique_call 1034} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i34);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, $i33);
    call {:si_unique_call 1035} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i35);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p21);
    call {:si_unique_call 1036} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i36);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 16);
    call {:si_unique_call 1037} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i37);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    call {:si_unique_call 1038} {:cexpr "__cil_tmp33"} boogie_si_record_i32($i39);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i39);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i41 := $mul.i64($i40, 4);
    call {:si_unique_call 1039} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i41);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i42 := $add.i64(120, $i41);
    call {:si_unique_call 1040} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i42);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p0);
    call {:si_unique_call 1041} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i43);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, $i42);
    call {:si_unique_call 1042} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i44);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    call {:si_unique_call 1043} {:cexpr "__cil_tmp38"} boogie_si_record_i32($i46);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32($i46, 1);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i35);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1044} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i49);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p21);
    call {:si_unique_call 1045} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i50);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 24);
    call {:si_unique_call 1046} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i51);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    call {:si_unique_call 1047} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i54);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, $i49);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p21);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p0);
    call {:si_unique_call 1051} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i61);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, 104);
    call {:si_unique_call 1052} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i62);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p63 := $i2p.i64.ref($i62);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} list_add_tail($p60, $p63);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p22);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i32($p66);
    call {:si_unique_call 1054} {:cexpr "__cil_tmp55"} boogie_si_record_i32($i67);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p65);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i69 := $zext.i32.i64($i67);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i70 := $sub.i64(0, $i69);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p68, $mul.ref($i70, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p21, $p22 := $p22, $p71;
    goto corral_source_split_2338_dummy;

  $bb7:
    assume $i55 == 1;
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p21);
    call {:si_unique_call 1048} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i56);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i57 := $add.i64($i56, 24);
    call {:si_unique_call 1049} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i57);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p58 := $i2p.i64.ref($i57);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    call {:si_unique_call 1050} devirtbounce.11($p59, $p21);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  corral_source_split_2338_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2276;
}



const vmw_fence_goal_new_locked: ref;

axiom vmw_fence_goal_new_locked == $sub.ref(0, 492336);

procedure vmw_fence_goal_new_locked($p0: ref, $i1: i32) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation vmw_fence_goal_new_locked($p0: ref, $i1: i32) returns ($r: i1)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $i70: i64;
  var $i71: i64;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i64;
  var $i77: i64;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i64;
  var $p91: ref;
  var $i92: i32;
  var $p93: ref;
  var $i94: i64;
  var $i95: i64;
  var $p96: ref;
  var $i20: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} {:cexpr "vmw_fence_goal_new_locked:arg:passed_seqno"} boogie_si_record_i32($i1);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1056} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i2);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 201);
    call {:si_unique_call 1057} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i3);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 1058} {:cexpr "__cil_tmp13"} boogie_si_record_i8($i7);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i9 := $xor.i1($i8, 1);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 1059} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i10);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i12 := $xor.i1($i11, 1);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    call {:si_unique_call 1060} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i13);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i15 := $xor.i1($i14, 1);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    call {:si_unique_call 1061} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i16);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    call {:si_unique_call 1062} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i17);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 1064} {:cexpr "tmp___7"} boogie_si_record_i64($i18);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    call {:si_unique_call 1065} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i21);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 8);
    call {:si_unique_call 1066} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i22);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    call {:si_unique_call 1067} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i25);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 2144);
    call {:si_unique_call 1068} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i26);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref(289, 4));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $i31 := ioread32($p30);
    call {:si_unique_call 1070} {:cexpr "goal_seqno"} boogie_si_record_i32($i31);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i1, $i31);
    call {:si_unique_call 1071} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i32);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i33 := $uge.i32($i32, 2147483648);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    call {:si_unique_call 1072} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i34);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i36 := $xor.i1($i35, 1);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    call {:si_unique_call 1073} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i37);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i39 := $xor.i1($i38, 1);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    call {:si_unique_call 1074} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i40);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    call {:si_unique_call 1075} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i41);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $i42 := ldv__builtin_expect($i41, 1);
    call {:si_unique_call 1077} {:cexpr "tmp___8"} boogie_si_record_i64($i42);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p0);
    call {:si_unique_call 1078} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i44);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 201);
    call {:si_unique_call 1079} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i45);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p46 := $i2p.i64.ref($i45);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, 0);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p0);
    call {:si_unique_call 1080} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i47);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 40);
    call {:si_unique_call 1081} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i48);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i48);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1082} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i51);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 16);
    call {:si_unique_call 1083} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i52);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i32($p53);
    call {:si_unique_call 1084} {:cexpr "__cil_tmp41"} boogie_si_record_i32($i54);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p50);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i56 := $zext.i32.i64($i54);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i57 := $sub.i64(0, $i56);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p55, $mul.ref($i57, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p60 := $p58;
    goto $bb8;

  $bb8:
    call $p60, $i61, $i62, $p63, $i64, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $p72, $i73, $i74, $p75, $i85, $i86, $p87, $p88, $i89, $i90, $p91, $i92, $p93, $i94, $i95, $p96 := vmw_fence_goal_new_locked_loop_$bb8($p0, $p60, $i61, $i62, $p63, $i64, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $p72, $i73, $i74, $p75, $i85, $i86, $p87, $p88, $i89, $i90, $p91, $i92, $p93, $i94, $i95, $p96);
    goto $bb8_last;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p0);
    call {:si_unique_call 1085} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i61);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, 40);
    call {:si_unique_call 1086} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i62);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p63 := $i2p.i64.ref($i62);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    call {:si_unique_call 1087} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i64);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p60);
    call {:si_unique_call 1088} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i65);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i66 := $add.i64($i65, 16);
    call {:si_unique_call 1089} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i66);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p67 := $i2p.i64.ref($i66);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    call {:si_unique_call 1090} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i68);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, $i64);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i69 == 1);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb10:
    assume $i69 == 1;
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p60);
    call {:si_unique_call 1091} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i70);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i70, 40);
    call {:si_unique_call 1092} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i71);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p72 := $i2p.i64.ref($i71);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $i73 := list_empty($p72);
    call {:si_unique_call 1094} {:cexpr "tmp___9"} boogie_si_record_i32($i73);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p75 := $p60;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p0);
    call {:si_unique_call 1095} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i76);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i77 := $add.i64($i76, 201);
    call {:si_unique_call 1096} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i77);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p78 := $i2p.i64.ref($i77);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p78, 1);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p75);
    call {:si_unique_call 1097} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i79);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i80 := $add.i64($i79, 4);
    call {:si_unique_call 1098} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i80);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p81 := $i2p.i64.ref($i80);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    call {:si_unique_call 1099} {:cexpr "__cil_tmp60"} boogie_si_record_i32($i82);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p28, $mul.ref(289, 4));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} iowrite32($i82, $p84);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14:
    assume $i74 == 1;
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p60);
    call {:si_unique_call 1101} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i85);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 16);
    call {:si_unique_call 1102} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i86);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p87 := $i2p.i64.ref($i86);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1103} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i89);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i90 := $add.i64($i89, 16);
    call {:si_unique_call 1104} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i90);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p91 := $i2p.i64.ref($i90);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i32($p91);
    call {:si_unique_call 1105} {:cexpr "__cil_tmp70"} boogie_si_record_i32($i92);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p88);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i94 := $zext.i32.i64($i92);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i95 := $sub.i64(0, $i94);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p93, $mul.ref($i95, 1));
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p60 := $p96;
    goto corral_source_split_2457_dummy;

  $bb5:
    assume $i43 == 1;
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb3;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb3;

  corral_source_split_2457_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2408;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 493368);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1106} {:cexpr "__cil_tmp2"} boogie_si_record_i64($i1);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    call {:si_unique_call 1107} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i4);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, $i1);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 494400);

procedure schedule_work($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1108} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1109} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 495432);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    call {:si_unique_call 1110} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 8);
    call {:si_unique_call 1111} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i3);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} __list_add($p0, $p5, $p1);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 496464);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    return;
}



const __list_splice: ref;

axiom __list_splice == $sub.ref(0, 497496);

procedure __list_splice($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __list_splice($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 1113} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i5);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 8);
    call {:si_unique_call 1114} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i6);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p4);
    call {:si_unique_call 1115} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i9);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 8);
    call {:si_unique_call 1116} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i10);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p1);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p4);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p8);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p2);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p2);
    call {:si_unique_call 1117} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i14);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 8);
    call {:si_unique_call 1118} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i15);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p8);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 498528);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 499560);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1120} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $p2 := ldv_malloc($i0);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ttm_tt_init: ref;

axiom ttm_tt_init == $sub.ref(0, 500592);

procedure ttm_tt_init($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i32);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 501624);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1122} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1123} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1124} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $p3 := malloc($i0);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $i4 := ldv_is_err($p3);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 1} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 1} true;
    $i6 := $xor.i1($i5, 1);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1127} __VERIFIER_assume($i7);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 502656);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 1128} $r := $malloc($i0);
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 503688);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547521);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vmw_gmrid_man_init: ref;

axiom vmw_gmrid_man_init == $sub.ref(0, 504720);

procedure vmw_gmrid_man_init($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmw_gmrid_man_init($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $i45: i32;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p50: ref;
  var $i26: i32;
  var vslice_dummy_var_68: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} {:cexpr "vmw_gmrid_man_init:arg:p_size"} boogie_si_record_i64($i1);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i32($p4);
    call {:si_unique_call 1130} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i5);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i5);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64(0, $i7);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p6, $mul.ref($i8, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $p11 := kzalloc(96, 208);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1132} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i13);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p12);
    call {:si_unique_call 1133} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i14);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, $i13);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    call {:si_unique_call 1134} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i16);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i18 := $xor.i1($i17, 1);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    call {:si_unique_call 1135} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i19);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i21 := $xor.i1($i20, 1);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    call {:si_unique_call 1136} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i22);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    call {:si_unique_call 1137} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i23);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1139} {:cexpr "tmp___8"} boogie_si_record_i64($i24);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p12);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} vslice_dummy_var_68 := spinlock_check($p27);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p12);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} __raw_spin_lock_init($p29, .str.282, __key___18);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p12);
    call {:si_unique_call 1142} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i30);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 84);
    call {:si_unique_call 1143} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i31);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p10);
    call {:si_unique_call 1144} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i32);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 2168);
    call {:si_unique_call 1145} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i33);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i31);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p12);
    call {:si_unique_call 1146} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i37);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 88);
    call {:si_unique_call 1147} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i38);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i38);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 0);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p12);
    call {:si_unique_call 1148} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i40);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 24);
    call {:si_unique_call 1149} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i41);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} ida_init($p42);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p12);
    call {:si_unique_call 1151} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i43);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 80);
    call {:si_unique_call 1152} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i44);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i64.i32($i1);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p46 := $i2p.i64.ref($i44);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p0);
    call {:si_unique_call 1153} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i47);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 48);
    call {:si_unique_call 1154} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i48);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p50 := $i2p.i64.ref($i48);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $p11);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 12);
    goto $bb3;
}



const vmw_gmrid_man_takedown: ref;

axiom vmw_gmrid_man_takedown == $sub.ref(0, 505752);

procedure vmw_gmrid_man_takedown($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vmw_gmrid_man_takedown($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1155} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 48);
    call {:si_unique_call 1156} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i6 := $ne.ref($p5, $0.ref);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p5);
    call {:si_unique_call 1157} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i7);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 24);
    call {:si_unique_call 1158} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i8);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} ida_destroy($p9);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p5);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} kfree($p10);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmw_gmrid_man_get_node: ref;

axiom vmw_gmrid_man_get_node == $sub.ref(0, 506784);

procedure vmw_gmrid_man_get_node($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);



const vmw_gmrid_man_put_node: ref;

axiom vmw_gmrid_man_put_node == $sub.ref(0, 507816);

procedure vmw_gmrid_man_put_node($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vmw_gmrid_man_put_node($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1161} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 48);
    call {:si_unique_call 1162} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i9 := $ne.ref($p8, $0.ref);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p6);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} spin_lock($p10);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p6);
    call {:si_unique_call 1164} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i11);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 24);
    call {:si_unique_call 1165} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i12);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p1);
    call {:si_unique_call 1166} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i14);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 8);
    call {:si_unique_call 1167} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i15);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    call {:si_unique_call 1168} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i17);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i17);
    call {:si_unique_call 1169} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i18);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} ida_remove($p13, $i18);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p6);
    call {:si_unique_call 1171} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i19);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 88);
    call {:si_unique_call 1172} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i20);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p1);
    call {:si_unique_call 1173} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i21);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 24);
    call {:si_unique_call 1174} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i22);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    call {:si_unique_call 1175} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i24);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p6);
    call {:si_unique_call 1176} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i25);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 88);
    call {:si_unique_call 1177} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i26);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    call {:si_unique_call 1178} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i28);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i28);
    call {:si_unique_call 1179} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i29);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i30 := $sub.i64($i29, $i24);
    call {:si_unique_call 1180} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i30);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32($i30);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i20);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p6);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} spin_unlock($p33);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p1);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $0.ref);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmw_gmrid_man_debug: ref;

axiom vmw_gmrid_man_debug == $sub.ref(0, 508848);

procedure vmw_gmrid_man_debug($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation vmw_gmrid_man_debug($p0: ref, $p1: ref)
{
  var vslice_dummy_var_69: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} vslice_dummy_var_69 := printk.ref.ref(.str.283, $p1);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 509880);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} _raw_spin_lock($p1);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    return;
}



const ida_remove: ref;

axiom ida_remove == $sub.ref(0, 510912);

procedure ida_remove($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation ida_remove($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} {:cexpr "ida_remove:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 511944);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} _raw_spin_unlock($p1);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 512976);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 514008);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    return;
}



const ida_pre_get: ref;

axiom ida_pre_get == $sub.ref(0, 515040);

procedure ida_pre_get($p0: ref, $i1: i32) returns ($r: i32);



const ida_get_new: ref;

axiom ida_get_new == $sub.ref(0, 516072);

procedure ida_get_new($p0: ref, $p1: ref) returns ($r: i32);



const ida_destroy: ref;

axiom ida_destroy == $sub.ref(0, 517104);

procedure ida_destroy($p0: ref);
  free requires assertsPassed;



implementation ida_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 518136);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1187} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    call {:si_unique_call 1188} {:cexpr "__cil_tmp4"} boogie_si_record_i32($i2);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $p3 := __kmalloc($i0, $i2);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 519168);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    return;
}



const ida_init: ref;

axiom ida_init == $sub.ref(0, 520200);

procedure ida_init($p0: ref);
  free requires assertsPassed;



implementation ida_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    return;
}



const vmw_cmd_invalid: ref;

axiom vmw_cmd_invalid == $sub.ref(0, 521232);

procedure vmw_cmd_invalid($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_cmd_surface_copy_check: ref;

axiom vmw_cmd_surface_copy_check == $sub.ref(0, 522264);

procedure vmw_cmd_surface_copy_check($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_cmd_stretch_blt_check: ref;

axiom vmw_cmd_stretch_blt_check == $sub.ref(0, 523296);

procedure vmw_cmd_stretch_blt_check($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_cmd_dma: ref;

axiom vmw_cmd_dma == $sub.ref(0, 524328);

procedure vmw_cmd_dma($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_cmd_cid_check: ref;

axiom vmw_cmd_cid_check == $sub.ref(0, 525360);

procedure vmw_cmd_cid_check($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_cmd_set_render_target_check: ref;

axiom vmw_cmd_set_render_target_check == $sub.ref(0, 526392);

procedure vmw_cmd_set_render_target_check($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_cmd_tex_state: ref;

axiom vmw_cmd_tex_state == $sub.ref(0, 527424);

procedure vmw_cmd_tex_state($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_cmd_present_check: ref;

axiom vmw_cmd_present_check == $sub.ref(0, 528456);

procedure vmw_cmd_present_check($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_cmd_draw: ref;

axiom vmw_cmd_draw == $sub.ref(0, 529488);

procedure vmw_cmd_draw($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_cmd_end_query: ref;

axiom vmw_cmd_end_query == $sub.ref(0, 530520);

procedure vmw_cmd_end_query($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_cmd_wait_query: ref;

axiom vmw_cmd_wait_query == $sub.ref(0, 531552);

procedure vmw_cmd_wait_query($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_cmd_ok: ref;

axiom vmw_cmd_ok == $sub.ref(0, 532584);

procedure vmw_cmd_ok($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_cmd_blt_surf_screen_check: ref;

axiom vmw_cmd_blt_surf_screen_check == $sub.ref(0, 533616);

procedure vmw_cmd_blt_surf_screen_check($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_cmd_sid_check: ref;

axiom vmw_cmd_sid_check == $sub.ref(0, 534648);

procedure vmw_cmd_sid_check($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_user_surface_lookup_handle: ref;

axiom vmw_user_surface_lookup_handle == $sub.ref(0, 535680);

procedure vmw_user_surface_lookup_handle($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);



const vmw_surface_validate: ref;

axiom vmw_surface_validate == $sub.ref(0, 536712);

procedure vmw_surface_validate($p0: ref, $p1: ref) returns ($r: i32);



const vmw_surface_unreference: ref;

axiom vmw_surface_unreference == $sub.ref(0, 537744);

procedure vmw_surface_unreference($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation vmw_surface_unreference($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p0);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p2);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p0, $0.ref);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} vmw_resource_unreference($p1);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const vmw_resource_to_validate_list: ref;

axiom vmw_resource_to_validate_list == $sub.ref(0, 538776);

procedure vmw_resource_to_validate_list($p0: ref, $p1: ref);



const vmw_resource_unreference: ref;

axiom vmw_resource_unreference == $sub.ref(0, 539808);

procedure vmw_resource_unreference($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.1, assertsPassed, $M.2, $M.11, $M.12, $CurrAddr, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation vmw_resource_unreference($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, $p0);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    call {:si_unique_call 1192} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 8);
    call {:si_unique_call 1193} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p0, $0.ref);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p5);
    call {:si_unique_call 1194} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i7);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 2632);
    call {:si_unique_call 1195} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i8);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} _raw_write_lock($p9);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} vslice_dummy_var_70 := kref_put($p10, vmw_resource_release);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p5);
    call {:si_unique_call 1198} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i12);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 2632);
    call {:si_unique_call 1199} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i13);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} _raw_write_unlock($p14);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;
}



const _raw_write_lock: ref;

axiom _raw_write_lock == $sub.ref(0, 540840);

procedure _raw_write_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_write_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    return;
}



const vmw_resource_release: ref;

axiom vmw_resource_release == $sub.ref(0, 541872);

procedure vmw_resource_release($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.6, assertsPassed, $M.2, $M.11, $M.12, $CurrAddr, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation vmw_resource_release($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i1;
  var $i50: i32;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i64;
  var $p72: ref;
  var $i73: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i32($p1);
    call {:si_unique_call 1201} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i2);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i2);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, $i4);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 1));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    call {:si_unique_call 1202} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i8);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 8);
    call {:si_unique_call 1203} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i9);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p7);
    call {:si_unique_call 1204} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i12);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 24);
    call {:si_unique_call 1205} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i13);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    call {:si_unique_call 1206} {:cexpr "id"} boogie_si_record_i32($i15);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p7);
    call {:si_unique_call 1207} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i16);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 16);
    call {:si_unique_call 1208} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i17);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p7);
    call {:si_unique_call 1209} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i20);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 32);
    call {:si_unique_call 1210} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i21);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1211} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i23);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p7);
    call {:si_unique_call 1212} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i24);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 40);
    call {:si_unique_call 1213} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i25);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    call {:si_unique_call 1214} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i28);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, $i23);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p11);
    call {:si_unique_call 1218} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i34);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 2632);
    call {:si_unique_call 1219} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i35);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} _raw_write_unlock($p36);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1221} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i37);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p7);
    call {:si_unique_call 1222} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i38);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 48);
    call {:si_unique_call 1223} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i39);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    call {:si_unique_call 1224} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i42);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, $i37);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i43);
    call {:si_unique_call 1225} {:cexpr "__cil_tmp39"} boogie_si_record_i32($i44);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i46 := $xor.i1($i45, 1);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i46);
    call {:si_unique_call 1226} {:cexpr "__cil_tmp40"} boogie_si_record_i32($i47);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i49 := $xor.i1($i48, 1);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i32($i49);
    call {:si_unique_call 1227} {:cexpr "__cil_tmp41"} boogie_si_record_i32($i50);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    call {:si_unique_call 1228} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i51);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} $i52 := ldv__builtin_expect($i51, 1);
    call {:si_unique_call 1230} {:cexpr "tmp___7"} boogie_si_record_i64($i52);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1234} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i58);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p7);
    call {:si_unique_call 1235} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i59);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, 56);
    call {:si_unique_call 1236} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i60);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p61 := $i2p.i64.ref($i60);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    call {:si_unique_call 1237} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i63);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, $i58);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i64 == 1);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p7);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} kfree($p69);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p11);
    call {:si_unique_call 1242} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i70);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i70, 2632);
    call {:si_unique_call 1243} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i71);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p72 := $i2p.i64.ref($i71);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} _raw_write_lock($p72);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i15, $sub.i32(0, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i73 == 1;
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} idr_remove($p19, $i15);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i64 == 1;
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p7);
    call {:si_unique_call 1238} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i65);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i66 := $add.i64($i65, 56);
    call {:si_unique_call 1239} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i66);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p67 := $i2p.i64.ref($i66);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    call {:si_unique_call 1240} devirtbounce.12($p68, $p7);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i53 == 1;
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p7);
    call {:si_unique_call 1231} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i54);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 48);
    call {:si_unique_call 1232} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i55);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p56 := $i2p.i64.ref($i55);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    call {:si_unique_call 1233} devirtbounce.12($p57, $p7);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p7);
    call {:si_unique_call 1215} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i30);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 40);
    call {:si_unique_call 1216} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i31);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    call {:si_unique_call 1217} devirtbounce.12($p33, $p7);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_199:
    assume !assertsPassed;
    return;
}



const _raw_write_unlock: ref;

axiom _raw_write_unlock == $sub.ref(0, 542904);

procedure _raw_write_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_write_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    return;
}



const idr_remove: ref;

axiom idr_remove == $sub.ref(0, 543936);

procedure idr_remove($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation idr_remove($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} {:cexpr "idr_remove:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    return;
}



const vmw_surface_do_validate: ref;

axiom vmw_surface_do_validate == $sub.ref(0, 544968);

procedure vmw_surface_do_validate($p0: ref, $p1: ref) returns ($r: i32);



const vmw_surface_reference: ref;

axiom vmw_surface_reference == $sub.ref(0, 546000);

procedure vmw_surface_reference($p0: ref) returns ($r: ref);



const vmw_surface_evict: ref;

axiom vmw_surface_evict == $sub.ref(0, 547032);

procedure vmw_surface_evict($p0: ref, $p1: ref) returns ($r: i32);



const ttm_bo_create: ref;

axiom ttm_bo_create == $sub.ref(0, 548064);

procedure ttm_bo_create($p0: ref, $i1: i64, $i2: i32, $p3: ref, $i4: i32, $i5: i64, $i6: i1, $p7: ref, $p8: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_create($p0: ref, $i1: i64, $i2: i32, $p3: ref, $i4: i32, $i5: i64, $i6: i1, $p7: ref, $p8: ref) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1247} {:cexpr "ttm_bo_create:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1248} {:cexpr "ttm_bo_create:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1249} {:cexpr "ttm_bo_create:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1250} {:cexpr "ttm_bo_create:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 1251} {:cexpr "ttm_bo_create:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1252} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 1253} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const ttm_bo_reference: ref;

axiom ttm_bo_reference == $sub.ref(0, 549096);

procedure ttm_bo_reference($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr, $M.1, $M.2, assertsPassed, $M.11, $M.12, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation ttm_bo_reference($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1254} {:cexpr "__cil_tmp2"} boogie_si_record_i64($i1);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 64);
    call {:si_unique_call 1255} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} kref_get($p3);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;
}



const ttm_eu_reserve_buffers: ref;

axiom ttm_eu_reserve_buffers == $sub.ref(0, 550128);

procedure ttm_eu_reserve_buffers($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_eu_reserve_buffers($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1257} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1258} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ttm_bo_validate: ref;

axiom ttm_bo_validate == $sub.ref(0, 551160);

procedure ttm_bo_validate($p0: ref, $p1: ref, $i2: i1, $i3: i1, $i4: i1) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_validate($p0: ref, $p1: ref, $i2: i1, $i3: i1, $i4: i1) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1259} {:cexpr "ttm_bo_validate:arg:arg2"} boogie_si_record_i1($i2);
    call {:si_unique_call 1260} {:cexpr "ttm_bo_validate:arg:arg3"} boogie_si_record_i1($i3);
    call {:si_unique_call 1261} {:cexpr "ttm_bo_validate:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1262} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1263} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const vmw_surface_dma_size: ref;

axiom vmw_surface_dma_size == $sub.ref(0, 552192);

procedure vmw_surface_dma_size($p0: ref) returns ($r: i32);



const vmw_surface_destroy_size: ref;

axiom vmw_surface_destroy_size == $sub.ref(0, 553224);

procedure vmw_surface_destroy_size() returns ($r: i32);
  free requires assertsPassed;



implementation vmw_surface_destroy_size() returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $r := 12;
    return;
}



const vmw_bo_get_guest_ptr: ref;

axiom vmw_bo_get_guest_ptr == $sub.ref(0, 554256);

procedure vmw_bo_get_guest_ptr($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.10, $M.0;



implementation vmw_bo_get_guest_ptr($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i32;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i32;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1264} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 148);
    call {:si_unique_call 1265} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 1266} {:cexpr "__cil_tmp6"} boogie_si_record_i32($i5);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 2);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p0);
    call {:si_unique_call 1272} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i16);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 120);
    call {:si_unique_call 1273} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i17);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    call {:si_unique_call 1274} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i19);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i19);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p1);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p21, $i20);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    call {:si_unique_call 1275} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i22);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 4);
    call {:si_unique_call 1276} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i23);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p7, $sub.i32(0, 2));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p1);
    call {:si_unique_call 1267} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i8);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 4);
    call {:si_unique_call 1268} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i9);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    call {:si_unique_call 1269} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i10);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 368);
    call {:si_unique_call 1270} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i11);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    call {:si_unique_call 1271} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i13);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i9);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmw_surface_dma_encode: ref;

axiom vmw_surface_dma_encode == $sub.ref(0, 555288);

procedure vmw_surface_dma_encode($p0: ref, $p1: ref, $p2: ref, $i3: i1);



const vmw_surface_destroy_encode: ref;

axiom vmw_surface_destroy_encode == $sub.ref(0, 556320);

procedure vmw_surface_destroy_encode($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vmw_surface_destroy_encode($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} {:cexpr "vmw_surface_destroy_encode:arg:id"} boogie_si_record_i32($i0);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 1041);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p2);
    call {:si_unique_call 1278} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i4);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 4);
    call {:si_unique_call 1279} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i5);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 4);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p2);
    call {:si_unique_call 1280} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i7);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 8);
    call {:si_unique_call 1281} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i8);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i0);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    return;
}



const vmw_execbuf_fence_commands: ref;

axiom vmw_execbuf_fence_commands == $sub.ref(0, 557352);

procedure vmw_execbuf_fence_commands($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.11, $M.12, $M.2, $CurrAddr, $M.1, assertsPassed, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_execbuf_fence_commands($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i39: i32;
  var $i46: i1;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1283} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i5);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p3);
    call {:si_unique_call 1284} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i6);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, $i5);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    call {:si_unique_call 1287} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i13);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 1289} {:cexpr "tmp___8"} boogie_si_record_i64($i14);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $i16 := vmw_fifo_send_fence($p1, $p4);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    call {:si_unique_call 1292} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    call {:si_unique_call 1293} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i18);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i20 := $xor.i1($i19, 1);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    call {:si_unique_call 1294} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i21);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i23 := $xor.i1($i22, 1);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    call {:si_unique_call 1295} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i24);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    call {:si_unique_call 1296} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i25);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 1298} {:cexpr "tmp___9"} boogie_si_record_i64($i26);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1300} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i30);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p3);
    call {:si_unique_call 1301} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i31);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, $i30);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i32 == 1);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p1);
    call {:si_unique_call 1307} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i40);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 3008);
    call {:si_unique_call 1308} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i41);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p4);
    call {:si_unique_call 1309} {:cexpr "__cil_tmp37"} boogie_si_record_i32($i44);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} $i45 := vmw_fence_create($p43, $i44, 1, $p2);
    call {:si_unique_call 1311} {:cexpr "ret"} boogie_si_record_i32($i45);
    assume {:verifier.code 0} true;
    $i39 := $i45;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i39, 0);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i49 := 0;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    call {:si_unique_call 1312} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i50);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 1314} {:cexpr "tmp___11"} boogie_si_record_i64($i51);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb31:
    assume $i52 == 1;
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p4);
    call {:si_unique_call 1315} {:cexpr "__cil_tmp43"} boogie_si_record_i32($i53);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i8.i1(0);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i8.i1(0);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i8.i1(0);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} vslice_dummy_var_72 := vmw_fallback_wait($p1, $i54, $i55, $i53, $i56, 1250);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $0.ref);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    goto $bb33;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i46 == 1;
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i29);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i47 == 1);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i48 := 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i49 := $i48;
    goto $bb30;

  $bb27:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb29;

  $bb22:
    assume $i32 == 1;
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p1);
    call {:si_unique_call 1302} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i33);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 3008);
    call {:si_unique_call 1303} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i34);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i34);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p4);
    call {:si_unique_call 1304} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i37);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $i38 := vmw_user_fence_create($p0, $p36, $i37, 1, $p2, $p3);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    call {:si_unique_call 1306} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb24;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i27 == 1;
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} vslice_dummy_var_71 := drm_err.ref.ref(.str.1, .str.2);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i29 := 1;
    goto $bb21;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    call {:si_unique_call 1290} devirtbounce(0, .str, 1011, 12);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call vmw_execbuf_fence_commands_loop_$bb13();
    goto $bb13_last;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1285} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i8);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    call {:si_unique_call 1286} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i9);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, $i8);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb8;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb7;

  $bb14_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto $bb14;
}



const ttm_eu_fence_buffer_objects: ref;

axiom ttm_eu_fence_buffer_objects == $sub.ref(0, 558384);

procedure ttm_eu_fence_buffer_objects($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ttm_eu_fence_buffer_objects($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    return;
}



const ttm_bo_unref: ref;

axiom ttm_bo_unref == $sub.ref(0, 559416);

procedure ttm_bo_unref($p0: ref);
  free requires assertsPassed;



implementation ttm_bo_unref($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    return;
}



const vmw_resource_release_id: ref;

axiom vmw_resource_release_id == $sub.ref(0, 560448);

procedure vmw_resource_release_id($p0: ref);



const ttm_eu_backoff_reservation: ref;

axiom ttm_eu_backoff_reservation == $sub.ref(0, 561480);

procedure ttm_eu_backoff_reservation($p0: ref);
  free requires assertsPassed;



implementation ttm_eu_backoff_reservation($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    return;
}



const vmw_fifo_send_fence: ref;

axiom vmw_fifo_send_fence == $sub.ref(0, 562512);

procedure vmw_fifo_send_fence($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.1, $M.2, $M.11, $M.12, assertsPassed, $M.3, $M.4, $CurrAddr, $M.13, $M.10, $M.16;



implementation vmw_fifo_send_fence($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i53: i32;
  var $i29: i32;
  var $i42: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1317} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i2);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 1856);
    call {:si_unique_call 1318} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i3);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32(8);
    call {:si_unique_call 1319} {:cexpr "bytes"} boogie_si_record_i32($i5);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $p6 := vmw_fifo_reserve($p0, $i5);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1321} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i7);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p6);
    call {:si_unique_call 1322} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i8);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, $i7);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 1323} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i10);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i12 := $xor.i1($i11, 1);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    call {:si_unique_call 1324} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i13);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i15 := $xor.i1($i14, 1);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    call {:si_unique_call 1325} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i16);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    call {:si_unique_call 1326} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i17);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1328} {:cexpr "tmp___8"} boogie_si_record_i64($i18);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p0);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 2880);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    call $i33, $i34, $i35 := vmw_fifo_send_fence_loop_$bb5($p1, $p32, $i33, $i34, $i35);
    goto $bb5_last;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} $i33 := atomic_add_return(1, $p32);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    call {:si_unique_call 1336} {:cexpr "tmp___9"} boogie_si_record_i32($i33);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i33);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p1);
    call {:si_unique_call 1337} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i34);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i35 == 1);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p4);
    call {:si_unique_call 1338} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i36);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 36);
    call {:si_unique_call 1339} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i37);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    call {:si_unique_call 1340} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i39);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 1);
    call {:si_unique_call 1341} {:cexpr "__cil_tmp36"} boogie_si_record_i32($i40);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} vmw_fifo_commit($p0, 0);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p6);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 30);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p6);
    call {:si_unique_call 1343} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i44);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 4);
    call {:si_unique_call 1344} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i45);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p46 := $i2p.i64.ref($i45);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p1);
    call {:si_unique_call 1345} {:cexpr "__cil_tmp41"} boogie_si_record_i32($i47);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p46);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} iowrite32($i47, $p49);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} vmw_fifo_commit($p0, $i5);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p4);
    call {:si_unique_call 1348} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i50);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 160);
    call {:si_unique_call 1349} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i51);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p1);
    call {:si_unique_call 1350} {:cexpr "__cil_tmp47"} boogie_si_record_i32($i53);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} vslice_dummy_var_74 := vmw_marker_push($p52, $i53);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} vmw_update_seqno($p0, $p4);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i42 := $i29;
    goto $bb13;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i35 == 1;
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb9_dummy;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p0);
    call {:si_unique_call 1329} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i20);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 2880);
    call {:si_unique_call 1330} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i21);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} $i23 := atomic_read($p22);
    call {:si_unique_call 1332} {:cexpr "tmp___7"} boogie_si_record_i32($i23);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i23);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p1);
    call {:si_unique_call 1333} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i24);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1(0);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1(1);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1(0);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} vslice_dummy_var_73 := vmw_fallback_wait($p0, $i25, $i26, $i24, $i27, 750);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb9_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vmw_user_fence_create: ref;

axiom vmw_user_fence_create == $sub.ref(0, 563544);

procedure vmw_user_fence_create($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $CurrAddr, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation vmw_user_fence_create($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i1;
  var $i48: i32;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i1;
  var $i64: i32;
  var $i65: i64;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $i83: i1;
  var $i84: i32;
  var $i85: i64;
  var $i86: i64;
  var $i87: i1;
  var $i88: i64;
  var $i89: i64;
  var $p90: ref;
  var $i91: i64;
  var $i92: i64;
  var $i93: i64;
  var $p94: ref;
  var $i95: i64;
  var $i96: i32;
  var $i97: i64;
  var $i98: i64;
  var $p99: ref;
  var $i52: i32;
  var $i100: i64;
  var $i101: i64;
  var $p102: ref;
  var $i103: i32;
  var $i104: i64;
  var $i36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1354} {:cexpr "vmw_user_fence_create:arg:seqno"} boogie_si_record_i32($i2);
    call {:si_unique_call 1355} {:cexpr "vmw_user_fence_create:arg:mask"} boogie_si_record_i32($i3);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $p7 := vmw_fpriv($p0);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    call {:si_unique_call 1357} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i8);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 8);
    call {:si_unique_call 1358} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i9);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p1);
    call {:si_unique_call 1359} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i12);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 8);
    call {:si_unique_call 1360} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i13);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} $p16 := vmw_mem_glob($p15);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p1);
    call {:si_unique_call 1362} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i17);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 88);
    call {:si_unique_call 1363} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i18);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    call {:si_unique_call 1364} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i20);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    call {:si_unique_call 1365} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i21);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1(0);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1(0);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} $i24 := ttm_mem_global_alloc($p16, $i21, $i22, $i23);
    call {:si_unique_call 1367} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 1368} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i26);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i28 := $xor.i1($i27, 1);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    call {:si_unique_call 1369} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i29);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i31 := $xor.i1($i30, 1);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    call {:si_unique_call 1370} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i32);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    call {:si_unique_call 1371} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i33);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 1373} {:cexpr "tmp___10"} boogie_si_record_i64($i34);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} $p37 := kzalloc(168, 208);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1375} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i39);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p38);
    call {:si_unique_call 1376} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i40);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, $i39);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    call {:si_unique_call 1377} {:cexpr "__cil_tmp37"} boogie_si_record_i32($i42);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i44 := $xor.i1($i43, 1);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i32($i44);
    call {:si_unique_call 1378} {:cexpr "__cil_tmp38"} boogie_si_record_i32($i45);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i47 := $xor.i1($i46, 1);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i32($i47);
    call {:si_unique_call 1379} {:cexpr "__cil_tmp39"} boogie_si_record_i32($i48);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    call {:si_unique_call 1380} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i49);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 1382} {:cexpr "tmp___12"} boogie_si_record_i64($i50);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p38);
    call {:si_unique_call 1388} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i53);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i53, 64);
    call {:si_unique_call 1389} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i54);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p55 := $i2p.i64.ref($i54);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} $i56 := vmw_fence_obj_init($p1, $p55, $i2, $i3, vmw_user_fence_destroy);
    call {:si_unique_call 1391} {:cexpr "ret"} boogie_si_record_i32($i56);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i32($i57);
    call {:si_unique_call 1392} {:cexpr "__cil_tmp44"} boogie_si_record_i32($i58);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i60 := $xor.i1($i59, 1);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i32($i60);
    call {:si_unique_call 1393} {:cexpr "__cil_tmp45"} boogie_si_record_i32($i61);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i63 := $xor.i1($i62, 1);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i64 := $zext.i1.i32($i63);
    call {:si_unique_call 1394} {:cexpr "__cil_tmp46"} boogie_si_record_i32($i64);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i64);
    call {:si_unique_call 1395} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i65);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $i66 := ldv__builtin_expect($i65, 0);
    call {:si_unique_call 1397} {:cexpr "tmp___13"} boogie_si_record_i64($i66);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p38);
    call {:si_unique_call 1399} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i69);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, 64);
    call {:si_unique_call 1400} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i70);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p71 := $i2p.i64.ref($i70);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} $p72 := vmw_fence_obj_reference($p71);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p72);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p38);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i8.i1(0);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} $i76 := ttm_base_object_init($p11, $p73, $i75, 259, vmw_user_fence_base_release, $p74);
    call {:si_unique_call 1403} {:cexpr "ret"} boogie_si_record_i32($i76);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i78 := $zext.i1.i32($i77);
    call {:si_unique_call 1404} {:cexpr "__cil_tmp58"} boogie_si_record_i32($i78);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i80 := $xor.i1($i79, 1);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i81 := $zext.i1.i32($i80);
    call {:si_unique_call 1405} {:cexpr "__cil_tmp59"} boogie_si_record_i32($i81);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i83 := $xor.i1($i82, 1);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i84 := $zext.i1.i32($i83);
    call {:si_unique_call 1406} {:cexpr "__cil_tmp60"} boogie_si_record_i32($i84);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i84);
    call {:si_unique_call 1407} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i85);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} $i86 := ldv__builtin_expect($i85, 0);
    call {:si_unique_call 1409} {:cexpr "tmp___14"} boogie_si_record_i64($i86);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p38);
    call {:si_unique_call 1414} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i88);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i89 := $add.i64($i88, 64);
    call {:si_unique_call 1415} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i89);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p90 := $i2p.i64.ref($i89);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p90);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i91 := $add.i64(0, 16);
    call {:si_unique_call 1416} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i91);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p38);
    call {:si_unique_call 1417} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i92);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i93 := $add.i64($i92, $i91);
    call {:si_unique_call 1418} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i93);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p94 := $i2p.i64.ref($i93);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i95 := $load.i64($M.0, $p94);
    call {:si_unique_call 1419} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i95);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i64.i32($i95);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i96);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb12:
    assume $i87 == 1;
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} vmw_fence_obj_unreference($p6);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p38);
    call {:si_unique_call 1411} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i97);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i98 := $add.i64($i97, 64);
    call {:si_unique_call 1412} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i98);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p99 := $i2p.i64.ref($i98);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p99);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} vmw_fence_obj_unreference($p6);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i52 := $i76;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p1);
    call {:si_unique_call 1383} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i100);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i101 := $add.i64($i100, 88);
    call {:si_unique_call 1384} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i101);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p102 := $i2p.i64.ref($i101);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    call {:si_unique_call 1385} {:cexpr "__cil_tmp74"} boogie_si_record_i32($i103);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i104 := $zext.i32.i64($i103);
    call {:si_unique_call 1386} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i104);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} ttm_mem_global_free($p16, $i104);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i36 := $i52;
    goto $bb3;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i67 == 1;
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p38);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} kfree($p68);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i52 := $i56;
    goto $bb7;

  $bb5:
    assume $i51 == 1;
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i35 == 1;
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i36 := $i24;
    goto $bb3;
}



const vmw_fence_create: ref;

axiom vmw_fence_create == $sub.ref(0, 564576);

procedure vmw_fence_create($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmw_fence_create($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i1;
  var $i53: i32;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $i44: i32;
  var $i58: i64;
  var $i59: i64;
  var $p60: ref;
  var $i61: i32;
  var $i62: i64;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} {:cexpr "vmw_fence_create:arg:seqno"} boogie_si_record_i32($i1);
    call {:si_unique_call 1421} {:cexpr "vmw_fence_create:arg:mask"} boogie_si_record_i32($i2);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 1422} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i4);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 8);
    call {:si_unique_call 1423} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i5);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} $p8 := vmw_mem_glob($p7);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    call {:si_unique_call 1425} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i9);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 92);
    call {:si_unique_call 1426} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i10);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 1427} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i12);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    call {:si_unique_call 1428} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i13);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1(0);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1(0);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} $i16 := ttm_mem_global_alloc($p8, $i13, $i14, $i15);
    call {:si_unique_call 1430} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    call {:si_unique_call 1431} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i18);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i20 := $xor.i1($i19, 1);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    call {:si_unique_call 1432} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i21);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i23 := $xor.i1($i22, 1);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    call {:si_unique_call 1433} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i24);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    call {:si_unique_call 1434} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i25);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 1436} {:cexpr "tmp___8"} boogie_si_record_i64($i26);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} $p29 := kzalloc(104, 208);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1438} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i31);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p30);
    call {:si_unique_call 1439} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i32);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, $i31);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    call {:si_unique_call 1440} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i34);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i36 := $xor.i1($i35, 1);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    call {:si_unique_call 1441} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i37);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i39 := $xor.i1($i38, 1);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    call {:si_unique_call 1442} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i40);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    call {:si_unique_call 1443} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i41);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} $i42 := ldv__builtin_expect($i41, 0);
    call {:si_unique_call 1445} {:cexpr "tmp___10"} boogie_si_record_i64($i42);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} $i45 := vmw_fence_obj_init($p0, $p30, $i1, $i2, vmw_fence_destroy);
    call {:si_unique_call 1452} {:cexpr "ret"} boogie_si_record_i32($i45);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i46);
    call {:si_unique_call 1453} {:cexpr "__cil_tmp33"} boogie_si_record_i32($i47);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i49 := $xor.i1($i48, 1);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i32($i49);
    call {:si_unique_call 1454} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i50);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i52 := $xor.i1($i51, 1);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i53 := $zext.i1.i32($i52);
    call {:si_unique_call 1455} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i53);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i53);
    call {:si_unique_call 1456} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i54);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} $i55 := ldv__builtin_expect($i54, 0);
    call {:si_unique_call 1458} {:cexpr "tmp___11"} boogie_si_record_i64($i55);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p29);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb9:
    assume $i56 == 1;
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p30);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} kfree($p57);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i44 := $i45;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p0);
    call {:si_unique_call 1446} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i58);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 92);
    call {:si_unique_call 1447} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i59);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p60 := $i2p.i64.ref($i59);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    call {:si_unique_call 1448} {:cexpr "__cil_tmp40"} boogie_si_record_i32($i61);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i62 := $zext.i32.i64($i61);
    call {:si_unique_call 1449} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i62);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} ttm_mem_global_free($p8, $i62);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i28 := $i44;
    goto $bb3;

  $bb5:
    assume $i43 == 1;
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i28 := $i16;
    goto $bb3;
}



const vmw_fallback_wait: ref;

axiom vmw_fallback_wait == $sub.ref(0, 565608);

procedure vmw_fallback_wait($p0: ref, $i1: i1, $i2: i1, $i3: i32, $i4: i1, $i5: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.2, $M.0, $M.6, $M.1, $CurrAddr, assertsPassed, $M.13, $M.3, $M.4, $M.10, $M.16;



implementation vmw_fallback_wait($p0: ref, $i1: i1, $i2: i1, $i3: i32, $i4: i1, $i5: i64) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i8;
  var $i11: i8;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i1;
  var $p41: ref;
  var $i42: i1;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $i56: i1;
  var $i57: i8;
  var $i58: i1;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $i64: i1;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $i66: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $i59: i32;
  var $i80: i64;
  var $i81: i64;
  var $p82: ref;
  var $i83: i1;
  var $i84: i1;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i64;
  var $p93: ref;
  var $i94: i1;
  var $i95: i64;
  var $i96: i64;
  var $p97: ref;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i1);
    call {:si_unique_call 1463} {:cexpr "vmw_fallback_wait:arg:lazy"} boogie_si_record_i1($i1);
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i2);
    call {:si_unique_call 1464} {:cexpr "vmw_fallback_wait:arg:fifo_idle"} boogie_si_record_i1($i2);
    call {:si_unique_call 1465} {:cexpr "vmw_fallback_wait:arg:seqno"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i4);
    call {:si_unique_call 1466} {:cexpr "vmw_fallback_wait:arg:interruptible"} boogie_si_record_i1($i4);
    call {:si_unique_call 1467} {:cexpr "vmw_fallback_wait:arg:timeout"} boogie_si_record_i64($i5);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    call {:si_unique_call 1468} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i12);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 1856);
    call {:si_unique_call 1469} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i13);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $M.11 := $store.i64($M.11, $p7, $i5);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, jiffies);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.11, $p7);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i15, $i16);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, $p8, $i17);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.12, $p8);
    call {:si_unique_call 1470} {:cexpr "end_jiffies"} boogie_si_record_i64($i18);
    call {:si_unique_call 1471} $p19 := devirtbounce.3(0, current_task);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p6);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p20, 0);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p6);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 8);
    call {:si_unique_call 1472} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i22);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i22);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p19);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p6);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 16);
    call {:si_unique_call 1473} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i26);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, autoremove_wake_function);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p6);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 24);
    call {:si_unique_call 1474} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i29);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p6);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 24);
    call {:si_unique_call 1475} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i31);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i29);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p32);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p6);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 32);
    call {:si_unique_call 1476} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i35);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p6);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 24);
    call {:si_unique_call 1477} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i37);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i35);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p38);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i10);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $p41 := vmw_seqno_passed;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i10);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p0);
    call {:si_unique_call 1481} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i46);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 2880);
    call {:si_unique_call 1482} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i47);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} $i49 := atomic_read($p48);
    call {:si_unique_call 1484} {:cexpr "tmp___8"} boogie_si_record_i32($i49);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb7;

  $bb7:
    call $i50, $i51, $i52, $i53, $i54, $p55, $i56, $i57, $i58, $i60, $i61, $i62, $i64, $i67, $i68, $i69, $p70, $p71, $p72, $i73, $p74, $p75, $i66, $i76, $p77, $i78, $i79, vslice_dummy_var_76 := vmw_fallback_wait_loop_$bb7($p0, $i3, $p6, $i9, $i11, $i18, $p41, $i50, $i51, $i52, $i53, $i54, $p55, $i56, $i57, $i58, $i60, $i61, $i62, $i64, $i67, $i68, $i69, $p70, $p71, $p72, $i73, $p74, $p75, $i66, $i76, $p77, $i78, $i79, vslice_dummy_var_76);
    goto $bb7_last;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i11);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := 2;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p0);
    call {:si_unique_call 1485} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i53);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i53, 2888);
    call {:si_unique_call 1486} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i54);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p55 := $i2p.i64.ref($i54);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} prepare_to_wait($p55, $p6, $i52);
    call {:si_unique_call 1488} $i56 := devirtbounce.13($p41, $p0, $i3);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i8($i56);
    call {:si_unique_call 1489} {:cexpr "tmp___10"} boogie_si_record_i8($i57);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i57);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.0, jiffies);
    call {:si_unique_call 1493} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i60);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i61 := $sub.i64($i60, $i18);
    call {:si_unique_call 1494} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i61);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i62 := $sge.i64($i61, 0);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i8.i1($i9);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i64 == 1);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i50, 1);
    call {:si_unique_call 1497} {:cexpr "count"} boogie_si_record_i32($i67);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 15);
    call {:si_unique_call 1498} {:cexpr "__cil_tmp52"} boogie_si_record_i32($i68);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i66 := $i67;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i8.i1($i11);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i50 := $i66;
    goto $bb39_dummy;

  $bb34:
    assume $i76 == 1;
    call {:si_unique_call 1502} $p77 := devirtbounce.3(0, current_task);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} $i78 := signal_pending($p77);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    call {:si_unique_call 1504} {:cexpr "tmp___14"} boogie_si_record_i32($i78);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i79 == 1;
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i59 := $sub.i32(0, 512);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p0);
    call {:si_unique_call 1490} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i80);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i81 := $add.i64($i80, 2888);
    call {:si_unique_call 1491} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i81);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p82 := $i2p.i64.ref($i81);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} finish_wait($p82, $p6);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i59, 0);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p0);
    call {:si_unique_call 1508} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i91);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i92 := $add.i64($i91, 2888);
    call {:si_unique_call 1509} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i92);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p93 := $i2p.i64.ref($i92);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} __wake_up($p93, 3, 0, $0.ref);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i8.i1($i10);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $r := $i59;
    return;

  $bb46:
    assume $i94 == 1;
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p14);
    call {:si_unique_call 1511} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i95);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i96 := $add.i64($i95, 112);
    call {:si_unique_call 1512} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i96);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p97 := $i2p.i64.ref($i96);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} up_read($p97);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb40:
    assume $i83 == 1;
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i8.i1($i10);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i84 == 1;
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p0);
    call {:si_unique_call 1505} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i85);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 2144);
    call {:si_unique_call 1506} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i86);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p87 := $i2p.i64.ref($i86);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p88, $mul.ref(6, 4));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} iowrite32($i49, $p90);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i69 == 1;
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    call {:si_unique_call 1499} $p70 := devirtbounce.3(0, current_task);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p71, 0);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} schedule();
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    call {:si_unique_call 1501} $p72 := devirtbounce.3(0, current_task);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i8.i1($i11);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i73 == 1);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p72);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p75, 2);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb29:
    assume $i73 == 1;
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p72);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p74, 1);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i64 == 1;
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} vslice_dummy_var_76 := schedule_timeout(1);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i66 := $i50;
    goto $bb21;

  $bb16:
    assume $i62 == 1;
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} vslice_dummy_var_75 := drm_err.ref.ref(.str.88, .str.89);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb14;

  $bb12:
    assume $i58 == 1;
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb14;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i51 == 1;
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i52 := 1;
    goto $bb11;

  $bb4:
    assume $i42 == 1;
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p14);
    call {:si_unique_call 1478} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i43);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 112);
    call {:si_unique_call 1479} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i44);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} down_read($p45);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i40 == 1;
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p41 := vmw_fifo_idle;
    goto $bb3;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb39_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3277;
}



const vmw_fifo_idle: ref;

axiom vmw_fifo_idle == $sub.ref(0, 566640);

procedure vmw_fifo_idle($p0: ref, $i1: i32) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation vmw_fifo_idle($p0: ref, $i1: i32) returns ($r: i1)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} {:cexpr "vmw_fifo_idle:arg:seqno"} boogie_si_record_i32($i1);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1515} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 2184);
    call {:si_unique_call 1516} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} mutex_lock($p4);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} $i5 := vmw_read($p0, 22);
    call {:si_unique_call 1519} {:cexpr "busy"} boogie_si_record_i32($i5);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 1520} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 2184);
    call {:si_unique_call 1521} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i7);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} mutex_unlock($p8);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i5, 0);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 1523} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i10);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;
}



const vmw_seqno_passed: ref;

axiom vmw_seqno_passed == $sub.ref(0, 567672);

procedure vmw_seqno_passed($p0: ref, $i1: i32) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.1, $M.6, $M.0, assertsPassed, $CurrAddr, $M.13, $M.2, $M.11, $M.12, $M.3, $M.4, $M.10, $M.16;



implementation vmw_seqno_passed($p0: ref, $i1: i32) returns ($r: i1)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i1;
  var $i45: i8;
  var $i46: i1;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i8;
  var $i56: i1;
  var $i18: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} {:cexpr "vmw_seqno_passed:arg:seqno"} boogie_si_record_i32($i1);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1525} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i2);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 2980);
    call {:si_unique_call 1526} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i3);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 1527} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i5);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, $i1);
    call {:si_unique_call 1528} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i6);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i7 := $ult.i32($i6, 16777216);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 1529} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i8);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i10 := $xor.i1($i9, 1);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 1530} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i11);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i13 := $xor.i1($i12, 1);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    call {:si_unique_call 1531} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i14);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    call {:si_unique_call 1532} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i15);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} $i16 := ldv__builtin_expect($i15, 1);
    call {:si_unique_call 1534} {:cexpr "tmp___7"} boogie_si_record_i64($i16);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    call {:si_unique_call 1535} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i19);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 1856);
    call {:si_unique_call 1536} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i20);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} vmw_update_seqno($p0, $p21);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p0);
    call {:si_unique_call 1538} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i22);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 2980);
    call {:si_unique_call 1539} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i23);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    call {:si_unique_call 1540} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i25);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i25, $i1);
    call {:si_unique_call 1541} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i26);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i27 := $ult.i32($i26, 16777216);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    call {:si_unique_call 1542} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i28);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i30 := $xor.i1($i29, 1);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    call {:si_unique_call 1543} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i31);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i33 := $xor.i1($i32, 1);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    call {:si_unique_call 1544} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i34);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    call {:si_unique_call 1545} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i35);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} $i36 := ldv__builtin_expect($i35, 1);
    call {:si_unique_call 1547} {:cexpr "tmp___8"} boogie_si_record_i64($i36);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p21);
    call {:si_unique_call 1548} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i38);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 36);
    call {:si_unique_call 1549} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i39);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    call {:si_unique_call 1550} {:cexpr "__cil_tmp33"} boogie_si_record_i32($i41);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 1);
    call {:si_unique_call 1551} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i42);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i43 == 1);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} $i44 := vmw_fifo_idle($p0, $i1);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i8($i44);
    call {:si_unique_call 1553} {:cexpr "tmp___9"} boogie_si_record_i8($i45);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i45);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p0);
    call {:si_unique_call 1554} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i47);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 2880);
    call {:si_unique_call 1555} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i48);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i48);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} $i50 := atomic_read($p49);
    call {:si_unique_call 1557} {:cexpr "tmp___10"} boogie_si_record_i32($i50);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32($i50, $i1);
    call {:si_unique_call 1558} {:cexpr "__cil_tmp42"} boogie_si_record_i32($i51);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i52 := $ugt.i32($i51, 16777216);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i53 := $zext.i1.i32($i52);
    call {:si_unique_call 1559} {:cexpr "__cil_tmp43"} boogie_si_record_i32($i53);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i8($i54);
    call {:si_unique_call 1560} {:cexpr "ret"} boogie_si_record_i8($i55);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i8.i1($i55);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i18 := $i56;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb10:
    assume $i46 == 1;
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb3;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i37 == 1;
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb3;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb3;
}



const down_read: ref;

axiom down_read == $sub.ref(0, 568704);

procedure down_read($p0: ref);
  free requires assertsPassed;



implementation down_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 569736);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    return;
}



const up_read: ref;

axiom up_read == $sub.ref(0, 570768);

procedure up_read($p0: ref);
  free requires assertsPassed;



implementation up_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    return;
}



const vmw_update_seqno: ref;

axiom vmw_update_seqno == $sub.ref(0, 571800);

procedure vmw_update_seqno($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr, $M.1, $M.6, assertsPassed, $M.2, $M.11, $M.12, $M.3, $M.4, $M.10, $M.16;



implementation vmw_update_seqno($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1561} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 2144);
    call {:si_unique_call 1562} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i3);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(6, 4));
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} $i8 := ioread32($p7);
    call {:si_unique_call 1564} {:cexpr "tmp___7"} boogie_si_record_i32($i8);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    call {:si_unique_call 1565} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i9);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 2980);
    call {:si_unique_call 1566} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i10);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 1567} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i12);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, $i8);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    call {:si_unique_call 1568} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i14);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 2980);
    call {:si_unique_call 1569} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i15);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i8);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p1);
    call {:si_unique_call 1570} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i17);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 160);
    call {:si_unique_call 1571} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i18);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} vslice_dummy_var_77 := vmw_marker_pull($p19, $i8);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    call {:si_unique_call 1573} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i21);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 3008);
    call {:si_unique_call 1574} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i22);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} vmw_fences_update($p24);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_277:
    assume !assertsPassed;
    return;
}



const vmw_marker_pull: ref;

axiom vmw_marker_pull == $sub.ref(0, 572832);

procedure vmw_marker_pull($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr;



implementation vmw_marker_pull($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $i54: i8;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $p81: ref;
  var $i82: i64;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i61: i8;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $p96: ref;
  var $i97: i64;
  var $i98: i64;
  var $p99: ref;
  var $i27: i8;
  var $i101: i64;
  var $i102: i64;
  var $p103: ref;
  var $i104: i1;
  var $i105: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1579} {:cexpr "vmw_marker_pull:arg:signaled_seqno"} boogie_si_record_i32($i1);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 1580} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i5);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 48);
    call {:si_unique_call 1581} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i6);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} spin_lock($p7);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} getrawmonotonic($p2);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} $i9 := list_empty($p8);
    call {:si_unique_call 1585} {:cexpr "tmp___7"} boogie_si_record_i32($i9);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p0);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i32($p30);
    call {:si_unique_call 1596} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i31);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p29);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i31);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i34 := $sub.i64(0, $i33);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p32, $mul.ref($i34, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i32($p39);
    call {:si_unique_call 1597} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i40);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p38);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i42 := $zext.i32.i64($i40);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i43 := $sub.i64(0, $i42);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p41, $mul.ref($i43, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p0);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p48, $p49, $i50 := $p44, $p35, 0;
    goto $bb5;

  $bb5:
    call $p48, $p49, $i50, $p51, $i52, $i53, $i54, $i55, $i56, $p57, $i58, $i59, $i60, $i62, $i63, $p64, $i65, $p66, $i67, $i68, $i69, $p70, $p71, $i72, $p73, $p74, $i75, $p76, $p77, $p78, $p79, $i80, $p81, $i82, $p83, $p84, $i85, $i86, $p87, $p88, $p89, $p90, $p91, $i61, $p92, $p93, $p94, $i95, $p96, $i97, $i98, $p99, cmdloc_dummy_var_9, cmdloc_dummy_var_10, cmdloc_dummy_var_11, cmdloc_dummy_var_12, cmdloc_dummy_var_13, cmdloc_dummy_var_14 := vmw_marker_pull_loop_$bb5($p0, $i1, $p2, $p4, $i47, $p48, $p49, $i50, $p51, $i52, $i53, $i54, $i55, $i56, $p57, $i58, $i59, $i60, $i62, $i63, $p64, $i65, $p66, $i67, $i68, $i69, $p70, $p71, $i72, $p73, $p74, $i75, $p76, $p77, $p78, $p79, $i80, $p81, $i82, $p83, $p84, $i85, $i86, $p87, $p88, $p89, $p90, $p91, $i61, $p92, $p93, $p94, $i95, $p96, $i97, $i98, $p99, cmdloc_dummy_var_9, cmdloc_dummy_var_10, cmdloc_dummy_var_11, cmdloc_dummy_var_12, cmdloc_dummy_var_13, cmdloc_dummy_var_14);
    goto $bb5_last;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p49);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    call {:si_unique_call 1598} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i52);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, $i47);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i54 := $i50;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i27 := $i54;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p0);
    call {:si_unique_call 1593} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i101);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i102 := $add.i64($i101, 48);
    call {:si_unique_call 1594} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i102);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p103 := $i2p.i64.ref($i102);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} spin_unlock($p103);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i8.i1($i27);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $sub.i32(0, 16);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $r := $i105;
    return;

  $bb15:
    assume $i104 == 1;
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i105 := 0;
    goto $bb17;

  $bb7:
    assume $i53 == 1;
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p49);
    call {:si_unique_call 1599} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i55);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 16);
    call {:si_unique_call 1600} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i56);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    call {:si_unique_call 1601} {:cexpr "__cil_tmp43"} boogie_si_record_i32($i58);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i59 := $sub.i32($i1, $i58);
    call {:si_unique_call 1602} {:cexpr "__cil_tmp44"} boogie_si_record_i32($i59);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i60 := $ugt.i32($i59, 1073741824);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p0);
    call {:si_unique_call 1604} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i62);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 16);
    call {:si_unique_call 1605} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i63);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, $p64);
    call {:si_unique_call 1606} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i65);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.0, $p66);
    call {:si_unique_call 1607} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i67);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p49);
    call {:si_unique_call 1608} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i68);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i69 := $add.i64($i68, 24);
    call {:si_unique_call 1609} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i69);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p70 := $i2p.i64.ref($i69);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.0, $p71);
    call {:si_unique_call 1610} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i72);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p73 := $i2p.i64.ref($i69);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    call {:si_unique_call 1611} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i75);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p76 := $i2p.i64.ref($i63);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} $p77 := timespec_sub($i65, $i67, $i72, $i75);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p4);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i80 := $extractvalue($p77, 0);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p79, $i80);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p78, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i82 := $extractvalue($p77, 1);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p81, $i82);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p76);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p4);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 1613} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p83, $p84, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p0);
    call {:si_unique_call 1614} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i85);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 32);
    call {:si_unique_call 1615} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i86);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p87 := $i2p.i64.ref($i86);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p2);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 1616} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p88, $p89, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p49);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} list_del($p90);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p49);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} kfree($p91);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i61 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p48);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i32($p94);
    call {:si_unique_call 1603} {:cexpr "__cil_tmp60"} boogie_si_record_i32($i95);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p93);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i97 := $zext.i32.i64($i95);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i98 := $sub.i64(0, $i97);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p96, $mul.ref($i98, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p48, $p49, $i50 := $p99, $p48, $i61;
    goto corral_source_split_3575_dummy;

  $bb11:
    assume $i60 == 1;
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i61 := $i50;
    goto $bb13;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p0);
    call {:si_unique_call 1586} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i11);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 16);
    call {:si_unique_call 1587} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i12);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} $p14 := ns_to_timespec(0);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p3);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i17 := $extractvalue($p14, 0);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p16, $i17);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i19 := $extractvalue($p14, 1);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p18, $i19);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p13);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p3);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 1589} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p20, $p21, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p0);
    call {:si_unique_call 1590} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i22);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 32);
    call {:si_unique_call 1591} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i23);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p2);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 1592} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p25, $p26, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i27 := 1;
    goto $bb3;

  corral_source_split_3575_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3547;
}



const getrawmonotonic: ref;

axiom getrawmonotonic == $sub.ref(0, 573864);

procedure getrawmonotonic($p0: ref);
  free requires assertsPassed;



implementation getrawmonotonic($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    return;
}



const ns_to_timespec: ref;

axiom ns_to_timespec == $sub.ref(0, 574896);

procedure ns_to_timespec($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ns_to_timespec($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1620} {:cexpr "ns_to_timespec:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} $p2 := external_alloc();
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 1} true;
    $i4 := $ne.ref($p3, $0.ref);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 1} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1622} __VERIFIER_assume($i5);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 1623} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p6, $p7, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_3629;

  corral_source_split_3629:
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3630;

  corral_source_split_3630:
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume $extractvalue($p11, 1) == $extractvalue($u1, 1);
    assume $extractvalue($p11, 0) == $i10;
    goto corral_source_split_3632;

  corral_source_split_3632:
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3633;

  corral_source_split_3633:
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume $extractvalue($p14, 0) == $extractvalue($p11, 0);
    assume $extractvalue($p14, 1) == $i13;
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;
}



const timespec_sub: ref;

axiom timespec_sub == $sub.ref(0, 575928);

procedure timespec_sub($i0: i64, $i1: i64, $i2: i64, $i3: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.13, $CurrAddr;



implementation timespec_sub($i0: i64, $i1: i64, $i2: i64, $i3: i64) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1626} {:cexpr "timespec_sub:arg:lhs_tv_sec11"} boogie_si_record_i64($i0);
    call {:si_unique_call 1627} {:cexpr "timespec_sub:arg:lhs_tv_nsec10"} boogie_si_record_i64($i1);
    call {:si_unique_call 1628} {:cexpr "timespec_sub:arg:rhs_tv_sec9"} boogie_si_record_i64($i2);
    call {:si_unique_call 1629} {:cexpr "timespec_sub:arg:rhs_tv_nsec8"} boogie_si_record_i64($i3);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64($i0, $i2);
    call {:si_unique_call 1630} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i6);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64($i1, $i3);
    call {:si_unique_call 1631} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i7);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} set_normalized_timespec($p5, $i6, $i7);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p4);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p5);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.13;
    cmdloc_dummy_var_19 := $M.13;
    call {:si_unique_call 1633} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p8, $p9, 16, $zext.i32.i64(8), 0 == 1);
    $M.13 := cmdloc_dummy_var_20;
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p4);
    goto corral_source_split_3644;

  corral_source_split_3644:
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3645;

  corral_source_split_3645:
    $i12 := $load.i64($M.13, $p11);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume $extractvalue($p13, 1) == $extractvalue($u1, 1);
    assume $extractvalue($p13, 0) == $i12;
    goto corral_source_split_3647;

  corral_source_split_3647:
    $p14 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    $i15 := $load.i64($M.13, $p14);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume $extractvalue($p16, 0) == $extractvalue($p13, 0);
    assume $extractvalue($p16, 1) == $i15;
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $r := $p16;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 576960);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    return;
}



const set_normalized_timespec: ref;

axiom set_normalized_timespec == $sub.ref(0, 577992);

procedure set_normalized_timespec($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation set_normalized_timespec($p0: ref, $i1: i64, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} {:cexpr "set_normalized_timespec:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1635} {:cexpr "set_normalized_timespec:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    return;
}



const vmw_read: ref;

axiom vmw_read == $sub.ref(0, 579024);

procedure vmw_read($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vmw_read($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} {:cexpr "vmw_read:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1637} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 2104);
    call {:si_unique_call 1638} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 1639} {:cexpr "__cil_tmp6"} boogie_si_record_i32($i5);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} outl($i1, $i5);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 1641} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i6);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 2104);
    call {:si_unique_call 1642} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i7);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 1643} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i9);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 1);
    call {:si_unique_call 1644} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i10);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} $i11 := inl($i10);
    call {:si_unique_call 1646} {:cexpr "val"} boogie_si_record_i32($i11);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const inl: ref;

axiom inl == $sub.ref(0, 580056);

procedure inl($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation inl($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} {:cexpr "inl:arg:port"} boogie_si_record_i32($i0);
    call {:si_unique_call 1648} $i1 := devirtbounce.14(0, $i0);
    call {:si_unique_call 1649} {:cexpr "value"} boogie_si_record_i32($i1);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vmw_mem_glob: ref;

axiom vmw_mem_glob == $sub.ref(0, 581088);

procedure vmw_mem_glob($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vmw_mem_glob($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1650} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 1832);
    call {:si_unique_call 1651} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const ttm_mem_global_alloc: ref;

axiom ttm_mem_global_alloc == $sub.ref(0, 582120);

procedure ttm_mem_global_alloc($p0: ref, $i1: i64, $i2: i1, $i3: i1) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_mem_global_alloc($p0: ref, $i1: i64, $i2: i1, $i3: i1) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1652} {:cexpr "ttm_mem_global_alloc:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1653} {:cexpr "ttm_mem_global_alloc:arg:arg2"} boogie_si_record_i1($i2);
    call {:si_unique_call 1654} {:cexpr "ttm_mem_global_alloc:arg:arg3"} boogie_si_record_i1($i3);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1655} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1656} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vmw_fence_destroy: ref;

axiom vmw_fence_destroy == $sub.ref(0, 583152);

procedure vmw_fence_destroy($p0: ref);
  free requires assertsPassed;



implementation vmw_fence_destroy($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1657} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i1);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 8);
    call {:si_unique_call 1658} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} kfree($p5);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p4);
    call {:si_unique_call 1660} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 8);
    call {:si_unique_call 1661} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i7);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} $p10 := vmw_mem_glob($p9);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p4);
    call {:si_unique_call 1663} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i11);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 92);
    call {:si_unique_call 1664} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i12);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    call {:si_unique_call 1665} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i14);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    call {:si_unique_call 1666} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i15);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} ttm_mem_global_free($p10, $i15);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    return;
}



const vmw_fence_obj_init: ref;

axiom vmw_fence_obj_init == $sub.ref(0, 584184);

procedure vmw_fence_obj_init($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vmw_fence_obj_init($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i8;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $i47: i32;
  var $i58: i64;
  var $i59: i64;
  var $p60: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} {:cexpr "vmw_fence_obj_init:arg:seqno"} boogie_si_record_i32($i2);
    call {:si_unique_call 1669} {:cexpr "vmw_fence_obj_init:arg:mask"} boogie_si_record_i32($i3);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    call {:si_unique_call 1670} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i5);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 4);
    call {:si_unique_call 1671} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i6);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i2);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p1);
    call {:si_unique_call 1672} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i8);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 40);
    call {:si_unique_call 1673} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i9);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} INIT_LIST_HEAD($p10);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p1);
    call {:si_unique_call 1675} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i11);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 8);
    call {:si_unique_call 1676} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i12);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p0);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p1);
    call {:si_unique_call 1677} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i14);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 32);
    call {:si_unique_call 1678} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i15);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 0);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p1);
    call {:si_unique_call 1679} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i17);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 36);
    call {:si_unique_call 1680} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i18);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i3);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p1);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} kref_init($p20);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p1);
    call {:si_unique_call 1682} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i21);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 56);
    call {:si_unique_call 1683} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i22);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p4);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p1);
    call {:si_unique_call 1684} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i24);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 64);
    call {:si_unique_call 1685} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i25);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} __init_waitqueue_head($p26, .str.284, __key___21);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p0);
    call {:si_unique_call 1687} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i27);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 16);
    call {:si_unique_call 1688} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i28);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} $p30 := spinlock_check($p29);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} $i31 := _raw_spin_lock_irqsave($p30);
    call {:si_unique_call 1691} {:cexpr "irq_flags"} boogie_si_record_i64($i31);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    call {:si_unique_call 1692} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i32);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 100);
    call {:si_unique_call 1693} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i33);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 1694} {:cexpr "__cil_tmp35"} boogie_si_record_i8($i37);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i39 := $xor.i1($i38, 1);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    call {:si_unique_call 1695} {:cexpr "__cil_tmp36"} boogie_si_record_i32($i40);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i42 := $xor.i1($i41, 1);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    call {:si_unique_call 1696} {:cexpr "__cil_tmp37"} boogie_si_record_i32($i43);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    call {:si_unique_call 1697} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i44);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 1699} {:cexpr "tmp___8"} boogie_si_record_i64($i45);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p1);
    call {:si_unique_call 1703} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i48);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, 16);
    call {:si_unique_call 1704} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i49);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $p50 := $i2p.i64.ref($i49);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p0);
    call {:si_unique_call 1705} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i51);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 40);
    call {:si_unique_call 1706} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i52);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} list_add_tail($p50, $p53);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p0);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    call {:si_unique_call 1708} {:cexpr "__cil_tmp45"} boogie_si_record_i32($i55);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i55, 1);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p0);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p0);
    call {:si_unique_call 1700} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i58);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 16);
    call {:si_unique_call 1701} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i59);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p60 := $i2p.i64.ref($i59);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} spin_unlock_irqrestore($p60, $i31);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $r := $i47;
    return;

  $bb10:
    assume $i46 == 1;
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 16);
    goto $bb12;
}



const ttm_mem_global_free: ref;

axiom ttm_mem_global_free == $sub.ref(0, 585216);

procedure ttm_mem_global_free($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ttm_mem_global_free($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} {:cexpr "ttm_mem_global_free:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    return;
}



const kref_init: ref;

axiom kref_init == $sub.ref(0, 586248);

procedure kref_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation kref_init($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} atomic_set($p1, 1);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 587280);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 588312);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    return;
}



const vmw_fpriv: ref;

axiom vmw_fpriv == $sub.ref(0, 589344);

procedure vmw_fpriv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vmw_fpriv($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1712} {:cexpr "__cil_tmp2"} boogie_si_record_i64($i1);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 136);
    call {:si_unique_call 1713} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const vmw_user_fence_destroy: ref;

axiom vmw_user_fence_destroy == $sub.ref(0, 590376);

procedure vmw_user_fence_destroy($p0: ref);
  free requires assertsPassed;



implementation vmw_user_fence_destroy($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1714} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i1);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 64);
    call {:si_unique_call 1715} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i2);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i32($p3);
    call {:si_unique_call 1716} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i4);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i4);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, $i6);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p5, $mul.ref($i7, 1));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    call {:si_unique_call 1717} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i10);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 8);
    call {:si_unique_call 1718} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i11);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p9);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} kfree($p14);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p13);
    call {:si_unique_call 1720} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i15);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 8);
    call {:si_unique_call 1721} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i16);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} $p19 := vmw_mem_glob($p18);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p13);
    call {:si_unique_call 1723} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i20);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 88);
    call {:si_unique_call 1724} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i21);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    call {:si_unique_call 1725} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i23);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    call {:si_unique_call 1726} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i24);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} ttm_mem_global_free($p19, $i24);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    return;
}



const vmw_user_fence_base_release: ref;

axiom vmw_user_fence_base_release == $sub.ref(0, 591408);

procedure vmw_user_fence_base_release($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $CurrAddr, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation vmw_user_fence_base_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p0);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i32($p3);
    call {:si_unique_call 1729} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i4);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i4);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, $i6);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p5, $mul.ref($i7, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    call {:si_unique_call 1730} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i10);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 64);
    call {:si_unique_call 1731} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i11);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p12);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p0, $0.ref);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} vmw_fence_obj_unreference($p1);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;
}



const ttm_base_object_init: ref;

axiom ttm_base_object_init == $sub.ref(0, 592440);

procedure ttm_base_object_init($p0: ref, $p1: ref, $i2: i1, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_base_object_init($p0: ref, $p1: ref, $i2: i1, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1733} {:cexpr "ttm_base_object_init:arg:arg2"} boogie_si_record_i1($i2);
    call {:si_unique_call 1734} {:cexpr "ttm_base_object_init:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1735} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1736} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const vmw_marker_push: ref;

axiom vmw_marker_push == $sub.ref(0, 593472);

procedure vmw_marker_push($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmw_marker_push($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} {:cexpr "vmw_marker_push:arg:seqno"} boogie_si_record_i32($i1);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} $p2 := __kmalloc(40, 208);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i4 := $ne.ref($p3, $0.ref);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i5 := $xor.i1($i4, 1);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 1739} {:cexpr "__cil_tmp6"} boogie_si_record_i32($i6);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i8 := $xor.i1($i7, 1);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 1740} {:cexpr "__cil_tmp7"} boogie_si_record_i32($i9);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 1741} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i12);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    call {:si_unique_call 1742} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i13);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 1744} {:cexpr "tmp___8"} boogie_si_record_i64($i14);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p3);
    call {:si_unique_call 1745} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i17);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 16);
    call {:si_unique_call 1746} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i18);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i1);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p3);
    call {:si_unique_call 1747} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i20);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 24);
    call {:si_unique_call 1748} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i21);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} getrawmonotonic($p22);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    call {:si_unique_call 1750} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i23);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 48);
    call {:si_unique_call 1751} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i24);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} spin_lock($p25);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p3);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p0);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} list_add_tail($p26, $p27);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p0);
    call {:si_unique_call 1754} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i28);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 48);
    call {:si_unique_call 1755} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i29);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} spin_unlock($p30);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb3;
}



const vmw_resource_reference: ref;

axiom vmw_resource_reference == $sub.ref(0, 594504);

procedure vmw_resource_reference($p0: ref) returns ($r: ref);



const vmw_resource_alloc_id: ref;

axiom vmw_resource_alloc_id == $sub.ref(0, 595536);

procedure vmw_resource_alloc_id($p0: ref, $p1: ref) returns ($r: i32);



const vmw_surface_define_size: ref;

axiom vmw_surface_define_size == $sub.ref(0, 596568);

procedure vmw_surface_define_size($p0: ref) returns ($r: i32);



const vmw_surface_define_encode: ref;

axiom vmw_surface_define_encode == $sub.ref(0, 597600);

procedure vmw_surface_define_encode($p0: ref, $p1: ref);



const idr_pre_get: ref;

axiom idr_pre_get == $sub.ref(0, 598632);

procedure idr_pre_get($p0: ref, $i1: i32) returns ($r: i32);



const idr_get_new_above: ref;

axiom idr_get_new_above == $sub.ref(0, 599664);

procedure idr_get_new_above($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);



const ttm_base_object_lookup: ref;

axiom ttm_base_object_lookup == $sub.ref(0, 600696);

procedure ttm_base_object_lookup($p0: ref, $i1: i32) returns ($r: ref);



const _raw_read_lock: ref;

axiom _raw_read_lock == $sub.ref(0, 601728);

procedure _raw_read_lock($p0: ref);



const _raw_read_unlock: ref;

axiom _raw_read_unlock == $sub.ref(0, 602760);

procedure _raw_read_unlock($p0: ref);



const vmw_user_surface_free: ref;

axiom vmw_user_surface_free == $sub.ref(0, 603792);

procedure vmw_user_surface_free($p0: ref);
  free requires assertsPassed;



implementation vmw_user_surface_free($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i1;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i32($p1);
    call {:si_unique_call 1757} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i2);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i2);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, $i4);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1758} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i8);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 64);
    call {:si_unique_call 1759} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i9);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i32($p10);
    call {:si_unique_call 1760} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i11);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p7);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i11);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64(0, $i13);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p12, $mul.ref($i14, 1));
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p7);
    call {:si_unique_call 1761} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i17);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 8);
    call {:si_unique_call 1762} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i18);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p16);
    call {:si_unique_call 1763} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i21);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 272);
    call {:si_unique_call 1764} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i22);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    call {:si_unique_call 1765} {:cexpr "size"} boogie_si_record_i32($i24);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p7);
    call {:si_unique_call 1766} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i25);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 184);
    call {:si_unique_call 1767} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i26);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i29 := $ne.ref($p28, $0.ref);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p7);
    call {:si_unique_call 1771} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i33);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 192);
    call {:si_unique_call 1772} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i34);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i34);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} kfree($p37);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p7);
    call {:si_unique_call 1774} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i38);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 144);
    call {:si_unique_call 1775} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i39);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} kfree($p42);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p7);
    call {:si_unique_call 1777} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i43);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 176);
    call {:si_unique_call 1778} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i44);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} kfree($p47);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p16);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} kfree($p48);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} $p49 := vmw_mem_glob($p20);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i50 := $zext.i32.i64($i24);
    call {:si_unique_call 1782} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i50);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} ttm_mem_global_free($p49, $i50);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p7);
    call {:si_unique_call 1768} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i30);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 184);
    call {:si_unique_call 1769} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i31);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} ttm_bo_unref($p32);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ttm_base_object_unref: ref;

axiom ttm_base_object_unref == $sub.ref(0, 604824);

procedure ttm_base_object_unref($p0: ref);
  free requires assertsPassed;



implementation ttm_base_object_unref($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    return;
}



const vmw_translate_guest_ptr: ref;

axiom vmw_translate_guest_ptr == $sub.ref(0, 605856);

procedure vmw_translate_guest_ptr($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);



const vmw_dmabuf_unreference: ref;

axiom vmw_dmabuf_unreference == $sub.ref(0, 606888);

procedure vmw_dmabuf_unreference($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmw_dmabuf_unreference($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p0);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p2);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p0, $0.ref);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} ttm_bo_unref($p1);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    return;
}



const vmw_user_dmabuf_lookup: ref;

axiom vmw_user_dmabuf_lookup == $sub.ref(0, 607920);

procedure vmw_user_dmabuf_lookup($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);



const vmw_bo_to_validate_list: ref;

axiom vmw_bo_to_validate_list == $sub.ref(0, 608952);

procedure vmw_bo_to_validate_list($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);



const vmw_dmabuf_validate_node: ref;

axiom vmw_dmabuf_validate_node == $sub.ref(0, 609984);

procedure vmw_dmabuf_validate_node($p0: ref, $i1: i32) returns ($r: i32);



const vmw_dma_buffer: ref;

axiom vmw_dma_buffer == $sub.ref(0, 611016);

procedure vmw_dma_buffer($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vmw_dma_buffer($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i32($p1);
    call {:si_unique_call 1786} {:cexpr "__cil_tmp5"} boogie_si_record_i32($i2);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i2);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, $i4);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 1));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const vmw_query_bo_switch_prepare: ref;

axiom vmw_query_bo_switch_prepare == $sub.ref(0, 612048);

procedure vmw_query_bo_switch_prepare($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);



const vmw_context_check: ref;

axiom vmw_context_check == $sub.ref(0, 613080);

procedure vmw_context_check($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);



const idr_find: ref;

axiom idr_find == $sub.ref(0, 614112);

procedure idr_find($p0: ref, $i1: i32) returns ($r: ref);



const vmw_kms_cursor_snoop: ref;

axiom vmw_kms_cursor_snoop == $sub.ref(0, 615144);

procedure vmw_kms_cursor_snoop($p0: ref, $p1: ref, $p2: ref, $p3: ref);



const ttm_bo_reserve: ref;

axiom ttm_bo_reserve == $sub.ref(0, 616176);

procedure ttm_bo_reserve($p0: ref, $i1: i1, $i2: i1, $i3: i1, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_reserve($p0: ref, $i1: i1, $i2: i1, $i3: i1, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1787} {:cexpr "ttm_bo_reserve:arg:arg1"} boogie_si_record_i1($i1);
    call {:si_unique_call 1788} {:cexpr "ttm_bo_reserve:arg:arg2"} boogie_si_record_i1($i2);
    call {:si_unique_call 1789} {:cexpr "ttm_bo_reserve:arg:arg3"} boogie_si_record_i1($i3);
    call {:si_unique_call 1790} {:cexpr "ttm_bo_reserve:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1791} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1792} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ttm_bo_kmap: ref;

axiom ttm_bo_kmap == $sub.ref(0, 617208);

procedure ttm_bo_kmap($p0: ref, $i1: i64, $i2: i64, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_kmap($p0: ref, $i1: i64, $i2: i64, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1793} {:cexpr "ttm_bo_kmap:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1794} {:cexpr "ttm_bo_kmap:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1795} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1796} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ttm_kmap_obj_virtual: ref;

axiom ttm_kmap_obj_virtual == $sub.ref(0, 618240);

procedure ttm_kmap_obj_virtual($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ttm_kmap_obj_virtual($p0: ref, $p1: ref) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1797} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 16);
    call {:si_unique_call 1798} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i3);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 1799} {:cexpr "__cil_tmp5"} boogie_si_record_i32($i5);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 128);
    call {:si_unique_call 1800} {:cexpr "__cil_tmp7"} boogie_si_record_i32($i6);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i8 := $xor.i1($i7, 1);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 1801} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i9);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 1802} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i12);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i14);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p0);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $r := $p16;
    return;
}



const ttm_bo_kunmap: ref;

axiom ttm_bo_kunmap == $sub.ref(0, 619272);

procedure ttm_bo_kunmap($p0: ref);
  free requires assertsPassed;



implementation ttm_bo_kunmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    return;
}



const ttm_bo_unreserve: ref;

axiom ttm_bo_unreserve == $sub.ref(0, 620304);

procedure ttm_bo_unreserve($p0: ref);
  free requires assertsPassed;



implementation ttm_bo_unreserve($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    return;
}



const capable: ref;

axiom capable == $sub.ref(0, 621336);

procedure capable($i0: i32) returns ($r: i1);



const vmw_kms_fb_create: ref;

axiom vmw_kms_fb_create == $sub.ref(0, 622368);

procedure vmw_kms_fb_create($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);



const vmw_priv: ref;

axiom vmw_priv == $sub.ref(0, 623400);

procedure vmw_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vmw_priv($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1803} {:cexpr "__cil_tmp2"} boogie_si_record_i64($i1);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 1064);
    call {:si_unique_call 1804} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const drm_fb_get_bpp_depth: ref;

axiom drm_fb_get_bpp_depth == $sub.ref(0, 624432);

procedure drm_fb_get_bpp_depth($i0: i32, $p1: ref, $p2: ref);



const vmw_kms_validate_mode_vram: ref;

axiom vmw_kms_validate_mode_vram == $sub.ref(0, 625464);

procedure vmw_kms_validate_mode_vram($p0: ref, $i1: i32, $i2: i32) returns ($r: i1);



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 626496);

procedure ERR_PTR($i0: i64) returns ($r: ref);



const vmw_user_lookup_handle: ref;

axiom vmw_user_lookup_handle == $sub.ref(0, 627528);

procedure vmw_user_lookup_handle($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);



const vmw_kms_new_framebuffer_dmabuf: ref;

axiom vmw_kms_new_framebuffer_dmabuf == $sub.ref(0, 628560);

procedure vmw_kms_new_framebuffer_dmabuf($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);



const vmw_kms_new_framebuffer_surface: ref;

axiom vmw_kms_new_framebuffer_surface == $sub.ref(0, 629592);

procedure vmw_kms_new_framebuffer_surface($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);



const vmw_master: ref;

axiom vmw_master == $sub.ref(0, 630624);

procedure vmw_master($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vmw_master($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1805} {:cexpr "__cil_tmp2"} boogie_si_record_i64($i1);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 192);
    call {:si_unique_call 1806} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const drm_framebuffer_init: ref;

axiom drm_framebuffer_init == $sub.ref(0, 631656);

procedure drm_framebuffer_init($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const drm_master_get: ref;

axiom drm_master_get == $sub.ref(0, 632688);

procedure drm_master_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation drm_master_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} $p1 := external_alloc();
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const drm_framebuffer_cleanup: ref;

axiom drm_framebuffer_cleanup == $sub.ref(0, 633720);

procedure drm_framebuffer_cleanup($p0: ref);
  free requires assertsPassed;



implementation drm_framebuffer_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    return;
}



const vmw_dmabuf_reference: ref;

axiom vmw_dmabuf_reference == $sub.ref(0, 634752);

procedure vmw_dmabuf_reference($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr, $M.1, $M.2, assertsPassed, $M.11, $M.12, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation vmw_dmabuf_reference($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} $p2 := ttm_bo_reference($p1);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i3 := $ne.ref($p2, $0.ref);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p4 := $p0;
    goto $bb3;

  SeqInstr_283:
    assume !assertsPassed;
    return;
}



const vmw_framebuffer_dmabuf_pin: ref;

axiom vmw_framebuffer_dmabuf_pin == $sub.ref(0, 635784);

procedure vmw_framebuffer_dmabuf_pin($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed, $M.6, $M.11, $M.12, $M.2, $M.16, $CurrAddr, $M.10, $M.3, $M.4, $M.13;



implementation vmw_framebuffer_dmabuf_pin($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i1;
  var $i47: i32;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i1;
  var $i56: i32;
  var $i57: i64;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} $p3 := vmw_priv($p2);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i32($p5);
    call {:si_unique_call 1810} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i6);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p4);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i6);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, $i8);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p7, $mul.ref($i9, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p3);
    call {:si_unique_call 1811} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i12);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 2616);
    call {:si_unique_call 1812} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i13);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i16 := $ne.ref($p15, $0.ref);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i17 := $xor.i1($i16, 1);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    call {:si_unique_call 1813} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i18);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i20 := $xor.i1($i19, 1);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    call {:si_unique_call 1814} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i21);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    call {:si_unique_call 1815} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i22);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 1817} {:cexpr "tmp___8"} boogie_si_record_i64($i23);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} vslice_dummy_var_78 := vmw_overlay_pause_all($p3);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p11);
    call {:si_unique_call 1820} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i26);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, 160);
    call {:si_unique_call 1821} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i27);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p28 := $i2p.i64.ref($i27);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1(1);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1(0);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} $i32 := vmw_dmabuf_to_start_of_vram($p3, $p29, $i30, $i31);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    call {:si_unique_call 1823} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} vslice_dummy_var_79 := vmw_overlay_resume_all($p3);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i32, 0);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    call {:si_unique_call 1825} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i35);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i37 := $xor.i1($i36, 1);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i32($i37);
    call {:si_unique_call 1826} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i38);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $i40 := $xor.i1($i39, 1);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i32($i40);
    call {:si_unique_call 1827} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i41);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i43 := $xor.i1($i42, 1);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i43);
    call {:si_unique_call 1828} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i44);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i46 := $xor.i1($i45, 1);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i46);
    call {:si_unique_call 1829} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i47);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    call {:si_unique_call 1830} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i48);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} $i49 := ldv__builtin_expect($i48, 0);
    call {:si_unique_call 1832} {:cexpr "tmp___9"} boogie_si_record_i64($i49);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i41, 0);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i52 := $xor.i1($i51, 1);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i53 := $zext.i1.i32($i52);
    call {:si_unique_call 1834} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i53);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i55 := $xor.i1($i54, 1);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i32($i55);
    call {:si_unique_call 1835} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i56);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i56);
    call {:si_unique_call 1836} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i57);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} vslice_dummy_var_80 := ldv__builtin_expect($i57, 0);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb13:
    assume $i50 == 1;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} warn_slowpath_null(.str.23, 987);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i24 == 1;
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call {:si_unique_call 1818} devirtbounce(0, .str.23, 979, 12);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call vmw_framebuffer_dmabuf_pin_loop_$bb7();
    goto $bb7_last;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb8_dummy;

  $bb8_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const vmw_framebuffer_dmabuf_unpin: ref;

axiom vmw_framebuffer_dmabuf_unpin == $sub.ref(0, 636816);

procedure vmw_framebuffer_dmabuf_unpin($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed, $M.6, $M.11, $M.12, $M.2, $CurrAddr, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_framebuffer_dmabuf_unpin($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i32;
  var $i45: i64;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i1;
  var $i53: i32;
  var $i47: i32;
  var vslice_dummy_var_81: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} $p3 := vmw_priv($p2);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i32($p5);
    call {:si_unique_call 1839} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i6);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p4);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i6);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, $i8);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p7, $mul.ref($i9, 1));
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    call {:si_unique_call 1840} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i12);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 160);
    call {:si_unique_call 1841} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i13);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i16 := $ne.ref($p15, $0.ref);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p11);
    call {:si_unique_call 1842} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i17);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 160);
    call {:si_unique_call 1843} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i18);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i21 := $ne.ref($p20, $0.ref);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i22 := $xor.i1($i21, 1);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    call {:si_unique_call 1844} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i23);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i25 := $xor.i1($i24, 1);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 1845} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i26);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i28 := $xor.i1($i27, 1);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    call {:si_unique_call 1846} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i29);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i31 := $xor.i1($i30, 1);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    call {:si_unique_call 1847} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i32);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i34 := $xor.i1($i33, 1);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    call {:si_unique_call 1848} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i35);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    call {:si_unique_call 1849} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i36);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 1851} {:cexpr "tmp___8"} boogie_si_record_i64($i37);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i29, 0);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i40 := $xor.i1($i39, 1);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i32($i40);
    call {:si_unique_call 1853} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i41);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i43 := $xor.i1($i42, 1);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i43);
    call {:si_unique_call 1854} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i44);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    call {:si_unique_call 1855} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i45);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} vslice_dummy_var_81 := ldv__builtin_expect($i45, 0);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $r := $i47;
    return;

  $bb3:
    assume $i38 == 1;
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} warn_slowpath_null(.str.23, 999);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb1:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p11);
    call {:si_unique_call 1857} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i48);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, 160);
    call {:si_unique_call 1858} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i49);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $p50 := $i2p.i64.ref($i49);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i8.i1(0);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} $i53 := vmw_dmabuf_unpin($p3, $p51, $i52);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    call {:si_unique_call 1860} {:cexpr "tmp___9"} boogie_si_record_i32($i53);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i47 := $i53;
    goto $bb6;

  SeqInstr_295:
    assume !assertsPassed;
    return;
}



const vmw_dmabuf_unpin: ref;

axiom vmw_dmabuf_unpin == $sub.ref(0, 637848);

procedure vmw_dmabuf_unpin($p0: ref, $p1: ref, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed, $M.6, $M.11, $M.12, $M.2, $CurrAddr, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_dmabuf_unpin($p0: ref, $p1: ref, $i2: i1) returns ($r: i32)
{
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1861} {:cexpr "vmw_dmabuf_unpin:arg:interruptible"} boogie_si_record_i1($i2);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} $i5 := vmw_dmabuf_to_placement($p0, $p1, vmw_evictable_placement, $i4);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    call {:si_unique_call 1863} {:cexpr "tmp___7"} boogie_si_record_i32($i5);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const vmw_dmabuf_to_placement: ref;

axiom vmw_dmabuf_to_placement == $sub.ref(0, 638880);

procedure vmw_dmabuf_to_placement($p0: ref, $p1: ref, $p2: ref, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed, $M.6, $M.11, $M.12, $M.2, $CurrAddr, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_dmabuf_to_placement($p0: ref, $p1: ref, $p2: ref, $i3: i1) returns ($r: i32)
{
  var $i4: i8;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i32;
  var $i41: i32;
  var $p46: ref;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1864} {:cexpr "vmw_dmabuf_to_placement:arg:interruptible"} boogie_si_record_i1($i3);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 1865} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i5);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 134384);
    call {:si_unique_call 1866} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i6);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p8);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i4);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} $i12 := ttm_write_lock($p10, $i11);
    call {:si_unique_call 1868} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    call {:si_unique_call 1869} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i14);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i16 := $xor.i1($i15, 1);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    call {:si_unique_call 1870} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i17);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i19 := $xor.i1($i18, 1);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    call {:si_unique_call 1871} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i20);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    call {:si_unique_call 1872} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i21);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 1874} {:cexpr "tmp___7"} boogie_si_record_i64($i22);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1(0);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} vmw_execbuf_release_pinned_bo($p0, $i25, 0);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i4);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1(0);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1(0);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} $i29 := ttm_bo_reserve($p9, $i26, $i27, $i28, 0);
    call {:si_unique_call 1877} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    call {:si_unique_call 1878} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i31);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i33 := $xor.i1($i32, 1);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    call {:si_unique_call 1879} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i34);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i36 := $xor.i1($i35, 1);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    call {:si_unique_call 1880} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i37);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    call {:si_unique_call 1881} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i38);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 1883} {:cexpr "tmp___8"} boogie_si_record_i64($i39);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i4);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i8.i1(0);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i8.i1(0);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} $i45 := ttm_bo_validate($p9, $p2, $i42, $i43, $i44);
    call {:si_unique_call 1886} {:cexpr "ret"} boogie_si_record_i32($i45);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} ttm_bo_unreserve($p9);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i41 := $i45;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p8);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} ttm_write_unlock($p46);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i24 := $i41;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb5:
    assume $i40 == 1;
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i41 := $i29;
    goto $bb7;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i24 := $i12;
    goto $bb3;
}



const ttm_write_lock: ref;

axiom ttm_write_lock == $sub.ref(0, 639912);

procedure ttm_write_lock($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_write_lock($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1888} {:cexpr "ttm_write_lock:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1889} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1890} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vmw_execbuf_release_pinned_bo: ref;

axiom vmw_execbuf_release_pinned_bo == $sub.ref(0, 640944);

procedure vmw_execbuf_release_pinned_bo($p0: ref, $i1: i1, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed, $M.6, $M.11, $M.12, $M.2, $CurrAddr, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_execbuf_release_pinned_bo($p0: ref, $i1: i1, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i1;
  var $i62: i32;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $i66: i64;
  var $i67: i64;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $i74: i1;
  var $i75: i32;
  var $i76: i1;
  var $i77: i1;
  var $i78: i32;
  var $i79: i64;
  var $i80: i64;
  var $i81: i1;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $p85: ref;
  var $i86: i1;
  var $i87: i64;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $i91: i1;
  var $i92: i64;
  var $i93: i64;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i101: i64;
  var $p102: ref;
  var $i103: i64;
  var $i104: i64;
  var $p105: ref;
  var $i106: i64;
  var $i107: i64;
  var $p108: ref;
  var $i109: i64;
  var $i110: i64;
  var $p111: ref;
  var $i112: i64;
  var $i113: i64;
  var $p114: ref;
  var $i115: i64;
  var $i116: i64;
  var $p117: ref;
  var $i118: i64;
  var $i119: i64;
  var $p120: ref;
  var $i121: i64;
  var $i122: i64;
  var $p123: ref;
  var vslice_dummy_var_82: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} $p4 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} $p5 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i1);
    call {:si_unique_call 1895} {:cexpr "vmw_execbuf_release_pinned_bo:arg:only_on_cid_match"} boogie_si_record_i1($i1);
    call {:si_unique_call 1896} {:cexpr "vmw_execbuf_release_pinned_bo:arg:cid"} boogie_si_record_i32($i2);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 1897} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i8);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 134304);
    call {:si_unique_call 1898} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i9);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} mutex_lock($p10);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1900} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i11);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    call {:si_unique_call 1901} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i12);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 134752);
    call {:si_unique_call 1902} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i13);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    call {:si_unique_call 1903} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i16);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, $i11);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i7);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} INIT_LIST_HEAD($p3);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p4);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 24);
    call {:si_unique_call 1911} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i25);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $i2p.i64.ref(1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p4);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 16);
    call {:si_unique_call 1912} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i28);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    call {:si_unique_call 1913} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i29);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 134752);
    call {:si_unique_call 1914} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i30);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} $p33 := ttm_bo_reference($p32);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i28);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p33);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p4);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} list_add_tail($p35, $p3);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p5);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 24);
    call {:si_unique_call 1917} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i37);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p4);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 24);
    call {:si_unique_call 1918} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i39);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i37);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p41);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p5);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 16);
    call {:si_unique_call 1919} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i44);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p0);
    call {:si_unique_call 1920} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i45);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 134744);
    call {:si_unique_call 1921} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i46);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p47 := $i2p.i64.ref($i46);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} $p49 := ttm_bo_reference($p48);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p50 := $i2p.i64.ref($i44);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $p49);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p5);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} list_add_tail($p51, $p3);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call $i52, $i53, $i54 := vmw_execbuf_release_pinned_bo_loop_$bb11($p3, $i52, $i53, $i54);
    goto $bb11_last;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} $i52 := ttm_eu_reserve_buffers($p3);
    call {:si_unique_call 1925} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, $sub.i32(0, 512));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i54 := $i52;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i32($i55);
    call {:si_unique_call 1926} {:cexpr "__cil_tmp38"} boogie_si_record_i32($i56);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i58 := $xor.i1($i57, 1);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i59 := $zext.i1.i32($i58);
    call {:si_unique_call 1927} {:cexpr "__cil_tmp39"} boogie_si_record_i32($i59);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i61 := $xor.i1($i60, 1);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i62 := $zext.i1.i32($i61);
    call {:si_unique_call 1928} {:cexpr "__cil_tmp40"} boogie_si_record_i32($i62);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    call {:si_unique_call 1929} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i63);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 1931} {:cexpr "tmp___7"} boogie_si_record_i64($i64);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p0);
    call {:si_unique_call 1943} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i66);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i67 := $add.i64($i66, 134760);
    call {:si_unique_call 1944} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i67);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p68 := $i2p.i64.ref($i67);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    call {:si_unique_call 1945} {:cexpr "__cil_tmp44"} boogie_si_record_i32($i69);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} $i70 := vmw_fifo_emit_dummy_query($p0, $i69);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    call {:si_unique_call 1947} {:cexpr "ret"} boogie_si_record_i32($i70);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i72 := $zext.i1.i32($i71);
    call {:si_unique_call 1948} {:cexpr "__cil_tmp45"} boogie_si_record_i32($i72);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i74 := $xor.i1($i73, 1);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i75 := $zext.i1.i32($i74);
    call {:si_unique_call 1949} {:cexpr "__cil_tmp46"} boogie_si_record_i32($i75);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i77 := $xor.i1($i76, 1);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i78 := $zext.i1.i32($i77);
    call {:si_unique_call 1950} {:cexpr "__cil_tmp47"} boogie_si_record_i32($i78);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i78);
    call {:si_unique_call 1951} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i79);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} $i80 := ldv__builtin_expect($i79, 0);
    call {:si_unique_call 1953} {:cexpr "tmp___8"} boogie_si_record_i64($i80);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p0);
    call {:si_unique_call 1956} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i82);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, 134752);
    call {:si_unique_call 1957} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i83);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p84 := $i2p.i64.ref($i83);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i8.i1(0);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} vmw_bo_pin($p85, $i86);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p0);
    call {:si_unique_call 1959} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i87);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i88 := $add.i64($i87, 134744);
    call {:si_unique_call 1960} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i88);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $p89 := $i2p.i64.ref($i88);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i8.i1(0);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} vmw_bo_pin($p90, $i91);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p0);
    call {:si_unique_call 1962} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i92);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i93 := $add.i64($i92, 134764);
    call {:si_unique_call 1963} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i93);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $p94 := $i2p.i64.ref($i93);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p94, 0);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} vslice_dummy_var_82 := vmw_execbuf_fence_commands($p95, $p0, $p6, $p96);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p6);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} ttm_eu_fence_buffer_objects($p3, $p99);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p5);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i101 := $add.i64($i100, 16);
    call {:si_unique_call 1966} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i101);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p102 := $i2p.i64.ref($i101);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} ttm_bo_unref($p102);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i103 := $p2i.ref.i64($p4);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i104 := $add.i64($i103, 16);
    call {:si_unique_call 1968} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i104);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $p105 := $i2p.i64.ref($i104);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} ttm_bo_unref($p105);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p0);
    call {:si_unique_call 1970} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i106);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i107 := $add.i64($i106, 134752);
    call {:si_unique_call 1971} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i107);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p108 := $i2p.i64.ref($i107);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} ttm_bo_unref($p108);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p0);
    call {:si_unique_call 1904} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i109);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i110 := $add.i64($i109, 134304);
    call {:si_unique_call 1905} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i110);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p111 := $i2p.i64.ref($i110);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} mutex_unlock($p111);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i81 == 1;
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} vmw_execbuf_unpin_panic($p0);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} ttm_eu_backoff_reservation($p3);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i112 := $p2i.ref.i64($p5);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i113 := $add.i64($i112, 16);
    call {:si_unique_call 1933} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i113);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p114 := $i2p.i64.ref($i113);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} ttm_bo_unref($p114);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p4);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i116 := $add.i64($i115, 16);
    call {:si_unique_call 1935} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i116);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $p117 := $i2p.i64.ref($i116);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} ttm_bo_unref($p117);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p0);
    call {:si_unique_call 1937} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i118);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i119 := $add.i64($i118, 134752);
    call {:si_unique_call 1938} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i119);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p120 := $i2p.i64.ref($i119);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} ttm_bo_unref($p120);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p0);
    call {:si_unique_call 1940} {:cexpr "__cil_tmp83"} boogie_si_record_i64($i121);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i122 := $add.i64($i121, 134304);
    call {:si_unique_call 1941} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i122);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p123 := $i2p.i64.ref($i122);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} mutex_unlock($p123);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i65 == 1;
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} vmw_execbuf_unpin_panic($p0);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i53 == 1;
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    call {:si_unique_call 1907} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i19);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 134760);
    call {:si_unique_call 1908} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i20);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    call {:si_unique_call 1909} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i22);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i2, $i22);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb12;
}



const ttm_write_unlock: ref;

axiom ttm_write_unlock == $sub.ref(0, 641976);

procedure ttm_write_unlock($p0: ref);
  free requires assertsPassed;



implementation ttm_write_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    return;
}



const vmw_execbuf_unpin_panic: ref;

axiom vmw_execbuf_unpin_panic == $sub.ref(0, 643008);

procedure vmw_execbuf_unpin_panic($p0: ref);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.2, $M.0, $M.6, $M.1, $CurrAddr, assertsPassed, $M.13, $M.3, $M.4, $M.10, $M.16;



implementation vmw_execbuf_unpin_panic($p0: ref)
{
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} vslice_dummy_var_83 := drm_err.ref.ref(.str.160, .str.161);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(0);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1(1);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1(0);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} vslice_dummy_var_84 := vmw_fallback_wait($p0, $i2, $i3, 0, $i4, 2500);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 1975} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i6);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 134752);
    call {:si_unique_call 1976} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i7);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(0);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} vmw_bo_pin($p9, $i10);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p0);
    call {:si_unique_call 1978} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i11);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 134744);
    call {:si_unique_call 1979} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i12);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1(0);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} vmw_bo_pin($p14, $i15);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p0);
    call {:si_unique_call 1981} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i16);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 134764);
    call {:si_unique_call 1982} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i17);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 0);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;
}



const vmw_fifo_emit_dummy_query: ref;

axiom vmw_fifo_emit_dummy_query == $sub.ref(0, 644040);

procedure vmw_fifo_emit_dummy_query($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, assertsPassed, $M.3, $M.4, $CurrAddr, $M.6, $M.11, $M.12, $M.13, $M.10, $M.16;



implementation vmw_fifo_emit_dummy_query($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $i47: i64;
  var $i48: i32;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $i55: i64;
  var $i56: i32;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $i22: i32;
  var vslice_dummy_var_85: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} {:cexpr "vmw_fifo_emit_dummy_query:arg:cid"} boogie_si_record_i32($i1);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 1984} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i2);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 134744);
    call {:si_unique_call 1985} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i3);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} $p6 := vmw_fifo_reserve($p0, 24);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1987} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i8);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p7);
    call {:si_unique_call 1988} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i9);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, $i8);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 1989} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i11);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i13 := $xor.i1($i12, 1);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    call {:si_unique_call 1990} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i14);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i16 := $xor.i1($i15, 1);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    call {:si_unique_call 1991} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i17);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    call {:si_unique_call 1992} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i18);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1994} {:cexpr "tmp___8"} boogie_si_record_i64($i19);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p7);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 1067);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p7);
    call {:si_unique_call 1996} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i24);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 4);
    call {:si_unique_call 1997} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i25);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 16);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p7);
    call {:si_unique_call 1998} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i27);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 8);
    call {:si_unique_call 1999} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i28);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i1);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p7);
    call {:si_unique_call 2000} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i30);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 12);
    call {:si_unique_call 2001} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i31);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 0);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p5);
    call {:si_unique_call 2002} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i33);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 148);
    call {:si_unique_call 2003} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i34);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i34);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    call {:si_unique_call 2004} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i36);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 2);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i37 == 1);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p7);
    call {:si_unique_call 2013} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i50);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 16);
    call {:si_unique_call 2014} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i51);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p5);
    call {:si_unique_call 2015} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i52);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 120);
    call {:si_unique_call 2016} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i53);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i53);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    call {:si_unique_call 2017} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i55);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i64.i32($i55);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i51);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i58 := $add.i64(8, 12);
    call {:si_unique_call 2018} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i58);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p7);
    call {:si_unique_call 2019} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i59);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, $i58);
    call {:si_unique_call 2020} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i60);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p61 := $i2p.i64.ref($i60);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, 0);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} vmw_fifo_commit($p0, 24);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i37 == 1;
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p7);
    call {:si_unique_call 2005} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i38);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 16);
    call {:si_unique_call 2006} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i39);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $sub.i32(0, 2));
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i41 := $add.i64(8, 12);
    call {:si_unique_call 2007} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i41);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p7);
    call {:si_unique_call 2008} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i42);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, $i41);
    call {:si_unique_call 2009} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i43);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p5);
    call {:si_unique_call 2010} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i44);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 368);
    call {:si_unique_call 2011} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i45);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $p46 := $i2p.i64.ref($i45);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    call {:si_unique_call 2012} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i47);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i64.i32($i47);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i43);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i48);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} vslice_dummy_var_85 := drm_err.ref.ref(.str.86, .str.87);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_334:
    assume !assertsPassed;
    return;
}



const vmw_bo_pin: ref;

axiom vmw_bo_pin == $sub.ref(0, 645072);

procedure vmw_bo_pin($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr;



implementation vmw_bo_pin($p0: ref, $i1: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i42: i32;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i1);
    call {:si_unique_call 2024} {:cexpr "vmw_bo_pin:arg:pin"} boogie_si_record_i1($i1);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 2025} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i5);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 148);
    call {:si_unique_call 2026} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i6);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 2027} {:cexpr "old_mem_type"} boogie_si_record_i32($i8);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    call {:si_unique_call 2028} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i9);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 304);
    call {:si_unique_call 2029} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i10);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} $i12 := atomic_read($p11);
    call {:si_unique_call 2031} {:cexpr "tmp___7"} boogie_si_record_i32($i12);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    call {:si_unique_call 2032} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i15);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 2034} {:cexpr "tmp___9"} boogie_si_record_i64($i16);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i8, 2);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    call {:si_unique_call 2036} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i22);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 2038} {:cexpr "tmp___11"} boogie_si_record_i64($i23);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i25 := $or.i32(4, 8);
    call {:si_unique_call 2040} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i25);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i25, 65536);
    call {:si_unique_call 2041} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i26);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i26);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i4);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p3);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 2043} cmdloc_dummy_var_22 := $memset.i8(cmdloc_dummy_var_21, $p30, 0, 40, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p3);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 8);
    call {:si_unique_call 2044} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i32);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 1);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p3);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 16);
    call {:si_unique_call 2045} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i35);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p2);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1(0);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1(1);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1(1);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} $i40 := ttm_bo_validate($p0, $p3, $i37, $i38, $i39);
    call {:si_unique_call 2047} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i41 == 1);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p0);
    call {:si_unique_call 2048} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i43);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 148);
    call {:si_unique_call 2049} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i44);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    call {:si_unique_call 2050} {:cexpr "__cil_tmp45"} boogie_si_record_i32($i46);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, $i8);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i42 := $i48;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i42);
    call {:si_unique_call 2051} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i49);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 2053} {:cexpr "tmp___13"} boogie_si_record_i64($i50);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    return;

  $bb45:
    assume $i51 == 1;
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    call {:si_unique_call 2054} devirtbounce(0, .str.119, 321, 12);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    call vmw_bo_pin_loop_$bb49();
    goto $bb49_last;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb50_dummy;

  $bb42:
    assume $i47 == 1;
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i48 := 1;
    goto $bb44;

  $bb39:
    assume $i41 == 1;
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $i42 := 1;
    goto $bb41;

  $bb34:
    assume $i27 == 1;
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p2);
    call {:si_unique_call 2042} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i28);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i28, 2097152);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i29);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb24:
    assume $i24 == 1;
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    call {:si_unique_call 2039} devirtbounce(0, .str.119, 309, 12);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    call vmw_bo_pin_loop_$bb28();
    goto $bb28_last;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb29_dummy;

  $bb18:
    assume $i18 == 1;
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i8, 8);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb23;

  $bb20:
    assume $i19 == 1;
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb22;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    call {:si_unique_call 2035} devirtbounce(0, .str.119, 307, 12);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call vmw_bo_pin_loop_$bb10();
    goto $bb10_last;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb5;

  $bb50_dummy:
    assume false;
    return;

  $bb49_last:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb29_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb11_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 646104);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const vmw_overlay_pause_all: ref;

axiom vmw_overlay_pause_all == $sub.ref(0, 647136);

procedure vmw_overlay_pause_all($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $M.0, $M.11, $M.12, $M.2, $M.6, $CurrAddr, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_overlay_pause_all($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i8;
  var $i17: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i32;
  var $i45: i64;
  var $i47: i32;
  var $p48: ref;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 2055} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i1);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 2624);
    call {:si_unique_call 2056} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i2);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i5 := $ne.ref($p4, $0.ref);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} mutex_lock($p6);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb5:
    call $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $p15, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i47, vslice_dummy_var_86, vslice_dummy_var_87 := vmw_overlay_pause_all_loop_$bb5($p0, $p4, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $p15, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i47, vslice_dummy_var_86, vslice_dummy_var_87);
    goto $bb5_last;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 1);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p4);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} mutex_unlock($p48);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i7);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i10 := $mul.i64($i9, 104);
    call {:si_unique_call 2058} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i10);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 9);
    call {:si_unique_call 2059} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i11);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i12 := $add.i64(72, $i11);
    call {:si_unique_call 2060} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i12);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p4);
    call {:si_unique_call 2061} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i13);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, $i12);
    call {:si_unique_call 2062} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i14);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1(1);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1(0);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} $i21 := vmw_overlay_stop($p0, $i7, $i19, $i20);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    call {:si_unique_call 2066} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    call {:si_unique_call 2067} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i23);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i25 := $xor.i1($i24, 1);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 2068} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i26);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i28 := $xor.i1($i27, 1);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    call {:si_unique_call 2069} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i29);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i31 := $xor.i1($i30, 1);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    call {:si_unique_call 2070} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i32);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i34 := $xor.i1($i33, 1);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    call {:si_unique_call 2071} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i35);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    call {:si_unique_call 2072} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i36);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 2074} {:cexpr "tmp___7"} boogie_si_record_i64($i37);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i29, 0);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i40 := $xor.i1($i39, 1);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i32($i40);
    call {:si_unique_call 2076} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i41);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i43 := $xor.i1($i42, 1);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i43);
    call {:si_unique_call 2077} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i44);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    call {:si_unique_call 2078} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i45);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} vslice_dummy_var_87 := ldv__builtin_expect($i45, 0);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i7, 1);
    call {:si_unique_call 2080} {:cexpr "i"} boogie_si_record_i32($i47);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i7 := $i47;
    goto corral_source_split_4640_dummy;

  $bb14:
    assume $i38 == 1;
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} warn_slowpath_null(.str.98, 444);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} vslice_dummy_var_86 := printk.ref.ref.i32(.str.101, .str.102, $i7);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  corral_source_split_4640_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4584;
}



const vmw_dmabuf_to_start_of_vram: ref;

axiom vmw_dmabuf_to_start_of_vram == $sub.ref(0, 648168);

procedure vmw_dmabuf_to_start_of_vram($p0: ref, $p1: ref, $i2: i1, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed, $M.6, $M.11, $M.12, $M.2, $CurrAddr, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_dmabuf_to_start_of_vram($p0: ref, $p1: ref, $i2: i1, $i3: i1) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i8;
  var $i6: i8;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i1;
  var $i53: i32;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $i58: i64;
  var $i59: i64;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i32;
  var $i85: i1;
  var $i86: i64;
  var $i87: i64;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $i94: i1;
  var $i95: i32;
  var $i96: i1;
  var $i97: i1;
  var $i98: i32;
  var $i99: i64;
  var $i100: i64;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i32;
  var $i105: i1;
  var $i106: i1;
  var $i107: i32;
  var $i108: i64;
  var $i57: i32;
  var $p110: ref;
  var $i39: i32;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i2);
    call {:si_unique_call 2082} {:cexpr "vmw_dmabuf_to_start_of_vram:arg:pin"} boogie_si_record_i1($i2);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i3);
    call {:si_unique_call 2083} {:cexpr "vmw_dmabuf_to_start_of_vram:arg:interruptible"} boogie_si_record_i1($i3);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    call {:si_unique_call 2084} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i7);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 134384);
    call {:si_unique_call 2085} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i8);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i5);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref(vmw_vram_placement);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.0;
    cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 2087} cmdloc_dummy_var_28 := $memcpy.i8(cmdloc_dummy_var_26, cmdloc_dummy_var_27, $p15, $p16, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_28;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p4);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 4);
    call {:si_unique_call 2088} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i18);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p11);
    call {:si_unique_call 2089} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i19);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 40);
    call {:si_unique_call 2090} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i20);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    call {:si_unique_call 2091} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i22);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i22);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i18);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p10);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i6);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2092} $i27 := ttm_write_lock($p25, $i26);
    call {:si_unique_call 2093} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    call {:si_unique_call 2094} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i29);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i31 := $xor.i1($i30, 1);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    call {:si_unique_call 2095} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i32);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i34 := $xor.i1($i33, 1);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    call {:si_unique_call 2096} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i35);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    call {:si_unique_call 2097} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i36);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 2099} {:cexpr "tmp___7"} boogie_si_record_i64($i37);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i5);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i6);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i8.i1(0);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i8.i1(0);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} $i45 := ttm_bo_reserve($p11, $i42, $i43, $i44, 0);
    call {:si_unique_call 2102} {:cexpr "ret"} boogie_si_record_i32($i45);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i46);
    call {:si_unique_call 2103} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i47);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i49 := $xor.i1($i48, 1);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i32($i49);
    call {:si_unique_call 2104} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i50);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i52 := $xor.i1($i51, 1);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i53 := $zext.i1.i32($i52);
    call {:si_unique_call 2105} {:cexpr "__cil_tmp36"} boogie_si_record_i32($i53);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i53);
    call {:si_unique_call 2106} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i54);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} $i55 := ldv__builtin_expect($i54, 0);
    call {:si_unique_call 2108} {:cexpr "tmp___8"} boogie_si_record_i64($i55);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p11);
    call {:si_unique_call 2110} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i58);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 148);
    call {:si_unique_call 2111} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i59);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $p60 := $i2p.i64.ref($i59);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    call {:si_unique_call 2112} {:cexpr "__cil_tmp41"} boogie_si_record_i32($i61);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 2);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i8.i1($i6);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i8.i1(0);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i8.i1(0);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} $i84 := ttm_bo_validate($p11, $p4, $i81, $i82, $i83);
    call {:si_unique_call 2124} {:cexpr "ret"} boogie_si_record_i32($i84);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 0);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    $i92 := 0;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i94 := $xor.i1($i93, 1);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i95 := $zext.i1.i32($i94);
    call {:si_unique_call 2128} {:cexpr "__cil_tmp61"} boogie_si_record_i32($i95);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i97 := $xor.i1($i96, 1);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i98 := $zext.i1.i32($i97);
    call {:si_unique_call 2129} {:cexpr "__cil_tmp62"} boogie_si_record_i32($i98);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i99 := $sext.i32.i64($i98);
    call {:si_unique_call 2130} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i99);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} $i100 := ldv__builtin_expect($i99, 0);
    call {:si_unique_call 2132} {:cexpr "tmp___10"} boogie_si_record_i64($i100);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i92, 0);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i103 := $xor.i1($i102, 1);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i104 := $zext.i1.i32($i103);
    call {:si_unique_call 2134} {:cexpr "__cil_tmp65"} boogie_si_record_i32($i104);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i106 := $xor.i1($i105, 1);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i107 := $zext.i1.i32($i106);
    call {:si_unique_call 2135} {:cexpr "__cil_tmp66"} boogie_si_record_i32($i107);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i108 := $sext.i32.i64($i107);
    call {:si_unique_call 2136} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i108);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} vslice_dummy_var_89 := ldv__builtin_expect($i108, 0);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2138} ttm_bo_unreserve($p11);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i57 := $i84;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p10);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} ttm_write_unlock($p110);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i39 := $i57;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb30:
    assume $i101 == 1;
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} warn_slowpath_null(.str.119, 233);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb24:
    assume $i85 == 1;
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p11);
    call {:si_unique_call 2125} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i86);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i87 := $add.i64($i86, 368);
    call {:si_unique_call 2126} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i87);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p88 := $i2p.i64.ref($i87);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.0, $p88);
    call {:si_unique_call 2127} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i89);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, 0);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $i91 := 0;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i92 := $i91;
    goto $bb29;

  $bb26:
    assume $i90 == 1;
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i91 := 1;
    goto $bb28;

  $bb15:
    assume $i62 == 1;
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p11);
    call {:si_unique_call 2113} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i63);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 40);
    call {:si_unique_call 2114} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i64);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $p65 := $i2p.i64.ref($i64);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.0, $p65);
    call {:si_unique_call 2115} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i66);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p11);
    call {:si_unique_call 2116} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i67);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i67, 120);
    call {:si_unique_call 2117} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i68);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p69 := $i2p.i64.ref($i68);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.0, $p69);
    call {:si_unique_call 2118} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i70);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i71 := $ult.i64($i70, $i66);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb17:
    assume $i71 == 1;
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p11);
    call {:si_unique_call 2119} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i72);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i72, 120);
    call {:si_unique_call 2120} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i73);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p74 := $i2p.i64.ref($i73);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    call {:si_unique_call 2121} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i75);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i76 := $ugt.i64($i75, 0);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i76 == 1;
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i8.i1(0);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i8.i1(0);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i8.i1(0);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} vslice_dummy_var_88 := ttm_bo_validate($p11, vmw_sys_placement, $i77, $i78, $i79);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i56 == 1;
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i57 := $i45;
    goto $bb13;

  $bb8:
    assume $i40 == 1;
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1(0);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} vmw_execbuf_release_pinned_bo($p0, $i41, 0);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i38 == 1;
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i39 := $i27;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p4);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref(vmw_vram_ne_placement);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.0;
    cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 2086} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p13, $p14, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_25;
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmw_overlay_resume_all: ref;

axiom vmw_overlay_resume_all == $sub.ref(0, 649200);

procedure vmw_overlay_resume_all($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $M.16, $M.0, $M.10, $M.6, $M.11, $M.12, $M.2, $CurrAddr, $M.3, $M.4, $M.13;



implementation vmw_overlay_resume_all($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i8;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i31: i32;
  var $p32: ref;
  var vslice_dummy_var_90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 2139} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i1);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 2624);
    call {:si_unique_call 2140} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i2);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i5 := $ne.ref($p4, $0.ref);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} mutex_lock($p6);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb5:
    call $i7, $i8, $i9, $i10, $i11, $i12, $i13, $p14, $i15, $i16, $p17, $i18, $i19, $i20, $i21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $i29, $i31, vslice_dummy_var_90 := vmw_overlay_resume_all_loop_$bb5($p0, $p4, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $p14, $i15, $i16, $p17, $i18, $i19, $i20, $i21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $i29, $i31, vslice_dummy_var_90);
    goto $bb5_last;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 1);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p4);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} mutex_unlock($p32);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i7);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i10 := $mul.i64($i9, 104);
    call {:si_unique_call 2142} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i10);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i11 := $add.i64(72, $i10);
    call {:si_unique_call 2143} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i11);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p4);
    call {:si_unique_call 2144} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i12);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, $i11);
    call {:si_unique_call 2145} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i13);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    call {:si_unique_call 2146} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i15);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 9);
    call {:si_unique_call 2147} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i16);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 2148} {:cexpr "__cil_tmp15"} boogie_si_record_i8($i20);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i7, 1);
    call {:si_unique_call 2150} {:cexpr "i"} boogie_si_record_i32($i31);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i7 := $i31;
    goto corral_source_split_4825_dummy;

  $bb11:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p14);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p14);
    call {:si_unique_call 2151} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i24);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 12);
    call {:si_unique_call 2152} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i25);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1(0);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} $i28 := vmw_overlay_update_stream($p0, $p23, $p26, $i27);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    call {:si_unique_call 2154} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb15:
    assume $i29 == 1;
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2155} vslice_dummy_var_90 := printk.ref.ref.i32(.str.99, .str.100, $i7);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  corral_source_split_4825_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4798;
}



const vmw_overlay_update_stream: ref;

axiom vmw_overlay_update_stream == $sub.ref(0, 650232);

procedure vmw_overlay_update_stream($p0: ref, $p1: ref, $p2: ref, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.0, $M.10, $M.6, $M.11, $M.12, $M.2, $M.1, $CurrAddr, assertsPassed, $M.3, $M.4, $M.13;



implementation vmw_overlay_update_stream($p0: ref, $p1: ref, $p2: ref, $i3: i1) returns ($r: i32)
{
  var $i4: i8;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i1;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i8;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i41: i8;
  var $i42: i1;
  var $i43: i8;
  var $i44: i1;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i1;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $i80: i64;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i64;
  var $p94: ref;
  var $i18: i32;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 2156} {:cexpr "vmw_overlay_update_stream:arg:interruptible"} boogie_si_record_i1($i3);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 2157} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i5);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 2624);
    call {:si_unique_call 2158} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i6);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.16, $p9);
    call {:si_unique_call 2159} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i10);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i12 := $mul.i64($i11, 104);
    call {:si_unique_call 2160} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i12);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i13 := $add.i64(72, $i12);
    call {:si_unique_call 2161} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i13);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p8);
    call {:si_unique_call 2162} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i14);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, $i13);
    call {:si_unique_call 2163} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i15);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i17 := $ne.ref($p1, $0.ref);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb1:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p16);
    call {:si_unique_call 2164} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i19);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 9);
    call {:si_unique_call 2165} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i20);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $p24 := .str.279;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p16);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2166} drm_ut_debug_printk.i32.ref.ref.ref.ref.ref.ref.ref(1, .str.30, .str.280, .str.281, .str.280, $p26, $p1, $p24);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p1);
    call {:si_unique_call 2167} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i27);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p16);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    call {:si_unique_call 2168} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i30);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, $i27);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p16);
    call {:si_unique_call 2172} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i38);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 9);
    call {:si_unique_call 2173} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i39);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i41);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i8($i42);
    call {:si_unique_call 2174} {:cexpr "__cil_tmp30"} boogie_si_record_i8($i43);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i8.i1($i43);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i44 == 1);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i8.i1($i4);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} $i46 := vmw_overlay_send_put($p0, $p1, $p2, $i45);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    call {:si_unique_call 2178} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i47 == 1);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i8.i1($i4);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i54 := $xor.i1($i53, 1);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i32($i54);
    call {:si_unique_call 2182} {:cexpr "__cil_tmp33"} boogie_si_record_i32($i55);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i57 := $xor.i1($i56, 1);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i32($i57);
    call {:si_unique_call 2183} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i58);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i60 := $xor.i1($i59, 1);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i32($i60);
    call {:si_unique_call 2184} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i61);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    call {:si_unique_call 2185} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i62);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} $i63 := ldv__builtin_expect($i62, 0);
    call {:si_unique_call 2187} {:cexpr "tmp___8"} boogie_si_record_i64($i63);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i18 := $i46;
    goto $bb3;

  $bb24:
    assume $i64 == 1;
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    call {:si_unique_call 2188} devirtbounce(0, .str.98, 326, 12);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    call vmw_overlay_update_stream_loop_$bb28();
    goto $bb28_last;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb29_dummy;

  $bb19:
    assume $i47 == 1;
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p16);
    call {:si_unique_call 2179} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i48);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, 12);
    call {:si_unique_call 2180} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i49);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $p50 := $i2p.i64.ref($i49);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p2);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.16;
    cmdloc_dummy_var_30 := $M.16;
    call {:si_unique_call 2181} cmdloc_dummy_var_31 := $memcpy.i8(cmdloc_dummy_var_29, cmdloc_dummy_var_30, $p51, $p52, 88, $zext.i32.i64(4), 0 == 1);
    $M.16 := cmdloc_dummy_var_31;
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i8.i1(1);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i8.i1($i4);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} $i67 := vmw_overlay_move_buffer($p0, $p1, $i65, $i66);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    call {:si_unique_call 2176} {:cexpr "ret"} boogie_si_record_i32($i67);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i8.i1($i4);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} $i70 := vmw_overlay_send_put($p0, $p1, $p2, $i69);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    call {:si_unique_call 2190} {:cexpr "ret"} boogie_si_record_i32($i70);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p1);
    call {:si_unique_call 2197} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i80);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p16);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    call {:si_unique_call 2198} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i83);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, $i80);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p16);
    call {:si_unique_call 2200} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i87);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i88 := $add.i64($i87, 12);
    call {:si_unique_call 2201} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i88);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p89 := $i2p.i64.ref($i88);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p2);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.16;
    cmdloc_dummy_var_33 := $M.16;
    call {:si_unique_call 2202} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p90, $p91, 88, $zext.i32.i64(4), 0 == 1);
    $M.16 := cmdloc_dummy_var_34;
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p16);
    call {:si_unique_call 2203} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i92);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i93 := $add.i64($i92, 9);
    call {:si_unique_call 2204} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i93);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $p94 := $i2p.i64.ref($i93);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p94, 0);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb56:
    assume $i84 == 1;
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2199} $p85 := vmw_dmabuf_reference($p1);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p16);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p86, $p85);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    goto $bb58;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i71 == 1;
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i8.i1(0);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i8.i1(0);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2191} $i74 := vmw_overlay_move_buffer($p0, $p1, $i72, $i73);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    call {:si_unique_call 2192} {:cexpr "tmp___9"} boogie_si_record_i32($i74);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := 0;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i76);
    call {:si_unique_call 2193} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i77);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} $i78 := ldv__builtin_expect($i77, 0);
    call {:si_unique_call 2195} {:cexpr "tmp___11"} boogie_si_record_i64($i78);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i18 := $i70;
    goto $bb3;

  $bb45:
    assume $i79 == 1;
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    call {:si_unique_call 2196} devirtbounce(0, .str.98, 344, 12);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    call vmw_overlay_update_stream_loop_$bb49();
    goto $bb49_last;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb50_dummy;

  $bb42:
    assume $i75 == 1;
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i76 := 1;
    goto $bb44;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i68 == 1;
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i18 := $i67;
    goto $bb3;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p2);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.16, $p32);
    call {:si_unique_call 2169} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i33);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1(0);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i4);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} $i36 := vmw_overlay_stop($p0, $i33, $i34, $i35);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    call {:si_unique_call 2171} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i18 := $i36;
    goto $bb3;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p24 := .str.222;
    goto $bb9;

  $bb29_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb50_dummy:
    assume false;
    return;

  $bb49_last:
    assume {:verifier.code 0} true;
    goto $bb50;
}



const drm_ut_debug_printk: ref;

axiom drm_ut_debug_printk == $sub.ref(0, 651264);

procedure drm_ut_debug_printk.i32.ref.ref.ref.i32.i32.i32.i32($i0: i32, $p1: ref, $p2: ref, $p3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32);



procedure drm_ut_debug_printk.i32.ref.ref.ref.ref.ref.ref.ref($i0: i32, $p1: ref, $p2: ref, $p3: ref, p.4: ref, p.5: ref, p.6: ref, p.7: ref);
  free requires assertsPassed;



implementation drm_ut_debug_printk.i32.ref.ref.ref.ref.ref.ref.ref($i0: i32, $p1: ref, $p2: ref, $p3: ref, p.4: ref, p.5: ref, p.6: ref, p.7: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2205} {:cexpr "drm_ut_debug_printk:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    return;
}



const vmw_overlay_stop: ref;

axiom vmw_overlay_stop == $sub.ref(0, 652296);

procedure vmw_overlay_stop($p0: ref, $i1: i32, $i2: i1, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.2, $M.6, $M.1, $CurrAddr, assertsPassed, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_overlay_stop($p0: ref, $i1: i32, $i2: i1, $i3: i1) returns ($r: i32)
{
  var $i4: i8;
  var $i5: i8;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i8;
  var $i24: i1;
  var $i25: i8;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i1;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i32;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $i48: i1;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2206} {:cexpr "vmw_overlay_stop:arg:stream_id"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i2);
    call {:si_unique_call 2207} {:cexpr "vmw_overlay_stop:arg:pause"} boogie_si_record_i1($i2);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i3);
    call {:si_unique_call 2208} {:cexpr "vmw_overlay_stop:arg:interruptible"} boogie_si_record_i1($i3);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 2209} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i6);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 2624);
    call {:si_unique_call 2210} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i7);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i1);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i11 := $mul.i64($i10, 104);
    call {:si_unique_call 2211} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i11);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i12 := $add.i64(72, $i11);
    call {:si_unique_call 2212} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i12);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p9);
    call {:si_unique_call 2213} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i13);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, $i12);
    call {:si_unique_call 2214} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i14);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i18 := $ne.ref($p17, $0.ref);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb1:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p15);
    call {:si_unique_call 2215} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i20);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 9);
    call {:si_unique_call 2216} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i21);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i8($i24);
    call {:si_unique_call 2217} {:cexpr "__cil_tmp18"} boogie_si_record_i8($i25);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i5);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} $i28 := vmw_overlay_send_stop($p0, $i1, $i27);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    call {:si_unique_call 2219} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p15);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1(0);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i5);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} $i34 := vmw_overlay_move_buffer($p0, $p31, $i32, $i33);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    call {:si_unique_call 2221} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i5);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i34, 0);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i32($i37);
    call {:si_unique_call 2222} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i38);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i40 := $xor.i1($i39, 1);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i32($i40);
    call {:si_unique_call 2223} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i41);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i43 := $xor.i1($i42, 1);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i43);
    call {:si_unique_call 2224} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i44);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    call {:si_unique_call 2225} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i45);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2226} $i46 := ldv__builtin_expect($i45, 0);
    call {:si_unique_call 2227} {:cexpr "tmp___7"} boogie_si_record_i64($i46);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i8.i1($i4);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i48 == 1);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p15);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2231} vmw_dmabuf_unreference($p49);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p15);
    call {:si_unique_call 2232} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i50);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 9);
    call {:si_unique_call 2233} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i51);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, 0);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;

  $bb29:
    assume $i48 == 1;
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p15);
    call {:si_unique_call 2229} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i53);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i53, 9);
    call {:si_unique_call 2230} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i54);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p55 := $i2p.i64.ref($i54);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb17:
    assume $i47 == 1;
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    call {:si_unique_call 2228} devirtbounce(0, .str.98, 276, 12);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    call vmw_overlay_stop_loop_$bb21();
    goto $bb21_last;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  $bb10:
    assume $i35 == 1;
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i34, $sub.i32(0, 512));
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i36 == 1);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume $i36 == 1;
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i19 := $i34;
    goto $bb3;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i19 := $i28;
    goto $bb3;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb22_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto $bb22;
}



const vmw_overlay_send_put: ref;

axiom vmw_overlay_send_put == $sub.ref(0, 653328);

procedure vmw_overlay_send_put($p0: ref, $p1: ref, $p2: ref, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.1, $M.2, $CurrAddr, assertsPassed, $M.3, $M.4, $M.6, $M.11, $M.12, $M.13, $M.16;



implementation vmw_overlay_send_put($p0: ref, $p1: ref, $p2: ref, $i3: i1) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i53: i32;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $i76: i64;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i64;
  var $i83: i64;
  var $i84: i64;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $i92: i64;
  var $p93: ref;
  var $i94: i32;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i64;
  var $i99: i64;
  var $i100: i64;
  var $p101: ref;
  var $i102: i32;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $i106: i64;
  var $i107: i64;
  var $i108: i64;
  var $p109: ref;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $i114: i64;
  var $i115: i64;
  var $i116: i64;
  var $p117: ref;
  var $i118: i32;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $i122: i64;
  var $i123: i64;
  var $i124: i64;
  var $p125: ref;
  var $i126: i32;
  var $p127: ref;
  var $p128: ref;
  var $i129: i64;
  var $i130: i64;
  var $i131: i64;
  var $i132: i64;
  var $p133: ref;
  var $i134: i32;
  var $p135: ref;
  var $p136: ref;
  var $i137: i64;
  var $i138: i64;
  var $i139: i64;
  var $i140: i64;
  var $p141: ref;
  var $i142: i32;
  var $p143: ref;
  var $p144: ref;
  var $i145: i64;
  var $i146: i64;
  var $i147: i64;
  var $i148: i64;
  var $p149: ref;
  var $i150: i32;
  var $p151: ref;
  var $p152: ref;
  var $i153: i64;
  var $i154: i64;
  var $i155: i64;
  var $i156: i64;
  var $p157: ref;
  var $i158: i32;
  var $p159: ref;
  var $p160: ref;
  var $i161: i64;
  var $i162: i64;
  var $i163: i64;
  var $i164: i64;
  var $p165: ref;
  var $i166: i32;
  var $p167: ref;
  var $p168: ref;
  var $i169: i64;
  var $i170: i64;
  var $i171: i64;
  var $i172: i64;
  var $p173: ref;
  var $i174: i32;
  var $p175: ref;
  var $p176: ref;
  var $i177: i64;
  var $i178: i64;
  var $i179: i64;
  var $i180: i64;
  var $p181: ref;
  var $i182: i32;
  var $p183: ref;
  var $p184: ref;
  var $i185: i64;
  var $i186: i64;
  var $i187: i64;
  var $i188: i64;
  var $i189: i64;
  var $p190: ref;
  var $i191: i32;
  var $p192: ref;
  var $p193: ref;
  var $i194: i64;
  var $i195: i64;
  var $i196: i64;
  var $i197: i64;
  var $i198: i64;
  var $p199: ref;
  var $i200: i32;
  var $p201: ref;
  var $p202: ref;
  var $i203: i64;
  var $i204: i64;
  var $i205: i64;
  var $i206: i64;
  var $i207: i64;
  var $p208: ref;
  var $i209: i32;
  var $p210: ref;
  var $i211: i1;
  var $p212: ref;
  var $i213: i64;
  var $i214: i64;
  var $p215: ref;
  var $i216: i32;
  var $p217: ref;
  var $p218: ref;
  var $i219: i64;
  var $i220: i64;
  var $p221: ref;
  var $p222: ref;
  var $i223: i32;
  var $i224: i32;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2234} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2235} {:cexpr "vmw_overlay_send_put:arg:interruptible"} boogie_si_record_i1($i3);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 2236} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i5);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 2616);
    call {:si_unique_call 2237} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i6);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i9 := $ne.ref($p8, $0.ref);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 2238} {:cexpr "have_so"} boogie_si_record_i8($i12);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := 19;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    call {:si_unique_call 2239} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i15);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i16 := $mul.i64(8, $i15);
    call {:si_unique_call 2240} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i16);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i17 := $add.i64(40, $i16);
    call {:si_unique_call 2241} {:cexpr "fifo_size"} boogie_si_record_i64($i17);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i17);
    call {:si_unique_call 2242} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i18);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} $p19 := vmw_fifo_reserve($p0, $i18);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i21 := $ne.ref($p20, $0.ref);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 12);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb7:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p20, $mul.ref(1, 20));
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i14);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p24, $mul.ref($i25, 8));
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p20);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i14, 1);
    call {:si_unique_call 2244} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i29);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    call {:si_unique_call 2245} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i30);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i31 := $mul.i64(8, $i30);
    call {:si_unique_call 2246} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i31);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32($i31);
    call {:si_unique_call 2247} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i32);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} fill_escape($p28, $i32);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p20);
    call {:si_unique_call 2249} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i33);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 12);
    call {:si_unique_call 2250} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i34);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i34);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 131073);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p20);
    call {:si_unique_call 2251} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i36);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 16);
    call {:si_unique_call 2252} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i37);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p2);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.16, $p38);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i37);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb11;

  $bb11:
    call $i41, $i42, $i43, $p44, $p45, $i46 := vmw_overlay_send_put_loop_$bb11($i14, $p24, $i41, $i42, $i43, $p44, $p45, $i46);
    goto $bb11_last;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, $i14);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p1);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} vmw_bo_get_guest_ptr($p47, $p4);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p4);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, 4);
    call {:si_unique_call 2255} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i49);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p2);
    call {:si_unique_call 2256} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i50);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 20);
    call {:si_unique_call 2257} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i51);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    call {:si_unique_call 2258} {:cexpr "__cil_tmp39"} boogie_si_record_i32($i53);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p4);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 4);
    call {:si_unique_call 2259} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i55);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $p56 := $i2p.i64.ref($i55);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    call {:si_unique_call 2260} {:cexpr "__cil_tmp41"} boogie_si_record_i32($i57);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i57, $i53);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p59 := $i2p.i64.ref($i49);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i58);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p24, $mul.ref(0, 8));
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    call {:si_unique_call 2261} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i61);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, 4);
    call {:si_unique_call 2262} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i62);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $p63 := $i2p.i64.ref($i62);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, 1);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p24, $mul.ref(1, 8));
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    call {:si_unique_call 2263} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i65);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i66 := $add.i64($i65, 4);
    call {:si_unique_call 2264} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i66);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p2);
    call {:si_unique_call 2265} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i67);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i67, 8);
    call {:si_unique_call 2266} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i68);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $p69 := $i2p.i64.ref($i68);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p71 := $i2p.i64.ref($i66);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, $i70);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p24, $mul.ref(2, 8));
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    call {:si_unique_call 2267} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i73);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i73, 4);
    call {:si_unique_call 2268} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i74);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p4);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i76 := $add.i64($i75, 4);
    call {:si_unique_call 2269} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i76);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $p77 := $i2p.i64.ref($i76);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p79 := $i2p.i64.ref($i74);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, $i78);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p24, $mul.ref(3, 8));
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    call {:si_unique_call 2270} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i81);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i81, 4);
    call {:si_unique_call 2271} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i82);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p2);
    call {:si_unique_call 2272} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i83);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i84 := $add.i64($i83, 24);
    call {:si_unique_call 2273} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i84);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $p85 := $i2p.i64.ref($i84);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    call {:si_unique_call 2274} {:cexpr "__cil_tmp59"} boogie_si_record_i32($i86);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $p87 := $i2p.i64.ref($i82);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, $i86);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p24, $mul.ref(4, 8));
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    call {:si_unique_call 2275} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i89);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i90 := $add.i64($i89, 4);
    call {:si_unique_call 2276} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i90);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p2);
    call {:si_unique_call 2277} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i91);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i92 := $add.i64($i91, 12);
    call {:si_unique_call 2278} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i92);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $p93 := $i2p.i64.ref($i92);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $p95 := $i2p.i64.ref($i90);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p95, $i94);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p24, $mul.ref(5, 8));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p96);
    call {:si_unique_call 2279} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i97);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i98 := $add.i64($i97, 4);
    call {:si_unique_call 2280} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i98);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p2);
    call {:si_unique_call 2281} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i99);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i100 := $add.i64($i99, 28);
    call {:si_unique_call 2282} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i100);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $p101 := $i2p.i64.ref($i100);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $p103 := $i2p.i64.ref($i98);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p103, $i102);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p24, $mul.ref(6, 8));
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p104);
    call {:si_unique_call 2283} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i105);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i106 := $add.i64($i105, 4);
    call {:si_unique_call 2284} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i106);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p2);
    call {:si_unique_call 2285} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i107);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i108 := $add.i64($i107, 32);
    call {:si_unique_call 2286} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i108);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p109 := $i2p.i64.ref($i108);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p111 := $i2p.i64.ref($i106);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $i110);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p24, $mul.ref(7, 8));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p112);
    call {:si_unique_call 2287} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i113);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i114 := $add.i64($i113, 4);
    call {:si_unique_call 2288} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i114);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p2);
    call {:si_unique_call 2289} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i115);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i116 := $add.i64($i115, 36);
    call {:si_unique_call 2290} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i116);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $p117 := $i2p.i64.ref($i116);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p119 := $i2p.i64.ref($i114);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p119, $i118);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($p24, $mul.ref(8, 8));
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p120);
    call {:si_unique_call 2291} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i121);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i122 := $add.i64($i121, 4);
    call {:si_unique_call 2292} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i122);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i123 := $p2i.ref.i64($p2);
    call {:si_unique_call 2293} {:cexpr "__cil_tmp83"} boogie_si_record_i64($i123);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $i124 := $add.i64($i123, 56);
    call {:si_unique_call 2294} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i124);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $p125 := $i2p.i64.ref($i124);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.0, $p125);
    call {:si_unique_call 2295} {:cexpr "__cil_tmp85"} boogie_si_record_i32($i126);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p127 := $i2p.i64.ref($i122);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p127, $i126);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p24, $mul.ref(9, 8));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i129 := $p2i.ref.i64($p128);
    call {:si_unique_call 2296} {:cexpr "__cil_tmp87"} boogie_si_record_i64($i129);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i130 := $add.i64($i129, 4);
    call {:si_unique_call 2297} {:cexpr "__cil_tmp88"} boogie_si_record_i64($i130);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($p2);
    call {:si_unique_call 2298} {:cexpr "__cil_tmp90"} boogie_si_record_i64($i131);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i132 := $add.i64($i131, 60);
    call {:si_unique_call 2299} {:cexpr "__cil_tmp91"} boogie_si_record_i64($i132);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p133 := $i2p.i64.ref($i132);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    call {:si_unique_call 2300} {:cexpr "__cil_tmp92"} boogie_si_record_i32($i134);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $p135 := $i2p.i64.ref($i130);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p135, $i134);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p24, $mul.ref(10, 8));
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i137 := $p2i.ref.i64($p136);
    call {:si_unique_call 2301} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i137);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i138 := $add.i64($i137, 4);
    call {:si_unique_call 2302} {:cexpr "__cil_tmp95"} boogie_si_record_i64($i138);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i139 := $p2i.ref.i64($p2);
    call {:si_unique_call 2303} {:cexpr "__cil_tmp97"} boogie_si_record_i64($i139);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $i140 := $add.i64($i139, 64);
    call {:si_unique_call 2304} {:cexpr "__cil_tmp98"} boogie_si_record_i64($i140);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $p141 := $i2p.i64.ref($i140);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $p143 := $i2p.i64.ref($i138);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p143, $i142);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($p24, $mul.ref(11, 8));
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p144);
    call {:si_unique_call 2305} {:cexpr "__cil_tmp100"} boogie_si_record_i64($i145);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $i146 := $add.i64($i145, 4);
    call {:si_unique_call 2306} {:cexpr "__cil_tmp101"} boogie_si_record_i64($i146);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i147 := $p2i.ref.i64($p2);
    call {:si_unique_call 2307} {:cexpr "__cil_tmp103"} boogie_si_record_i64($i147);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i148 := $add.i64($i147, 68);
    call {:si_unique_call 2308} {:cexpr "__cil_tmp104"} boogie_si_record_i64($i148);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p149 := $i2p.i64.ref($i148);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.0, $p149);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $p151 := $i2p.i64.ref($i146);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p151, $i150);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($p24, $mul.ref(12, 8));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i153 := $p2i.ref.i64($p152);
    call {:si_unique_call 2309} {:cexpr "__cil_tmp106"} boogie_si_record_i64($i153);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i154 := $add.i64($i153, 4);
    call {:si_unique_call 2310} {:cexpr "__cil_tmp107"} boogie_si_record_i64($i154);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i155 := $p2i.ref.i64($p2);
    call {:si_unique_call 2311} {:cexpr "__cil_tmp108"} boogie_si_record_i64($i155);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i156 := $add.i64($i155, 72);
    call {:si_unique_call 2312} {:cexpr "__cil_tmp109"} boogie_si_record_i64($i156);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $p157 := $i2p.i64.ref($i156);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.0, $p157);
    call {:si_unique_call 2313} {:cexpr "__cil_tmp110"} boogie_si_record_i32($i158);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p159 := $i2p.i64.ref($i154);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p159, $i158);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($p24, $mul.ref(13, 8));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i161 := $p2i.ref.i64($p160);
    call {:si_unique_call 2314} {:cexpr "__cil_tmp112"} boogie_si_record_i64($i161);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i162 := $add.i64($i161, 4);
    call {:si_unique_call 2315} {:cexpr "__cil_tmp113"} boogie_si_record_i64($i162);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i163 := $p2i.ref.i64($p2);
    call {:si_unique_call 2316} {:cexpr "__cil_tmp115"} boogie_si_record_i64($i163);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i164 := $add.i64($i163, 76);
    call {:si_unique_call 2317} {:cexpr "__cil_tmp116"} boogie_si_record_i64($i164);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p165 := $i2p.i64.ref($i164);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.0, $p165);
    call {:si_unique_call 2318} {:cexpr "__cil_tmp117"} boogie_si_record_i32($i166);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p167 := $i2p.i64.ref($i162);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p167, $i166);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($p24, $mul.ref(14, 8));
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i169 := $p2i.ref.i64($p168);
    call {:si_unique_call 2319} {:cexpr "__cil_tmp119"} boogie_si_record_i64($i169);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i170 := $add.i64($i169, 4);
    call {:si_unique_call 2320} {:cexpr "__cil_tmp120"} boogie_si_record_i64($i170);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i171 := $p2i.ref.i64($p2);
    call {:si_unique_call 2321} {:cexpr "__cil_tmp122"} boogie_si_record_i64($i171);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i172 := $add.i64($i171, 80);
    call {:si_unique_call 2322} {:cexpr "__cil_tmp123"} boogie_si_record_i64($i172);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $p173 := $i2p.i64.ref($i172);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.0, $p173);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p175 := $i2p.i64.ref($i170);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p175, $i174);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($p24, $mul.ref(15, 8));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i177 := $p2i.ref.i64($p176);
    call {:si_unique_call 2323} {:cexpr "__cil_tmp125"} boogie_si_record_i64($i177);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $i178 := $add.i64($i177, 4);
    call {:si_unique_call 2324} {:cexpr "__cil_tmp126"} boogie_si_record_i64($i178);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i179 := $p2i.ref.i64($p2);
    call {:si_unique_call 2325} {:cexpr "__cil_tmp128"} boogie_si_record_i64($i179);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i180 := $add.i64($i179, 84);
    call {:si_unique_call 2326} {:cexpr "__cil_tmp129"} boogie_si_record_i64($i180);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $p181 := $i2p.i64.ref($i180);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.0, $p181);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p183 := $i2p.i64.ref($i178);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p183, $i182);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($p24, $mul.ref(16, 8));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i185 := $p2i.ref.i64($p184);
    call {:si_unique_call 2327} {:cexpr "__cil_tmp131"} boogie_si_record_i64($i185);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i186 := $add.i64($i185, 4);
    call {:si_unique_call 2328} {:cexpr "__cil_tmp132"} boogie_si_record_i64($i186);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i187 := $add.i64(40, 0);
    call {:si_unique_call 2329} {:cexpr "__cil_tmp134"} boogie_si_record_i64($i187);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i188 := $p2i.ref.i64($p2);
    call {:si_unique_call 2330} {:cexpr "__cil_tmp135"} boogie_si_record_i64($i188);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $i189 := $add.i64($i188, $i187);
    call {:si_unique_call 2331} {:cexpr "__cil_tmp136"} boogie_si_record_i64($i189);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p190 := $i2p.i64.ref($i189);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.0, $p190);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p192 := $i2p.i64.ref($i186);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p192, $i191);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($p24, $mul.ref(17, 8));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i194 := $p2i.ref.i64($p193);
    call {:si_unique_call 2332} {:cexpr "__cil_tmp138"} boogie_si_record_i64($i194);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i195 := $add.i64($i194, 4);
    call {:si_unique_call 2333} {:cexpr "__cil_tmp139"} boogie_si_record_i64($i195);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i196 := $add.i64(40, 4);
    call {:si_unique_call 2334} {:cexpr "__cil_tmp141"} boogie_si_record_i64($i196);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i197 := $p2i.ref.i64($p2);
    call {:si_unique_call 2335} {:cexpr "__cil_tmp142"} boogie_si_record_i64($i197);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i198 := $add.i64($i197, $i196);
    call {:si_unique_call 2336} {:cexpr "__cil_tmp143"} boogie_si_record_i64($i198);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p199 := $i2p.i64.ref($i198);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.0, $p199);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $p201 := $i2p.i64.ref($i195);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p201, $i200);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($p24, $mul.ref(18, 8));
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i203 := $p2i.ref.i64($p202);
    call {:si_unique_call 2337} {:cexpr "__cil_tmp145"} boogie_si_record_i64($i203);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i204 := $add.i64($i203, 4);
    call {:si_unique_call 2338} {:cexpr "__cil_tmp146"} boogie_si_record_i64($i204);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i205 := $add.i64(40, 8);
    call {:si_unique_call 2339} {:cexpr "__cil_tmp148"} boogie_si_record_i64($i205);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i206 := $p2i.ref.i64($p2);
    call {:si_unique_call 2340} {:cexpr "__cil_tmp149"} boogie_si_record_i64($i206);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i207 := $add.i64($i206, $i205);
    call {:si_unique_call 2341} {:cexpr "__cil_tmp150"} boogie_si_record_i64($i207);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $p208 := $i2p.i64.ref($i207);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i209 := $load.i32($M.0, $p208);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p210 := $i2p.i64.ref($i204);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p210, $i209);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i8.i1($i12);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p222 := $bitcast.ref.ref($p2);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i223 := $load.i32($M.16, $p222);
    call {:si_unique_call 2346} {:cexpr "__cil_tmp158"} boogie_si_record_i32($i223);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2347} fill_flush($p27, $i223);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i224 := $trunc.i64.i32($i17);
    call {:si_unique_call 2348} {:cexpr "__cil_tmp159"} boogie_si_record_i32($i224);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} vmw_fifo_commit($p0, $i224);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb9;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i211 == 1;
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($p24, $mul.ref(19, 8));
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i213 := $p2i.ref.i64($p212);
    call {:si_unique_call 2342} {:cexpr "__cil_tmp152"} boogie_si_record_i64($i213);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i214 := $add.i64($i213, 4);
    call {:si_unique_call 2343} {:cexpr "__cil_tmp153"} boogie_si_record_i64($i214);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $p215 := $bitcast.ref.ref($p4);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i216 := $load.i32($M.10, $p215);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $p217 := $i2p.i64.ref($i214);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p217, $i216);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($p24, $mul.ref(20, 8));
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i219 := $p2i.ref.i64($p218);
    call {:si_unique_call 2344} {:cexpr "__cil_tmp156"} boogie_si_record_i64($i219);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i220 := $add.i64($i219, 4);
    call {:si_unique_call 2345} {:cexpr "__cil_tmp157"} boogie_si_record_i64($i220);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $p221 := $i2p.i64.ref($i220);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p221, $sub.i32(0, 1));
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i42 == 1;
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i41);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p24, $mul.ref($i43, 8));
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i41);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i41, 1);
    call {:si_unique_call 2253} {:cexpr "i"} boogie_si_record_i32($i46);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i41 := $i46;
    goto corral_source_split_5125_dummy;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i14 := 21;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;

  corral_source_split_5125_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5113;
}



const vmw_overlay_move_buffer: ref;

axiom vmw_overlay_move_buffer == $sub.ref(0, 654360);

procedure vmw_overlay_move_buffer($p0: ref, $p1: ref, $i2: i1, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed, $M.6, $M.11, $M.12, $M.2, $CurrAddr, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_overlay_move_buffer($p0: ref, $p1: ref, $i2: i1, $i3: i1) returns ($r: i32)
{
  var $i4: i8;
  var $i5: i8;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i2);
    call {:si_unique_call 2350} {:cexpr "vmw_overlay_move_buffer:arg:pin"} boogie_si_record_i1($i2);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i3);
    call {:si_unique_call 2351} {:cexpr "vmw_overlay_move_buffer:arg:inter"} boogie_si_record_i1($i3);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i5);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} $i8 := vmw_dmabuf_unpin($p0, $p1, $i7);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    call {:si_unique_call 2353} {:cexpr "tmp___7"} boogie_si_record_i32($i8);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    call {:si_unique_call 2354} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i10);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 2616);
    call {:si_unique_call 2355} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i11);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i14 := $ne.ref($p13, $0.ref);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1(1);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i5);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} $i17 := vmw_dmabuf_to_vram($p0, $p1, $i15, $i16);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    call {:si_unique_call 2357} {:cexpr "tmp___8"} boogie_si_record_i32($i17);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i9 := $i17;
    goto $bb3;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1(1);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i5);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2358} $i20 := vmw_dmabuf_to_vram_or_gmr($p0, $p1, $i18, $i19);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    call {:si_unique_call 2359} {:cexpr "tmp___9"} boogie_si_record_i32($i20);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i9 := $i20;
    goto $bb3;

  SeqInstr_397:
    assume !assertsPassed;
    return;
}



const vmw_dmabuf_to_vram: ref;

axiom vmw_dmabuf_to_vram == $sub.ref(0, 655392);

procedure vmw_dmabuf_to_vram($p0: ref, $p1: ref, $i2: i1, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed, $M.6, $M.11, $M.12, $M.2, $CurrAddr, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_dmabuf_to_vram($p0: ref, $p1: ref, $i2: i1, $i3: i1) returns ($r: i32)
{
  var $i4: i8;
  var $i5: i8;
  var $i6: i1;
  var $p7: ref;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i2);
    call {:si_unique_call 2360} {:cexpr "vmw_dmabuf_to_vram:arg:pin"} boogie_si_record_i1($i2);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i3);
    call {:si_unique_call 2361} {:cexpr "vmw_dmabuf_to_vram:arg:interruptible"} boogie_si_record_i1($i3);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $p7 := vmw_vram_placement;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i5);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2362} $i9 := vmw_dmabuf_to_placement($p0, $p1, $p7, $i8);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    call {:si_unique_call 2363} {:cexpr "tmp___7"} boogie_si_record_i32($i9);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p7 := vmw_vram_ne_placement;
    goto $bb3;
}



const vmw_dmabuf_to_vram_or_gmr: ref;

axiom vmw_dmabuf_to_vram_or_gmr == $sub.ref(0, 656424);

procedure vmw_dmabuf_to_vram_or_gmr($p0: ref, $p1: ref, $i2: i1, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed, $M.6, $M.11, $M.12, $M.2, $CurrAddr, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_dmabuf_to_vram_or_gmr($p0: ref, $p1: ref, $i2: i1, $i3: i1) returns ($r: i32)
{
  var $i4: i8;
  var $i5: i8;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $i44: i1;
  var $p45: ref;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i56: i1;
  var $i57: i32;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $i62: i1;
  var $i63: i1;
  var $p64: ref;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i32;
  var $i61: i32;
  var $i43: i32;
  var $p69: ref;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i2);
    call {:si_unique_call 2364} {:cexpr "vmw_dmabuf_to_vram_or_gmr:arg:pin"} boogie_si_record_i1($i2);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i3);
    call {:si_unique_call 2365} {:cexpr "vmw_dmabuf_to_vram_or_gmr:arg:interruptible"} boogie_si_record_i1($i3);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 2366} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i6);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 134384);
    call {:si_unique_call 2367} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i7);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p9);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i5);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2368} $i13 := ttm_write_lock($p11, $i12);
    call {:si_unique_call 2369} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    call {:si_unique_call 2370} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i15);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i17 := $xor.i1($i16, 1);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    call {:si_unique_call 2371} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i18);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i20 := $xor.i1($i19, 1);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    call {:si_unique_call 2372} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i21);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    call {:si_unique_call 2373} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i22);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2374} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 2375} {:cexpr "tmp___7"} boogie_si_record_i64($i23);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i4);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i5);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1(0);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1(0);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2377} $i31 := ttm_bo_reserve($p10, $i28, $i29, $i30, 0);
    call {:si_unique_call 2378} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    call {:si_unique_call 2379} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i33);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i35 := $xor.i1($i34, 1);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i32($i35);
    call {:si_unique_call 2380} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i36);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i38 := $xor.i1($i37, 1);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    call {:si_unique_call 2381} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i39);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    call {:si_unique_call 2382} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i40);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 2384} {:cexpr "tmp___8"} boogie_si_record_i64($i41);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i8.i1($i4);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $p45 := vmw_vram_gmr_placement;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i5);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1(0);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i8.i1(0);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2386} $i49 := ttm_bo_validate($p10, $p45, $i46, $i47, $i48);
    call {:si_unique_call 2387} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i32($i50);
    call {:si_unique_call 2388} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i51);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i53 := $xor.i1($i52, 1);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i54 := $zext.i1.i32($i53);
    call {:si_unique_call 2389} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i54);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i56 := $xor.i1($i55, 1);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i32($i56);
    call {:si_unique_call 2390} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i57);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i57);
    call {:si_unique_call 2391} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i58);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2392} $i59 := ldv__builtin_expect($i58, 1);
    call {:si_unique_call 2393} {:cexpr "tmp___9"} boogie_si_record_i64($i59);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i60 == 1);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i49, $sub.i32(0, 512));
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i8.i1($i4);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $p64 := vmw_vram_placement;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i8.i1($i5);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i8.i1(0);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i8.i1(0);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2395} $i68 := ttm_bo_validate($p10, $p64, $i65, $i66, $i67);
    call {:si_unique_call 2396} {:cexpr "ret"} boogie_si_record_i32($i68);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i61 := $i68;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} ttm_bo_unreserve($p10);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i43 := $i61;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p9);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2385} ttm_write_unlock($p69);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i25 := $i43;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb22:
    assume $i63 == 1;
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p64 := vmw_vram_ne_placement;
    goto $bb24;

  $bb18:
    assume $i62 == 1;
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i61 := $i49;
    goto $bb17;

  $bb15:
    assume $i60 == 1;
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i61 := $i49;
    goto $bb17;

  $bb12:
    assume $i44 == 1;
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $p45 := vmw_vram_gmr_ne_placement;
    goto $bb14;

  $bb8:
    assume $i42 == 1;
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i43 := $i31;
    goto $bb10;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1(0);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} vmw_execbuf_release_pinned_bo($p0, $i27, 0);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i25 := $i13;
    goto $bb3;
}



const fill_escape: ref;

axiom fill_escape == $sub.ref(0, 657456);

procedure fill_escape($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fill_escape($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2397} {:cexpr "fill_escape:arg:size"} boogie_si_record_i32($i1);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 33);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 2398} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i3);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 4);
    call {:si_unique_call 2399} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i4);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 2400} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i6);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 8);
    call {:si_unique_call 2401} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i7);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i1);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    return;
}



const fill_flush: ref;

axiom fill_flush == $sub.ref(0, 658488);

procedure fill_flush($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fill_flush($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2402} {:cexpr "fill_flush:arg:stream_id"} boogie_si_record_i32($i1);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2403} fill_escape($p2, 8);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 2404} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 12);
    call {:si_unique_call 2405} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i4);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 131074);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 2406} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i6);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 16);
    call {:si_unique_call 2407} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i7);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i1);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    return;
}



const vmw_overlay_send_stop: ref;

axiom vmw_overlay_send_stop == $sub.ref(0, 659520);

procedure vmw_overlay_send_stop($p0: ref, $i1: i32, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.2, $M.6, $M.1, assertsPassed, $M.3, $M.4, $CurrAddr, $M.13, $M.10, $M.16;



implementation vmw_overlay_send_stop($p0: ref, $i1: i32, $i2: i1) returns ($r: i32)
{
  var $i3: i8;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2408} {:cexpr "vmw_overlay_send_stop:arg:stream_id"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 2409} {:cexpr "vmw_overlay_send_stop:arg:interruptible"} boogie_si_record_i1($i2);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p4, $p5, $i6, $p7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26 := vmw_overlay_send_stop_loop_$bb1($p0, $i3, $p4, $p5, $i6, $p7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2410} $p4 := vmw_fifo_reserve($p0, 48);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i6 := $ne.ref($p5, $0.ref);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p7 := $p4;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1(0);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1(1);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i3);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2430} $i11 := vmw_fallback_wait($p0, $i8, $i9, 0, $i10, 750);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    call {:si_unique_call 2431} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i3);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i11, 0);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    call {:si_unique_call 2432} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i17);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i19 := $xor.i1($i18, 1);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    call {:si_unique_call 2433} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i20);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $i22 := $xor.i1($i21, 1);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    call {:si_unique_call 2434} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i23);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    call {:si_unique_call 2435} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i24);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2436} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 2437} {:cexpr "tmp___8"} boogie_si_record_i64($i25);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb25_dummy;

  $bb15:
    assume $i26 == 1;
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call {:si_unique_call 2438} devirtbounce(0, .str.98, 205, 12);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    call vmw_overlay_send_stop_loop_$bb19();
    goto $bb19_last;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb20_dummy;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i11, $sub.i32(0, 512));
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i14 := $i11;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i13 == 1);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p7);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2411} fill_escape($p27, 16);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p7);
    call {:si_unique_call 2412} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i28);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 12);
    call {:si_unique_call 2413} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i29);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 131073);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i31 := $add.i64(12, 4);
    call {:si_unique_call 2414} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i31);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p7);
    call {:si_unique_call 2415} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i32);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, $i31);
    call {:si_unique_call 2416} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i33);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i1);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i35 := $add.i64(8, 0);
    call {:si_unique_call 2417} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i35);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i36 := $add.i64(12, $i35);
    call {:si_unique_call 2418} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i36);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p7);
    call {:si_unique_call 2419} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i37);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, $i36);
    call {:si_unique_call 2420} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i38);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i38);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 0);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i40 := $add.i64(0, 4);
    call {:si_unique_call 2421} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i40);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i41 := $add.i64(8, $i40);
    call {:si_unique_call 2422} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i41);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i42 := $add.i64(12, $i41);
    call {:si_unique_call 2423} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i42);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p7);
    call {:si_unique_call 2424} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i43);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, $i42);
    call {:si_unique_call 2425} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i44);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 0);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p7);
    call {:si_unique_call 2426} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i46);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 28);
    call {:si_unique_call 2427} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i47);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2428} fill_flush($p48, $i1);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2429} vmw_fifo_commit($p0, 48);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb11;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb20_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb25_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb2;
}



const vmw_framebuffer_dmabuf_destroy: ref;

axiom vmw_framebuffer_dmabuf_destroy == $sub.ref(0, 660552);

procedure vmw_framebuffer_dmabuf_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmw_framebuffer_dmabuf_destroy($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i32($p1);
    call {:si_unique_call 2439} {:cexpr "__cil_tmp6"} boogie_si_record_i32($i2);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i2);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, $i4);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 1));
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2440} drm_framebuffer_cleanup($p0);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    call {:si_unique_call 2441} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i8);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 160);
    call {:si_unique_call 2442} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i9);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2443} vmw_dmabuf_unreference($p10);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p7);
    call {:si_unique_call 2444} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i11);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 144);
    call {:si_unique_call 2445} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i12);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2446} ttm_base_object_unref($p13);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p7);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2447} kfree($p14);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    return;
}



const vmw_framebuffer_create_handle: ref;

axiom vmw_framebuffer_create_handle == $sub.ref(0, 661584);

procedure vmw_framebuffer_create_handle($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_framebuffer_dmabuf_dirty: ref;

axiom vmw_framebuffer_dmabuf_dirty == $sub.ref(0, 662616);

procedure vmw_framebuffer_dmabuf_dirty($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);



const ttm_read_lock: ref;

axiom ttm_read_lock == $sub.ref(0, 663648);

procedure ttm_read_lock($p0: ref, $i1: i1) returns ($r: i32);



const do_dmabuf_dirty_ldu: ref;

axiom do_dmabuf_dirty_ldu == $sub.ref(0, 664680);

procedure do_dmabuf_dirty_ldu($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $i5: i32, $i6: i32) returns ($r: i32);



const do_dmabuf_dirty_sou: ref;

axiom do_dmabuf_dirty_sou == $sub.ref(0, 665712);

procedure do_dmabuf_dirty_sou($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $p5: ref, $i6: i32, $i7: i32, $p8: ref) returns ($r: i32);



const ttm_read_unlock: ref;

axiom ttm_read_unlock == $sub.ref(0, 666744);

procedure ttm_read_unlock($p0: ref);



const do_dmabuf_define_gmrfb: ref;

axiom do_dmabuf_define_gmrfb == $sub.ref(0, 667776);

procedure do_dmabuf_define_gmrfb($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_execbuf_process: ref;

axiom vmw_execbuf_process == $sub.ref(0, 668808);

procedure vmw_execbuf_process($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i64, $p6: ref, $p7: ref) returns ($r: i32);



const mutex_lock_interruptible: ref;

axiom mutex_lock_interruptible == $sub.ref(0, 669840);

procedure mutex_lock_interruptible($p0: ref) returns ($r: i32);



const vmw_resize_cmd_bounce: ref;

axiom vmw_resize_cmd_bounce == $sub.ref(0, 670872);

procedure vmw_resize_cmd_bounce($p0: ref, $i1: i32) returns ($r: i32);



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 671904);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);



const vmw_cmd_check_all: ref;

axiom vmw_cmd_check_all == $sub.ref(0, 672936);

procedure vmw_cmd_check_all($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);



const vmw_validate_buffers: ref;

axiom vmw_validate_buffers == $sub.ref(0, 673968);

procedure vmw_validate_buffers($p0: ref, $p1: ref) returns ($r: i32);



const vmw_apply_relocations: ref;

axiom vmw_apply_relocations == $sub.ref(0, 675000);

procedure vmw_apply_relocations($p0: ref);



const vmw_wait_lag: ref;

axiom vmw_wait_lag == $sub.ref(0, 676032);

procedure vmw_wait_lag($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const vmw_query_bo_switch_commit: ref;

axiom vmw_query_bo_switch_commit == $sub.ref(0, 677064);

procedure vmw_query_bo_switch_commit($p0: ref, $p1: ref);



const vmw_clear_validations: ref;

axiom vmw_clear_validations == $sub.ref(0, 678096);

procedure vmw_clear_validations($p0: ref);



const vmw_execbuf_copy_fence_user: ref;

axiom vmw_execbuf_copy_fence_user == $sub.ref(0, 679128);

procedure vmw_execbuf_copy_fence_user($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $i5: i32);



const vmw_free_relocations: ref;

axiom vmw_free_relocations == $sub.ref(0, 680160);

procedure vmw_free_relocations($p0: ref);



const vmw_query_switch_backoff: ref;

axiom vmw_query_switch_backoff == $sub.ref(0, 681192);

procedure vmw_query_switch_backoff($p0: ref);



const might_fault: ref;

axiom might_fault == $sub.ref(0, 682224);

procedure might_fault();



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 683256);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);



const ttm_ref_object_base_unref: ref;

axiom ttm_ref_object_base_unref == $sub.ref(0, 684288);

procedure ttm_ref_object_base_unref($p0: ref, $i1: i64, $i2: i32) returns ($r: i32);



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 685320);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);



const vmw_dmabuf_validate_clear: ref;

axiom vmw_dmabuf_validate_clear == $sub.ref(0, 686352);

procedure vmw_dmabuf_validate_clear($p0: ref);



const vmw_resource_unreserve: ref;

axiom vmw_resource_unreserve == $sub.ref(0, 687384);

procedure vmw_resource_unreserve($p0: ref);



const vmw_surface_res_free: ref;

axiom vmw_surface_res_free == $sub.ref(0, 688416);

procedure vmw_surface_res_free($p0: ref);
  free requires assertsPassed;



implementation vmw_surface_res_free($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i32($p1);
    call {:si_unique_call 2448} {:cexpr "__cil_tmp6"} boogie_si_record_i32($i2);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i2);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, $i4);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 1));
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    call {:si_unique_call 2449} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i8);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 184);
    call {:si_unique_call 2450} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i9);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i12 := $ne.ref($p11, $0.ref);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p7);
    call {:si_unique_call 2454} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i16);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 192);
    call {:si_unique_call 2455} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i17);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2456} kfree($p20);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p7);
    call {:si_unique_call 2457} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i21);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 144);
    call {:si_unique_call 2458} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i22);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2459} kfree($p25);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p7);
    call {:si_unique_call 2460} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i26);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, 176);
    call {:si_unique_call 2461} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i27);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $p28 := $i2p.i64.ref($i27);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} kfree($p30);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p7);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2463} kfree($p31);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p7);
    call {:si_unique_call 2451} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i13);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 184);
    call {:si_unique_call 2452} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i14);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2453} ttm_bo_unref($p15);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmw_lag_lt: ref;

axiom vmw_lag_lt == $sub.ref(0, 689448);

procedure vmw_lag_lt($p0: ref, $i1: i32) returns ($r: i1);



const vmw_wait_seqno: ref;

axiom vmw_wait_seqno == $sub.ref(0, 690480);

procedure vmw_wait_seqno($p0: ref, $i1: i1, $i2: i32, $i3: i1, $i4: i64) returns ($r: i32);



const vmw_fifo_lag: ref;

axiom vmw_fifo_lag == $sub.ref(0, 691512);

procedure vmw_fifo_lag($p0: ref) returns ($r: ref);



const timespec_compare: ref;

axiom timespec_compare == $sub.ref(0, 692544);

procedure timespec_compare($p0: ref, $p1: ref) returns ($r: i32);



const vmw_timespec_add: ref;

axiom vmw_timespec_add == $sub.ref(0, 693576);

procedure vmw_timespec_add($i0: i64, $i1: i64, $i2: i64, $i3: i64) returns ($r: ref);



const vmw_validate_single_buffer: ref;

axiom vmw_validate_single_buffer == $sub.ref(0, 694608);

procedure vmw_validate_single_buffer($p0: ref, $p1: ref) returns ($r: i32);



const vmw_cmd_check: ref;

axiom vmw_cmd_check == $sub.ref(0, 695640);

procedure vmw_cmd_check($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);



const vmw_cmd_check_not_3d: ref;

axiom vmw_cmd_check_not_3d == $sub.ref(0, 696672);

procedure vmw_cmd_check_not_3d($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);



const vmw_cmd_check_define_gmrfb: ref;

axiom vmw_cmd_check_define_gmrfb == $sub.ref(0, 697704);

procedure vmw_cmd_check_define_gmrfb($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 698736);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 699768);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 700800);

procedure warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);



const vmw_framebuffer_surface_destroy: ref;

axiom vmw_framebuffer_surface_destroy == $sub.ref(0, 701832);

procedure vmw_framebuffer_surface_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed, $CurrAddr, $M.6, $M.2, $M.11, $M.12, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation vmw_framebuffer_surface_destroy($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i32($p1);
    call {:si_unique_call 2464} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i2);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i2);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, $i4);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 1));
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    call {:si_unique_call 2465} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i8);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 192);
    call {:si_unique_call 2466} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i9);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2467} $p12 := vmw_master($p11);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    call {:si_unique_call 2468} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i13);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 152);
    call {:si_unique_call 2469} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i14);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2470} mutex_lock($p15);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p7);
    call {:si_unique_call 2471} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i16);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 176);
    call {:si_unique_call 2472} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i17);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2473} list_del($p18);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p12);
    call {:si_unique_call 2474} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i19);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 152);
    call {:si_unique_call 2475} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i20);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2476} mutex_unlock($p21);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p7);
    call {:si_unique_call 2477} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i22);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 192);
    call {:si_unique_call 2478} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i23);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2479} drm_master_put($p24);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2480} drm_framebuffer_cleanup($p0);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p7);
    call {:si_unique_call 2481} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i25);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 160);
    call {:si_unique_call 2482} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i26);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2483} vmw_surface_unreference($p27);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p7);
    call {:si_unique_call 2484} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i28);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 144);
    call {:si_unique_call 2485} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i29);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2486} ttm_base_object_unref($p30);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p7);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2487} kfree($p31);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;
}



const vmw_framebuffer_surface_dirty: ref;

axiom vmw_framebuffer_surface_dirty == $sub.ref(0, 702864);

procedure vmw_framebuffer_surface_dirty($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);



const do_surface_dirty_sou: ref;

axiom do_surface_dirty_sou == $sub.ref(0, 703896);

procedure do_surface_dirty_sou($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $p5: ref, $i6: i32, $i7: i32, $p8: ref) returns ($r: i32);



const vmw_clip_cliprects: ref;

axiom vmw_clip_cliprects == $sub.ref(0, 704928);

procedure vmw_clip_cliprects($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $p6: ref, $p7: ref);



const drm_master_put: ref;

axiom drm_master_put == $sub.ref(0, 705960);

procedure drm_master_put($p0: ref);
  free requires assertsPassed;



implementation drm_master_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    return;
}



const vmw_driver_load: ref;

axiom vmw_driver_load == $sub.ref(0, 706992);

procedure vmw_driver_load($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.6, $CurrAddr, $M.3, $M.4, $M.10, $M.13, $M.16;



implementation vmw_driver_load($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $i66: i64;
  var $i67: i64;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $i75: i64;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $i85: i64;
  var $i86: i32;
  var $p87: ref;
  var $i88: i64;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $i92: i64;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $i96: i64;
  var $p97: ref;
  var $i98: i64;
  var $i99: i32;
  var $p100: ref;
  var $i101: i64;
  var $i102: i64;
  var $i103: i64;
  var $i104: i64;
  var $i105: i64;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $i109: i64;
  var $p110: ref;
  var $i111: i64;
  var $i112: i32;
  var $p113: ref;
  var $i114: i64;
  var $i115: i64;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $i119: i8;
  var $i120: i64;
  var $i121: i64;
  var $p122: ref;
  var $i123: i64;
  var $i124: i32;
  var $i125: i32;
  var $i126: i64;
  var $i127: i64;
  var $i128: i1;
  var $i130: i64;
  var $i131: i64;
  var $p132: ref;
  var $i134: i64;
  var $i135: i64;
  var $i136: i32;
  var $p137: ref;
  var $i138: i64;
  var $i139: i64;
  var $i140: i32;
  var $p141: ref;
  var $i142: i64;
  var $i143: i64;
  var $i144: i32;
  var $p145: ref;
  var $i146: i64;
  var $i147: i64;
  var $i148: i32;
  var $p149: ref;
  var $i150: i64;
  var $i151: i64;
  var $i152: i32;
  var $p153: ref;
  var $i154: i64;
  var $i155: i64;
  var $p156: ref;
  var $i157: i32;
  var $i158: i32;
  var $i159: i1;
  var $i160: i64;
  var $i161: i64;
  var $i162: i32;
  var $p163: ref;
  var $i164: i64;
  var $i165: i64;
  var $i166: i32;
  var $p167: ref;
  var $i168: i64;
  var $i169: i64;
  var $p170: ref;
  var $i171: i32;
  var $i172: i32;
  var $i173: i1;
  var $i174: i64;
  var $i175: i64;
  var $i176: i32;
  var $p177: ref;
  var $i178: i64;
  var $i179: i64;
  var $i180: i32;
  var $p181: ref;
  var $i182: i64;
  var $i183: i64;
  var $i184: i64;
  var $i185: i64;
  var $p186: ref;
  var $i187: i32;
  var $i188: i64;
  var $i189: i64;
  var $p190: ref;
  var $i191: i32;
  var $i192: i32;
  var $p193: ref;
  var $i194: i64;
  var $i195: i64;
  var $p196: ref;
  var $i197: i64;
  var $i198: i64;
  var $p199: ref;
  var $i200: i64;
  var $i201: i64;
  var $p202: ref;
  var $i203: i32;
  var $i204: i64;
  var $i205: i64;
  var $p206: ref;
  var $i207: i32;
  var $i208: i32;
  var $i209: i1;
  var $i210: i64;
  var $i211: i64;
  var $p212: ref;
  var $i213: i32;
  var $i215: i64;
  var $i216: i64;
  var $p217: ref;
  var $i218: i32;
  var $i220: i64;
  var $i221: i64;
  var $p222: ref;
  var $i223: i32;
  var $i224: i32;
  var $i225: i1;
  var $i226: i64;
  var $i227: i64;
  var $p228: ref;
  var $i229: i32;
  var $i231: i64;
  var $i232: i64;
  var $p233: ref;
  var $i234: i32;
  var $i235: i32;
  var $i237: i64;
  var $i238: i64;
  var $p239: ref;
  var $i240: i32;
  var $i241: i64;
  var $i242: i64;
  var $p243: ref;
  var $i244: i32;
  var $i245: i32;
  var $i247: i64;
  var $i248: i64;
  var $p249: ref;
  var $i250: i32;
  var $i251: i64;
  var $i252: i64;
  var $p253: ref;
  var $i254: i32;
  var $i255: i32;
  var $i257: i32;
  var $i258: i1;
  var $i259: i32;
  var $i260: i1;
  var $i261: i1;
  var $i262: i32;
  var $i263: i1;
  var $i264: i1;
  var $i265: i32;
  var $i266: i64;
  var $i267: i64;
  var $i268: i1;
  var $i269: i64;
  var $i270: i64;
  var $p271: ref;
  var $i272: i64;
  var $i273: i64;
  var $p274: ref;
  var $i275: i1;
  var $i276: i64;
  var $i277: i64;
  var $i278: i64;
  var $i279: i64;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $i283: i64;
  var $i284: i64;
  var $i285: i64;
  var $p286: ref;
  var $p287: ref;
  var $p288: ref;
  var $i289: i1;
  var $i290: i32;
  var $i291: i1;
  var $i292: i32;
  var $i293: i1;
  var $i294: i1;
  var $i295: i32;
  var $i296: i1;
  var $i297: i1;
  var $i298: i32;
  var $i299: i64;
  var $i300: i64;
  var $i301: i1;
  var $p304: ref;
  var $i305: i64;
  var $i306: i64;
  var $p307: ref;
  var $i308: i32;
  var $i309: i32;
  var $i310: i64;
  var $i311: i32;
  var $i312: i1;
  var $i313: i32;
  var $i314: i1;
  var $i315: i1;
  var $i316: i32;
  var $i317: i1;
  var $i318: i1;
  var $i319: i32;
  var $i320: i64;
  var $i321: i64;
  var $i322: i1;
  var $i325: i64;
  var $i326: i64;
  var $p327: ref;
  var $p328: ref;
  var $i329: i64;
  var $i330: i64;
  var $p331: ref;
  var $i332: i32;
  var $i333: i64;
  var $i334: i32;
  var $i335: i1;
  var $i337: i64;
  var $i338: i64;
  var $p339: ref;
  var $i340: i64;
  var $i341: i64;
  var $i342: i64;
  var $i343: i64;
  var $p344: ref;
  var $i345: i32;
  var $i346: i64;
  var $i347: i64;
  var $i348: i64;
  var $p349: ref;
  var $i350: i32;
  var $i351: i64;
  var $i352: i32;
  var $p353: ref;
  var $i354: i64;
  var $i355: i64;
  var $p356: ref;
  var $i357: i32;
  var $i358: i64;
  var $i359: i64;
  var $i360: i64;
  var $p361: ref;
  var $i362: i32;
  var $i363: i64;
  var $p364: ref;
  var $i365: i64;
  var $i366: i64;
  var $p368: ref;
  var $i369: i64;
  var $i370: i64;
  var $i371: i64;
  var $p372: ref;
  var $p373: ref;
  var $i374: i64;
  var $i375: i1;
  var $i376: i32;
  var $i377: i1;
  var $i378: i1;
  var $i379: i32;
  var $i380: i1;
  var $i381: i1;
  var $i382: i32;
  var $i383: i64;
  var $i384: i64;
  var $i385: i1;
  var $i388: i64;
  var $i389: i64;
  var $p390: ref;
  var $i391: i32;
  var $i392: i32;
  var $i393: i1;
  var $i394: i64;
  var $i395: i64;
  var $p396: ref;
  var $i397: i32;
  var $i398: i32;
  var $i399: i1;
  var $i400: i1;
  var $i401: i8;
  var $i402: i1;
  var $i405: i64;
  var $i406: i64;
  var $i407: i64;
  var $i408: i64;
  var $p409: ref;
  var $p410: ref;
  var $p411: ref;
  var $p412: ref;
  var $p413: ref;
  var $i414: i64;
  var $i415: i64;
  var $i416: i64;
  var $p417: ref;
  var $p418: ref;
  var $i419: i64;
  var $i420: i1;
  var $i421: i32;
  var $i422: i1;
  var $i423: i1;
  var $i424: i32;
  var $i425: i1;
  var $i426: i1;
  var $i427: i32;
  var $i428: i64;
  var $i429: i64;
  var $i430: i1;
  var $i432: i64;
  var $i433: i64;
  var $p435: ref;
  var $i436: i64;
  var $i437: i64;
  var $p438: ref;
  var $p439: ref;
  var $i440: i32;
  var $i441: i64;
  var $i442: i64;
  var $i443: i1;
  var $i444: i32;
  var $i445: i1;
  var $p446: ref;
  var $i447: i8;
  var $i448: i64;
  var $i449: i64;
  var $p450: ref;
  var $i451: i8;
  var $i452: i1;
  var $i454: i64;
  var $i455: i64;
  var $p456: ref;
  var $p457: ref;
  var $i458: i32;
  var $i459: i1;
  var $i460: i32;
  var $i461: i1;
  var $i462: i1;
  var $i463: i32;
  var $i464: i1;
  var $i465: i1;
  var $i466: i32;
  var $i467: i64;
  var $i468: i64;
  var $i469: i1;
  var $i472: i32;
  var $i473: i64;
  var $i474: i64;
  var $p475: ref;
  var $p476: ref;
  var $i477: i64;
  var $i478: i64;
  var $i479: i64;
  var $p480: ref;
  var $p481: ref;
  var $i482: i64;
  var $i483: i1;
  var $i484: i32;
  var $i485: i1;
  var $i486: i1;
  var $i487: i32;
  var $i488: i1;
  var $i489: i1;
  var $i490: i32;
  var $i491: i64;
  var $i492: i64;
  var $i493: i1;
  var $i495: i1;
  var $i496: i32;
  var $i497: i1;
  var $i498: i32;
  var $i499: i1;
  var $i500: i1;
  var $i501: i32;
  var $i502: i1;
  var $i503: i1;
  var $i504: i32;
  var $i505: i64;
  var $i506: i64;
  var $i507: i1;
  var $i510: i32;
  var $i511: i1;
  var $i512: i32;
  var $i513: i1;
  var $i514: i1;
  var $i515: i32;
  var $i516: i1;
  var $i517: i1;
  var $i518: i32;
  var $i519: i64;
  var $i520: i64;
  var $i521: i1;
  var $i524: i1;
  var $i525: i8;
  var $i526: i1;
  var $p527: ref;
  var $i529: i64;
  var $i530: i64;
  var $p531: ref;
  var $i532: i8;
  var $i533: i1;
  var $i536: i1;
  var $i537: i64;
  var $i538: i64;
  var $p539: ref;
  var $i540: i32;
  var $i541: i32;
  var $i542: i1;
  var $i543: i32;
  var $i544: i1;
  var $i545: i32;
  var $i546: i1;
  var $i547: i1;
  var $i548: i32;
  var $i549: i1;
  var $i550: i1;
  var $i551: i32;
  var $i552: i64;
  var $i553: i64;
  var $i554: i1;
  var $i556: i64;
  var $i557: i64;
  var $p558: ref;
  var $i559: i64;
  var $i560: i64;
  var $p561: ref;
  var $i563: i64;
  var $i564: i64;
  var $p565: ref;
  var $i566: i8;
  var $i567: i1;
  var $i522: i32;
  var $i571: i64;
  var $i572: i64;
  var $p573: ref;
  var $i574: i8;
  var $i575: i1;
  var $i577: i1;
  var $i508: i32;
  var $i578: i64;
  var $i579: i64;
  var $p580: ref;
  var $p581: ref;
  var $i494: i32;
  var $i582: i64;
  var $i583: i64;
  var $p584: ref;
  var $i585: i8;
  var $i586: i1;
  var $i587: i64;
  var $i588: i64;
  var $p589: ref;
  var $p590: ref;
  var $i591: i64;
  var $i592: i64;
  var $p593: ref;
  var $p594: ref;
  var $i471: i32;
  var $i595: i64;
  var $i596: i64;
  var $p597: ref;
  var $i404: i32;
  var $i598: i64;
  var $i599: i64;
  var $p600: ref;
  var $p601: ref;
  var $p602: ref;
  var $i387: i32;
  var $i603: i64;
  var $i604: i64;
  var $p605: ref;
  var $i606: i32;
  var $i607: i64;
  var $i608: i64;
  var $p609: ref;
  var $i610: i32;
  var $i611: i64;
  var $i612: i64;
  var $i613: i64;
  var $p614: ref;
  var $i615: i32;
  var $i616: i64;
  var $i618: i64;
  var $i619: i64;
  var $p620: ref;
  var $i621: i8;
  var $i622: i1;
  var $p623: ref;
  var $p625: ref;
  var $i324: i32;
  var $p627: ref;
  var $i303: i32;
  var $i133: i32;
  var $i629: i64;
  var $i630: i64;
  var $p631: ref;
  var $i632: i64;
  var $i633: i64;
  var $p634: ref;
  var $i635: i64;
  var $i636: i64;
  var $p637: ref;
  var $p638: ref;
  var $i18: i32;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2488} {:cexpr "vmw_driver_load:arg:chipset"} boogie_si_record_i64($i1);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2489} $p2 := kzalloc(134792, 208);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 2490} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i4);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p3);
    call {:si_unique_call 2491} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i5);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, $i4);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 2492} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i7);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i9 := $xor.i1($i8, 1);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 2493} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i10);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i12 := $xor.i1($i11, 1);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    call {:si_unique_call 2494} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i13);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    call {:si_unique_call 2495} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i14);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2496} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 2497} {:cexpr "tmp___8"} boogie_si_record_i64($i15);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p3);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.0;
    call {:si_unique_call 2499} cmdloc_dummy_var_36 := $memset.i8(cmdloc_dummy_var_35, $p19, 0, 134792, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_36;
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p0);
    call {:si_unique_call 2500} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i20);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 1016);
    call {:si_unique_call 2501} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i21);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2502} pci_set_master($p23);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p3);
    call {:si_unique_call 2503} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i24);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 2088);
    call {:si_unique_call 2504} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i25);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p0);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p3);
    call {:si_unique_call 2505} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i27);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 2096);
    call {:si_unique_call 2506} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i28);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i1);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p3);
    call {:si_unique_call 2507} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i30);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 2980);
    call {:si_unique_call 2508} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i31);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $sub.i32(0, 100));
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p3);
    call {:si_unique_call 2509} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i33);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 2184);
    call {:si_unique_call 2510} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i34);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i34);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2511} __mutex_init($p35, .str.198, __key___4);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p3);
    call {:si_unique_call 2512} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i36);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 134304);
    call {:si_unique_call 2513} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i37);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2514} __mutex_init($p38, .str.199, __key___5);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p3);
    call {:si_unique_call 2515} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i39);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 134664);
    call {:si_unique_call 2516} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i40);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i40);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2517} __mutex_init($p41, .str.200, __key___6);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p3);
    call {:si_unique_call 2518} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i42);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, 2632);
    call {:si_unique_call 2519} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i43);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i43);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2520} __rwlock_init($p44, .str.201, __key___7);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p3);
    call {:si_unique_call 2521} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i45);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 2656);
    call {:si_unique_call 2522} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i46);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $p47 := $i2p.i64.ref($i46);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2523} idr_init($p47);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p3);
    call {:si_unique_call 2524} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i48);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, 2704);
    call {:si_unique_call 2525} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i49);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $p50 := $i2p.i64.ref($i49);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2526} idr_init($p50);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p3);
    call {:si_unique_call 2527} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i51);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 2752);
    call {:si_unique_call 2528} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i52);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2529} idr_init($p53);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p3);
    call {:si_unique_call 2530} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i54);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 2800);
    call {:si_unique_call 2531} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i55);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p56 := $i2p.i64.ref($i55);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2532} __mutex_init($p56, .str.202, __key___8);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p3);
    call {:si_unique_call 2533} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i57);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 2888);
    call {:si_unique_call 2534} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i58);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $p59 := $i2p.i64.ref($i58);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2535} __init_waitqueue_head($p59, .str.203, __key___9);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p3);
    call {:si_unique_call 2536} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i60);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i61 := $add.i64($i60, 2928);
    call {:si_unique_call 2537} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i61);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p62 := $i2p.i64.ref($i61);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2538} __init_waitqueue_head($p62, .str.204, __key___10);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p3);
    call {:si_unique_call 2539} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i63);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 2968);
    call {:si_unique_call 2540} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i64);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $p65 := $i2p.i64.ref($i64);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, 0);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p3);
    call {:si_unique_call 2541} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i66);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $i67 := $add.i64($i66, 2976);
    call {:si_unique_call 2542} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i67);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $p68 := $i2p.i64.ref($i67);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} atomic_set($p68, 0);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p3);
    call {:si_unique_call 2544} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i69);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, 134768);
    call {:si_unique_call 2545} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i70);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $p71 := $i2p.i64.ref($i70);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2546} INIT_LIST_HEAD($p71);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p3);
    call {:si_unique_call 2547} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i72);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i72, 134784);
    call {:si_unique_call 2548} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i73);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $p74 := $i2p.i64.ref($i73);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, 0);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p3);
    call {:si_unique_call 2549} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i75);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i76 := $add.i64($i75, 2104);
    call {:si_unique_call 2550} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i76);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i77 := $add.i64(920, 0);
    call {:si_unique_call 2551} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i77);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p0);
    call {:si_unique_call 2552} {:cexpr "__cil_tmp85"} boogie_si_record_i64($i78);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $i79 := $add.i64($i78, 1016);
    call {:si_unique_call 2553} {:cexpr "__cil_tmp86"} boogie_si_record_i64($i79);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p80 := $i2p.i64.ref($i79);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    call {:si_unique_call 2554} {:cexpr "__cil_tmp88"} boogie_si_record_i64($i82);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, $i77);
    call {:si_unique_call 2555} {:cexpr "__cil_tmp89"} boogie_si_record_i64($i83);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $p84 := $i2p.i64.ref($i83);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.0, $p84);
    call {:si_unique_call 2556} {:cexpr "__cil_tmp90"} boogie_si_record_i64($i85);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i64.i32($i85);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $p87 := $i2p.i64.ref($i76);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, $i86);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p3);
    call {:si_unique_call 2557} {:cexpr "__cil_tmp91"} boogie_si_record_i64($i88);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i89 := $add.i64($i88, 2108);
    call {:si_unique_call 2558} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i89);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i90 := $add.i64(920, 56);
    call {:si_unique_call 2559} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i90);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p0);
    call {:si_unique_call 2560} {:cexpr "__cil_tmp95"} boogie_si_record_i64($i91);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i92 := $add.i64($i91, 1016);
    call {:si_unique_call 2561} {:cexpr "__cil_tmp96"} boogie_si_record_i64($i92);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $p93 := $i2p.i64.ref($i92);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p94);
    call {:si_unique_call 2562} {:cexpr "__cil_tmp98"} boogie_si_record_i64($i95);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i96 := $add.i64($i95, $i90);
    call {:si_unique_call 2563} {:cexpr "__cil_tmp99"} boogie_si_record_i64($i96);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $p97 := $i2p.i64.ref($i96);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i98 := $load.i64($M.0, $p97);
    call {:si_unique_call 2564} {:cexpr "__cil_tmp100"} boogie_si_record_i64($i98);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i64.i32($i98);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $p100 := $i2p.i64.ref($i89);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p100, $i99);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p3);
    call {:si_unique_call 2565} {:cexpr "__cil_tmp101"} boogie_si_record_i64($i101);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i102 := $add.i64($i101, 2116);
    call {:si_unique_call 2566} {:cexpr "__cil_tmp102"} boogie_si_record_i64($i102);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i103 := $add.i64(920, 112);
    call {:si_unique_call 2567} {:cexpr "__cil_tmp104"} boogie_si_record_i64($i103);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i104 := $p2i.ref.i64($p0);
    call {:si_unique_call 2568} {:cexpr "__cil_tmp105"} boogie_si_record_i64($i104);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i105 := $add.i64($i104, 1016);
    call {:si_unique_call 2569} {:cexpr "__cil_tmp106"} boogie_si_record_i64($i105);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $p106 := $i2p.i64.ref($i105);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p107);
    call {:si_unique_call 2570} {:cexpr "__cil_tmp108"} boogie_si_record_i64($i108);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i109 := $add.i64($i108, $i103);
    call {:si_unique_call 2571} {:cexpr "__cil_tmp109"} boogie_si_record_i64($i109);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $p110 := $i2p.i64.ref($i109);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i111 := $load.i64($M.0, $p110);
    call {:si_unique_call 2572} {:cexpr "__cil_tmp110"} boogie_si_record_i64($i111);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i64.i32($i111);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $p113 := $i2p.i64.ref($i102);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, $i112);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p3);
    call {:si_unique_call 2573} {:cexpr "__cil_tmp111"} boogie_si_record_i64($i114);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $i115 := $add.i64($i114, 134378);
    call {:si_unique_call 2574} {:cexpr "__cil_tmp112"} boogie_si_record_i64($i115);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, enable_fbdev);
    call {:si_unique_call 2575} {:cexpr "__cil_tmp114"} boogie_si_record_i32($i116);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $p118 := $i2p.i64.ref($i115);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i119 := $zext.i1.i8($i117);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p118, $i119);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p3);
    call {:si_unique_call 2576} {:cexpr "__cil_tmp115"} boogie_si_record_i64($i120);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i121 := $add.i64($i120, 2184);
    call {:si_unique_call 2577} {:cexpr "__cil_tmp116"} boogie_si_record_i64($i121);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $p122 := $i2p.i64.ref($i121);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2578} mutex_lock($p122);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i123 := $or.i64(2415919104, 2);
    call {:si_unique_call 2579} {:cexpr "__cil_tmp119"} boogie_si_record_i64($i123);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i64.i32($i123);
    call {:si_unique_call 2580} {:cexpr "__cil_tmp120"} boogie_si_record_i32($i124);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2581} vmw_write($p3, 0, $i124);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2582} $i125 := vmw_read($p3, 0);
    call {:si_unique_call 2583} {:cexpr "svga_id"} boogie_si_record_i32($i125);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i126 := $or.i64(2415919104, 2);
    call {:si_unique_call 2584} {:cexpr "__cil_tmp122"} boogie_si_record_i64($i126);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i127 := $zext.i32.i64($i125);
    call {:si_unique_call 2585} {:cexpr "__cil_tmp123"} boogie_si_record_i64($i127);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, $i126);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p3);
    call {:si_unique_call 2600} {:cexpr "__cil_tmp127"} boogie_si_record_i64($i134);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i135 := $add.i64($i134, 2156);
    call {:si_unique_call 2601} {:cexpr "__cil_tmp128"} boogie_si_record_i64($i135);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2602} $i136 := vmw_read($p3, 17);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p137 := $i2p.i64.ref($i135);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p137, $i136);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i138 := $p2i.ref.i64($p3);
    call {:si_unique_call 2603} {:cexpr "__cil_tmp129"} boogie_si_record_i64($i138);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i139 := $add.i64($i138, 2112);
    call {:si_unique_call 2604} {:cexpr "__cil_tmp130"} boogie_si_record_i64($i139);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2605} $i140 := vmw_read($p3, 15);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $p141 := $i2p.i64.ref($i139);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p141, $i140);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i142 := $p2i.ref.i64($p3);
    call {:si_unique_call 2606} {:cexpr "__cil_tmp131"} boogie_si_record_i64($i142);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i143 := $add.i64($i142, 2120);
    call {:si_unique_call 2607} {:cexpr "__cil_tmp132"} boogie_si_record_i64($i143);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2608} $i144 := vmw_read($p3, 19);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $p145 := $i2p.i64.ref($i143);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p145, $i144);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i146 := $p2i.ref.i64($p3);
    call {:si_unique_call 2609} {:cexpr "__cil_tmp133"} boogie_si_record_i64($i146);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i147 := $add.i64($i146, 2124);
    call {:si_unique_call 2610} {:cexpr "__cil_tmp134"} boogie_si_record_i64($i147);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2611} $i148 := vmw_read($p3, 4);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $p149 := $i2p.i64.ref($i147);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p149, $i148);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i150 := $p2i.ref.i64($p3);
    call {:si_unique_call 2612} {:cexpr "__cil_tmp135"} boogie_si_record_i64($i150);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i151 := $add.i64($i150, 2128);
    call {:si_unique_call 2613} {:cexpr "__cil_tmp136"} boogie_si_record_i64($i151);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2614} $i152 := vmw_read($p3, 5);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $p153 := $i2p.i64.ref($i151);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p153, $i152);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2615} vmw_get_initial_size($p3);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i154 := $p2i.ref.i64($p3);
    call {:si_unique_call 2616} {:cexpr "__cil_tmp137"} boogie_si_record_i64($i154);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i155 := $add.i64($i154, 2156);
    call {:si_unique_call 2617} {:cexpr "__cil_tmp138"} boogie_si_record_i64($i155);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $p156 := $i2p.i64.ref($i155);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.0, $p156);
    call {:si_unique_call 2618} {:cexpr "__cil_tmp139"} boogie_si_record_i32($i157);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i158 := $and.i32($i157, 1048576);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i159 := $ne.i32($i158, 0);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i159} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i168 := $p2i.ref.i64($p3);
    call {:si_unique_call 2625} {:cexpr "__cil_tmp144"} boogie_si_record_i64($i168);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i169 := $add.i64($i168, 2156);
    call {:si_unique_call 2626} {:cexpr "__cil_tmp145"} boogie_si_record_i64($i169);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p170 := $i2p.i64.ref($i169);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.0, $p170);
    call {:si_unique_call 2627} {:cexpr "__cil_tmp146"} boogie_si_record_i32($i171);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i172 := $and.i32($i171, 4194304);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i172, 0);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i173 == 1);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i194 := $p2i.ref.i64($p3);
    call {:si_unique_call 2642} {:cexpr "__cil_tmp159"} boogie_si_record_i64($i194);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $i195 := $add.i64($i194, 2172);
    call {:si_unique_call 2643} {:cexpr "__cil_tmp160"} boogie_si_record_i64($i195);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $p196 := $i2p.i64.ref($i195);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p196, 536870912);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i197 := $p2i.ref.i64($p3);
    call {:si_unique_call 2644} {:cexpr "__cil_tmp161"} boogie_si_record_i64($i197);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $i198 := $add.i64($i197, 2184);
    call {:si_unique_call 2645} {:cexpr "__cil_tmp162"} boogie_si_record_i64($i198);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $p199 := $i2p.i64.ref($i198);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2646} mutex_unlock($p199);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i200 := $p2i.ref.i64($p3);
    call {:si_unique_call 2647} {:cexpr "__cil_tmp164"} boogie_si_record_i64($i200);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $i201 := $add.i64($i200, 2156);
    call {:si_unique_call 2648} {:cexpr "__cil_tmp165"} boogie_si_record_i64($i201);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $p202 := $i2p.i64.ref($i201);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.0, $p202);
    call {:si_unique_call 2649} {:cexpr "__cil_tmp166"} boogie_si_record_i32($i203);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2650} vmw_print_capabilities($i203);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i204 := $p2i.ref.i64($p3);
    call {:si_unique_call 2651} {:cexpr "__cil_tmp167"} boogie_si_record_i64($i204);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i205 := $add.i64($i204, 2156);
    call {:si_unique_call 2652} {:cexpr "__cil_tmp168"} boogie_si_record_i64($i205);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p206 := $i2p.i64.ref($i205);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i207 := $load.i32($M.0, $p206);
    call {:si_unique_call 2653} {:cexpr "__cil_tmp169"} boogie_si_record_i32($i207);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $i208 := $and.i32($i207, 1048576);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i209 := $ne.i32($i208, 0);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i220 := $p2i.ref.i64($p3);
    call {:si_unique_call 2662} {:cexpr "__cil_tmp176"} boogie_si_record_i64($i220);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i221 := $add.i64($i220, 2156);
    call {:si_unique_call 2663} {:cexpr "__cil_tmp177"} boogie_si_record_i64($i221);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p222 := $i2p.i64.ref($i221);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i223 := $load.i32($M.0, $p222);
    call {:si_unique_call 2664} {:cexpr "__cil_tmp178"} boogie_si_record_i32($i223);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $i224 := $and.i32($i223, 4194304);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i225 := $ne.i32($i224, 0);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i225} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i237 := $p2i.ref.i64($p3);
    call {:si_unique_call 2674} {:cexpr "__cil_tmp186"} boogie_si_record_i64($i237);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i238 := $add.i64($i237, 2108);
    call {:si_unique_call 2675} {:cexpr "__cil_tmp187"} boogie_si_record_i64($i238);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $p239 := $i2p.i64.ref($i238);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i240 := $load.i32($M.0, $p239);
    call {:si_unique_call 2676} {:cexpr "__cil_tmp188"} boogie_si_record_i32($i240);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i241 := $p2i.ref.i64($p3);
    call {:si_unique_call 2677} {:cexpr "__cil_tmp189"} boogie_si_record_i64($i241);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $i242 := $add.i64($i241, 2112);
    call {:si_unique_call 2678} {:cexpr "__cil_tmp190"} boogie_si_record_i64($i242);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $p243 := $i2p.i64.ref($i242);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i244 := $load.i32($M.0, $p243);
    call {:si_unique_call 2679} {:cexpr "__cil_tmp191"} boogie_si_record_i32($i244);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i245 := $udiv.i32($i244, 1024);
    call {:si_unique_call 2680} {:cexpr "__cil_tmp192"} boogie_si_record_i32($i245);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2681} vslice_dummy_var_97 := printk.ref.i32.i32(.str.210, $i240, $i245);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i247 := $p2i.ref.i64($p3);
    call {:si_unique_call 2682} {:cexpr "__cil_tmp193"} boogie_si_record_i64($i247);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i248 := $add.i64($i247, 2116);
    call {:si_unique_call 2683} {:cexpr "__cil_tmp194"} boogie_si_record_i64($i248);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $p249 := $i2p.i64.ref($i248);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $i250 := $load.i32($M.0, $p249);
    call {:si_unique_call 2684} {:cexpr "__cil_tmp195"} boogie_si_record_i32($i250);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i251 := $p2i.ref.i64($p3);
    call {:si_unique_call 2685} {:cexpr "__cil_tmp196"} boogie_si_record_i64($i251);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i252 := $add.i64($i251, 2120);
    call {:si_unique_call 2686} {:cexpr "__cil_tmp197"} boogie_si_record_i64($i252);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $p253 := $i2p.i64.ref($i252);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i254 := $load.i32($M.0, $p253);
    call {:si_unique_call 2687} {:cexpr "__cil_tmp198"} boogie_si_record_i32($i254);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i255 := $udiv.i32($i254, 1024);
    call {:si_unique_call 2688} {:cexpr "__cil_tmp199"} boogie_si_record_i32($i255);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2689} vslice_dummy_var_98 := printk.ref.i32.i32(.str.211, $i250, $i255);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} $i257 := vmw_ttm_global_init($p3);
    call {:si_unique_call 2691} {:cexpr "ret"} boogie_si_record_i32($i257);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i258 := $ne.i32($i257, 0);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $i259 := $zext.i1.i32($i258);
    call {:si_unique_call 2692} {:cexpr "__cil_tmp200"} boogie_si_record_i32($i259);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i260 := $ne.i32($i259, 0);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i261 := $xor.i1($i260, 1);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i262 := $zext.i1.i32($i261);
    call {:si_unique_call 2693} {:cexpr "__cil_tmp201"} boogie_si_record_i32($i262);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i263 := $ne.i32($i262, 0);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $i264 := $xor.i1($i263, 1);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i265 := $zext.i1.i32($i264);
    call {:si_unique_call 2694} {:cexpr "__cil_tmp202"} boogie_si_record_i32($i265);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i266 := $sext.i32.i64($i265);
    call {:si_unique_call 2695} {:cexpr "__cil_tmp203"} boogie_si_record_i64($i266);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2696} $i267 := ldv__builtin_expect($i266, 0);
    call {:si_unique_call 2697} {:cexpr "tmp___9"} boogie_si_record_i64($i267);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i268 := $ne.i64($i267, 0);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i269 := $p2i.ref.i64($p3);
    call {:si_unique_call 2698} {:cexpr "__cil_tmp204"} boogie_si_record_i64($i269);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i270 := $add.i64($i269, 134392);
    call {:si_unique_call 2699} {:cexpr "__cil_tmp205"} boogie_si_record_i64($i270);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $p271 := $i2p.i64.ref($i270);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2700} vmw_master_init($p271);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i272 := $p2i.ref.i64($p3);
    call {:si_unique_call 2701} {:cexpr "__cil_tmp207"} boogie_si_record_i64($i272);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i273 := $add.i64($i272, 134392);
    call {:si_unique_call 2702} {:cexpr "__cil_tmp208"} boogie_si_record_i64($i273);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $p274 := $i2p.i64.ref($i273);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i275 := $trunc.i8.i1(0);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2703} ttm_lock_set_kill($p274, $i275, 15);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i276 := $p2i.ref.i64($p3);
    call {:si_unique_call 2704} {:cexpr "__cil_tmp211"} boogie_si_record_i64($i276);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i277 := $add.i64($i276, 134384);
    call {:si_unique_call 2705} {:cexpr "__cil_tmp212"} boogie_si_record_i64($i277);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i278 := $p2i.ref.i64($p3);
    call {:si_unique_call 2706} {:cexpr "__cil_tmp213"} boogie_si_record_i64($i278);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i279 := $add.i64($i278, 134392);
    call {:si_unique_call 2707} {:cexpr "__cil_tmp214"} boogie_si_record_i64($i279);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $p280 := $i2p.i64.ref($i279);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $p281 := $i2p.i64.ref($i277);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p281, $p280);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $p282 := $bitcast.ref.ref($p3);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i283 := $add.i64(1768, 16);
    call {:si_unique_call 2708} {:cexpr "__cil_tmp217"} boogie_si_record_i64($i283);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $i284 := $p2i.ref.i64($p3);
    call {:si_unique_call 2709} {:cexpr "__cil_tmp218"} boogie_si_record_i64($i284);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i285 := $add.i64($i284, $i283);
    call {:si_unique_call 2710} {:cexpr "__cil_tmp219"} boogie_si_record_i64($i285);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $p286 := $i2p.i64.ref($i285);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $p287 := $load.ref($M.0, $p286);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $p288 := $bitcast.ref.ref($p287);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i289 := $trunc.i8.i1(0);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2711} $i290 := ttm_bo_device_init($p282, $p288, vmw_bo_driver, 1048576, $i289);
    call {:si_unique_call 2712} {:cexpr "ret"} boogie_si_record_i32($i290);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i291 := $ne.i32($i290, 0);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i292 := $zext.i1.i32($i291);
    call {:si_unique_call 2713} {:cexpr "__cil_tmp224"} boogie_si_record_i32($i292);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i293 := $ne.i32($i292, 0);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i294 := $xor.i1($i293, 1);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i295 := $zext.i1.i32($i294);
    call {:si_unique_call 2714} {:cexpr "__cil_tmp225"} boogie_si_record_i32($i295);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i296 := $ne.i32($i295, 0);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i297 := $xor.i1($i296, 1);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i298 := $zext.i1.i32($i297);
    call {:si_unique_call 2715} {:cexpr "__cil_tmp226"} boogie_si_record_i32($i298);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $i299 := $sext.i32.i64($i298);
    call {:si_unique_call 2716} {:cexpr "__cil_tmp227"} boogie_si_record_i64($i299);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2717} $i300 := ldv__builtin_expect($i299, 0);
    call {:si_unique_call 2718} {:cexpr "tmp___10"} boogie_si_record_i64($i300);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i301 := $ne.i64($i300, 0);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i301} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p304 := $bitcast.ref.ref($p3);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i305 := $p2i.ref.i64($p3);
    call {:si_unique_call 2721} {:cexpr "__cil_tmp229"} boogie_si_record_i64($i305);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i306 := $add.i64($i305, 2112);
    call {:si_unique_call 2722} {:cexpr "__cil_tmp230"} boogie_si_record_i64($i306);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p307 := $i2p.i64.ref($i306);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i308 := $load.i32($M.0, $p307);
    call {:si_unique_call 2723} {:cexpr "__cil_tmp231"} boogie_si_record_i32($i308);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i309 := $lshr.i32($i308, 12);
    call {:si_unique_call 2724} {:cexpr "__cil_tmp232"} boogie_si_record_i32($i309);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i310 := $zext.i32.i64($i309);
    call {:si_unique_call 2725} {:cexpr "__cil_tmp233"} boogie_si_record_i64($i310);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2726} $i311 := ttm_bo_init_mm($p304, 2, $i310);
    call {:si_unique_call 2727} {:cexpr "ret"} boogie_si_record_i32($i311);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i312 := $ne.i32($i311, 0);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $i313 := $zext.i1.i32($i312);
    call {:si_unique_call 2728} {:cexpr "__cil_tmp234"} boogie_si_record_i32($i313);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i314 := $ne.i32($i313, 0);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i315 := $xor.i1($i314, 1);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $i316 := $zext.i1.i32($i315);
    call {:si_unique_call 2729} {:cexpr "__cil_tmp235"} boogie_si_record_i32($i316);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i317 := $ne.i32($i316, 0);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i318 := $xor.i1($i317, 1);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i319 := $zext.i1.i32($i318);
    call {:si_unique_call 2730} {:cexpr "__cil_tmp236"} boogie_si_record_i32($i319);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i320 := $sext.i32.i64($i319);
    call {:si_unique_call 2731} {:cexpr "__cil_tmp237"} boogie_si_record_i64($i320);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2732} $i321 := ldv__builtin_expect($i320, 0);
    call {:si_unique_call 2733} {:cexpr "tmp___11"} boogie_si_record_i64($i321);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i322 := $ne.i64($i321, 0);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i322} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i325 := $p2i.ref.i64($p3);
    call {:si_unique_call 2736} {:cexpr "__cil_tmp238"} boogie_si_record_i64($i325);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i326 := $add.i64($i325, 2176);
    call {:si_unique_call 2737} {:cexpr "__cil_tmp239"} boogie_si_record_i64($i326);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $p327 := $i2p.i64.ref($i326);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p327, 1);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $p328 := $bitcast.ref.ref($p3);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i329 := $p2i.ref.i64($p3);
    call {:si_unique_call 2738} {:cexpr "__cil_tmp241"} boogie_si_record_i64($i329);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i330 := $add.i64($i329, 2164);
    call {:si_unique_call 2739} {:cexpr "__cil_tmp242"} boogie_si_record_i64($i330);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p331 := $i2p.i64.ref($i330);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i332 := $load.i32($M.0, $p331);
    call {:si_unique_call 2740} {:cexpr "__cil_tmp243"} boogie_si_record_i32($i332);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i333 := $zext.i32.i64($i332);
    call {:si_unique_call 2741} {:cexpr "__cil_tmp244"} boogie_si_record_i64($i333);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2742} $i334 := ttm_bo_init_mm($p328, 3, $i333);
    call {:si_unique_call 2743} {:cexpr "tmp___12"} boogie_si_record_i32($i334);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i335 := $ne.i32($i334, 0);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i335} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i340 := $p2i.ref.i64($p3);
    call {:si_unique_call 2747} {:cexpr "__cil_tmp247"} boogie_si_record_i64($i340);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i341 := $add.i64($i340, 2152);
    call {:si_unique_call 2748} {:cexpr "__cil_tmp248"} boogie_si_record_i64($i341);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i342 := $p2i.ref.i64($p3);
    call {:si_unique_call 2749} {:cexpr "__cil_tmp249"} boogie_si_record_i64($i342);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i343 := $add.i64($i342, 2116);
    call {:si_unique_call 2750} {:cexpr "__cil_tmp250"} boogie_si_record_i64($i343);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $p344 := $i2p.i64.ref($i343);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i345 := $load.i32($M.0, $p344);
    call {:si_unique_call 2751} {:cexpr "__cil_tmp251"} boogie_si_record_i32($i345);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $i346 := $zext.i32.i64($i345);
    call {:si_unique_call 2752} {:cexpr "__cil_tmp252"} boogie_si_record_i64($i346);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i347 := $p2i.ref.i64($p3);
    call {:si_unique_call 2753} {:cexpr "__cil_tmp253"} boogie_si_record_i64($i347);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i348 := $add.i64($i347, 2120);
    call {:si_unique_call 2754} {:cexpr "__cil_tmp254"} boogie_si_record_i64($i348);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $p349 := $i2p.i64.ref($i348);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.0, $p349);
    call {:si_unique_call 2755} {:cexpr "__cil_tmp255"} boogie_si_record_i32($i350);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i351 := $zext.i32.i64($i350);
    call {:si_unique_call 2756} {:cexpr "__cil_tmp256"} boogie_si_record_i64($i351);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2757} $i352 := drm_mtrr_add($i346, $i351, 1);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $p353 := $i2p.i64.ref($i341);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p353, $i352);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i354 := $p2i.ref.i64($p3);
    call {:si_unique_call 2758} {:cexpr "__cil_tmp257"} boogie_si_record_i64($i354);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i355 := $add.i64($i354, 2116);
    call {:si_unique_call 2759} {:cexpr "__cil_tmp258"} boogie_si_record_i64($i355);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $p356 := $i2p.i64.ref($i355);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i357 := $load.i32($M.0, $p356);
    call {:si_unique_call 2760} {:cexpr "__cil_tmp259"} boogie_si_record_i32($i357);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i358 := $zext.i32.i64($i357);
    call {:si_unique_call 2761} {:cexpr "__cil_tmp260"} boogie_si_record_i64($i358);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i359 := $p2i.ref.i64($p3);
    call {:si_unique_call 2762} {:cexpr "__cil_tmp261"} boogie_si_record_i64($i359);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i360 := $add.i64($i359, 2120);
    call {:si_unique_call 2763} {:cexpr "__cil_tmp262"} boogie_si_record_i64($i360);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $p361 := $i2p.i64.ref($i360);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i362 := $load.i32($M.0, $p361);
    call {:si_unique_call 2764} {:cexpr "__cil_tmp263"} boogie_si_record_i32($i362);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i363 := $zext.i32.i64($i362);
    call {:si_unique_call 2765} {:cexpr "__cil_tmp264"} boogie_si_record_i64($i363);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2766} $p364 := ioremap_wc($i358, $i363);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i365 := $p2i.ref.i64($p3);
    call {:si_unique_call 2767} {:cexpr "__cil_tmp265"} boogie_si_record_i64($i365);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $i366 := $add.i64($i365, 2144);
    call {:si_unique_call 2768} {:cexpr "__cil_tmp266"} boogie_si_record_i64($i366);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $p368 := $i2p.i64.ref($i366);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p368, $p364);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i369 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 2769} {:cexpr "__cil_tmp268"} boogie_si_record_i64($i369);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i370 := $p2i.ref.i64($p3);
    call {:si_unique_call 2770} {:cexpr "__cil_tmp269"} boogie_si_record_i64($i370);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i371 := $add.i64($i370, 2144);
    call {:si_unique_call 2771} {:cexpr "__cil_tmp270"} boogie_si_record_i64($i371);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p372 := $i2p.i64.ref($i371);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $p373 := $load.ref($M.0, $p372);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i374 := $p2i.ref.i64($p373);
    call {:si_unique_call 2772} {:cexpr "__cil_tmp272"} boogie_si_record_i64($i374);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i375 := $eq.i64($i374, $i369);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i376 := $zext.i1.i32($i375);
    call {:si_unique_call 2773} {:cexpr "__cil_tmp273"} boogie_si_record_i32($i376);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i377 := $ne.i32($i376, 0);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i378 := $xor.i1($i377, 1);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i379 := $zext.i1.i32($i378);
    call {:si_unique_call 2774} {:cexpr "__cil_tmp274"} boogie_si_record_i32($i379);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i380 := $ne.i32($i379, 0);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i381 := $xor.i1($i380, 1);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i382 := $zext.i1.i32($i381);
    call {:si_unique_call 2775} {:cexpr "__cil_tmp275"} boogie_si_record_i32($i382);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i383 := $sext.i32.i64($i382);
    call {:si_unique_call 2776} {:cexpr "__cil_tmp276"} boogie_si_record_i64($i383);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2777} $i384 := ldv__builtin_expect($i383, 0);
    call {:si_unique_call 2778} {:cexpr "tmp___14"} boogie_si_record_i64($i384);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i385 := $ne.i64($i384, 0);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i385} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i388 := $p2i.ref.i64($p3);
    call {:si_unique_call 2794} {:cexpr "__cil_tmp277"} boogie_si_record_i64($i388);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $i389 := $add.i64($i388, 2156);
    call {:si_unique_call 2795} {:cexpr "__cil_tmp278"} boogie_si_record_i64($i389);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $p390 := $i2p.i64.ref($i389);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i391 := $load.i32($M.0, $p390);
    call {:si_unique_call 2796} {:cexpr "__cil_tmp279"} boogie_si_record_i32($i391);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $i392 := $and.i32($i391, 524288);
    call {:si_unique_call 2797} {:cexpr "__cil_tmp280"} boogie_si_record_i32($i392);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i393 := $ne.i32($i392, 0);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i393} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i393 == 1);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i394 := $p2i.ref.i64($p3);
    call {:si_unique_call 2798} {:cexpr "__cil_tmp281"} boogie_si_record_i64($i394);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i395 := $add.i64($i394, 2156);
    call {:si_unique_call 2799} {:cexpr "__cil_tmp282"} boogie_si_record_i64($i395);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $p396 := $i2p.i64.ref($i395);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $i397 := $load.i32($M.0, $p396);
    call {:si_unique_call 2800} {:cexpr "__cil_tmp283"} boogie_si_record_i32($i397);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i398 := $and.i32($i397, 131072);
    call {:si_unique_call 2801} {:cexpr "__cil_tmp284"} boogie_si_record_i32($i398);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i399 := $ne.i32($i398, 0);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i399} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i399 == 1);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2802} $i400 := vmw_fifo_have_pitchlock($p3);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i401 := $zext.i1.i8($i400);
    call {:si_unique_call 2803} {:cexpr "tmp___15"} boogie_si_record_i8($i401);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i402 := $trunc.i8.i1($i401);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i402} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i402 == 1);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2804} vslice_dummy_var_105 := drm_err.ref.ref(.str.196, .str.216);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i404 := $sub.i32(0, 38);
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $i598 := $p2i.ref.i64($p3);
    call {:si_unique_call 2805} {:cexpr "__cil_tmp374"} boogie_si_record_i64($i598);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i599 := $add.i64($i598, 2144);
    call {:si_unique_call 2806} {:cexpr "__cil_tmp375"} boogie_si_record_i64($i599);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $p600 := $i2p.i64.ref($i599);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p601 := $load.ref($M.0, $p600);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p602 := $bitcast.ref.ref($p601);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2807} iounmap($p602);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $i387 := $i404;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i603 := $p2i.ref.i64($p3);
    call {:si_unique_call 2780} {:cexpr "__cil_tmp378"} boogie_si_record_i64($i603);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i604 := $add.i64($i603, 2152);
    call {:si_unique_call 2781} {:cexpr "__cil_tmp379"} boogie_si_record_i64($i604);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $p605 := $i2p.i64.ref($i604);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i606 := $load.i32($M.0, $p605);
    call {:si_unique_call 2782} {:cexpr "__cil_tmp380"} boogie_si_record_i32($i606);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i607 := $p2i.ref.i64($p3);
    call {:si_unique_call 2783} {:cexpr "__cil_tmp381"} boogie_si_record_i64($i607);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i608 := $add.i64($i607, 2116);
    call {:si_unique_call 2784} {:cexpr "__cil_tmp382"} boogie_si_record_i64($i608);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $p609 := $i2p.i64.ref($i608);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i610 := $load.i32($M.0, $p609);
    call {:si_unique_call 2785} {:cexpr "__cil_tmp383"} boogie_si_record_i32($i610);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i611 := $zext.i32.i64($i610);
    call {:si_unique_call 2786} {:cexpr "__cil_tmp384"} boogie_si_record_i64($i611);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i612 := $p2i.ref.i64($p3);
    call {:si_unique_call 2787} {:cexpr "__cil_tmp385"} boogie_si_record_i64($i612);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $i613 := $add.i64($i612, 2120);
    call {:si_unique_call 2788} {:cexpr "__cil_tmp386"} boogie_si_record_i64($i613);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $p614 := $i2p.i64.ref($i613);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i615 := $load.i32($M.0, $p614);
    call {:si_unique_call 2789} {:cexpr "__cil_tmp387"} boogie_si_record_i32($i615);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i616 := $zext.i32.i64($i615);
    call {:si_unique_call 2790} {:cexpr "__cil_tmp388"} boogie_si_record_i64($i616);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2791} vslice_dummy_var_104 := drm_mtrr_del($i606, $i611, $i616, 1);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i618 := $p2i.ref.i64($p3);
    call {:si_unique_call 2792} {:cexpr "__cil_tmp389"} boogie_si_record_i64($i618);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i619 := $add.i64($i618, 2176);
    call {:si_unique_call 2793} {:cexpr "__cil_tmp390"} boogie_si_record_i64($i619);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $p620 := $i2p.i64.ref($i619);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i621 := $load.i8($M.0, $p620);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $i622 := $trunc.i8.i1($i621);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i622} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i622 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p625 := $bitcast.ref.ref($p3);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2927} vslice_dummy_var_121 := ttm_bo_clean_mm($p625, 2);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i324 := $i387;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $p627 := $bitcast.ref.ref($p3);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2735} vslice_dummy_var_101 := ttm_bo_device_release($p627);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $i303 := $i324;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2720} vmw_ttm_global_release($p3);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i133 := $i303;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i629 := $p2i.ref.i64($p3);
    call {:si_unique_call 2590} {:cexpr "__cil_tmp394"} boogie_si_record_i64($i629);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $i630 := $add.i64($i629, 2704);
    call {:si_unique_call 2591} {:cexpr "__cil_tmp395"} boogie_si_record_i64($i630);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p631 := $i2p.i64.ref($i630);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2592} idr_destroy($p631);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i632 := $p2i.ref.i64($p3);
    call {:si_unique_call 2593} {:cexpr "__cil_tmp397"} boogie_si_record_i64($i632);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i633 := $add.i64($i632, 2656);
    call {:si_unique_call 2594} {:cexpr "__cil_tmp398"} boogie_si_record_i64($i633);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $p634 := $i2p.i64.ref($i633);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2595} idr_destroy($p634);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $i635 := $p2i.ref.i64($p3);
    call {:si_unique_call 2596} {:cexpr "__cil_tmp400"} boogie_si_record_i64($i635);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i636 := $add.i64($i635, 2752);
    call {:si_unique_call 2597} {:cexpr "__cil_tmp401"} boogie_si_record_i64($i636);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p637 := $i2p.i64.ref($i636);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} idr_destroy($p637);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $p638 := $bitcast.ref.ref($p3);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2599} kfree($p638);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i18 := $i133;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb114:
    assume $i622 == 1;
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $p623 := $bitcast.ref.ref($p3);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2926} vslice_dummy_var_120 := ttm_bo_clean_mm($p623, 3);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb64:
    assume $i402 == 1;
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i405 := $p2i.ref.i64($p3);
    call {:si_unique_call 2808} {:cexpr "__cil_tmp285"} boogie_si_record_i64($i405);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $i406 := $add.i64($i405, 2872);
    call {:si_unique_call 2809} {:cexpr "__cil_tmp286"} boogie_si_record_i64($i406);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i407 := $p2i.ref.i64($p3);
    call {:si_unique_call 2810} {:cexpr "__cil_tmp288"} boogie_si_record_i64($i407);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i408 := $add.i64($i407, 1832);
    call {:si_unique_call 2811} {:cexpr "__cil_tmp289"} boogie_si_record_i64($i408);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $p409 := $i2p.i64.ref($i408);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $p410 := $load.ref($M.0, $p409);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $p411 := $bitcast.ref.ref($p410);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2812} $p412 := ttm_object_device_init($p411, 12);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $p413 := $i2p.i64.ref($i406);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p413, $p412);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i414 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 2813} {:cexpr "__cil_tmp293"} boogie_si_record_i64($i414);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i415 := $p2i.ref.i64($p3);
    call {:si_unique_call 2814} {:cexpr "__cil_tmp294"} boogie_si_record_i64($i415);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i416 := $add.i64($i415, 2872);
    call {:si_unique_call 2815} {:cexpr "__cil_tmp295"} boogie_si_record_i64($i416);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $p417 := $i2p.i64.ref($i416);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $p418 := $load.ref($M.0, $p417);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i419 := $p2i.ref.i64($p418);
    call {:si_unique_call 2816} {:cexpr "__cil_tmp297"} boogie_si_record_i64($i419);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i420 := $eq.i64($i419, $i414);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i421 := $zext.i1.i32($i420);
    call {:si_unique_call 2817} {:cexpr "__cil_tmp298"} boogie_si_record_i32($i421);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i422 := $ne.i32($i421, 0);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $i423 := $xor.i1($i422, 1);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i424 := $zext.i1.i32($i423);
    call {:si_unique_call 2818} {:cexpr "__cil_tmp299"} boogie_si_record_i32($i424);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i425 := $ne.i32($i424, 0);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i426 := $xor.i1($i425, 1);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i427 := $zext.i1.i32($i426);
    call {:si_unique_call 2819} {:cexpr "__cil_tmp300"} boogie_si_record_i32($i427);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i428 := $sext.i32.i64($i427);
    call {:si_unique_call 2820} {:cexpr "__cil_tmp301"} boogie_si_record_i64($i428);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2821} $i429 := ldv__builtin_expect($i428, 0);
    call {:si_unique_call 2822} {:cexpr "tmp___16"} boogie_si_record_i64($i429);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i430 := $ne.i64($i429, 0);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i430} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i430 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i432 := $p2i.ref.i64($p0);
    call {:si_unique_call 2824} {:cexpr "__cil_tmp302"} boogie_si_record_i64($i432);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i433 := $add.i64($i432, 1064);
    call {:si_unique_call 2825} {:cexpr "__cil_tmp303"} boogie_si_record_i64($i433);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $p435 := $i2p.i64.ref($i433);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p435, $p2);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i436 := $p2i.ref.i64($p0);
    call {:si_unique_call 2826} {:cexpr "__cil_tmp304"} boogie_si_record_i64($i436);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i437 := $add.i64($i436, 1016);
    call {:si_unique_call 2827} {:cexpr "__cil_tmp305"} boogie_si_record_i64($i437);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $p438 := $i2p.i64.ref($i437);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $p439 := $load.ref($M.0, $p438);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2828} $i440 := pci_request_regions($p439, .str.218);
    call {:si_unique_call 2829} {:cexpr "ret"} boogie_si_record_i32($i440);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i441 := $p2i.ref.i64($p3);
    call {:si_unique_call 2830} {:cexpr "__cil_tmp307"} boogie_si_record_i64($i441);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i442 := $add.i64($i441, 134376);
    call {:si_unique_call 2831} {:cexpr "__cil_tmp308"} boogie_si_record_i64($i442);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i443 := $ne.i32($i440, 0);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i444 := $zext.i1.i32($i443);
    call {:si_unique_call 2832} {:cexpr "__cil_tmp309"} boogie_si_record_i32($i444);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $i445 := $ne.i32($i444, 0);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $p446 := $i2p.i64.ref($i442);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i447 := $zext.i1.i8($i445);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p446, $i447);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i448 := $p2i.ref.i64($p3);
    call {:si_unique_call 2833} {:cexpr "__cil_tmp310"} boogie_si_record_i64($i448);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i449 := $add.i64($i448, 134376);
    call {:si_unique_call 2834} {:cexpr "__cil_tmp311"} boogie_si_record_i64($i449);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $p450 := $i2p.i64.ref($i449);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i451 := $load.i8($M.0, $p450);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $i452 := $trunc.i8.i1($i451);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i452} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i452 == 1);
    assume {:verifier.code 0} true;
    $i472 := $i440;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $i473 := $p2i.ref.i64($p3);
    call {:si_unique_call 2850} {:cexpr "__cil_tmp319"} boogie_si_record_i64($i473);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $i474 := $add.i64($i473, 3008);
    call {:si_unique_call 2851} {:cexpr "__cil_tmp320"} boogie_si_record_i64($i474);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2852} $p475 := vmw_fence_manager_init($p3);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $p476 := $i2p.i64.ref($i474);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p476, $p475);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i477 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 2853} {:cexpr "__cil_tmp322"} boogie_si_record_i64($i477);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i478 := $p2i.ref.i64($p3);
    call {:si_unique_call 2854} {:cexpr "__cil_tmp323"} boogie_si_record_i64($i478);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i479 := $add.i64($i478, 3008);
    call {:si_unique_call 2855} {:cexpr "__cil_tmp324"} boogie_si_record_i64($i479);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $p480 := $i2p.i64.ref($i479);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $p481 := $load.ref($M.0, $p480);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i482 := $p2i.ref.i64($p481);
    call {:si_unique_call 2856} {:cexpr "__cil_tmp326"} boogie_si_record_i64($i482);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i483 := $eq.i64($i482, $i477);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i484 := $zext.i1.i32($i483);
    call {:si_unique_call 2857} {:cexpr "__cil_tmp327"} boogie_si_record_i32($i484);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i485 := $ne.i32($i484, 0);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i486 := $xor.i1($i485, 1);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i487 := $zext.i1.i32($i486);
    call {:si_unique_call 2858} {:cexpr "__cil_tmp328"} boogie_si_record_i32($i487);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i488 := $ne.i32($i487, 0);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i489 := $xor.i1($i488, 1);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $i490 := $zext.i1.i32($i489);
    call {:si_unique_call 2859} {:cexpr "__cil_tmp329"} boogie_si_record_i32($i490);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i491 := $sext.i32.i64($i490);
    call {:si_unique_call 2860} {:cexpr "__cil_tmp330"} boogie_si_record_i64($i491);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2861} $i492 := ldv__builtin_expect($i491, 0);
    call {:si_unique_call 2862} {:cexpr "tmp___18"} boogie_si_record_i64($i492);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i493 := $ne.i64($i492, 0);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i493} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i493 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i495 := $trunc.i8.i1(1);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2865} $i496 := vmw_3d_resource_inc($p3, $i495);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    call {:si_unique_call 2866} {:cexpr "ret"} boogie_si_record_i32($i496);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i497 := $ne.i32($i496, 0);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $i498 := $zext.i1.i32($i497);
    call {:si_unique_call 2867} {:cexpr "__cil_tmp332"} boogie_si_record_i32($i498);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i499 := $ne.i32($i498, 0);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i500 := $xor.i1($i499, 1);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i501 := $zext.i1.i32($i500);
    call {:si_unique_call 2868} {:cexpr "__cil_tmp333"} boogie_si_record_i32($i501);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i502 := $ne.i32($i501, 0);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $i503 := $xor.i1($i502, 1);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $i504 := $zext.i1.i32($i503);
    call {:si_unique_call 2869} {:cexpr "__cil_tmp334"} boogie_si_record_i32($i504);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i505 := $sext.i32.i64($i504);
    call {:si_unique_call 2870} {:cexpr "__cil_tmp335"} boogie_si_record_i64($i505);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2871} $i506 := ldv__builtin_expect($i505, 0);
    call {:si_unique_call 2872} {:cexpr "tmp___19"} boogie_si_record_i64($i506);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i507 := $ne.i64($i506, 0);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i507} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i507 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2876} vslice_dummy_var_109 := vmw_kms_save_vga($p3);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2877} $i510 := vmw_kms_init($p3);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    call {:si_unique_call 2878} {:cexpr "ret"} boogie_si_record_i32($i510);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i511 := $ne.i32($i510, 0);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i512 := $zext.i1.i32($i511);
    call {:si_unique_call 2879} {:cexpr "__cil_tmp336"} boogie_si_record_i32($i512);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i513 := $ne.i32($i512, 0);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i514 := $xor.i1($i513, 1);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $i515 := $zext.i1.i32($i514);
    call {:si_unique_call 2880} {:cexpr "__cil_tmp337"} boogie_si_record_i32($i515);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $i516 := $ne.i32($i515, 0);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $i517 := $xor.i1($i516, 1);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $i518 := $zext.i1.i32($i517);
    call {:si_unique_call 2881} {:cexpr "__cil_tmp338"} boogie_si_record_i32($i518);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $i519 := $sext.i32.i64($i518);
    call {:si_unique_call 2882} {:cexpr "__cil_tmp339"} boogie_si_record_i64($i519);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2883} $i520 := ldv__builtin_expect($i519, 0);
    call {:si_unique_call 2884} {:cexpr "tmp___20"} boogie_si_record_i64($i520);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $i521 := $ne.i64($i520, 0);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i521} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i521 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2887} vslice_dummy_var_110 := vmw_overlay_init($p3);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2888} $i524 := vmw_fifo_have_3d($p3);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i525 := $zext.i1.i8($i524);
    call {:si_unique_call 2889} {:cexpr "tmp___23"} boogie_si_record_i8($i525);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i526 := $trunc.i8.i1($i525);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i526} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i526 == 1);
    assume {:verifier.code 0} true;
    $p527 := .str.223;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2890} vslice_dummy_var_111 := printk.ref.ref(.str.224, $p527);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $i529 := $p2i.ref.i64($p3);
    call {:si_unique_call 2891} {:cexpr "__cil_tmp340"} boogie_si_record_i64($i529);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i530 := $add.i64($i529, 134378);
    call {:si_unique_call 2892} {:cexpr "__cil_tmp341"} boogie_si_record_i64($i530);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $p531 := $i2p.i64.ref($i530);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i532 := $load.i8($M.0, $p531);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i533 := $trunc.i8.i1($i532);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i533} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i533 == 1);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2894} vslice_dummy_var_113 := vmw_kms_restore_vga($p3);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $i536 := $trunc.i8.i1(1);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2895} vmw_3d_resource_dec($p3, $i536);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i537 := $p2i.ref.i64($p3);
    call {:si_unique_call 2896} {:cexpr "__cil_tmp343"} boogie_si_record_i64($i537);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $i538 := $add.i64($i537, 2156);
    call {:si_unique_call 2897} {:cexpr "__cil_tmp344"} boogie_si_record_i64($i538);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $p539 := $i2p.i64.ref($i538);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $i540 := $load.i32($M.0, $p539);
    call {:si_unique_call 2898} {:cexpr "__cil_tmp345"} boogie_si_record_i32($i540);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i541 := $and.i32($i540, 262144);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i542 := $ne.i32($i541, 0);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i542} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i542 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i556 := $p2i.ref.i64($p3);
    call {:si_unique_call 2910} {:cexpr "__cil_tmp350"} boogie_si_record_i64($i556);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $i557 := $add.i64($i556, 134632);
    call {:si_unique_call 2911} {:cexpr "__cil_tmp351"} boogie_si_record_i64($i557);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $p558 := $i2p.i64.ref($i557);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p558, vmwgfx_pm_notifier);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i559 := $p2i.ref.i64($p3);
    call {:si_unique_call 2912} {:cexpr "__cil_tmp352"} boogie_si_record_i64($i559);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $i560 := $add.i64($i559, 134632);
    call {:si_unique_call 2913} {:cexpr "__cil_tmp353"} boogie_si_record_i64($i560);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $p561 := $i2p.i64.ref($i560);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2914} vslice_dummy_var_115 := register_pm_notifier($p561);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb98:
    assume $i542 == 1;
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2899} $i543 := drm_irq_install($p0);
    call {:si_unique_call 2900} {:cexpr "ret"} boogie_si_record_i32($i543);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i544 := $ne.i32($i543, 0);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i545 := $zext.i1.i32($i544);
    call {:si_unique_call 2901} {:cexpr "__cil_tmp346"} boogie_si_record_i32($i545);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i546 := $ne.i32($i545, 0);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $i547 := $xor.i1($i546, 1);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $i548 := $zext.i1.i32($i547);
    call {:si_unique_call 2902} {:cexpr "__cil_tmp347"} boogie_si_record_i32($i548);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $i549 := $ne.i32($i548, 0);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i550 := $xor.i1($i549, 1);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i551 := $zext.i1.i32($i550);
    call {:si_unique_call 2903} {:cexpr "__cil_tmp348"} boogie_si_record_i32($i551);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i552 := $sext.i32.i64($i551);
    call {:si_unique_call 2904} {:cexpr "__cil_tmp349"} boogie_si_record_i64($i552);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2905} $i553 := ldv__builtin_expect($i552, 0);
    call {:si_unique_call 2906} {:cexpr "tmp___24"} boogie_si_record_i64($i553);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i554 := $ne.i64($i553, 0);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i554} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i554 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb100:
    assume $i554 == 1;
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2907} vslice_dummy_var_114 := drm_err.ref.ref.i32(.str.196, .str.225, $i543);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i563 := $p2i.ref.i64($p3);
    call {:si_unique_call 2908} {:cexpr "__cil_tmp355"} boogie_si_record_i64($i563);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $i564 := $add.i64($i563, 134378);
    call {:si_unique_call 2909} {:cexpr "__cil_tmp356"} boogie_si_record_i64($i564);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $p565 := $i2p.i64.ref($i564);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i566 := $load.i8($M.0, $p565);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i567 := $trunc.i8.i1($i566);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i567} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i567 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2916} vslice_dummy_var_117 := vmw_overlay_close($p3);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2917} vslice_dummy_var_118 := vmw_kms_close($p3);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $i522 := $i543;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i571 := $p2i.ref.i64($p3);
    call {:si_unique_call 2885} {:cexpr "__cil_tmp357"} boogie_si_record_i64($i571);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i572 := $add.i64($i571, 134378);
    call {:si_unique_call 2886} {:cexpr "__cil_tmp358"} boogie_si_record_i64($i572);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $p573 := $i2p.i64.ref($i572);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $i574 := $load.i8($M.0, $p573);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i575 := $trunc.i8.i1($i574);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i575} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i575 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i508 := $i522;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i578 := $p2i.ref.i64($p3);
    call {:si_unique_call 2873} {:cexpr "__cil_tmp360"} boogie_si_record_i64($i578);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i579 := $add.i64($i578, 3008);
    call {:si_unique_call 2874} {:cexpr "__cil_tmp361"} boogie_si_record_i64($i579);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $p580 := $i2p.i64.ref($i579);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $p581 := $load.ref($M.0, $p580);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2875} vmw_fence_manager_takedown($p581);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i494 := $i508;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i582 := $p2i.ref.i64($p3);
    call {:si_unique_call 2863} {:cexpr "__cil_tmp363"} boogie_si_record_i64($i582);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i583 := $add.i64($i582, 134376);
    call {:si_unique_call 2864} {:cexpr "__cil_tmp364"} boogie_si_record_i64($i583);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $p584 := $i2p.i64.ref($i583);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i585 := $load.i8($M.0, $p584);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i586 := $trunc.i8.i1($i585);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i586} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i586 == 1);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i591 := $p2i.ref.i64($p0);
    call {:si_unique_call 2923} {:cexpr "__cil_tmp368"} boogie_si_record_i64($i591);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i592 := $add.i64($i591, 1016);
    call {:si_unique_call 2924} {:cexpr "__cil_tmp369"} boogie_si_record_i64($i592);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $p593 := $i2p.i64.ref($i592);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $p594 := $load.ref($M.0, $p593);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2925} pci_release_regions($p594);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i471 := $i494;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i595 := $p2i.ref.i64($p3);
    call {:si_unique_call 2847} {:cexpr "__cil_tmp371"} boogie_si_record_i64($i595);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i596 := $add.i64($i595, 2872);
    call {:si_unique_call 2848} {:cexpr "__cil_tmp372"} boogie_si_record_i64($i596);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $p597 := $i2p.i64.ref($i596);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2849} ttm_object_device_release($p597);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i404 := $i471;
    goto $bb67;

  $bb111:
    assume $i586 == 1;
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $i587 := $p2i.ref.i64($p0);
    call {:si_unique_call 2920} {:cexpr "__cil_tmp365"} boogie_si_record_i64($i587);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i588 := $add.i64($i587, 1016);
    call {:si_unique_call 2921} {:cexpr "__cil_tmp366"} boogie_si_record_i64($i588);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $p589 := $i2p.i64.ref($i588);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $p590 := $load.ref($M.0, $p589);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2922} pci_release_region($p590, 2);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb108:
    assume $i575 == 1;
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2918} vslice_dummy_var_119 := vmw_kms_restore_vga($p3);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i577 := $trunc.i8.i1(0);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2919} vmw_3d_resource_dec($p3, $i577);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    goto $bb110;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb105:
    assume $i567 == 1;
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2915} vslice_dummy_var_116 := vmw_fb_close($p3);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    goto $bb107;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb95:
    assume $i533 == 1;
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2893} vslice_dummy_var_112 := vmw_fb_init($p3);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb92:
    assume $i526 == 1;
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $p527 := .str.222;
    goto $bb94;

  $bb88:
    assume $i521 == 1;
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i522 := $i510;
    goto $bb90;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb84:
    assume $i507 == 1;
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i508 := $i496;
    goto $bb86;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb80:
    assume $i493 == 1;
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i494 := $i472;
    goto $bb82;

  $bb73:
    assume $i452 == 1;
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2835} vslice_dummy_var_107 := printk.ref(.str.219);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i454 := $p2i.ref.i64($p0);
    call {:si_unique_call 2836} {:cexpr "__cil_tmp312"} boogie_si_record_i64($i454);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i455 := $add.i64($i454, 1016);
    call {:si_unique_call 2837} {:cexpr "__cil_tmp313"} boogie_si_record_i64($i455);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $p456 := $i2p.i64.ref($i455);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $p457 := $load.ref($M.0, $p456);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2838} $i458 := pci_request_region($p457, 2, .str.220);
    call {:si_unique_call 2839} {:cexpr "ret"} boogie_si_record_i32($i458);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i459 := $ne.i32($i458, 0);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i460 := $zext.i1.i32($i459);
    call {:si_unique_call 2840} {:cexpr "__cil_tmp315"} boogie_si_record_i32($i460);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i461 := $ne.i32($i460, 0);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $i462 := $xor.i1($i461, 1);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i463 := $zext.i1.i32($i462);
    call {:si_unique_call 2841} {:cexpr "__cil_tmp316"} boogie_si_record_i32($i463);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i464 := $ne.i32($i463, 0);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i465 := $xor.i1($i464, 1);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i466 := $zext.i1.i32($i465);
    call {:si_unique_call 2842} {:cexpr "__cil_tmp317"} boogie_si_record_i32($i466);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i467 := $sext.i32.i64($i466);
    call {:si_unique_call 2843} {:cexpr "__cil_tmp318"} boogie_si_record_i64($i467);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2844} $i468 := ldv__builtin_expect($i467, 0);
    call {:si_unique_call 2845} {:cexpr "tmp___17"} boogie_si_record_i64($i468);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i469 := $ne.i64($i468, 0);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i469} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i469 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i472 := $i458;
    goto $bb79;

  $bb75:
    assume $i469 == 1;
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2846} vslice_dummy_var_108 := drm_err.ref.ref(.str.196, .str.221);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i471 := $i458;
    goto $bb77;

  $bb70:
    assume $i430 == 1;
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2823} vslice_dummy_var_106 := drm_err.ref.ref(.str.196, .str.217);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $i404 := $sub.i32(0, 12);
    goto $bb67;

  $bb62:
    assume $i399 == 1;
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb60:
    assume $i393 == 1;
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb56:
    assume $i385 == 1;
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2779} vslice_dummy_var_103 := drm_err.ref.ref(.str.196, .str.215);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i387 := $sub.i32(0, 12);
    goto $bb58;

  $bb53:
    assume $i335 == 1;
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2744} vslice_dummy_var_102 := printk.ref(.str.214);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i337 := $p2i.ref.i64($p3);
    call {:si_unique_call 2745} {:cexpr "__cil_tmp245"} boogie_si_record_i64($i337);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i338 := $add.i64($i337, 2176);
    call {:si_unique_call 2746} {:cexpr "__cil_tmp246"} boogie_si_record_i64($i338);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $p339 := $i2p.i64.ref($i338);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p339, 0);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb49:
    assume $i322 == 1;
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2734} vslice_dummy_var_100 := drm_err.ref.ref(.str.196, .str.213);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $i324 := $i311;
    goto $bb51;

  $bb45:
    assume $i301 == 1;
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2719} vslice_dummy_var_99 := drm_err.ref.ref(.str.196, .str.212);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $i303 := $i290;
    goto $bb47;

  $bb42:
    assume $i268 == 1;
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i133 := $i257;
    goto $bb28;

  $bb39:
    assume $i225 == 1;
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i226 := $p2i.ref.i64($p3);
    call {:si_unique_call 2665} {:cexpr "__cil_tmp179"} boogie_si_record_i64($i226);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i227 := $add.i64($i226, 2168);
    call {:si_unique_call 2666} {:cexpr "__cil_tmp180"} boogie_si_record_i64($i227);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $p228 := $i2p.i64.ref($i227);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $i229 := $load.i32($M.0, $p228);
    call {:si_unique_call 2667} {:cexpr "__cil_tmp181"} boogie_si_record_i32($i229);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} vslice_dummy_var_95 := printk.ref.i32(.str.208, $i229);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i231 := $p2i.ref.i64($p3);
    call {:si_unique_call 2669} {:cexpr "__cil_tmp182"} boogie_si_record_i64($i231);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $i232 := $add.i64($i231, 2172);
    call {:si_unique_call 2670} {:cexpr "__cil_tmp183"} boogie_si_record_i64($i232);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $p233 := $i2p.i64.ref($i232);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i234 := $load.i32($M.0, $p233);
    call {:si_unique_call 2671} {:cexpr "__cil_tmp184"} boogie_si_record_i32($i234);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i235 := $udiv.i32($i234, 1024);
    call {:si_unique_call 2672} {:cexpr "__cil_tmp185"} boogie_si_record_i32($i235);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2673} vslice_dummy_var_96 := printk.ref.i32(.str.209, $i235);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i209 == 1;
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i210 := $p2i.ref.i64($p3);
    call {:si_unique_call 2654} {:cexpr "__cil_tmp170"} boogie_si_record_i64($i210);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $i211 := $add.i64($i210, 2164);
    call {:si_unique_call 2655} {:cexpr "__cil_tmp171"} boogie_si_record_i64($i211);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $p212 := $i2p.i64.ref($i211);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.0, $p212);
    call {:si_unique_call 2656} {:cexpr "__cil_tmp172"} boogie_si_record_i32($i213);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2657} vslice_dummy_var_93 := printk.ref.i32(.str.206, $i213);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i215 := $p2i.ref.i64($p3);
    call {:si_unique_call 2658} {:cexpr "__cil_tmp173"} boogie_si_record_i64($i215);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i216 := $add.i64($i215, 2160);
    call {:si_unique_call 2659} {:cexpr "__cil_tmp174"} boogie_si_record_i64($i216);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $p217 := $i2p.i64.ref($i216);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $i218 := $load.i32($M.0, $p217);
    call {:si_unique_call 2660} {:cexpr "__cil_tmp175"} boogie_si_record_i32($i218);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2661} vslice_dummy_var_94 := printk.ref.i32(.str.207, $i218);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i173 == 1;
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i174 := $p2i.ref.i64($p3);
    call {:si_unique_call 2628} {:cexpr "__cil_tmp147"} boogie_si_record_i64($i174);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $i175 := $add.i64($i174, 2168);
    call {:si_unique_call 2629} {:cexpr "__cil_tmp148"} boogie_si_record_i64($i175);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2630} $i176 := vmw_read($p3, 46);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $p177 := $i2p.i64.ref($i175);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p177, $i176);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i178 := $p2i.ref.i64($p3);
    call {:si_unique_call 2631} {:cexpr "__cil_tmp149"} boogie_si_record_i64($i178);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $i179 := $add.i64($i178, 2172);
    call {:si_unique_call 2632} {:cexpr "__cil_tmp150"} boogie_si_record_i64($i179);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2633} $i180 := vmw_read($p3, 47);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p181 := $i2p.i64.ref($i179);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p181, $i180);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i182 := $p2i.ref.i64($p3);
    call {:si_unique_call 2634} {:cexpr "__cil_tmp151"} boogie_si_record_i64($i182);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i183 := $add.i64($i182, 2172);
    call {:si_unique_call 2635} {:cexpr "__cil_tmp152"} boogie_si_record_i64($i183);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i184 := $p2i.ref.i64($p3);
    call {:si_unique_call 2636} {:cexpr "__cil_tmp153"} boogie_si_record_i64($i184);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i185 := $add.i64($i184, 2112);
    call {:si_unique_call 2637} {:cexpr "__cil_tmp154"} boogie_si_record_i64($i185);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p186 := $i2p.i64.ref($i185);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.0, $p186);
    call {:si_unique_call 2638} {:cexpr "__cil_tmp155"} boogie_si_record_i32($i187);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i188 := $p2i.ref.i64($p3);
    call {:si_unique_call 2639} {:cexpr "__cil_tmp156"} boogie_si_record_i64($i188);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i189 := $add.i64($i188, 2172);
    call {:si_unique_call 2640} {:cexpr "__cil_tmp157"} boogie_si_record_i64($i189);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $p190 := $i2p.i64.ref($i189);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.0, $p190);
    call {:si_unique_call 2641} {:cexpr "__cil_tmp158"} boogie_si_record_i32($i191);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i192 := $sub.i32($i191, $i187);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $p193 := $i2p.i64.ref($i183);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p193, $i192);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i159 == 1;
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p3);
    call {:si_unique_call 2619} {:cexpr "__cil_tmp140"} boogie_si_record_i64($i160);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i161 := $add.i64($i160, 2160);
    call {:si_unique_call 2620} {:cexpr "__cil_tmp141"} boogie_si_record_i64($i161);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2621} $i162 := vmw_read($p3, 44);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $p163 := $i2p.i64.ref($i161);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p163, $i162);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i164 := $p2i.ref.i64($p3);
    call {:si_unique_call 2622} {:cexpr "__cil_tmp142"} boogie_si_record_i64($i164);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i165 := $add.i64($i164, 2164);
    call {:si_unique_call 2623} {:cexpr "__cil_tmp143"} boogie_si_record_i64($i165);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2624} $i166 := vmw_read($p3, 43);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p167 := $i2p.i64.ref($i165);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p167, $i166);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb26:
    assume $i128 == 1;
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2586} vslice_dummy_var_92 := drm_err.ref.ref.i32(.str.196, .str.205, $i125);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i130 := $p2i.ref.i64($p3);
    call {:si_unique_call 2587} {:cexpr "__cil_tmp124"} boogie_si_record_i64($i130);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i131 := $add.i64($i130, 2184);
    call {:si_unique_call 2588} {:cexpr "__cil_tmp125"} boogie_si_record_i64($i131);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $p132 := $i2p.i64.ref($i131);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2589} mutex_unlock($p132);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i133 := $sub.i32(0, 38);
    goto $bb28;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} vslice_dummy_var_91 := drm_err.ref.ref(.str.196, .str.197);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb3;
}



const vmw_firstopen: ref;

axiom vmw_firstopen == $sub.ref(0, 708024);

procedure vmw_firstopen($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vmw_firstopen($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2928} $p1 := vmw_priv($p0);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    call {:si_unique_call 2929} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 134377);
    call {:si_unique_call 2930} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 1);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vmw_driver_open: ref;

axiom vmw_driver_open == $sub.ref(0, 709056);

procedure vmw_driver_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmw_driver_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $i47: i64;
  var $i48: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i1;
  var $i64: i32;
  var $i65: i64;
  var $i66: i64;
  var $i67: i1;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2931} $p2 := vmw_priv($p0);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2932} $p3 := kzalloc(32, 208);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 2933} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i5);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p4);
    call {:si_unique_call 2934} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i6);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, $i5);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 2935} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i8);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $i10 := $xor.i1($i9, 1);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 2936} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i11);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $i13 := $xor.i1($i12, 1);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    call {:si_unique_call 2937} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i14);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    call {:si_unique_call 2938} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i15);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2939} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 2940} {:cexpr "tmp___9"} boogie_si_record_i64($i16);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p4);
    call {:si_unique_call 2941} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i19);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 16);
    call {:si_unique_call 2942} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i20);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2943} INIT_LIST_HEAD($p21);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p4);
    call {:si_unique_call 2944} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i22);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 8);
    call {:si_unique_call 2945} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i23);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p2);
    call {:si_unique_call 2946} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i24);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 2872);
    call {:si_unique_call 2947} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i25);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2948} $p28 := ttm_object_file_init($p27, 10);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i23);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p28);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 2949} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i30);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p4);
    call {:si_unique_call 2950} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i31);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 8);
    call {:si_unique_call 2951} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i32);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    call {:si_unique_call 2952} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i35);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, $i30);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    call {:si_unique_call 2953} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i37);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i39 := $xor.i1($i38, 1);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    call {:si_unique_call 2954} {:cexpr "__cil_tmp33"} boogie_si_record_i32($i40);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $i42 := $xor.i1($i41, 1);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    call {:si_unique_call 2955} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i43);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    call {:si_unique_call 2956} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i44);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2957} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 2958} {:cexpr "tmp___10"} boogie_si_record_i64($i45);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p1);
    call {:si_unique_call 2960} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i47);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 136);
    call {:si_unique_call 2961} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i48);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $p50 := $i2p.i64.ref($i48);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $p3);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 2962} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i51);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p2);
    call {:si_unique_call 2963} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i52);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 1640);
    call {:si_unique_call 2964} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i53);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i53);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    call {:si_unique_call 2965} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i56);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i57 := $eq.i64($i56, $i51);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i32($i57);
    call {:si_unique_call 2966} {:cexpr "__cil_tmp45"} boogie_si_record_i32($i58);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i60 := $xor.i1($i59, 1);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i32($i60);
    call {:si_unique_call 2967} {:cexpr "__cil_tmp46"} boogie_si_record_i32($i61);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $i63 := $xor.i1($i62, 1);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i64 := $zext.i1.i32($i63);
    call {:si_unique_call 2968} {:cexpr "__cil_tmp47"} boogie_si_record_i32($i64);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i64);
    call {:si_unique_call 2969} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i65);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2970} $i66 := ldv__builtin_expect($i65, 0);
    call {:si_unique_call 2971} {:cexpr "tmp___11"} boogie_si_record_i64($i66);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb9:
    assume $i67 == 1;
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p2);
    call {:si_unique_call 2972} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i68);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i69 := $add.i64($i68, 1640);
    call {:si_unique_call 2973} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i69);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p1);
    call {:si_unique_call 2974} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i70);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i70, 128);
    call {:si_unique_call 2975} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i71);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $p72 := $i2p.i64.ref($i71);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    call {:si_unique_call 2976} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i74);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $i75 := $add.i64($i74, 24);
    call {:si_unique_call 2977} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i75);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $p76 := $i2p.i64.ref($i75);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    call {:si_unique_call 2978} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i78);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $i79 := $add.i64($i78, 48);
    call {:si_unique_call 2979} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i79);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $p80 := $i2p.i64.ref($i79);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    call {:si_unique_call 2980} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i82);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, 48);
    call {:si_unique_call 2981} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i83);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $p84 := $i2p.i64.ref($i83);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $p86 := $i2p.i64.ref($i69);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p86, $p85);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i46 == 1;
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p4);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2959} kfree($p87);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb3;
}



const vmw_preclose: ref;

axiom vmw_preclose == $sub.ref(0, 710088);

procedure vmw_preclose($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.6, assertsPassed, $M.2, $M.11, $M.12, $CurrAddr, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation vmw_preclose($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2982} $p2 := vmw_fpriv($p1);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2983} $p3 := vmw_priv($p0);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    call {:si_unique_call 2984} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i4);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 3008);
    call {:si_unique_call 2985} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i5);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p2);
    call {:si_unique_call 2986} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i8);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 16);
    call {:si_unique_call 2987} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i9);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2988} vmw_event_fence_fpriv_gone($p7, $p10);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_448:
    assume !assertsPassed;
    return;
}



const vmw_postclose: ref;

axiom vmw_postclose == $sub.ref(0, 711120);

procedure vmw_postclose($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation vmw_postclose($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2989} $p2 := vmw_fpriv($p1);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    call {:si_unique_call 2990} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i3);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 8);
    call {:si_unique_call 2991} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i4);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2992} ttm_object_file_release($p5);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i8 := $ne.ref($p7, $0.ref);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2994} kfree($p10);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2993} drm_master_put($p9);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmw_lastclose: ref;

axiom vmw_lastclose == $sub.ref(0, 712152);

procedure vmw_lastclose($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr, $M.11, $M.12, $M.2, $M.6, $M.10, assertsPassed, $M.16, $M.3, $M.4, $M.13;



implementation vmw_lastclose($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $i6: i8;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i1;
  var $i82: i32;
  var $i83: i64;
  var $i84: i64;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $i90: i1;
  var $i91: i32;
  var $i92: i64;
  var $i94: i64;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $i99: i64;
  var $p100: ref;
  var $i101: i32;
  var $p102: ref;
  var $i103: i64;
  var $i104: i64;
  var $p105: ref;
  var vslice_dummy_var_122: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2995} $p1 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2996} $p2 := vmw_priv($p0);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    call {:si_unique_call 2997} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i3);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 134377);
    call {:si_unique_call 2998} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i4);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 2999} {:cexpr "__cil_tmp13"} boogie_si_record_i8($i8);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p2);
    call {:si_unique_call 3000} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i10);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 134377);
    call {:si_unique_call 3001} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i11);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 40);
    call {:si_unique_call 3002} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i14);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 0);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p1);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 44);
    call {:si_unique_call 3003} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i17);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 0);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 16);
    call {:si_unique_call 3004} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i20);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i20);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $0.ref);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p1);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 32);
    call {:si_unique_call 3005} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i24);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i24);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $0.ref);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p1);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 48);
    call {:si_unique_call 3006} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i28);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i28);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $0.ref);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p1);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 56);
    call {:si_unique_call 3007} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i32);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, 0);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p0);
    call {:si_unique_call 3008} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i34);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 1448);
    call {:si_unique_call 3009} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i35);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 3010} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i38);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 8);
    call {:si_unique_call 3011} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i39);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i32($p40);
    call {:si_unique_call 3012} {:cexpr "__cil_tmp33"} boogie_si_record_i32($i41);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p37);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i41);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $i44 := $sub.i64(0, $i43);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p42, $mul.ref($i44, 1));
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p0);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 1448);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i48);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $p51 := $p45;
    goto $bb5;

  $bb5:
    call $p51, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $p59, $i60, $i61, $p62, $p63, $i64, $i65, $p66, $p67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i94, $i95, $p96, $p97, $i98, $i99, $p100, $i101, $p102, $i103, $i104, $p105, vslice_dummy_var_122 := vmw_lastclose_loop_$bb5($p1, $i50, $p51, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $p59, $i60, $i61, $p62, $p63, $i64, $i65, $p66, $p67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i94, $i95, $p96, $p97, $i98, $i99, $p100, $i101, $p102, $i103, $i104, $p105, vslice_dummy_var_122);
    goto $bb5_last;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    call {:si_unique_call 3013} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i52);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 8);
    call {:si_unique_call 3014} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i53);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i53);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    call {:si_unique_call 3015} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i55);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, $i50);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i56 == 1);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb7:
    assume $i56 == 1;
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p1);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 24);
    call {:si_unique_call 3016} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i58);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $p59 := $i2p.i64.ref($i58);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $p51);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p51);
    call {:si_unique_call 3017} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i60);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i61 := $add.i64($i60, 488);
    call {:si_unique_call 3018} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i61);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $p62 := $i2p.i64.ref($i61);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    call {:si_unique_call 3019} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i64);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i65 := $add.i64($i64, 56);
    call {:si_unique_call 3020} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i65);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $p66 := $i2p.i64.ref($i65);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    call {:si_unique_call 3021} $i68 := devirtbounce.16($p67, $p1);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    call {:si_unique_call 3022} {:cexpr "ret"} boogie_si_record_i32($i68);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $i70 := $zext.i1.i32($i69);
    call {:si_unique_call 3023} {:cexpr "__cil_tmp53"} boogie_si_record_i32($i70);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $i72 := $xor.i1($i71, 1);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $i73 := $zext.i1.i32($i72);
    call {:si_unique_call 3024} {:cexpr "__cil_tmp54"} boogie_si_record_i32($i73);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i75 := $xor.i1($i74, 1);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $i76 := $zext.i1.i32($i75);
    call {:si_unique_call 3025} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i76);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $i78 := $xor.i1($i77, 1);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i79 := $zext.i1.i32($i78);
    call {:si_unique_call 3026} {:cexpr "__cil_tmp55"} boogie_si_record_i32($i79);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $i81 := $xor.i1($i80, 1);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i82 := $zext.i1.i32($i81);
    call {:si_unique_call 3027} {:cexpr "__cil_tmp56"} boogie_si_record_i32($i82);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i82);
    call {:si_unique_call 3028} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i83);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3029} $i84 := ldv__builtin_expect($i83, 0);
    call {:si_unique_call 3030} {:cexpr "tmp___8"} boogie_si_record_i64($i84);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i76, 0);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $i87 := $xor.i1($i86, 1);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $i88 := $zext.i1.i32($i87);
    call {:si_unique_call 3032} {:cexpr "__cil_tmp59"} boogie_si_record_i32($i88);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i90 := $xor.i1($i89, 1);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i91 := $zext.i1.i32($i90);
    call {:si_unique_call 3033} {:cexpr "__cil_tmp60"} boogie_si_record_i32($i91);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i91);
    call {:si_unique_call 3034} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i92);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3035} vslice_dummy_var_122 := ldv__builtin_expect($i92, 0);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p51);
    call {:si_unique_call 3036} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i94);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i95 := $add.i64($i94, 8);
    call {:si_unique_call 3037} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i95);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $p96 := $i2p.i64.ref($i95);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 3038} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i98);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i99 := $add.i64($i98, 8);
    call {:si_unique_call 3039} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i99);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $p100 := $i2p.i64.ref($i99);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i32($p100);
    call {:si_unique_call 3040} {:cexpr "__cil_tmp69"} boogie_si_record_i32($i101);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p97);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i103 := $zext.i32.i64($i101);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i104 := $sub.i64(0, $i103);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p102, $mul.ref($i104, 1));
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $p51 := $p105;
    goto corral_source_split_6731_dummy;

  $bb11:
    assume $i85 == 1;
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3031} warn_slowpath_null(.str.36, 844);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  corral_source_split_6731_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6666;
}



const vmw_driver_unload: ref;

axiom vmw_driver_unload == $sub.ref(0, 713184);

procedure vmw_driver_unload($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed, $M.11, $M.12, $M.2, $M.6, $CurrAddr, $M.3, $M.4, $M.10, $M.13, $M.16;



implementation vmw_driver_unload($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i8;
  var $i31: i1;
  var $i34: i1;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i8;
  var $i45: i1;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i64;
  var $i67: i64;
  var $p68: ref;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $p73: ref;
  var $i74: i32;
  var $i75: i64;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $i80: i8;
  var $i81: i1;
  var $p82: ref;
  var $p84: ref;
  var $p86: ref;
  var $i88: i64;
  var $i89: i64;
  var $p90: ref;
  var $i91: i64;
  var $i92: i64;
  var $p93: ref;
  var $i94: i64;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3041} $p1 := vmw_priv($p0);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    call {:si_unique_call 3042} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 134632);
    call {:si_unique_call 3043} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3044} vslice_dummy_var_123 := unregister_pm_notifier($p4);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p1);
    call {:si_unique_call 3045} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i6);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 134232);
    call {:si_unique_call 3046} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i7);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i10 := $ne.ref($p9, $0.ref);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p1);
    call {:si_unique_call 3050} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i16);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 2156);
    call {:si_unique_call 3051} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i17);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    call {:si_unique_call 3052} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i19);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 262144);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p1);
    call {:si_unique_call 3056} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i27);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 134378);
    call {:si_unique_call 3057} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i28);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i30);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3061} vslice_dummy_var_127 := vmw_kms_close($p1);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3062} vslice_dummy_var_128 := vmw_overlay_close($p1);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p1);
    call {:si_unique_call 3063} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i37);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 3008);
    call {:si_unique_call 3064} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i38);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i38);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3065} vmw_fence_manager_takedown($p40);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p1);
    call {:si_unique_call 3066} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i41);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 134376);
    call {:si_unique_call 3067} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i42);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i42);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i8.i1($i44);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i45 == 1);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p0);
    call {:si_unique_call 3071} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i50);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 1016);
    call {:si_unique_call 3072} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i51);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3073} pci_release_regions($p53);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p1);
    call {:si_unique_call 3074} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i54);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 2872);
    call {:si_unique_call 3075} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i55);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $p56 := $i2p.i64.ref($i55);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3076} ttm_object_device_release($p56);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p1);
    call {:si_unique_call 3077} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i57);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 2144);
    call {:si_unique_call 3078} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i58);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $p59 := $i2p.i64.ref($i58);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3079} iounmap($p61);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p1);
    call {:si_unique_call 3080} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i62);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 2152);
    call {:si_unique_call 3081} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i63);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $p64 := $i2p.i64.ref($i63);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    call {:si_unique_call 3082} {:cexpr "__cil_tmp44"} boogie_si_record_i32($i65);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p1);
    call {:si_unique_call 3083} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i66);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $i67 := $add.i64($i66, 2116);
    call {:si_unique_call 3084} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i67);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $p68 := $i2p.i64.ref($i67);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    call {:si_unique_call 3085} {:cexpr "__cil_tmp47"} boogie_si_record_i32($i69);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i70 := $zext.i32.i64($i69);
    call {:si_unique_call 3086} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i70);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p1);
    call {:si_unique_call 3087} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i71);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i72 := $add.i64($i71, 2120);
    call {:si_unique_call 3088} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i72);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $p73 := $i2p.i64.ref($i72);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    call {:si_unique_call 3089} {:cexpr "__cil_tmp51"} boogie_si_record_i32($i74);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $i75 := $zext.i32.i64($i74);
    call {:si_unique_call 3090} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i75);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3091} vslice_dummy_var_129 := drm_mtrr_del($i65, $i70, $i75, 1);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p1);
    call {:si_unique_call 3092} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i77);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i78 := $add.i64($i77, 2176);
    call {:si_unique_call 3093} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i78);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $p79 := $i2p.i64.ref($i78);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i8.i1($i80);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p1);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3095} vslice_dummy_var_131 := ttm_bo_clean_mm($p84, 2);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p1);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3096} vslice_dummy_var_132 := ttm_bo_device_release($p86);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3097} vmw_ttm_global_release($p1);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p1);
    call {:si_unique_call 3098} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i88);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i89 := $add.i64($i88, 2704);
    call {:si_unique_call 3099} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i89);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $p90 := $i2p.i64.ref($i89);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3100} idr_destroy($p90);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p1);
    call {:si_unique_call 3101} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i91);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i92 := $add.i64($i91, 2656);
    call {:si_unique_call 3102} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i92);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $p93 := $i2p.i64.ref($i92);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3103} idr_destroy($p93);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p1);
    call {:si_unique_call 3104} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i94);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $i95 := $add.i64($i94, 2752);
    call {:si_unique_call 3105} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i95);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $p96 := $i2p.i64.ref($i95);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3106} idr_destroy($p96);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p1);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3107} kfree($p97);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb13:
    assume $i81 == 1;
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p1);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3094} vslice_dummy_var_130 := ttm_bo_clean_mm($p82, 3);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i45 == 1;
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p0);
    call {:si_unique_call 3068} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i46);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 1016);
    call {:si_unique_call 3069} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i47);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3070} pci_release_region($p49, 2);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3058} vslice_dummy_var_125 := vmw_fb_close($p1);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3059} vslice_dummy_var_126 := vmw_kms_restore_vga($p1);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1(0);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3060} vmw_3d_resource_dec($p1, $i34);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    call {:si_unique_call 3053} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i22);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 2088);
    call {:si_unique_call 3054} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i23);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3055} vslice_dummy_var_124 := drm_irq_uninstall($p25);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p1);
    call {:si_unique_call 3047} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i11);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 134232);
    call {:si_unique_call 3048} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i12);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3049} vfree($p15);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmw_get_vblank_counter: ref;

axiom vmw_get_vblank_counter == $sub.ref(0, 714216);

procedure vmw_get_vblank_counter($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vmw_get_vblank_counter($p0: ref, $i1: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3108} {:cexpr "vmw_get_vblank_counter:arg:crtc"} boogie_si_record_i32($i1);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vmw_enable_vblank: ref;

axiom vmw_enable_vblank == $sub.ref(0, 715248);

procedure vmw_enable_vblank($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vmw_enable_vblank($p0: ref, $i1: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3109} {:cexpr "vmw_enable_vblank:arg:crtc"} boogie_si_record_i32($i1);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 38);
    return;
}



const vmw_disable_vblank: ref;

axiom vmw_disable_vblank == $sub.ref(0, 716280);

procedure vmw_disable_vblank($p0: ref, $i1: i32);



const vmw_irq_handler: ref;

axiom vmw_irq_handler == $sub.ref(0, 717312);

procedure vmw_irq_handler($i0: i32, $p1: ref) returns ($r: i32);



const vmw_irq_preinstall: ref;

axiom vmw_irq_preinstall == $sub.ref(0, 718344);

procedure vmw_irq_preinstall($p0: ref);
  free requires assertsPassed;



implementation vmw_irq_preinstall($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var vslice_dummy_var_133: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3110} $p1 := vmw_priv($p0);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    call {:si_unique_call 3111} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 2156);
    call {:si_unique_call 3112} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i3);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 3113} {:cexpr "__cil_tmp7"} boogie_si_record_i32($i5);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 262144);
    call {:si_unique_call 3114} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i6);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p1);
    call {:si_unique_call 3115} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i8);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 2984);
    call {:si_unique_call 3116} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i9);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3117} vslice_dummy_var_133 := spinlock_check($p10);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p1);
    call {:si_unique_call 3118} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i12);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 2984);
    call {:si_unique_call 3119} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i13);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3120} __raw_spin_lock_init($p14, .str.90, __key___15);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p1);
    call {:si_unique_call 3121} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i15);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 2104);
    call {:si_unique_call 3122} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i16);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    call {:si_unique_call 3123} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i18);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 8);
    call {:si_unique_call 3124} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i19);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3125} $i20 := inl($i19);
    call {:si_unique_call 3126} {:cexpr "status"} boogie_si_record_i32($i20);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p1);
    call {:si_unique_call 3127} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i21);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 2104);
    call {:si_unique_call 3128} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i22);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    call {:si_unique_call 3129} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i24);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 8);
    call {:si_unique_call 3130} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i25);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3131} outl($i20, $i25);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmw_irq_postinstall: ref;

axiom vmw_irq_postinstall == $sub.ref(0, 719376);

procedure vmw_irq_postinstall($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vmw_irq_postinstall($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vmw_irq_uninstall: ref;

axiom vmw_irq_uninstall == $sub.ref(0, 720408);

procedure vmw_irq_uninstall($p0: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation vmw_irq_uninstall($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3132} $p1 := vmw_priv($p0);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    call {:si_unique_call 3133} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 2156);
    call {:si_unique_call 3134} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i3);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 3135} {:cexpr "__cil_tmp7"} boogie_si_record_i32($i5);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 262144);
    call {:si_unique_call 3136} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i6);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p1);
    call {:si_unique_call 3137} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i8);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 2184);
    call {:si_unique_call 3138} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i9);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3139} mutex_lock($p10);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3140} vmw_write($p1, 33, 0);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p1);
    call {:si_unique_call 3141} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i11);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 2184);
    call {:si_unique_call 3142} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i12);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3143} mutex_unlock($p13);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p1);
    call {:si_unique_call 3144} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i14);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 2104);
    call {:si_unique_call 3145} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i15);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    call {:si_unique_call 3146} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i17);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 8);
    call {:si_unique_call 3147} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i18);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3148} $i19 := inl($i18);
    call {:si_unique_call 3149} {:cexpr "status"} boogie_si_record_i32($i19);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p1);
    call {:si_unique_call 3150} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i20);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 2104);
    call {:si_unique_call 3151} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i21);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    call {:si_unique_call 3152} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i23);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 8);
    call {:si_unique_call 3153} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i24);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3154} outl($i19, $i24);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;
}



const vmw_master_create: ref;

axiom vmw_master_create == $sub.ref(0, 721440);

procedure vmw_master_create($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmw_master_create($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $i19: i1;
  var $i20: i64;
  var $i21: i64;
  var $p23: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3155} $p2 := kzalloc(240, 208);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 3156} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i4);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p3);
    call {:si_unique_call 3157} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i5);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, $i4);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 3158} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i7);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i9 := $xor.i1($i8, 1);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 3159} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i10);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i12 := $xor.i1($i11, 1);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    call {:si_unique_call 3160} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i13);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    call {:si_unique_call 3161} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i14);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3162} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 3163} {:cexpr "tmp___8"} boogie_si_record_i64($i15);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3164} vmw_master_init($p3);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p3);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1(1);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3165} ttm_lock_set_kill($p18, $i19, 15);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p1);
    call {:si_unique_call 3166} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i20);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 192);
    call {:si_unique_call 3167} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i21);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i21);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p2);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 12);
    goto $bb3;
}



const vmw_master_destroy: ref;

axiom vmw_master_destroy == $sub.ref(0, 722472);

procedure vmw_master_destroy($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vmw_master_destroy($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3168} $p2 := vmw_master($p1);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    call {:si_unique_call 3169} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 192);
    call {:si_unique_call 3170} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i4);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3171} kfree($p6);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    return;
}



const vmw_master_set: ref;

axiom vmw_master_set == $sub.ref(0, 723504);

procedure vmw_master_set($p0: ref, $p1: ref, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed, $M.2, $M.6, $M.11, $M.12, $CurrAddr, $M.3, $M.4, $M.10, $M.13, $M.16;



implementation vmw_master_set($p0: ref, $p1: ref, $i2: i1) returns ($r: i32)
{
  var $i3: i8;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i8;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $i43: i1;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i1;
  var $i56: i32;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i1;
  var $i71: i32;
  var $i72: i1;
  var $i73: i1;
  var $i74: i32;
  var $i75: i64;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i1;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $i88: i1;
  var $i89: i32;
  var $i90: i64;
  var $i91: i64;
  var $i92: i1;
  var $i94: i64;
  var $i95: i64;
  var $p97: ref;
  var $p98: ref;
  var $i99: i1;
  var $i100: i1;
  var $p101: ref;
  var $i103: i64;
  var $i104: i64;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i1;
  var $i112: i32;
  var $i113: i1;
  var $i114: i1;
  var $i115: i32;
  var $i116: i1;
  var $i117: i1;
  var $i118: i32;
  var $i119: i64;
  var $i120: i64;
  var $i121: i1;
  var $p122: ref;
  var $i123: i64;
  var $i124: i64;
  var $p125: ref;
  var $i126: i64;
  var $i127: i64;
  var $p128: ref;
  var $i129: i8;
  var $i130: i1;
  var $i131: i8;
  var $i132: i1;
  var $i133: i64;
  var $i134: i64;
  var $p135: ref;
  var $i136: i64;
  var $i137: i64;
  var $p138: ref;
  var $i140: i1;
  var $i35: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 3172} {:cexpr "vmw_master_set:arg:from_open"} boogie_si_record_i1($i2);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3173} $p4 := vmw_priv($p0);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3174} $p5 := vmw_fpriv($p1);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p4);
    call {:si_unique_call 3175} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i6);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 134384);
    call {:si_unique_call 3176} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i7);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    call {:si_unique_call 3177} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i10);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 152);
    call {:si_unique_call 3178} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i11);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3179} $p14 := vmw_master($p13);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p4);
    call {:si_unique_call 3180} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i15);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 134378);
    call {:si_unique_call 3181} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i16);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 3182} {:cexpr "__cil_tmp24"} boogie_si_record_i8($i20);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1(1);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3183} $i23 := vmw_3d_resource_inc($p4, $i22);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    call {:si_unique_call 3184} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    call {:si_unique_call 3185} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i25);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $i27 := $xor.i1($i26, 1);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    call {:si_unique_call 3186} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i28);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $i30 := $xor.i1($i29, 1);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    call {:si_unique_call 3187} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i31);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    call {:si_unique_call 3188} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i32);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3189} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 3190} {:cexpr "tmp___10"} boogie_si_record_i64($i33);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3191} vslice_dummy_var_134 := vmw_kms_save_vga($p4);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p4);
    call {:si_unique_call 3192} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i37);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 2184);
    call {:si_unique_call 3193} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i38);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i38);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3194} mutex_lock($p39);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3195} vmw_write($p4, 45, 0);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p4);
    call {:si_unique_call 3196} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i40);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 2184);
    call {:si_unique_call 3197} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i41);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3198} mutex_unlock($p42);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i43 := $ne.ref($p9, $0.ref);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p14);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i8.i1(0);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3235} ttm_lock_set_kill($p98, $i99, 15);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i8.i1($i3);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i100 == 1);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p14);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3236} vslice_dummy_var_136 := ttm_vt_unlock($p101);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i103 := $p2i.ref.i64($p1);
    call {:si_unique_call 3237} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i103);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i104 := $add.i64($i103, 152);
    call {:si_unique_call 3238} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i104);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $p105 := $i2p.i64.ref($i104);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    call {:si_unique_call 3239} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i107);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p5);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p109);
    call {:si_unique_call 3240} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i110);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i111 := $ne.i64($i110, $i107);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i112 := $zext.i1.i32($i111);
    call {:si_unique_call 3241} {:cexpr "__cil_tmp74"} boogie_si_record_i32($i112);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i114 := $xor.i1($i113, 1);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $i115 := $zext.i1.i32($i114);
    call {:si_unique_call 3242} {:cexpr "__cil_tmp75"} boogie_si_record_i32($i115);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i117 := $xor.i1($i116, 1);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $i118 := $zext.i1.i32($i117);
    call {:si_unique_call 3243} {:cexpr "__cil_tmp76"} boogie_si_record_i32($i118);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i118);
    call {:si_unique_call 3244} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i119);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3245} $i120 := ldv__builtin_expect($i119, 0);
    call {:si_unique_call 3246} {:cexpr "tmp___14"} boogie_si_record_i64($i120);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i121 := $ne.i64($i120, 0);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p5);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3248} drm_master_put($p122);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i123 := $p2i.ref.i64($p4);
    call {:si_unique_call 3249} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i123);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $i124 := $add.i64($i123, 134384);
    call {:si_unique_call 3250} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i124);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $p125 := $i2p.i64.ref($i124);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p125, $p14);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;

  $bb34:
    assume $i121 == 1;
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    call {:si_unique_call 3247} devirtbounce(0, .str.36, 921, 12);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    call vmw_master_set_loop_$bb38();
    goto $bb38_last;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb39_dummy;

  $bb30:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb8:
    assume $i43 == 1;
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p4);
    call {:si_unique_call 3199} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i44);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 134392);
    call {:si_unique_call 3200} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i45);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $p46 := $i2p.i64.ref($i45);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    call {:si_unique_call 3201} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i47);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p9);
    call {:si_unique_call 3202} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i48);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, $i47);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i32($i49);
    call {:si_unique_call 3203} {:cexpr "__cil_tmp42"} boogie_si_record_i32($i50);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i52 := $xor.i1($i51, 1);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i53 := $zext.i1.i32($i52);
    call {:si_unique_call 3204} {:cexpr "__cil_tmp43"} boogie_si_record_i32($i53);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $i55 := $xor.i1($i54, 1);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i32($i55);
    call {:si_unique_call 3205} {:cexpr "__cil_tmp44"} boogie_si_record_i32($i56);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i56);
    call {:si_unique_call 3206} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i57);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3207} $i58 := ldv__builtin_expect($i57, 0);
    call {:si_unique_call 3208} {:cexpr "tmp___11"} boogie_si_record_i64($i58);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p9);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p5);
    call {:si_unique_call 3210} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i61);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, 8);
    call {:si_unique_call 3211} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i62);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $p63 := $i2p.i64.ref($i62);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i8.i1(0);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3212} $i66 := ttm_vt_lock($p60, $i65, $p64);
    call {:si_unique_call 3213} {:cexpr "ret"} boogie_si_record_i32($i66);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i67);
    call {:si_unique_call 3214} {:cexpr "__cil_tmp51"} boogie_si_record_i32($i68);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i70 := $xor.i1($i69, 1);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i71 := $zext.i1.i32($i70);
    call {:si_unique_call 3215} {:cexpr "__cil_tmp52"} boogie_si_record_i32($i71);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i73 := $xor.i1($i72, 1);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $i74 := $zext.i1.i32($i73);
    call {:si_unique_call 3216} {:cexpr "__cil_tmp53"} boogie_si_record_i32($i74);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i74);
    call {:si_unique_call 3217} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i75);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3218} $i76 := ldv__builtin_expect($i75, 0);
    call {:si_unique_call 3219} {:cexpr "tmp___12"} boogie_si_record_i64($i76);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p9);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i8.i1(1);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3223} ttm_lock_set_kill($p78, $i79, 15);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p4);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3224} $i81 := ttm_bo_evict_mm($p80, 2);
    call {:si_unique_call 3225} {:cexpr "ret"} boogie_si_record_i32($i81);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $i83 := $zext.i1.i32($i82);
    call {:si_unique_call 3226} {:cexpr "__cil_tmp58"} boogie_si_record_i32($i83);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i85 := $xor.i1($i84, 1);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i86 := $zext.i1.i32($i85);
    call {:si_unique_call 3227} {:cexpr "__cil_tmp59"} boogie_si_record_i32($i86);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $i88 := $xor.i1($i87, 1);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i89 := $zext.i1.i32($i88);
    call {:si_unique_call 3228} {:cexpr "__cil_tmp60"} boogie_si_record_i32($i89);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i89);
    call {:si_unique_call 3229} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i90);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3230} $i91 := ldv__builtin_expect($i90, 0);
    call {:si_unique_call 3231} {:cexpr "tmp___13"} boogie_si_record_i64($i91);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p4);
    call {:si_unique_call 3233} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i94);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $i95 := $add.i64($i94, 134384);
    call {:si_unique_call 3234} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i95);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $p97 := $i2p.i64.ref($i95);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p97, $0.ref);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i92 == 1;
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3232} vslice_dummy_var_135 := drm_err.ref.ref(.str.244, .str.245);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb22:
    assume $i77 == 1;
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p4);
    call {:si_unique_call 3220} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i126);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i127 := $add.i64($i126, 134378);
    call {:si_unique_call 3221} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i127);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $p128 := $i2p.i64.ref($i127);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.0, $p128);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i8.i1($i129);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i131 := $zext.i1.i8($i130);
    call {:si_unique_call 3222} {:cexpr "__cil_tmp83"} boogie_si_record_i8($i131);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i132 := $trunc.i8.i1($i131);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i132 == 1);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i133 := $p2i.ref.i64($p4);
    call {:si_unique_call 3251} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i133);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i134 := $add.i64($i133, 2184);
    call {:si_unique_call 3252} {:cexpr "__cil_tmp85"} boogie_si_record_i64($i134);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $p135 := $i2p.i64.ref($i134);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3253} mutex_lock($p135);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3254} vmw_write($p4, 45, 1);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i136 := $p2i.ref.i64($p4);
    call {:si_unique_call 3255} {:cexpr "__cil_tmp88"} boogie_si_record_i64($i136);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i137 := $add.i64($i136, 2184);
    call {:si_unique_call 3256} {:cexpr "__cil_tmp89"} boogie_si_record_i64($i137);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $p138 := $i2p.i64.ref($i137);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3257} mutex_unlock($p138);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3258} vslice_dummy_var_137 := vmw_kms_restore_vga($p4);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i8.i1(1);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3259} vmw_3d_resource_dec($p4, $i140);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i35 := $i66;
    goto $bb5;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i132 == 1;
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb12:
    assume $i59 == 1;
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call {:si_unique_call 3209} devirtbounce(0, .str.36, 903, 12);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    call vmw_master_set_loop_$bb16();
    goto $bb16_last;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i34 == 1;
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i35 := $i23;
    goto $bb5;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb39_dummy:
    assume false;
    return;

  $bb38_last:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb17_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const vmw_master_drop: ref;

axiom vmw_master_drop == $sub.ref(0, 724536);

procedure vmw_master_drop($p0: ref, $p1: ref, $i2: i1);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed, $M.6, $M.11, $M.12, $M.2, $CurrAddr, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_master_drop($p0: ref, $p1: ref, $i2: i1)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i1;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i8;
  var $i43: i1;
  var $i44: i8;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i1;
  var $i55: i32;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $i67: i1;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $i77: i1;
  var $i78: i64;
  var $i79: i64;
  var $p80: ref;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $i85: i8;
  var $i86: i1;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3260} {:cexpr "vmw_master_drop:arg:from_release"} boogie_si_record_i1($i2);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3261} $p3 := vmw_priv($p0);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3262} $p4 := vmw_fpriv($p1);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    call {:si_unique_call 3263} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i5);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 152);
    call {:si_unique_call 3264} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i6);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3265} $p9 := vmw_master($p8);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    call {:si_unique_call 3266} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i10);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 152);
    call {:si_unique_call 3267} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i11);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3268} $p14 := drm_master_get($p13);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p14);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p9);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p4);
    call {:si_unique_call 3269} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i17);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 8);
    call {:si_unique_call 3270} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i18);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1(0);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3271} $i22 := ttm_vt_lock($p16, $i21, $p20);
    call {:si_unique_call 3272} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1(0);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3273} vmw_execbuf_release_pinned_bo($p3, $i23, 0);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i22, 0);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    call {:si_unique_call 3274} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i25);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i27 := $xor.i1($i26, 1);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    call {:si_unique_call 3275} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i28);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $i30 := $xor.i1($i29, 1);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    call {:si_unique_call 3276} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i31);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    call {:si_unique_call 3277} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i32);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3278} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 3279} {:cexpr "tmp___10"} boogie_si_record_i64($i33);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p9);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1(1);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3282} ttm_lock_set_kill($p37, $i38, 15);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p3);
    call {:si_unique_call 3283} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i39);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 134378);
    call {:si_unique_call 3284} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i40);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i40);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i8.i1($i42);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i8($i43);
    call {:si_unique_call 3285} {:cexpr "__cil_tmp35"} boogie_si_record_i8($i44);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i8.i1($i44);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i45 == 1);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p3);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3286} $i47 := ttm_bo_evict_mm($p46, 2);
    call {:si_unique_call 3287} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i32($i48);
    call {:si_unique_call 3288} {:cexpr "__cil_tmp37"} boogie_si_record_i32($i49);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $i51 := $xor.i1($i50, 1);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    call {:si_unique_call 3289} {:cexpr "__cil_tmp38"} boogie_si_record_i32($i52);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $i54 := $xor.i1($i53, 1);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i32($i54);
    call {:si_unique_call 3290} {:cexpr "__cil_tmp39"} boogie_si_record_i32($i55);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i55);
    call {:si_unique_call 3291} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i56);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3292} $i57 := ldv__builtin_expect($i56, 0);
    call {:si_unique_call 3293} {:cexpr "tmp___11"} boogie_si_record_i64($i57);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p3);
    call {:si_unique_call 3295} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i60);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $i61 := $add.i64($i60, 2184);
    call {:si_unique_call 3296} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i61);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $p62 := $i2p.i64.ref($i61);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3297} mutex_lock($p62);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3298} vmw_write($p3, 45, 1);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p3);
    call {:si_unique_call 3299} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i63);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 2184);
    call {:si_unique_call 3300} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i64);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $p65 := $i2p.i64.ref($i64);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3301} mutex_unlock($p65);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3302} vslice_dummy_var_140 := vmw_kms_restore_vga($p3);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i8.i1(1);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3303} vmw_3d_resource_dec($p3, $i67);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p3);
    call {:si_unique_call 3304} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i68);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i69 := $add.i64($i68, 134384);
    call {:si_unique_call 3305} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i69);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p3);
    call {:si_unique_call 3306} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i70);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i70, 134392);
    call {:si_unique_call 3307} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i71);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $p72 := $i2p.i64.ref($i71);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $p73 := $i2p.i64.ref($i69);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, $p72);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p3);
    call {:si_unique_call 3308} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i74);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i75 := $add.i64($i74, 134392);
    call {:si_unique_call 3309} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i75);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $p76 := $i2p.i64.ref($i75);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i8.i1(0);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3310} ttm_lock_set_kill($p76, $i77, 15);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p3);
    call {:si_unique_call 3311} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i78);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i79 := $add.i64($i78, 134392);
    call {:si_unique_call 3312} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i79);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $p80 := $i2p.i64.ref($i79);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3313} vslice_dummy_var_141 := ttm_vt_unlock($p80);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p3);
    call {:si_unique_call 3314} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i82);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, 134378);
    call {:si_unique_call 3315} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i83);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $p84 := $i2p.i64.ref($i83);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.0, $p84);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i8.i1($i85);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i86 == 1;
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3316} vslice_dummy_var_142 := vmw_fb_on($p3);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i58 == 1;
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3294} vslice_dummy_var_139 := drm_err.ref.ref(.str.246, .str.245);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb4:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i34 == 1;
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3280} vslice_dummy_var_138 := drm_err.ref.ref(.str.246, .str.247);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p4);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3281} drm_master_put($p36);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_484:
    assume !assertsPassed;
    return;
}



const ttm_vt_lock: ref;

axiom ttm_vt_lock == $sub.ref(0, 725568);

procedure ttm_vt_lock($p0: ref, $i1: i1, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_vt_lock($p0: ref, $i1: i1, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3317} {:cexpr "ttm_vt_lock:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3318} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 3319} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ttm_lock_set_kill: ref;

axiom ttm_lock_set_kill == $sub.ref(0, 726600);

procedure ttm_lock_set_kill($p0: ref, $i1: i1, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ttm_lock_set_kill($p0: ref, $i1: i1, $i2: i32)
{
  var $i3: i8;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i1);
    call {:si_unique_call 3320} {:cexpr "ttm_lock_set_kill:arg:val"} boogie_si_record_i1($i1);
    call {:si_unique_call 3321} {:cexpr "ttm_lock_set_kill:arg:signal"} boogie_si_record_i32($i2);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 3322} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i4);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 136);
    call {:si_unique_call 3323} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i5);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i3);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i5);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i6);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i8);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i3);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    call {:si_unique_call 3324} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i10);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 140);
    call {:si_unique_call 3325} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i11);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i2);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ttm_bo_evict_mm: ref;

axiom ttm_bo_evict_mm == $sub.ref(0, 727632);

procedure ttm_bo_evict_mm($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_evict_mm($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3326} {:cexpr "ttm_bo_evict_mm:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3327} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 3328} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vmw_kms_restore_vga: ref;

axiom vmw_kms_restore_vga == $sub.ref(0, 728664);

procedure vmw_kms_restore_vga($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vmw_kms_restore_vga($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $i59: i64;
  var $p60: ref;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $i67: i32;
  var $i68: i64;
  var $i69: i64;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 3329} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i1);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 2576);
    call {:si_unique_call 3330} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 3331} {:cexpr "__cil_tmp7"} boogie_si_record_i32($i4);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3332} vmw_write($p0, 2, $i4);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 3333} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i5);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 2580);
    call {:si_unique_call 3334} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i6);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 3335} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i8);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3336} vmw_write($p0, 3, $i8);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    call {:si_unique_call 3337} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i9);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 2584);
    call {:si_unique_call 3338} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i10);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 3339} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i12);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3340} vmw_write($p0, 7, $i12);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    call {:si_unique_call 3341} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i13);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 2156);
    call {:si_unique_call 3342} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i14);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    call {:si_unique_call 3343} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i16);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 131072);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3348} $i23 := vmw_fifo_have_pitchlock($p0);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 3349} {:cexpr "tmp___7"} boogie_si_record_i8($i24);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p0);
    call {:si_unique_call 3350} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i36);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 2156);
    call {:si_unique_call 3351} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i37);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    call {:si_unique_call 3352} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i39);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 524288);
    call {:si_unique_call 3353} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i40);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i41 == 1);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb7:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p0);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, 2596);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i43);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb11;

  $bb11:
    call $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $p53, $i54, $i55, $p56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $p64, $i65, $p66, $i67, $i68, $i69, $p70, $i71, $i72 := vmw_kms_restore_vga_loop_$bb11($p0, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $p53, $i54, $i55, $p56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $p64, $i65, $p66, $i67, $i68, $i69, $p70, $i71, $i72);
    goto $bb11_last;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p44);
    call {:si_unique_call 3360} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i46);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $i47 := $ult.i32($i45, $i46);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i47 == 1);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13:
    assume $i47 == 1;
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i48 := $zext.i32.i64($i45);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i49 := $mul.i64($i48, 20);
    call {:si_unique_call 3361} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i49);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i50 := $add.i64(2256, $i49);
    call {:si_unique_call 3362} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i50);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p0);
    call {:si_unique_call 3363} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i51);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, $i50);
    call {:si_unique_call 3364} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i52);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3365} vmw_write($p0, 35, $i45);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    call {:si_unique_call 3366} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i54);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 8);
    call {:si_unique_call 3367} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i55);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $p56 := $i2p.i64.ref($i55);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    call {:si_unique_call 3368} {:cexpr "__cil_tmp41"} boogie_si_record_i32($i57);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3369} vmw_write($p0, 36, $i57);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p53);
    call {:si_unique_call 3370} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i58);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 12);
    call {:si_unique_call 3371} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i59);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $p60 := $i2p.i64.ref($i59);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    call {:si_unique_call 3372} {:cexpr "__cil_tmp44"} boogie_si_record_i32($i61);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3373} vmw_write($p0, 37, $i61);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p53);
    call {:si_unique_call 3374} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i62);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 16);
    call {:si_unique_call 3375} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i63);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $p64 := $i2p.i64.ref($i63);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    call {:si_unique_call 3376} {:cexpr "__cil_tmp47"} boogie_si_record_i32($i65);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3377} vmw_write($p0, 38, $i65);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p53);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    call {:si_unique_call 3378} {:cexpr "__cil_tmp48"} boogie_si_record_i32($i67);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3379} vmw_write($p0, 39, $i67);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p53);
    call {:si_unique_call 3380} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i68);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $i69 := $add.i64($i68, 4);
    call {:si_unique_call 3381} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i69);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $p70 := $i2p.i64.ref($i69);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    call {:si_unique_call 3382} {:cexpr "__cil_tmp51"} boogie_si_record_i32($i71);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3383} vmw_write($p0, 40, $i71);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3384} vmw_write($p0, 35, $sub.i32(0, 1));
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i45, 1);
    call {:si_unique_call 3385} {:cexpr "i"} boogie_si_record_i32($i72);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $i45 := $i72;
    goto corral_source_split_7388_dummy;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p0);
    call {:si_unique_call 3354} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i26);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, 2592);
    call {:si_unique_call 3355} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i27);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $p28 := $i2p.i64.ref($i27);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    call {:si_unique_call 3356} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i29);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p0);
    call {:si_unique_call 3357} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i30);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 2144);
    call {:si_unique_call 3358} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i31);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p33, $mul.ref(8, 4));
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3359} iowrite32($i29, $p35);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    call {:si_unique_call 3344} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i19);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 2592);
    call {:si_unique_call 3345} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i20);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    call {:si_unique_call 3346} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i22);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3347} vmw_write($p0, 32, $i22);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_7388_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7348;
}



const vmw_3d_resource_dec: ref;

axiom vmw_3d_resource_dec == $sub.ref(0, 729696);

procedure vmw_3d_resource_dec($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed, $M.2, $M.6, $CurrAddr, $M.11, $M.12, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation vmw_3d_resource_dec($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i1;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 3386} {:cexpr "vmw_3d_resource_dec:arg:hide_svga"} boogie_si_record_i1($i1);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 3387} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i3);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 134664);
    call {:si_unique_call 3388} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i4);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3389} mutex_lock($p5);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 3390} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i6);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 134736);
    call {:si_unique_call 3391} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i7);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 3392} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i8);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 134736);
    call {:si_unique_call 3393} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i9);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    call {:si_unique_call 3394} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i11);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32($i11, 1);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i7);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    call {:si_unique_call 3395} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i14);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 134736);
    call {:si_unique_call 3396} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i15);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    call {:si_unique_call 3397} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i17);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    call {:si_unique_call 3398} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i20);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3399} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 3400} {:cexpr "tmp___9"} boogie_si_record_i64($i21);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i2);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    call {:si_unique_call 3402} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i32);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 134736);
    call {:si_unique_call 3403} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i33);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    call {:si_unique_call 3404} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i35);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p0);
    call {:si_unique_call 3405} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i36);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 134664);
    call {:si_unique_call 3406} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i37);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3407} mutex_unlock($p38);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i35, 0);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    call {:si_unique_call 3418} {:cexpr "__cil_tmp33"} boogie_si_record_i32($i40);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $i42 := $xor.i1($i41, 1);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    call {:si_unique_call 3419} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i43);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $i45 := $xor.i1($i44, 1);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i32($i45);
    call {:si_unique_call 3420} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i46);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    call {:si_unique_call 3421} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i47);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3422} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 3423} {:cexpr "tmp___10"} boogie_si_record_i64($i48);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i49 == 1;
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call {:si_unique_call 3424} devirtbounce(0, .str.36, 392, 12);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    call vmw_3d_resource_dec_loop_$bb16();
    goto $bb16_last;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p0);
    call {:si_unique_call 3408} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i24);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 2184);
    call {:si_unique_call 3409} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i25);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3410} mutex_lock($p26);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3411} $i27 := vmw_read($p0, 1);
    call {:si_unique_call 3412} {:cexpr "tmp___7"} boogie_si_record_i32($i27);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 2);
    call {:si_unique_call 3413} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i28);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3414} vmw_write($p0, 1, $i28);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    call {:si_unique_call 3415} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i29);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 2184);
    call {:si_unique_call 3416} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i30);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3417} mutex_unlock($p31);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3401} vmw_release_device($p0);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb3;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb17_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ttm_vt_unlock: ref;

axiom ttm_vt_unlock == $sub.ref(0, 730728);

procedure ttm_vt_unlock($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_vt_unlock($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3425} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 3426} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vmw_fb_on: ref;

axiom vmw_fb_on == $sub.ref(0, 731760);

procedure vmw_fb_on($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed, $M.6, $M.11, $M.12, $M.2, $CurrAddr, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_fb_on($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i1;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $i72: i1;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $i76: i64;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i64;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $i88: i64;
  var $i89: i64;
  var $p90: ref;
  var $i92: i64;
  var $i93: i64;
  var $p94: ref;
  var $i95: i32;
  var $i96: i64;
  var $i97: i64;
  var $p98: ref;
  var $i99: i32;
  var $i100: i64;
  var $i101: i64;
  var $p102: ref;
  var $i7: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3427} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 3428} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i2);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 2600);
    call {:si_unique_call 3429} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i3);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $i6 := $ne.ref($p5, $0.ref);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 3430} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i8);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 2600);
    call {:si_unique_call 3431} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i9);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    call {:si_unique_call 3432} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i13);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 1160);
    call {:si_unique_call 3433} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i14);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 3434} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i18);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p17);
    call {:si_unique_call 3435} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i19);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 144);
    call {:si_unique_call 3436} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i20);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    call {:si_unique_call 3437} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i23);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, $i18);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3438} vslice_dummy_var_143 := vmw_overlay_stop_all($p0);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p17);
    call {:si_unique_call 3439} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i26);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, 16);
    call {:si_unique_call 3440} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i27);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $p28 := $i2p.i64.ref($i27);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1(1);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1(0);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3441} $i32 := vmw_dmabuf_to_start_of_vram($p0, $p29, $i30, $i31);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    call {:si_unique_call 3442} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    call {:si_unique_call 3443} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i34);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i36 := $xor.i1($i35, 1);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    call {:si_unique_call 3444} {:cexpr "__cil_tmp33"} boogie_si_record_i32($i37);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $i39 := $xor.i1($i38, 1);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    call {:si_unique_call 3445} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i40);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    call {:si_unique_call 3446} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i41);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3447} $i42 := ldv__builtin_expect($i41, 0);
    call {:si_unique_call 3448} {:cexpr "tmp___7"} boogie_si_record_i64($i42);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p17);
    call {:si_unique_call 3461} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i45);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 16);
    call {:si_unique_call 3462} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i46);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $p47 := $i2p.i64.ref($i46);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p17);
    call {:si_unique_call 3463} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i50);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 16);
    call {:si_unique_call 3464} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i51);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    call {:si_unique_call 3465} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i54);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 40);
    call {:si_unique_call 3466} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i55);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $p56 := $i2p.i64.ref($i55);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p56);
    call {:si_unique_call 3467} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i57);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p17);
    call {:si_unique_call 3468} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i58);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 24);
    call {:si_unique_call 3469} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i59);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $p60 := $i2p.i64.ref($i59);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3470} $i61 := ttm_bo_kmap($p49, 0, $i57, $p60);
    call {:si_unique_call 3471} {:cexpr "ret"} boogie_si_record_i32($i61);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $i63 := $zext.i1.i32($i62);
    call {:si_unique_call 3472} {:cexpr "__cil_tmp50"} boogie_si_record_i32($i63);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i65 := $xor.i1($i64, 1);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $i66 := $zext.i1.i32($i65);
    call {:si_unique_call 3473} {:cexpr "__cil_tmp51"} boogie_si_record_i32($i66);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $i68 := $xor.i1($i67, 1);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i32($i68);
    call {:si_unique_call 3474} {:cexpr "__cil_tmp52"} boogie_si_record_i32($i69);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i69);
    call {:si_unique_call 3475} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i70);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3476} $i71 := ldv__builtin_expect($i70, 0);
    call {:si_unique_call 3477} {:cexpr "tmp___8"} boogie_si_record_i64($i71);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p17);
    call {:si_unique_call 3479} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i73);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i73, 144);
    call {:si_unique_call 3480} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i74);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p17);
    call {:si_unique_call 3481} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i75);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $i76 := $add.i64($i75, 24);
    call {:si_unique_call 3482} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i76);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $p77 := $i2p.i64.ref($i76);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3483} $p78 := ttm_kmap_obj_virtual($p77, $p1);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $p79 := $i2p.i64.ref($i74);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p79, $p78);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p17);
    call {:si_unique_call 3484} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i80);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i81 := $add.i64($i80, 160);
    call {:si_unique_call 3485} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i81);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $p82 := $i2p.i64.ref($i81);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3486} $p83 := spinlock_check($p82);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3487} $i84 := _raw_spin_lock_irqsave($p83);
    call {:si_unique_call 3488} {:cexpr "flags"} boogie_si_record_i64($i84);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p17);
    call {:si_unique_call 3489} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i85);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 184);
    call {:si_unique_call 3490} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i86);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $p87 := $i2p.i64.ref($i86);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, 1);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p17);
    call {:si_unique_call 3491} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i88);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $i89 := $add.i64($i88, 160);
    call {:si_unique_call 3492} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i89);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $p90 := $i2p.i64.ref($i89);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3493} spin_unlock_irqrestore($p90, $i84);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3450} vslice_dummy_var_145 := vmw_fb_set_par($p12);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p12);
    call {:si_unique_call 3451} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i92);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $i93 := $add.i64($i92, 160);
    call {:si_unique_call 3452} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i93);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $p94 := $i2p.i64.ref($i93);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    call {:si_unique_call 3453} {:cexpr "__cil_tmp70"} boogie_si_record_i32($i95);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p12);
    call {:si_unique_call 3454} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i96);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $i97 := $add.i64($i96, 164);
    call {:si_unique_call 3455} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i97);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $p98 := $i2p.i64.ref($i97);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    call {:si_unique_call 3456} {:cexpr "__cil_tmp74"} boogie_si_record_i32($i99);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3457} vmw_fb_dirty_mark($p17, 0, 0, $i95, $i99);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p12);
    call {:si_unique_call 3458} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i100);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i101 := $add.i64($i100, 960);
    call {:si_unique_call 3459} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i101);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $p102 := $i2p.i64.ref($i101);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3460} vslice_dummy_var_146 := schedule_delayed_work($p102, 0);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb14:
    assume $i72 == 1;
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    call {:si_unique_call 3478} devirtbounce(0, .str.41, 639, 12);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call vmw_fb_on_loop_$bb18();
    goto $bb18_last;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb19_dummy;

  $bb8:
    assume $i43 == 1;
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3449} vslice_dummy_var_144 := drm_err.ref.ref(.str.39, .str.40);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const vmw_overlay_stop_all: ref;

axiom vmw_overlay_stop_all == $sub.ref(0, 732792);

procedure vmw_overlay_stop_all($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed, $M.11, $M.12, $M.2, $M.6, $CurrAddr, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_overlay_stop_all($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i32;
  var $i44: i64;
  var $i46: i32;
  var $p47: ref;
  var vslice_dummy_var_147: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 3494} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i1);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 2624);
    call {:si_unique_call 3495} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i2);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i5 := $ne.ref($p4, $0.ref);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3496} mutex_lock($p6);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb5:
    call $i7, $i8, $i9, $i10, $i11, $i12, $i13, $p14, $p15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i46, vslice_dummy_var_147 := vmw_overlay_stop_all_loop_$bb5($p0, $p4, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $p14, $p15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i46, vslice_dummy_var_147);
    goto $bb5_last;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 1);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p4);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3501} mutex_unlock($p47);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i7);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $i10 := $mul.i64($i9, 104);
    call {:si_unique_call 3497} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i10);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $i11 := $add.i64(72, $i10);
    call {:si_unique_call 3498} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i11);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p4);
    call {:si_unique_call 3499} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i12);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, $i11);
    call {:si_unique_call 3500} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i13);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $i17 := $ne.ref($p16, $0.ref);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i7, 1);
    call {:si_unique_call 3502} {:cexpr "i"} boogie_si_record_i32($i46);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i7 := $i46;
    goto corral_source_split_7626_dummy;

  $bb11:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1(0);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1(0);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3503} $i20 := vmw_overlay_stop($p0, $i7, $i18, $i19);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    call {:si_unique_call 3504} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    call {:si_unique_call 3505} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i22);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i24 := $xor.i1($i23, 1);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    call {:si_unique_call 3506} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i25);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $i27 := $xor.i1($i26, 1);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    call {:si_unique_call 3507} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i28);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $i30 := $xor.i1($i29, 1);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    call {:si_unique_call 3508} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i31);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $i33 := $xor.i1($i32, 1);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    call {:si_unique_call 3509} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i34);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    call {:si_unique_call 3510} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i35);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3511} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 3512} {:cexpr "tmp___7"} boogie_si_record_i64($i36);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i28, 0);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i39 := $xor.i1($i38, 1);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    call {:si_unique_call 3514} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i40);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $i42 := $xor.i1($i41, 1);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    call {:si_unique_call 3515} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i43);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    call {:si_unique_call 3516} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i44);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3517} vslice_dummy_var_147 := ldv__builtin_expect($i44, 0);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb15:
    assume $i37 == 1;
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3513} warn_slowpath_null(.str.98, 380);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  corral_source_split_7626_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7603;
}



const vmw_fb_set_par: ref;

axiom vmw_fb_set_par == $sub.ref(0, 733824);

procedure vmw_fb_set_par($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vmw_fb_set_par($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i32;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i1;
  var $i70: i32;
  var $i71: i64;
  var $i30: i32;
  var vslice_dummy_var_148: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 3518} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i1);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 1160);
    call {:si_unique_call 3519} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i2);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 3520} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i8);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 160);
    call {:si_unique_call 3521} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i9);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    call {:si_unique_call 3522} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i11);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    call {:si_unique_call 3523} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i12);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 164);
    call {:si_unique_call 3524} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i13);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    call {:si_unique_call 3525} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i15);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p0);
    call {:si_unique_call 3526} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i16);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 368);
    call {:si_unique_call 3527} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i17);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    call {:si_unique_call 3528} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i19);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p5);
    call {:si_unique_call 3529} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i20);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 128);
    call {:si_unique_call 3530} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i21);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    call {:si_unique_call 3531} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i23);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p5);
    call {:si_unique_call 3532} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i24);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 124);
    call {:si_unique_call 3533} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i25);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    call {:si_unique_call 3534} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i27);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3535} $i28 := vmw_kms_write_svga($p7, $i11, $i15, $i19, $i23, $i27);
    call {:si_unique_call 3536} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p7);
    call {:si_unique_call 3537} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i31);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 2156);
    call {:si_unique_call 3538} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i32);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    call {:si_unique_call 3539} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i34);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 524288);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3560} $i53 := vmw_read($p7, 14);
    call {:si_unique_call 3561} {:cexpr "tmp___7"} boogie_si_record_i32($i53);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $i57 := $xor.i1($i56, 1);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i32($i57);
    call {:si_unique_call 3562} {:cexpr "__cil_tmp50"} boogie_si_record_i32($i58);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $i60 := $xor.i1($i59, 1);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i32($i60);
    call {:si_unique_call 3563} {:cexpr "__cil_tmp51"} boogie_si_record_i32($i61);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    call {:si_unique_call 3564} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i62);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3565} $i63 := ldv__builtin_expect($i62, 0);
    call {:si_unique_call 3566} {:cexpr "tmp___9"} boogie_si_record_i64($i63);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i55, 0);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $i66 := $xor.i1($i65, 1);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i66);
    call {:si_unique_call 3568} {:cexpr "__cil_tmp54"} boogie_si_record_i32($i67);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $i69 := $xor.i1($i68, 1);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $i70 := $zext.i1.i32($i69);
    call {:si_unique_call 3569} {:cexpr "__cil_tmp55"} boogie_si_record_i32($i70);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i70);
    call {:si_unique_call 3570} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i71);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3571} vslice_dummy_var_148 := ldv__builtin_expect($i71, 0);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb11:
    assume $i64 == 1;
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3567} warn_slowpath_null(.str.41, 187);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i54 == 1;
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $i55 := 1;
    goto $bb10;

  $bb5:
    assume $i36 == 1;
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3540} vmw_write($p7, 34, 1);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3541} vmw_write($p7, 35, 0);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3542} vmw_write($p7, 36, 1);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p0);
    call {:si_unique_call 3543} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i37);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 176);
    call {:si_unique_call 3544} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i38);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i38);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    call {:si_unique_call 3545} {:cexpr "__cil_tmp38"} boogie_si_record_i32($i40);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3546} vmw_write($p7, 37, $i40);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p0);
    call {:si_unique_call 3547} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i41);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 180);
    call {:si_unique_call 3548} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i42);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i42);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    call {:si_unique_call 3549} {:cexpr "__cil_tmp42"} boogie_si_record_i32($i44);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3550} vmw_write($p7, 38, $i44);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p0);
    call {:si_unique_call 3551} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i45);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 160);
    call {:si_unique_call 3552} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i46);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $p47 := $i2p.i64.ref($i46);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    call {:si_unique_call 3553} {:cexpr "__cil_tmp45"} boogie_si_record_i32($i48);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3554} vmw_write($p7, 39, $i48);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p0);
    call {:si_unique_call 3555} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i49);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i49, 164);
    call {:si_unique_call 3556} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i50);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $p51 := $i2p.i64.ref($i50);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    call {:si_unique_call 3557} {:cexpr "__cil_tmp49"} boogie_si_record_i32($i52);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3558} vmw_write($p7, 40, $i52);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3559} vmw_write($p7, 35, $sub.i32(0, 1));
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $i30 := $i28;
    goto $bb3;
}



const vmw_fb_dirty_mark: ref;

axiom vmw_fb_dirty_mark == $sub.ref(0, 734856);

procedure vmw_fb_dirty_mark($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vmw_fb_dirty_mark($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $i43: i8;
  var $i44: i1;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $i70: i64;
  var $i71: i64;
  var $p72: ref;
  var $i73: i64;
  var $i74: i64;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $i78: i64;
  var $i79: i64;
  var $p80: ref;
  var $i81: i64;
  var $i82: i64;
  var $p83: ref;
  var vslice_dummy_var_149: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3572} {:cexpr "vmw_fb_dirty_mark:arg:x1"} boogie_si_record_i32($i1);
    call {:si_unique_call 3573} {:cexpr "vmw_fb_dirty_mark:arg:y1"} boogie_si_record_i32($i2);
    call {:si_unique_call 3574} {:cexpr "vmw_fb_dirty_mark:arg:width"} boogie_si_record_i32($i3);
    call {:si_unique_call 3575} {:cexpr "vmw_fb_dirty_mark:arg:height"} boogie_si_record_i32($i4);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    call {:si_unique_call 3576} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i7);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 2600);
    call {:si_unique_call 3577} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i8);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i1, $i3);
    call {:si_unique_call 3578} {:cexpr "x2"} boogie_si_record_i32($i12);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i2, $i4);
    call {:si_unique_call 3579} {:cexpr "y2"} boogie_si_record_i32($i13);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    call {:si_unique_call 3580} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i14);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 160);
    call {:si_unique_call 3581} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i15);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3582} $p17 := spinlock_check($p16);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3583} $i18 := _raw_spin_lock_irqsave($p17);
    call {:si_unique_call 3584} {:cexpr "flags"} boogie_si_record_i64($i18);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    call {:si_unique_call 3585} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i19);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 196);
    call {:si_unique_call 3586} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i20);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    call {:si_unique_call 3587} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i22);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    call {:si_unique_call 3588} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i23);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 188);
    call {:si_unique_call 3589} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i24);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    call {:si_unique_call 3590} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i26);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, $i22);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p0);
    call {:si_unique_call 3601} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i49);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i49, 188);
    call {:si_unique_call 3602} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i50);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $p51 := $i2p.i64.ref($i50);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    call {:si_unique_call 3603} {:cexpr "__cil_tmp49"} boogie_si_record_i32($i52);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $i53 := $ult.i32($i1, $i52);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p0);
    call {:si_unique_call 3612} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i57);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 192);
    call {:si_unique_call 3613} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i58);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $p59 := $i2p.i64.ref($i58);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    call {:si_unique_call 3614} {:cexpr "__cil_tmp56"} boogie_si_record_i32($i60);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $i61 := $ult.i32($i2, $i60);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p0);
    call {:si_unique_call 3617} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i65);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $i66 := $add.i64($i65, 196);
    call {:si_unique_call 3618} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i66);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $p67 := $i2p.i64.ref($i66);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    call {:si_unique_call 3619} {:cexpr "__cil_tmp63"} boogie_si_record_i32($i68);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $i69 := $ugt.i32($i12, $i68);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p0);
    call {:si_unique_call 3622} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i73);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i73, 200);
    call {:si_unique_call 3623} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i74);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $p75 := $i2p.i64.ref($i74);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    call {:si_unique_call 3624} {:cexpr "__cil_tmp70"} boogie_si_record_i32($i76);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $i77 := $ugt.i32($i13, $i76);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p0);
    call {:si_unique_call 3607} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i81);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i81, 160);
    call {:si_unique_call 3608} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i82);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $p83 := $i2p.i64.ref($i82);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3609} spin_unlock_irqrestore($p83, $i18);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i77 == 1;
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p0);
    call {:si_unique_call 3625} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i78);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $i79 := $add.i64($i78, 200);
    call {:si_unique_call 3626} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i79);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $p80 := $i2p.i64.ref($i79);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i13);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i69 == 1;
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p0);
    call {:si_unique_call 3620} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i70);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i70, 196);
    call {:si_unique_call 3621} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i71);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $p72 := $i2p.i64.ref($i71);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i12);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i61 == 1;
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p0);
    call {:si_unique_call 3615} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i62);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 192);
    call {:si_unique_call 3616} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i63);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $p64 := $i2p.i64.ref($i63);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i2);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i53 == 1;
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p0);
    call {:si_unique_call 3610} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i54);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 188);
    call {:si_unique_call 3611} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i55);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $p56 := $i2p.i64.ref($i55);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i1);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p0);
    call {:si_unique_call 3591} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i28);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 188);
    call {:si_unique_call 3592} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i29);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i1);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    call {:si_unique_call 3593} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i31);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 192);
    call {:si_unique_call 3594} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i32);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i2);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p0);
    call {:si_unique_call 3595} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i34);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 196);
    call {:si_unique_call 3596} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i35);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i12);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p0);
    call {:si_unique_call 3597} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i37);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 200);
    call {:si_unique_call 3598} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i38);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i38);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i13);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p0);
    call {:si_unique_call 3599} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i40);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 184);
    call {:si_unique_call 3600} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i41);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i8.i1($i43);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i44 == 1;
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p11);
    call {:si_unique_call 3604} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i45);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 960);
    call {:si_unique_call 3605} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i46);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $p47 := $i2p.i64.ref($i46);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3606} vslice_dummy_var_149 := schedule_delayed_work($p47, 8);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const schedule_delayed_work: ref;

axiom schedule_delayed_work == $sub.ref(0, 735888);

procedure schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3627} {:cexpr "schedule_delayed_work:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3628} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 3629} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vmw_kms_write_svga: ref;

axiom vmw_kms_write_svga == $sub.ref(0, 736920);

procedure vmw_kms_write_svga($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vmw_kms_write_svga($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i25: i32;
  var vslice_dummy_var_150: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3630} {:cexpr "vmw_kms_write_svga:arg:width"} boogie_si_record_i32($i1);
    call {:si_unique_call 3631} {:cexpr "vmw_kms_write_svga:arg:height"} boogie_si_record_i32($i2);
    call {:si_unique_call 3632} {:cexpr "vmw_kms_write_svga:arg:pitch"} boogie_si_record_i32($i3);
    call {:si_unique_call 3633} {:cexpr "vmw_kms_write_svga:arg:bpp"} boogie_si_record_i32($i4);
    call {:si_unique_call 3634} {:cexpr "vmw_kms_write_svga:arg:depth"} boogie_si_record_i32($i5);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 3635} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i6);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 2156);
    call {:si_unique_call 3636} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i7);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 3637} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i9);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 131072);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3639} $i12 := vmw_fifo_have_pitchlock($p0);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 3640} {:cexpr "tmp___7"} boogie_si_record_i8($i13);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3641} vmw_write($p0, 2, $i1);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3642} vmw_write($p0, 3, $i2);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3643} vmw_write($p0, 7, $i4);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3644} $i21 := vmw_read($p0, 6);
    call {:si_unique_call 3645} {:cexpr "tmp___9"} boogie_si_record_i32($i21);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, $i5);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3649} $i23 := vmw_read($p0, 6);
    call {:si_unique_call 3650} {:cexpr "tmp___8"} boogie_si_record_i32($i23);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3651} vslice_dummy_var_150 := drm_err.ref.ref.i32.i32.i32(.str.28, .str.29, $i5, $i4, $i23);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 22);
    goto $bb9;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    call {:si_unique_call 3646} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i15);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 2144);
    call {:si_unique_call 3647} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i16);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(8, 4));
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3648} iowrite32($i3, $p20);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3638} vmw_write($p0, 32, $i3);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmw_fifo_have_pitchlock: ref;

axiom vmw_fifo_have_pitchlock == $sub.ref(0, 737952);

procedure vmw_fifo_have_pitchlock($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation vmw_fifo_have_pitchlock($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 3652} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i1);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 2144);
    call {:si_unique_call 3653} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 3654} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i5);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 2156);
    call {:si_unique_call 3655} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 3656} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i8);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 32768);
    call {:si_unique_call 3657} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i9);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p4, $mul.ref(4, 4));
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3658} $i14 := ioread32($p13);
    call {:si_unique_call 3659} {:cexpr "caps"} boogie_si_record_i32($i14);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 4);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb3;
}



const vmw_release_device: ref;

axiom vmw_release_device == $sub.ref(0, 738984);

procedure vmw_release_device($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.1, $M.6, assertsPassed, $CurrAddr, $M.11, $M.12, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation vmw_release_device($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 3660} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i1);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 3661} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 134752);
    call {:si_unique_call 3662} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i3);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    call {:si_unique_call 3663} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i6);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, $i1);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 3664} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i8);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $i10 := $xor.i1($i9, 1);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 3665} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i11);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $i13 := $xor.i1($i12, 1);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    call {:si_unique_call 3666} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i14);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    call {:si_unique_call 3667} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i15);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3668} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 3669} {:cexpr "tmp___7"} boogie_si_record_i64($i16);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p0);
    call {:si_unique_call 3671} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i18);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 134744);
    call {:si_unique_call 3672} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i19);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3673} ttm_bo_unref($p20);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    call {:si_unique_call 3674} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i21);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 3008);
    call {:si_unique_call 3675} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i22);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3676} vmw_fence_fifo_down($p24);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p0);
    call {:si_unique_call 3677} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i25);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 1856);
    call {:si_unique_call 3678} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i26);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3679} vmw_fifo_release($p0, $p27);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call {:si_unique_call 3670} devirtbounce(0, .str.36, 330, 12);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call vmw_release_device_loop_$bb7();
    goto $bb7_last;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb8_dummy;

  $bb8_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const vmw_fence_fifo_down: ref;

axiom vmw_fence_fifo_down == $sub.ref(0, 740016);

procedure vmw_fence_fifo_down($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.6, $M.1, $CurrAddr, assertsPassed, $M.11, $M.12, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation vmw_fence_fifo_down($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i1;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $i70: i64;
  var $i71: i64;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $i81: i64;
  var $i82: i64;
  var $p83: ref;
  var vslice_dummy_var_151: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3680} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 3681} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i2);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 16);
    call {:si_unique_call 3682} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i3);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3683} $p5 := spinlock_check($p4);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3684} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 3685} {:cexpr "irq_flags"} boogie_si_record_i64($i6);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    call {:si_unique_call 3686} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i7);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 100);
    call {:si_unique_call 3687} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i8);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 1);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $i10, $i11, $p12, $i13, $i14, $i15, $i16, $p17, $p18, $i19, $i20, $p21, $i22, $p23, $i24, $i25, $p26, $p27, $p28, $i29, $i30, $p31, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $i56, $p57, $i58, $i59, $p60, $i61, $i62, $p63, $i64, $i65, $p66, $i67, $i68, $p69, $i70, $i71, $p72, $i73, $i74, $i75, $i76, $i77, $i78, $p79, vslice_dummy_var_151 := vmw_fence_fifo_down_loop_$bb7($p0, $p1, $i10, $i11, $p12, $i13, $i14, $i15, $i16, $p17, $p18, $i19, $i20, $p21, $i22, $p23, $i24, $i25, $p26, $p27, $p28, $i29, $i30, $p31, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $i56, $p57, $i58, $i59, $p60, $i61, $i62, $p63, $i64, $i65, $p66, $i67, $i68, $p69, $i70, $i71, $p72, $i73, $i74, $i75, $i76, $i77, $i78, $p79, vslice_dummy_var_151);
    goto $bb7_last;

  $bb8:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    call {:si_unique_call 3688} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i10);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 40);
    call {:si_unique_call 3689} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i11);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3690} $i13 := list_empty($p12);
    call {:si_unique_call 3691} {:cexpr "tmp___12"} boogie_si_record_i32($i13);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    call {:si_unique_call 3695} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i15);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 48);
    call {:si_unique_call 3696} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i16);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 3697} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i19);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 16);
    call {:si_unique_call 3698} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i20);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i32($p21);
    call {:si_unique_call 3699} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i22);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p18);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i22);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64(0, $i24);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p23, $mul.ref($i25, 1));
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3700} kref_get($p28);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    call {:si_unique_call 3701} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i29);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 16);
    call {:si_unique_call 3702} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i30);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3703} spin_unlock_irq($p31);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p27);
    call {:si_unique_call 3704} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i32);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 36);
    call {:si_unique_call 3705} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i33);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    call {:si_unique_call 3706} {:cexpr "__cil_tmp41"} boogie_si_record_i32($i35);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1(0);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1(0);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3707} $i38 := vmw_fence_obj_wait($p27, $i35, $i36, $i37, 1250);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    call {:si_unique_call 3708} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    call {:si_unique_call 3709} {:cexpr "__cil_tmp44"} boogie_si_record_i32($i40);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $i42 := $xor.i1($i41, 1);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    call {:si_unique_call 3710} {:cexpr "__cil_tmp45"} boogie_si_record_i32($i43);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $i45 := $xor.i1($i44, 1);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i32($i45);
    call {:si_unique_call 3711} {:cexpr "__cil_tmp46"} boogie_si_record_i32($i46);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    call {:si_unique_call 3712} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i47);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3713} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 3714} {:cexpr "tmp___8"} boogie_si_record_i64($i48);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p0);
    call {:si_unique_call 3731} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i67);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i67, 16);
    call {:si_unique_call 3732} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i68);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $p69 := $i2p.i64.ref($i68);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3733} spin_lock_irq($p69);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p27);
    call {:si_unique_call 3734} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i70);
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i70, 16);
    call {:si_unique_call 3735} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i71);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $p72 := $i2p.i64.ref($i71);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3736} $i73 := list_empty($p72);
    call {:si_unique_call 3737} {:cexpr "tmp___9"} boogie_si_record_i32($i73);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i75);
    call {:si_unique_call 3738} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i76);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3739} $i77 := ldv__builtin_expect($i76, 0);
    call {:si_unique_call 3740} {:cexpr "tmp___11"} boogie_si_record_i64($i77);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p27);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3742} vslice_dummy_var_151 := kref_put($p79, vmw_fence_obj_destroy_locked);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    goto corral_source_split_8081_dummy;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i78 == 1;
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    call {:si_unique_call 3741} devirtbounce(0, .str.108, 666, 12);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    call vmw_fence_fifo_down_loop_$bb25();
    goto $bb25_last;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb26_dummy;

  $bb18:
    assume $i74 == 1;
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i75 := 0;
    goto $bb20;

  $bb13:
    assume $i49 == 1;
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p27);
    call {:si_unique_call 3715} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i50);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 16);
    call {:si_unique_call 3716} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i51);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3717} list_del_init($p52);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p27);
    call {:si_unique_call 3718} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i53);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i53, 32);
    call {:si_unique_call 3719} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i54);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p27);
    call {:si_unique_call 3720} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i55);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 32);
    call {:si_unique_call 3721} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i56);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    call {:si_unique_call 3722} {:cexpr "__cil_tmp55"} boogie_si_record_i32($i58);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i58, 1);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $p60 := $i2p.i64.ref($i54);
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3723} INIT_LIST_HEAD($p1);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p27);
    call {:si_unique_call 3724} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i61);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, 40);
    call {:si_unique_call 3725} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i62);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $p63 := $i2p.i64.ref($i62);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3726} list_splice_init($p63, $p1);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3727} vmw_fences_perform_actions($p0, $p1);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p27);
    call {:si_unique_call 3728} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i64);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $i65 := $add.i64($i64, 64);
    call {:si_unique_call 3729} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i65);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $p66 := $i2p.i64.ref($i65);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3730} __wake_up($p66, 3, 0, $0.ref);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p0);
    call {:si_unique_call 3692} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i81);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i81, 16);
    call {:si_unique_call 3693} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i82);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $p83 := $i2p.i64.ref($i82);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3694} spin_unlock_irqrestore($p83, $i6);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    return;

  $bb26_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_8081_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const vmw_fifo_release: ref;

axiom vmw_fifo_release == $sub.ref(0, 741048);

procedure vmw_fifo_release($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed;



implementation vmw_fifo_release($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i1;
  var $i48: i32;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i1;
  var $i71: i32;
  var $i72: i1;
  var $i73: i1;
  var $i74: i32;
  var $i75: i64;
  var $i76: i64;
  var $i77: i1;
  var $i78: i64;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i64;
  var $p86: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 3743} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i2);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 2144);
    call {:si_unique_call 3744} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i3);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 3745} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i6);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 2184);
    call {:si_unique_call 3746} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i7);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3747} mutex_lock($p8);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i9, $i10 := vmw_fifo_release_loop_$bb1($p0, $i9, $i10);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3748} $i9 := vmw_read($p0, 22);
    call {:si_unique_call 3749} {:cexpr "tmp___7"} boogie_si_record_i32($i9);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p0);
    call {:si_unique_call 3751} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i11);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 2980);
    call {:si_unique_call 3752} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i12);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p5, $mul.ref(6, 4));
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3753} $i15 := ioread32($p14);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i12);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p0);
    call {:si_unique_call 3754} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i17);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 3028);
    call {:si_unique_call 3755} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i18);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    call {:si_unique_call 3756} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i20);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3757} vmw_write($p0, 20, $i20);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    call {:si_unique_call 3758} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i21);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 3024);
    call {:si_unique_call 3759} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i22);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    call {:si_unique_call 3760} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i24);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3761} vmw_write($p0, 1, $i24);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p0);
    call {:si_unique_call 3762} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i25);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 3020);
    call {:si_unique_call 3763} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i26);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    call {:si_unique_call 3764} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i28);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3765} vmw_write($p0, 45, $i28);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    call {:si_unique_call 3766} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i29);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 2184);
    call {:si_unique_call 3767} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i30);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3768} mutex_unlock($p31);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p1);
    call {:si_unique_call 3769} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i32);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 160);
    call {:si_unique_call 3770} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i33);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3771} vmw_marker_queue_takedown($p34);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 3772} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i35);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p1);
    call {:si_unique_call 3773} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i36);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 16);
    call {:si_unique_call 3774} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i37);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    call {:si_unique_call 3775} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i40);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, $i35);
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    call {:si_unique_call 3776} {:cexpr "__cil_tmp38"} boogie_si_record_i32($i42);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $i44 := $xor.i1($i43, 1);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i32($i44);
    call {:si_unique_call 3777} {:cexpr "__cil_tmp39"} boogie_si_record_i32($i45);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $i47 := $xor.i1($i46, 1);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i32($i47);
    call {:si_unique_call 3778} {:cexpr "__cil_tmp40"} boogie_si_record_i32($i48);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    call {:si_unique_call 3779} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i49);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3780} $i50 := ldv__builtin_expect($i49, 1);
    call {:si_unique_call 3781} {:cexpr "tmp___8"} boogie_si_record_i64($i50);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 3787} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i61);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p1);
    call {:si_unique_call 3788} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i62);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 8);
    call {:si_unique_call 3789} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i63);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $p64 := $i2p.i64.ref($i63);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    call {:si_unique_call 3790} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i66);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, $i61);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i67);
    call {:si_unique_call 3791} {:cexpr "__cil_tmp55"} boogie_si_record_i32($i68);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $i70 := $xor.i1($i69, 1);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $i71 := $zext.i1.i32($i70);
    call {:si_unique_call 3792} {:cexpr "__cil_tmp56"} boogie_si_record_i32($i71);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $i73 := $xor.i1($i72, 1);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $i74 := $zext.i1.i32($i73);
    call {:si_unique_call 3793} {:cexpr "__cil_tmp57"} boogie_si_record_i32($i74);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i74);
    call {:si_unique_call 3794} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i75);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3795} $i76 := ldv__builtin_expect($i75, 1);
    call {:si_unique_call 3796} {:cexpr "tmp___9"} boogie_si_record_i64($i76);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i77 == 1;
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p1);
    call {:si_unique_call 3797} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i78);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $i79 := $add.i64($i78, 8);
    call {:si_unique_call 3798} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i79);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $p80 := $i2p.i64.ref($i79);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3799} vfree($p82);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p1);
    call {:si_unique_call 3800} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i83);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $i84 := $add.i64($i83, 8);
    call {:si_unique_call 3801} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i84);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $p86 := $i2p.i64.ref($i84);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p86, $0.ref);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i51 == 1;
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p1);
    call {:si_unique_call 3782} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i52);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 16);
    call {:si_unique_call 3783} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i53);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i53);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3784} vfree($p56);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p1);
    call {:si_unique_call 3785} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i57);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 16);
    call {:si_unique_call 3786} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i58);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $p60 := $i2p.i64.ref($i58);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $0.ref);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3750} vmw_write($p0, 21, 1);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    goto corral_source_split_8100_dummy;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  corral_source_split_8100_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb2;
}



const vmw_marker_queue_takedown: ref;

axiom vmw_marker_queue_takedown == $sub.ref(0, 742080);

procedure vmw_marker_queue_takedown($p0: ref);
  free requires assertsPassed;



implementation vmw_marker_queue_takedown($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 3802} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i1);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 48);
    call {:si_unique_call 3803} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i2);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3804} spin_lock($p3);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i32($p6);
    call {:si_unique_call 3805} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i7);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p5);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i7);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, $i9);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p8, $mul.ref($i10, 1));
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i32($p15);
    call {:si_unique_call 3806} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i16);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p14);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i16);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $i19 := $sub.i64(0, $i18);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p17, $mul.ref($i19, 1));
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p0);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $p24, $p25 := $p11, $p20;
    goto $bb1;

  $bb1:
    call $p24, $p25, $p26, $i27, $i28, $p29, $p30, $p31, $p32, $i33, $p34, $i35, $i36, $p37 := vmw_marker_queue_takedown_loop_$bb1($i23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $p31, $p32, $i33, $p34, $i35, $i36, $p37);
    goto $bb1_last;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p24);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    call {:si_unique_call 3807} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i27);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, $i23);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i28 == 1);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p0);
    call {:si_unique_call 3810} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i39);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 48);
    call {:si_unique_call 3811} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i40);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i40);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3812} spin_unlock($p41);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    return;

  $bb3:
    assume $i28 == 1;
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p24);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3808} kfree($p29);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p25);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i32($p32);
    call {:si_unique_call 3809} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i33);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p31);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i33);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $i36 := $sub.i64(0, $i35);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p34, $mul.ref($i36, 1));
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $p24, $p25 := $p25, $p37;
    goto corral_source_split_8240_dummy;

  corral_source_split_8240_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8220;
}



const vmw_3d_resource_inc: ref;

axiom vmw_3d_resource_inc == $sub.ref(0, 743112);

procedure vmw_3d_resource_inc($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed, $M.2, $M.6, $M.11, $M.12, $CurrAddr, $M.3, $M.4, $M.10, $M.13, $M.16;



implementation vmw_3d_resource_inc($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i44: i1;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i43: i32;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 3813} {:cexpr "vmw_3d_resource_inc:arg:unhide_svga"} boogie_si_record_i1($i1);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 3814} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i3);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 134664);
    call {:si_unique_call 3815} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i4);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3816} mutex_lock($p5);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 3817} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i6);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 134736);
    call {:si_unique_call 3818} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i7);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 3819} {:cexpr "tmp___9"} boogie_si_record_i32($i9);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    call {:si_unique_call 3820} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i10);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 134736);
    call {:si_unique_call 3821} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i11);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    call {:si_unique_call 3822} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i12);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 134736);
    call {:si_unique_call 3823} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i13);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    call {:si_unique_call 3824} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i15);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 1);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i11);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i9, 0);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    call {:si_unique_call 3825} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i20);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3826} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 3827} {:cexpr "tmp___11"} boogie_si_record_i64($i21);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i8.i1($i2);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p0);
    call {:si_unique_call 3841} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i53);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i53, 134664);
    call {:si_unique_call 3842} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i54);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $p55 := $i2p.i64.ref($i54);
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3843} mutex_unlock($p55);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $r := $i43;
    return;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i44 == 1;
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p0);
    call {:si_unique_call 3844} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i45);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 2184);
    call {:si_unique_call 3845} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i46);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $p47 := $i2p.i64.ref($i46);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3846} mutex_lock($p47);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3847} $i48 := vmw_read($p0, 1);
    call {:si_unique_call 3848} {:cexpr "tmp___8"} boogie_si_record_i32($i48);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, $sub.i32(0, 3));
    call {:si_unique_call 3849} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i49);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3850} vmw_write($p0, 1, $i49);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p0);
    call {:si_unique_call 3851} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i50);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 2184);
    call {:si_unique_call 3852} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i51);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3853} mutex_unlock($p52);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3828} $i23 := vmw_request_device($p0);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    call {:si_unique_call 3829} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    call {:si_unique_call 3830} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i25);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $i27 := $xor.i1($i26, 1);
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    call {:si_unique_call 3831} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i28);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $i30 := $xor.i1($i29, 1);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    call {:si_unique_call 3832} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i31);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    call {:si_unique_call 3833} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i32);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3834} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 3835} {:cexpr "tmp___7"} boogie_si_record_i64($i33);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i43 := $i23;
    goto $bb9;

  $bb6:
    assume $i34 == 1;
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p0);
    call {:si_unique_call 3836} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i35);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 134736);
    call {:si_unique_call 3837} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i36);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p0);
    call {:si_unique_call 3838} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i37);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 134736);
    call {:si_unique_call 3839} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i38);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i38);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    call {:si_unique_call 3840} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i40);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i40, 1);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i36);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb3;

  SeqInstr_553:
    assume !assertsPassed;
    return;
}



const vmw_kms_save_vga: ref;

axiom vmw_kms_save_vga == $sub.ref(0, 744144);

procedure vmw_kms_save_vga($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vmw_kms_save_vga($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i32;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i32;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i64;
  var $i20: i64;
  var $i21: i32;
  var $p22: ref;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i64;
  var $i43: i64;
  var $i44: i32;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $i66: i64;
  var $i67: i64;
  var $i68: i32;
  var $p69: ref;
  var $i70: i64;
  var $i71: i64;
  var $i72: i32;
  var $p73: ref;
  var $i74: i64;
  var $i75: i64;
  var $i76: i32;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $i80: i64;
  var $i81: i64;
  var $i82: i32;
  var $p83: ref;
  var $i84: i1;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $i93: i64;
  var $i94: i64;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $i98: i64;
  var $i99: i64;
  var $p100: ref;
  var $i101: i32;
  var $i102: i64;
  var $i103: i64;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $p107: ref;
  var $i108: i64;
  var $i109: i64;
  var $i110: i64;
  var $i111: i64;
  var $p112: ref;
  var $i113: i32;
  var $i114: i64;
  var $i115: i64;
  var $p116: ref;
  var $i117: i32;
  var $i118: i32;
  var $p119: ref;
  var $i120: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 3854} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i1);
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 2576);
    call {:si_unique_call 3855} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3856} $i3 := vmw_read($p0, 2);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i2);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 3857} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i5);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 2580);
    call {:si_unique_call 3858} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i6);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3859} $i7 := vmw_read($p0, 3);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i6);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    call {:si_unique_call 3860} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i9);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 2584);
    call {:si_unique_call 3861} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i10);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3862} $i11 := vmw_read($p0, 7);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i10);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    call {:si_unique_call 3863} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i13);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 2156);
    call {:si_unique_call 3864} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i14);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    call {:si_unique_call 3865} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i16);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 131072);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3869} $i23 := vmw_fifo_have_pitchlock($p0);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 3870} {:cexpr "tmp___7"} boogie_si_record_i8($i24);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p0);
    call {:si_unique_call 3871} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i36);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 2156);
    call {:si_unique_call 3872} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i37);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    call {:si_unique_call 3873} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i39);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 524288);
    call {:si_unique_call 3874} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i40);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i41 == 1);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb7:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p0);
    call {:si_unique_call 3880} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i42);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, 2596);
    call {:si_unique_call 3881} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i43);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3882} $i44 := vmw_read($p0, 34);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i43);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p0);
    call {:si_unique_call 3883} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i46);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 2596);
    call {:si_unique_call 3884} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i47);
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    call {:si_unique_call 3885} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i49);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p0);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 2596);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $p56 := $i2p.i64.ref($i55);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb14;

  $bb14:
    call $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $p65, $i66, $i67, $i68, $p69, $i70, $i71, $i72, $p73, $i74, $i75, $i76, $p77, $i78, $p79, $i80, $i81, $i82, $p83, $i84, $i85, $i86, $p87, $i88, $i89, $p90, $i91, $i92, $i93, $i94, $p95, $i96, $i97, $i98, $i99, $p100, $i101, $i102, $i103, $p104, $i105, $i106, $p107, $i108, $i109, $i110, $i111, $p112, $i113, $i114, $i115, $p116, $i117, $i118, $p119, $i120 := vmw_kms_save_vga_loop_$bb14($p0, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $p65, $i66, $i67, $i68, $p69, $i70, $i71, $i72, $p73, $i74, $i75, $i76, $p77, $i78, $p79, $i80, $i81, $i82, $p83, $i84, $i85, $i86, $p87, $i88, $i89, $p90, $i91, $i92, $i93, $i94, $p95, $i96, $i97, $i98, $i99, $p100, $i101, $i102, $i103, $p104, $i105, $i106, $p107, $i108, $i109, $i110, $i111, $p112, $i113, $i114, $i115, $p116, $i117, $i118, $p119, $i120);
    goto $bb14_last;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p56);
    call {:si_unique_call 3888} {:cexpr "__cil_tmp36"} boogie_si_record_i32($i58);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $i59 := $ult.i32($i57, $i58);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i59 == 1);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume $i59 == 1;
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i60 := $zext.i32.i64($i57);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $i61 := $mul.i64($i60, 20);
    call {:si_unique_call 3889} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i61);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $i62 := $add.i64(2256, $i61);
    call {:si_unique_call 3890} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i62);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p0);
    call {:si_unique_call 3891} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i63);
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, $i62);
    call {:si_unique_call 3892} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i64);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $p65 := $i2p.i64.ref($i64);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3893} vmw_write($p0, 35, $i57);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    call {:si_unique_call 3894} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i66);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $i67 := $add.i64($i66, 8);
    call {:si_unique_call 3895} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i67);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3896} $i68 := vmw_read($p0, 36);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $p69 := $i2p.i64.ref($i67);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i68);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p65);
    call {:si_unique_call 3897} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i70);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i70, 12);
    call {:si_unique_call 3898} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i71);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3899} $i72 := vmw_read($p0, 37);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $p73 := $i2p.i64.ref($i71);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i72);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p65);
    call {:si_unique_call 3900} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i74);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $i75 := $add.i64($i74, 16);
    call {:si_unique_call 3901} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i75);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3902} $i76 := vmw_read($p0, 38);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $p77 := $i2p.i64.ref($i75);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, $i76);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3903} $i78 := vmw_read($p0, 39);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p65);
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, $i78);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p65);
    call {:si_unique_call 3904} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i80);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $i81 := $add.i64($i80, 4);
    call {:si_unique_call 3905} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i81);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3906} $i82 := vmw_read($p0, 40);
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $p83 := $i2p.i64.ref($i81);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, $i82);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3907} vmw_write($p0, 35, $sub.i32(0, 1));
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i57, 0);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i120 := $add.i32($i57, 1);
    call {:si_unique_call 3929} {:cexpr "i"} boogie_si_record_i32($i120);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $i57 := $i120;
    goto corral_source_split_8486_dummy;

  $bb20:
    assume $i84 == 1;
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p0);
    call {:si_unique_call 3908} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i85);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 2596);
    call {:si_unique_call 3909} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i86);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $p87 := $i2p.i64.ref($i86);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    call {:si_unique_call 3910} {:cexpr "__cil_tmp51"} boogie_si_record_i32($i88);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 1);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb22:
    assume $i89 == 1;
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p65);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    call {:si_unique_call 3911} {:cexpr "__cil_tmp52"} boogie_si_record_i32($i91);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 0);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb24:
    assume $i92 == 1;
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p65);
    call {:si_unique_call 3912} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i93);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $i94 := $add.i64($i93, 4);
    call {:si_unique_call 3913} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i94);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $p95 := $i2p.i64.ref($i94);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    call {:si_unique_call 3914} {:cexpr "__cil_tmp55"} boogie_si_record_i32($i96);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 0);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i97 == 1;
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p65);
    call {:si_unique_call 3915} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i98);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $i99 := $add.i64($i98, 12);
    call {:si_unique_call 3916} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i99);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $p100 := $i2p.i64.ref($i99);
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    call {:si_unique_call 3917} {:cexpr "__cil_tmp58"} boogie_si_record_i32($i101);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p0);
    call {:si_unique_call 3918} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i102);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $i103 := $add.i64($i102, 2576);
    call {:si_unique_call 3919} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i103);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $p104 := $i2p.i64.ref($i103);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    call {:si_unique_call 3920} {:cexpr "__cil_tmp61"} boogie_si_record_i32($i105);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32($i105, $i101);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p65);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p107, $i106);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p65);
    call {:si_unique_call 3921} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i108);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $i109 := $add.i64($i108, 4);
    call {:si_unique_call 3922} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i109);
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p65);
    call {:si_unique_call 3923} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i110);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $i111 := $add.i64($i110, 16);
    call {:si_unique_call 3924} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i111);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $p112 := $i2p.i64.ref($i111);
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    call {:si_unique_call 3925} {:cexpr "__cil_tmp66"} boogie_si_record_i32($i113);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p0);
    call {:si_unique_call 3926} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i114);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $i115 := $add.i64($i114, 2580);
    call {:si_unique_call 3927} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i115);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $p116 := $i2p.i64.ref($i115);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, $p116);
    call {:si_unique_call 3928} {:cexpr "__cil_tmp69"} boogie_si_record_i32($i117);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $i118 := $sub.i32($i117, $i113);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $p119 := $i2p.i64.ref($i109);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p119, $i118);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb11:
    assume $i50 == 1;
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p0);
    call {:si_unique_call 3886} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i51);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 2596);
    call {:si_unique_call 3887} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i52);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 1);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p0);
    call {:si_unique_call 3875} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i26);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, 2592);
    call {:si_unique_call 3876} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i27);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p0);
    call {:si_unique_call 3877} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i28);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 2144);
    call {:si_unique_call 3878} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i29);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(8, 4));
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3879} $i34 := ioread32($p33);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i27);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    call {:si_unique_call 3866} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i19);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 2592);
    call {:si_unique_call 3867} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i20);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3868} $i21 := vmw_read($p0, 32);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i20);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_8486_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8399;
}



const vmw_request_device: ref;

axiom vmw_request_device == $sub.ref(0, 745176);

procedure vmw_request_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.1, $M.6, assertsPassed, $M.11, $M.12, $CurrAddr, $M.3, $M.4, $M.10, $M.13, $M.16;



implementation vmw_request_device($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i17: i32;
  var vslice_dummy_var_152: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 3930} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i1);
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 1856);
    call {:si_unique_call 3931} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3932} $i4 := vmw_fifo_init($p0, $p3);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    call {:si_unique_call 3933} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 3934} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i6);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $i8 := $xor.i1($i7, 1);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 3935} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i9);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 3936} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i12);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    call {:si_unique_call 3937} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i13);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3938} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 3939} {:cexpr "tmp___7"} boogie_si_record_i64($i14);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p0);
    call {:si_unique_call 3941} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i18);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 3008);
    call {:si_unique_call 3942} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i19);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3943} vmw_fence_fifo_up($p21);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3944} $i22 := vmw_dummy_query_bo_create($p0);
    call {:si_unique_call 3945} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    call {:si_unique_call 3946} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i24);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $i26 := $xor.i1($i25, 1);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    call {:si_unique_call 3947} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i27);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i29 := $xor.i1($i28, 1);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    call {:si_unique_call 3948} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i30);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    call {:si_unique_call 3949} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i31);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3950} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 3951} {:cexpr "tmp___8"} boogie_si_record_i64($i32);
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3958} vmw_dummy_query_bo_prepare($p0);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i33 == 1;
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p0);
    call {:si_unique_call 3952} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i34);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 3008);
    call {:si_unique_call 3953} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i35);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3954} vmw_fence_fifo_down($p37);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p0);
    call {:si_unique_call 3955} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i38);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 1856);
    call {:si_unique_call 3956} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i39);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3957} vmw_fifo_release($p0, $p40);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $i17 := $i22;
    goto $bb3;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3940} vslice_dummy_var_152 := drm_err.ref.ref(.str.183, .str.184);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $i17 := $i4;
    goto $bb3;

  SeqInstr_568:
    assume !assertsPassed;
    return;
}



const vmw_fifo_init: ref;

axiom vmw_fifo_init == $sub.ref(0, 746208);

procedure vmw_fifo_init($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.6, assertsPassed, $M.2, $M.11, $M.12, $CurrAddr, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_fifo_init($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $i37: i64;
  var $i38: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $i51: i32;
  var $i53: i32;
  var $i55: i32;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $i62: i32;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $i66: i32;
  var $p67: ref;
  var $i68: i64;
  var $i69: i64;
  var $i70: i32;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i64;
  var $i82: i1;
  var $i83: i32;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i64;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i64;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i64;
  var $i109: i64;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $p113: ref;
  var $i114: i64;
  var $i115: i64;
  var $p116: ref;
  var $i117: i32;
  var $i119: i64;
  var $i120: i64;
  var $p121: ref;
  var $i122: i64;
  var $i123: i64;
  var $p124: ref;
  var $i125: i32;
  var $i126: i64;
  var $i127: i64;
  var $p128: ref;
  var $i129: i32;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $i133: i64;
  var $p134: ref;
  var $i135: i32;
  var $i36: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3959} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 3960} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i3);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 2144);
    call {:si_unique_call 3961} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i4);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p1);
    call {:si_unique_call 3962} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i7);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 24);
    call {:si_unique_call 3963} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i8);
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, 1048576);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    call {:si_unique_call 3964} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i10);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 24);
    call {:si_unique_call 3965} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i11);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    call {:si_unique_call 3966} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i13);
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3967} $p14 := vmalloc($i13);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p1);
    call {:si_unique_call 3968} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i15);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 16);
    call {:si_unique_call 3969} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i16);
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i16);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p14);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 3970} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i19);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p1);
    call {:si_unique_call 3971} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i20);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 16);
    call {:si_unique_call 3972} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i21);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    call {:si_unique_call 3973} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i24);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, $i19);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 3974} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i26);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $i28 := $xor.i1($i27, 1);
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    call {:si_unique_call 3975} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i29);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $i31 := $xor.i1($i30, 1);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    call {:si_unique_call 3976} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i32);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    call {:si_unique_call 3977} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i33);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3978} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 3979} {:cexpr "tmp___8"} boogie_si_record_i64($i34);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p1);
    call {:si_unique_call 3980} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i37);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 8);
    call {:si_unique_call 3981} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i38);
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i38);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $0.ref);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p1);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p41, 0);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p1);
    call {:si_unique_call 3982} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i42);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, 32);
    call {:si_unique_call 3983} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i43);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i43);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, 0);
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p1);
    call {:si_unique_call 3984} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i45);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 40);
    call {:si_unique_call 3985} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i46);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $p47 := $i2p.i64.ref($i46);
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3986} __mutex_init($p47, .str.79, __key___13);
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p1);
    call {:si_unique_call 3987} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i48);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, 112);
    call {:si_unique_call 3988} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i49);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $p50 := $i2p.i64.ref($i49);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3989} __init_rwsem($p50, .str.80, __key___14);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3990} $i51 := vmw_read($p0, 2);
    call {:si_unique_call 3991} {:cexpr "tmp___9"} boogie_si_record_i32($i51);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3992} vslice_dummy_var_153 := printk.ref.i32(.str.81, $i51);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3993} $i53 := vmw_read($p0, 3);
    call {:si_unique_call 3994} {:cexpr "tmp___10"} boogie_si_record_i32($i53);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3995} vslice_dummy_var_154 := printk.ref.i32(.str.82, $i53);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3996} $i55 := vmw_read($p0, 7);
    call {:si_unique_call 3997} {:cexpr "tmp___11"} boogie_si_record_i32($i55);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3998} vslice_dummy_var_155 := printk.ref.i32(.str.83, $i55);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p0);
    call {:si_unique_call 3999} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i57);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 2184);
    call {:si_unique_call 4000} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i58);
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $p59 := $i2p.i64.ref($i58);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4001} mutex_lock($p59);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p0);
    call {:si_unique_call 4002} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i60);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $i61 := $add.i64($i60, 3024);
    call {:si_unique_call 4003} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i61);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4004} $i62 := vmw_read($p0, 1);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $p63 := $i2p.i64.ref($i61);
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p0);
    call {:si_unique_call 4005} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i64);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $i65 := $add.i64($i64, 3028);
    call {:si_unique_call 4006} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i65);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4007} $i66 := vmw_read($p0, 20);
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $p67 := $i2p.i64.ref($i65);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i66);
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p0);
    call {:si_unique_call 4008} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i68);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $i69 := $add.i64($i68, 3020);
    call {:si_unique_call 4009} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i69);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4010} $i70 := vmw_read($p0, 45);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $p71 := $i2p.i64.ref($i69);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, $i70);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4011} vmw_write($p0, 1, 1);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p0);
    call {:si_unique_call 4012} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i72);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i72, 2156);
    call {:si_unique_call 4013} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i73);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $p74 := $i2p.i64.ref($i73);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    call {:si_unique_call 4014} {:cexpr "__cil_tmp55"} boogie_si_record_i32($i75);
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i75, 32768);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i79 := 4;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $i80 := $shl.i32($i79, 2);
    call {:si_unique_call 4017} {:cexpr "min"} boogie_si_record_i32($i80);
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $i81 := $zext.i32.i64($i80);
    call {:si_unique_call 4018} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i81);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $i82 := $ult.i64($i81, 4096);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i84 := $i80;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p6, $mul.ref(0, 4));
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4020} iowrite32($i84, $p86);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p0);
    call {:si_unique_call 4021} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i87);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $i88 := $add.i64($i87, 2120);
    call {:si_unique_call 4022} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i88);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $p89 := $i2p.i64.ref($i88);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    call {:si_unique_call 4023} {:cexpr "__cil_tmp63"} boogie_si_record_i32($i90);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p6, $mul.ref(1, 4));
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4024} iowrite32($i90, $p92);
    call {:si_unique_call 4025} devirtbounce.1(0);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p6, $mul.ref(2, 4));
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4026} iowrite32($i84, $p94);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p6, $mul.ref(3, 4));
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4027} iowrite32($i84, $p96);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p6, $mul.ref(290, 4));
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4028} iowrite32(0, $p98);
    call {:si_unique_call 4029} devirtbounce.1(0);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4030} vmw_write($p0, 20, 1);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p0);
    call {:si_unique_call 4031} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i99);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $i100 := $add.i64($i99, 2184);
    call {:si_unique_call 4032} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i100);
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $p101 := $i2p.i64.ref($i100);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4033} mutex_unlock($p101);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p6, $mul.ref(1, 4));
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4034} $i104 := ioread32($p103);
    call {:si_unique_call 4035} {:cexpr "max"} boogie_si_record_i32($i104);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p6, $mul.ref(0, 4));
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4036} $i107 := ioread32($p106);
    call {:si_unique_call 4037} {:cexpr "min"} boogie_si_record_i32($i107);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p1);
    call {:si_unique_call 4038} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i108);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $i109 := $add.i64($i108, 36);
    call {:si_unique_call 4039} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i109);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p6, $mul.ref(4, 4));
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4040} $i112 := ioread32($p111);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $p113 := $i2p.i64.ref($i109);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, $i112);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p1);
    call {:si_unique_call 4041} {:cexpr "__cil_tmp85"} boogie_si_record_i64($i114);
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $i115 := $add.i64($i114, 36);
    call {:si_unique_call 4042} {:cexpr "__cil_tmp86"} boogie_si_record_i64($i115);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $p116 := $i2p.i64.ref($i115);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, $p116);
    call {:si_unique_call 4043} {:cexpr "__cil_tmp87"} boogie_si_record_i32($i117);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4044} vslice_dummy_var_156 := printk.ref.i32.i32.i32(.str.84, $i104, $i107, $i117);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p0);
    call {:si_unique_call 4045} {:cexpr "__cil_tmp88"} boogie_si_record_i64($i119);
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $i120 := $add.i64($i119, 2880);
    call {:si_unique_call 4046} {:cexpr "__cil_tmp89"} boogie_si_record_i64($i120);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $p121 := $i2p.i64.ref($i120);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p0);
    call {:si_unique_call 4047} {:cexpr "__cil_tmp91"} boogie_si_record_i64($i122);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $i123 := $add.i64($i122, 2980);
    call {:si_unique_call 4048} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i123);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $p124 := $i2p.i64.ref($i123);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    call {:si_unique_call 4049} {:cexpr "__cil_tmp93"} boogie_si_record_i32($i125);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4050} atomic_set($p121, $i125);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p0);
    call {:si_unique_call 4051} {:cexpr "__cil_tmp95"} boogie_si_record_i64($i126);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $i127 := $add.i64($i126, 2980);
    call {:si_unique_call 4052} {:cexpr "__cil_tmp96"} boogie_si_record_i64($i127);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $p128 := $i2p.i64.ref($i127);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    call {:si_unique_call 4053} {:cexpr "__cil_tmp97"} boogie_si_record_i32($i129);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p6, $mul.ref(6, 4));
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4054} iowrite32($i129, $p131);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($p1);
    call {:si_unique_call 4055} {:cexpr "__cil_tmp100"} boogie_si_record_i64($i132);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $i133 := $add.i64($i132, 160);
    call {:si_unique_call 4056} {:cexpr "__cil_tmp101"} boogie_si_record_i64($i133);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $p134 := $i2p.i64.ref($i133);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4057} vmw_marker_queue_init($p134);
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4058} $i135 := vmw_fifo_send_fence($p0, $p2);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    call {:si_unique_call 4059} {:cexpr "tmp___12"} boogie_si_record_i32($i135);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $i36 := $i135;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i82 == 1;
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i64.i32(4096);
    call {:si_unique_call 4019} {:cexpr "min"} boogie_si_record_i32($i83);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $i84 := $i83;
    goto $bb16;

  $bb11:
    assume $i77 == 1;
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4015} $i78 := vmw_read($p0, 30);
    call {:si_unique_call 4016} {:cexpr "min"} boogie_si_record_i32($i78);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $i79 := $i78;
    goto $bb13;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i35 == 1;
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 12);
    goto $bb3;
}



const vmw_fence_fifo_up: ref;

axiom vmw_fence_fifo_up == $sub.ref(0, 747240);

procedure vmw_fence_fifo_up($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vmw_fence_fifo_up($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 4060} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i1);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 16);
    call {:si_unique_call 4061} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i2);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4062} $p4 := spinlock_check($p3);
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4063} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 4064} {:cexpr "irq_flags"} boogie_si_record_i64($i5);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 4065} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i6);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 100);
    call {:si_unique_call 4066} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i7);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 0);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    call {:si_unique_call 4067} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i9);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 16);
    call {:si_unique_call 4068} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i10);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4069} spin_unlock_irqrestore($p11, $i5);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    return;
}



const vmw_dummy_query_bo_create: ref;

axiom vmw_dummy_query_bo_create == $sub.ref(0, 748272);

procedure vmw_dummy_query_bo_create($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vmw_dummy_query_bo_create($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 4070} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i3);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 134744);
    call {:si_unique_call 4071} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i4);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1(0);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4072} $i7 := ttm_bo_create($p1, 4096, 0, vmw_vram_sys_placement, 0, 0, $i6, $p2, $p5);
    call {:si_unique_call 4073} {:cexpr "tmp___7"} boogie_si_record_i32($i7);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const vmw_dummy_query_bo_prepare: ref;

axiom vmw_dummy_query_bo_prepare == $sub.ref(0, 749304);

procedure vmw_dummy_query_bo_prepare($p0: ref);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.2, $M.0, $M.6, $M.1, $CurrAddr, assertsPassed, $M.13, $M.3, $M.4, $M.10, $M.16;



implementation vmw_dummy_query_bo_prepare($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i1;
  var $i45: i32;
  var $i46: i64;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4074} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 4075} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 4076} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i4);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 134744);
    call {:si_unique_call 4077} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i5);
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1(0);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1(0);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(0);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4078} vslice_dummy_var_157 := ttm_bo_reserve($p7, $i8, $i9, $i10, 0);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p3);
    call {:si_unique_call 4079} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i12);
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 1400);
    call {:si_unique_call 4080} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i13);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4081} spin_lock($p14);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1(0);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1(0);
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1(0);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4082} $i18 := ttm_bo_wait($p7, $i15, $i16, $i17);
    call {:si_unique_call 4083} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p3);
    call {:si_unique_call 4084} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i19);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 1400);
    call {:si_unique_call 4085} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i20);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4086} spin_unlock($p21);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i18, 0);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    call {:si_unique_call 4087} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i23);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $i25 := $xor.i1($i24, 1);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 4088} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i26);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $i28 := $xor.i1($i27, 1);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    call {:si_unique_call 4089} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i29);
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    call {:si_unique_call 4090} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i30);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4091} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 4092} {:cexpr "tmp___7"} boogie_si_record_i64($i31);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4094} $i37 := ttm_bo_kmap($p7, 0, 1, $p1);
    call {:si_unique_call 4095} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    call {:si_unique_call 4096} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i39);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $i41 := $xor.i1($i40, 1);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    call {:si_unique_call 4097} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i42);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $i44 := $xor.i1($i43, 1);
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i32($i44);
    call {:si_unique_call 4098} {:cexpr "__cil_tmp36"} boogie_si_record_i32($i45);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i45);
    call {:si_unique_call 4099} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i46);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4100} $i47 := ldv__builtin_expect($i46, 1);
    call {:si_unique_call 4101} {:cexpr "tmp___9"} boogie_si_record_i64($i47);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i48 == 1);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4108} vslice_dummy_var_159 := drm_err.ref.ref(.str.185, .str.186);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4109} ttm_bo_unreserve($p7);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i48 == 1;
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4102} $p49 := ttm_kmap_obj_virtual($p1, $p2);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, 12);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p50);
    call {:si_unique_call 4103} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i52);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 4);
    call {:si_unique_call 4104} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i53);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i53);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 0);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p50);
    call {:si_unique_call 4105} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i55);
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 8);
    call {:si_unique_call 4106} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i56);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, 255);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4107} ttm_bo_kunmap($p1);
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i32 == 1;
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1(0);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1(1);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1(0);
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4093} vslice_dummy_var_158 := vmw_fallback_wait($p0, $i33, $i34, 0, $i35, 2500);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_589:
    assume !assertsPassed;
    return;
}



const ttm_bo_wait: ref;

axiom ttm_bo_wait == $sub.ref(0, 750336);

procedure ttm_bo_wait($p0: ref, $i1: i1, $i2: i1, $i3: i1) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_wait($p0: ref, $i1: i1, $i2: i1, $i3: i1) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4110} {:cexpr "ttm_bo_wait:arg:arg1"} boogie_si_record_i1($i1);
    call {:si_unique_call 4111} {:cexpr "ttm_bo_wait:arg:arg2"} boogie_si_record_i1($i2);
    call {:si_unique_call 4112} {:cexpr "ttm_bo_wait:arg:arg3"} boogie_si_record_i1($i3);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4113} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 4114} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 751368);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    return;
}



const __init_rwsem: ref;

axiom __init_rwsem == $sub.ref(0, 752400);

procedure __init_rwsem($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_rwsem($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    return;
}



const vmw_marker_queue_init: ref;

axiom vmw_marker_queue_init == $sub.ref(0, 753432);

procedure vmw_marker_queue_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmw_marker_queue_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var vslice_dummy_var_160: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4115} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4116} INIT_LIST_HEAD($p2);
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 4117} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i3);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 16);
    call {:si_unique_call 4118} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i4);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4119} $p6 := ns_to_timespec(0);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $i9 := $extractvalue($p6, 0);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, $i9);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $i11 := $extractvalue($p6, 1);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, $i11);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p5);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_37 := $M.0;
    cmdloc_dummy_var_38 := $M.0;
    call {:si_unique_call 4120} cmdloc_dummy_var_39 := $memcpy.i8(cmdloc_dummy_var_37, cmdloc_dummy_var_38, $p12, $p13, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_39;
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    call {:si_unique_call 4121} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i14);
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 32);
    call {:si_unique_call 4122} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i15);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4123} getrawmonotonic($p16);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p0);
    call {:si_unique_call 4124} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i17);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 48);
    call {:si_unique_call 4125} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i18);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4126} vslice_dummy_var_160 := spinlock_check($p19);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    call {:si_unique_call 4127} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i21);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 48);
    call {:si_unique_call 4128} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i22);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4129} __raw_spin_lock_init($p23, .str.105, __key___17);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;
}



const vmw_master_init: ref;

axiom vmw_master_init == $sub.ref(0, 754464);

procedure vmw_master_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vmw_master_init($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4130} ttm_lock_init($p1);
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 4131} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 224);
    call {:si_unique_call 4132} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i3);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4133} INIT_LIST_HEAD($p4);
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 4134} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i5);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 152);
    call {:si_unique_call 4135} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4136} __mutex_init($p7, .str.243, __key___11);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;
}



const ttm_lock_init: ref;

axiom ttm_lock_init == $sub.ref(0, 755496);

procedure ttm_lock_init($p0: ref);
  free requires assertsPassed;



implementation ttm_lock_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    return;
}



const unregister_pm_notifier: ref;

axiom unregister_pm_notifier == $sub.ref(0, 756528);

procedure unregister_pm_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unregister_pm_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4137} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 4138} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const drm_irq_uninstall: ref;

axiom drm_irq_uninstall == $sub.ref(0, 757560);

procedure drm_irq_uninstall($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_irq_uninstall($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4139} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 4140} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vmw_fb_close: ref;

axiom vmw_fb_close == $sub.ref(0, 758592);

procedure vmw_fb_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmw_fb_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i22: i64;
  var $i23: i64;
  var $p25: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4141} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 4142} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 2600);
    call {:si_unique_call 4143} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i3);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $i6 := $ne.ref($p5, $0.ref);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    call {:si_unique_call 4144} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i7);
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 2600);
    call {:si_unique_call 4145} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i8);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    call {:si_unique_call 4146} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i12);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 1160);
    call {:si_unique_call 4147} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i13);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    call {:si_unique_call 4148} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i17);
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 16);
    call {:si_unique_call 4149} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i18);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p20);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p16);
    call {:si_unique_call 4150} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i22);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 16);
    call {:si_unique_call 4151} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i23);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i23);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $0.ref);
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4152} fb_deferred_io_cleanup($p11);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4153} vslice_dummy_var_161 := unregister_framebuffer($p11);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p16);
    call {:si_unique_call 4154} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i27);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 24);
    call {:si_unique_call 4155} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i28);
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4156} ttm_bo_kunmap($p29);
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4157} ttm_bo_unref($p1);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p16);
    call {:si_unique_call 4158} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i30);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 8);
    call {:si_unique_call 4159} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i31);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4160} vfree($p33);
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4161} framebuffer_release($p11);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmw_kms_close: ref;

axiom vmw_kms_close == $sub.ref(0, 759624);

procedure vmw_kms_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vmw_kms_close($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 4162} {:cexpr "__cil_tmp2"} boogie_si_record_i64($i1);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 2088);
    call {:si_unique_call 4163} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4164} drm_mode_config_cleanup($p4);
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 4165} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i5);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 2616);
    call {:si_unique_call 4166} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i6);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $i9 := $ne.ref($p8, $0.ref);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4168} vslice_dummy_var_163 := vmw_kms_close_legacy_display_system($p0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4167} vslice_dummy_var_162 := vmw_kms_close_screen_object_display($p0);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmw_overlay_close: ref;

axiom vmw_overlay_close == $sub.ref(0, 760656);

procedure vmw_overlay_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.2, $M.6, $M.1, $CurrAddr, assertsPassed, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_overlay_close($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i10: i8;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i32;
  var $i45: i64;
  var $i47: i64;
  var $i48: i64;
  var $p50: ref;
  var $p51: ref;
  var $i6: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 4169} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i1);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 2624);
    call {:si_unique_call 4170} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i2);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $i5 := $ne.ref($p4, $0.ref);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 38);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7, $i8 := 0, 0;
    goto $bb5;

  $bb5:
    call $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $p16, $p17, $i18, $i19, $i20, $i22, $i23, vslice_dummy_var_164 := vmw_overlay_close_loop_$bb5($p0, $p4, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $p16, $p17, $i18, $i19, $i20, $i22, $i23, vslice_dummy_var_164);
    goto $bb5_last;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 1);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $i10 := $i7;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i10);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $i25 := $xor.i1($i24, 1);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 4175} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i26);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $i28 := $xor.i1($i27, 1);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    call {:si_unique_call 4176} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i29);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $i31 := $xor.i1($i30, 1);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    call {:si_unique_call 4177} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i32);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $i34 := $xor.i1($i33, 1);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    call {:si_unique_call 4178} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i35);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    call {:si_unique_call 4179} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i36);
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4180} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 4181} {:cexpr "tmp___7"} boogie_si_record_i64($i37);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i29, 0);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $i40 := $xor.i1($i39, 1);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i32($i40);
    call {:si_unique_call 4185} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i41);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $i43 := $xor.i1($i42, 1);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i43);
    call {:si_unique_call 4186} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i44);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    call {:si_unique_call 4187} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i45);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4188} vslice_dummy_var_165 := ldv__builtin_expect($i45, 0);
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p0);
    call {:si_unique_call 4189} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i47);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 2624);
    call {:si_unique_call 4190} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i48);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $p50 := $i2p.i64.ref($i48);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $0.ref);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p4);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4191} kfree($p51);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb14:
    assume $i38 == 1;
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4184} warn_slowpath_null(.str.98, 610);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i8);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $i12 := $mul.i64($i11, 104);
    call {:si_unique_call 4171} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i12);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $i13 := $add.i64(72, $i12);
    call {:si_unique_call 4172} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i13);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p4);
    call {:si_unique_call 4173} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i14);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, $i13);
    call {:si_unique_call 4174} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i15);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $i18 := $ne.ref($p17, $0.ref);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i7;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i8, 1);
    call {:si_unique_call 4183} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $i7, $i8 := $i22, $i23;
    goto corral_source_split_8982_dummy;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1(0);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1(0);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4182} vslice_dummy_var_164 := vmw_overlay_stop($p0, $i8, $i19, $i20);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb13;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  corral_source_split_8982_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8943;
}



const vmw_fence_manager_takedown: ref;

axiom vmw_fence_manager_takedown == $sub.ref(0, 761688);

procedure vmw_fence_manager_takedown($p0: ref);
  free requires assertsPassed;



implementation vmw_fence_manager_takedown($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var vslice_dummy_var_166: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 4192} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i1);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 56);
    call {:si_unique_call 4193} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i2);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4194} vslice_dummy_var_166 := cancel_work_sync($p3);
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 4195} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i5);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 16);
    call {:si_unique_call 4196} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i6);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4197} $p8 := spinlock_check($p7);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4198} $i9 := _raw_spin_lock_irqsave($p8);
    call {:si_unique_call 4199} {:cexpr "irq_flags"} boogie_si_record_i64($i9);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    call {:si_unique_call 4200} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i10);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 40);
    call {:si_unique_call 4201} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i11);
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4202} $i13 := list_empty($p12);
    call {:si_unique_call 4203} {:cexpr "tmp___8"} boogie_si_record_i32($i13);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i22);
    call {:si_unique_call 4208} {:cexpr "lists_empty"} boogie_si_record_i8($i23);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p0);
    call {:si_unique_call 4209} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i24);
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 16);
    call {:si_unique_call 4210} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i25);
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4211} spin_unlock_irqrestore($p26, $i9);
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i23);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $i28 := $xor.i1($i27, 1);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    call {:si_unique_call 4212} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i29);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $i31 := $xor.i1($i30, 1);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    call {:si_unique_call 4213} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i32);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $i34 := $xor.i1($i33, 1);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    call {:si_unique_call 4214} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i35);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    call {:si_unique_call 4215} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i36);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4216} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 4217} {:cexpr "tmp___11"} boogie_si_record_i64($i37);
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p0);
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4219} kfree($p39);
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    return;

  $bb15:
    assume $i38 == 1;
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call {:si_unique_call 4218} devirtbounce(0, .str.108, 205, 12);
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    call vmw_fence_manager_takedown_loop_$bb19();
    goto $bb19_last;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb20_dummy;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    call {:si_unique_call 4204} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i15);
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 104);
    call {:si_unique_call 4205} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i16);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i16);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4206} $i18 := list_empty($p17);
    call {:si_unique_call 4207} {:cexpr "tmp___9"} boogie_si_record_i32($i18);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb12;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb11;

  $bb20_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto $bb20;
}



const pci_release_region: ref;

axiom pci_release_region == $sub.ref(0, 762720);

procedure pci_release_region($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pci_release_region($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4220} {:cexpr "pci_release_region:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    return;
}



const pci_release_regions: ref;

axiom pci_release_regions == $sub.ref(0, 763752);

procedure pci_release_regions($p0: ref);
  free requires assertsPassed;



implementation pci_release_regions($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    return;
}



const ttm_object_device_release: ref;

axiom ttm_object_device_release == $sub.ref(0, 764784);

procedure ttm_object_device_release($p0: ref);
  free requires assertsPassed;



implementation ttm_object_device_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    return;
}



const iounmap: ref;

axiom iounmap == $sub.ref(0, 765816);

procedure iounmap($p0: ref);
  free requires assertsPassed;



implementation iounmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    return;
}



const drm_mtrr_del: ref;

axiom drm_mtrr_del == $sub.ref(0, 766848);

procedure drm_mtrr_del($i0: i32, $i1: i64, $i2: i64, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_mtrr_del($i0: i32, $i1: i64, $i2: i64, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4221} {:cexpr "drm_mtrr_del:arg:handle"} boogie_si_record_i32($i0);
    call {:si_unique_call 4222} {:cexpr "drm_mtrr_del:arg:offset"} boogie_si_record_i64($i1);
    call {:si_unique_call 4223} {:cexpr "drm_mtrr_del:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 4224} {:cexpr "drm_mtrr_del:arg:flags"} boogie_si_record_i32($i3);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4225} $i4 := mtrr_del($i0, $i1, $i2);
    call {:si_unique_call 4226} {:cexpr "tmp___7"} boogie_si_record_i32($i4);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ttm_bo_clean_mm: ref;

axiom ttm_bo_clean_mm == $sub.ref(0, 767880);

procedure ttm_bo_clean_mm($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_clean_mm($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4227} {:cexpr "ttm_bo_clean_mm:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4228} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 4229} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ttm_bo_device_release: ref;

axiom ttm_bo_device_release == $sub.ref(0, 768912);

procedure ttm_bo_device_release($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_device_release($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4230} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 4231} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vmw_ttm_global_release: ref;

axiom vmw_ttm_global_release == $sub.ref(0, 769944);

procedure vmw_ttm_global_release($p0: ref);
  free requires assertsPassed;



implementation vmw_ttm_global_release($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 4232} {:cexpr "__cil_tmp2"} boogie_si_record_i64($i1);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 1768);
    call {:si_unique_call 4233} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4234} drm_global_item_unref($p3);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 4235} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i4);
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 1816);
    call {:si_unique_call 4236} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i5);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4237} drm_global_item_unref($p6);
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    return;
}



const idr_destroy: ref;

axiom idr_destroy == $sub.ref(0, 770976);

procedure idr_destroy($p0: ref);
  free requires assertsPassed;



implementation idr_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    return;
}



const drm_global_item_unref: ref;

axiom drm_global_item_unref == $sub.ref(0, 772008);

procedure drm_global_item_unref($p0: ref);
  free requires assertsPassed;



implementation drm_global_item_unref($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    return;
}



const mtrr_del: ref;

axiom mtrr_del == $sub.ref(0, 773040);

procedure mtrr_del($i0: i32, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mtrr_del($i0: i32, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4238} {:cexpr "mtrr_del:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 4239} {:cexpr "mtrr_del:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 4240} {:cexpr "mtrr_del:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4241} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 4242} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const cancel_work_sync: ref;

axiom cancel_work_sync == $sub.ref(0, 774072);

procedure cancel_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4243} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 4244} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const drm_mode_config_cleanup: ref;

axiom drm_mode_config_cleanup == $sub.ref(0, 775104);

procedure drm_mode_config_cleanup($p0: ref);
  free requires assertsPassed;



implementation drm_mode_config_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    return;
}



const vmw_kms_close_screen_object_display: ref;

axiom vmw_kms_close_screen_object_display == $sub.ref(0, 776136);

procedure vmw_kms_close_screen_object_display($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vmw_kms_close_screen_object_display($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 4245} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 2088);
    call {:si_unique_call 4246} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 4247} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i5);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 2616);
    call {:si_unique_call 4248} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i6);
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $i9 := $ne.ref($p8, $0.ref);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 38);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4249} drm_vblank_cleanup($p4);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p0);
    call {:si_unique_call 4250} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i11);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 2616);
    call {:si_unique_call 4251} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i12);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4252} kfree($p15);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const vmw_kms_close_legacy_display_system: ref;

axiom vmw_kms_close_legacy_display_system == $sub.ref(0, 777168);

procedure vmw_kms_close_legacy_display_system($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vmw_kms_close_legacy_display_system($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 4253} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i1);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 2088);
    call {:si_unique_call 4254} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i2);
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 4255} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i5);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 2608);
    call {:si_unique_call 4256} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i6);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    $i9 := $ne.ref($p8, $0.ref);
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 38);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4257} drm_vblank_cleanup($p4);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p0);
    call {:si_unique_call 4258} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i11);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 2608);
    call {:si_unique_call 4259} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i12);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4260} $i16 := list_empty($p15);
    call {:si_unique_call 4261} {:cexpr "tmp___7"} boogie_si_record_i32($i16);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    call {:si_unique_call 4262} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i19);
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4263} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 4264} {:cexpr "tmp___9"} boogie_si_record_i64($i20);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p0);
    call {:si_unique_call 4266} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i22);
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 2608);
    call {:si_unique_call 4267} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i23);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4268} kfree($p26);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call {:si_unique_call 4265} devirtbounce(0, .str.92, 440, 12);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    call vmw_kms_close_legacy_display_system_loop_$bb14();
    goto $bb14_last;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb9;

  $bb15_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const drm_vblank_cleanup: ref;

axiom drm_vblank_cleanup == $sub.ref(0, 778200);

procedure drm_vblank_cleanup($p0: ref);
  free requires assertsPassed;



implementation drm_vblank_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    return;
}



const fb_deferred_io_cleanup: ref;

axiom fb_deferred_io_cleanup == $sub.ref(0, 779232);

procedure fb_deferred_io_cleanup($p0: ref);
  free requires assertsPassed;



implementation fb_deferred_io_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    return;
}



const unregister_framebuffer: ref;

axiom unregister_framebuffer == $sub.ref(0, 780264);

procedure unregister_framebuffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unregister_framebuffer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4269} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 4270} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const framebuffer_release: ref;

axiom framebuffer_release == $sub.ref(0, 781296);

procedure framebuffer_release($p0: ref);
  free requires assertsPassed;



implementation framebuffer_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    return;
}



const ttm_object_file_release: ref;

axiom ttm_object_file_release == $sub.ref(0, 782328);

procedure ttm_object_file_release($p0: ref);
  free requires assertsPassed;



implementation ttm_object_file_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    return;
}



const vmw_event_fence_fpriv_gone: ref;

axiom vmw_event_fence_fpriv_gone == $sub.ref(0, 783360);

procedure vmw_event_fence_fpriv_gone($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.6, assertsPassed, $M.2, $M.11, $M.12, $CurrAddr, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation vmw_event_fence_fpriv_gone($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $i10: i64;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i2, $i3, $p4, $p5, $i6, $i7, $i8, $i9, $p11, $p12, $i13, $i14, $p15, $i16, $p17, $i18, $i19, $p20, $p21, $i22, $i23, $p24, $i25, $i26, $p27, $p28, $i29, $i30, $p32, $i33, $i34, $p35, $i36, $i37, $p38, $p39 := vmw_event_fence_fpriv_gone_loop_$bb1($p0, $p1, $i2, $i3, $p4, $p5, $i6, $i7, $i8, $i9, $p11, $p12, $i13, $i14, $p15, $i16, $p17, $i18, $i19, $p20, $p21, $i22, $i23, $p24, $i25, $i26, $p27, $p28, $i29, $i30, $p32, $i33, $i34, $p35, $i36, $i37, $p38, $p39);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 4271} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i2);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 16);
    call {:si_unique_call 4272} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i3);
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4273} $p5 := spinlock_check($p4);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4274} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 4275} {:cexpr "irq_flags"} boogie_si_record_i64($i6);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4276} $i7 := list_empty($p1);
    call {:si_unique_call 4277} {:cexpr "tmp___8"} boogie_si_record_i32($i7);
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $i9 := $i6;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 4281} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i13);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 40);
    call {:si_unique_call 4282} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i14);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i32($p15);
    call {:si_unique_call 4283} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i16);
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p12);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i16);
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $i19 := $sub.i64(0, $i18);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p17, $mul.ref($i19, 1));
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    call {:si_unique_call 4284} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i22);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 40);
    call {:si_unique_call 4285} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i23);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4286} list_del_init($p24);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p21);
    call {:si_unique_call 4287} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i25);
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 56);
    call {:si_unique_call 4288} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i26);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p21);
    call {:si_unique_call 4289} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i29);
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 56);
    call {:si_unique_call 4290} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i30);
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i30);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $0.ref);
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p0);
    call {:si_unique_call 4291} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i33);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 16);
    call {:si_unique_call 4292} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i34);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i34);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4293} spin_unlock_irqrestore($p35, $i6);
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p28);
    call {:si_unique_call 4294} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i36);
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 40);
    call {:si_unique_call 4295} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i37);
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    call {:si_unique_call 4296} devirtbounce.17($p39, $p28);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    goto corral_source_split_9226_dummy;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p0);
    call {:si_unique_call 4278} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i40);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 16);
    call {:si_unique_call 4279} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i41);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4280} spin_unlock_irqrestore($p42, $i10);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    return;

  corral_source_split_9226_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ttm_object_file_init: ref;

axiom ttm_object_file_init == $sub.ref(0, 784392);

procedure ttm_object_file_init($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation ttm_object_file_init($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4297} {:cexpr "ttm_object_file_init:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4298} $p2 := external_alloc();
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 785424);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    return;
}



const __rwlock_init: ref;

axiom __rwlock_init == $sub.ref(0, 786456);

procedure __rwlock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __rwlock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    return;
}



const idr_init: ref;

axiom idr_init == $sub.ref(0, 787488);

procedure idr_init($p0: ref);
  free requires assertsPassed;



implementation idr_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    return;
}



const vmw_get_initial_size: ref;

axiom vmw_get_initial_size == $sub.ref(0, 788520);

procedure vmw_get_initial_size($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vmw_get_initial_size($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i12: i32;
  var $i13: i32;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4299} $i1 := vmw_read($p0, 2);
    call {:si_unique_call 4300} {:cexpr "width"} boogie_si_record_i32($i1);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4301} $i2 := vmw_read($p0, 3);
    call {:si_unique_call 4302} {:cexpr "height"} boogie_si_record_i32($i2);
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i1, 800);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 800;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i2, 600);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 600;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    call {:si_unique_call 4303} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i7);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 2124);
    call {:si_unique_call 4304} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i8);
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    call {:si_unique_call 4305} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i10);
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i32($i4, $i10);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    call {:si_unique_call 4306} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i14);
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 2128);
    call {:si_unique_call 4307} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i15);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    call {:si_unique_call 4308} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i17);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i32($i6, $i17);
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19, $i20 := $i6, $i4;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i12, $i13 := $i19, $i20;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    call {:si_unique_call 4309} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i21);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 2132);
    call {:si_unique_call 4310} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i22);
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i13);
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p0);
    call {:si_unique_call 4311} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i24);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 2136);
    call {:si_unique_call 4312} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i25);
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i12);
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $i19, $i20 := 600, 800;
    goto $bb12;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $i12, $i13 := 600, 800;
    goto $bb9;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $i6 := $i2;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $i4 := $i1;
    goto $bb3;
}



const vmw_print_capabilities: ref;

axiom vmw_print_capabilities == $sub.ref(0, 789552);

procedure vmw_print_capabilities($i0: i32);
  free requires assertsPassed;



implementation vmw_print_capabilities($i0: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $i15: i1;
  var $i17: i32;
  var $i18: i1;
  var $i20: i32;
  var $i21: i1;
  var $i23: i32;
  var $i24: i1;
  var $i26: i32;
  var $i27: i1;
  var $i29: i32;
  var $i30: i1;
  var $i32: i32;
  var $i33: i1;
  var $i35: i32;
  var $i36: i1;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i1;
  var $i44: i32;
  var $i45: i1;
  var $i47: i32;
  var $i48: i1;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4313} {:cexpr "vmw_print_capabilities:arg:capabilities"} boogie_si_record_i32($i0);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4314} vslice_dummy_var_167 := printk.ref(.str.226);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i0, 2);
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i0, 32);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i0, 64);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i0, 128);
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i0, 256);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i0, 512);
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i0, 16384);
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i0, 32768);
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i0, 65536);
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i0, 131072);
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i0, 262144);
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i0, 524288);
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i0, 1048576);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i0, 2097152);
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i0, 4194304);
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i0, 8388608);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    return;

  $bb46:
    assume $i48 == 1;
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4330} vslice_dummy_var_183 := printk.ref(.str.242);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i45 == 1;
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4329} vslice_dummy_var_182 := printk.ref(.str.241);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i42 == 1;
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4328} vslice_dummy_var_181 := printk.ref(.str.240);
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i39 == 1;
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4327} vslice_dummy_var_180 := printk.ref(.str.239);
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i36 == 1;
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4326} vslice_dummy_var_179 := printk.ref(.str.238);
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i33 == 1;
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4325} vslice_dummy_var_178 := printk.ref(.str.237);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i30 == 1;
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4324} vslice_dummy_var_177 := printk.ref(.str.236);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i27 == 1;
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4323} vslice_dummy_var_176 := printk.ref(.str.235);
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i24 == 1;
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4322} vslice_dummy_var_175 := printk.ref(.str.234);
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i21 == 1;
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4321} vslice_dummy_var_174 := printk.ref(.str.233);
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i18 == 1;
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4320} vslice_dummy_var_173 := printk.ref(.str.232);
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4319} vslice_dummy_var_172 := printk.ref(.str.231);
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4318} vslice_dummy_var_171 := printk.ref(.str.230);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4317} vslice_dummy_var_170 := printk.ref(.str.229);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4316} vslice_dummy_var_169 := printk.ref(.str.228);
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4315} vslice_dummy_var_168 := printk.ref(.str.227);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmw_ttm_global_init: ref;

axiom vmw_ttm_global_init == $sub.ref(0, 790584);

procedure vmw_ttm_global_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vmw_ttm_global_init($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i56: i1;
  var $i57: i32;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i27: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 4331} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i1);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 1816);
    call {:si_unique_call 4332} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i2);
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p3);
    call {:si_unique_call 4333} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i5);
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 8);
    call {:si_unique_call 4334} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i6);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, 216);
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p3);
    call {:si_unique_call 4335} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i8);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 24);
    call {:si_unique_call 4336} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i9);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, vmw_ttm_mem_global_init);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p3);
    call {:si_unique_call 4337} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i11);
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 32);
    call {:si_unique_call 4338} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i12);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, vmw_ttm_mem_global_release);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4339} $i14 := drm_global_item_ref($p3);
    call {:si_unique_call 4340} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    call {:si_unique_call 4341} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i16);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $i18 := $xor.i1($i17, 1);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    call {:si_unique_call 4342} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i19);
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $i21 := $xor.i1($i20, 1);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    call {:si_unique_call 4343} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i22);
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    call {:si_unique_call 4344} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i23);
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4345} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 4346} {:cexpr "tmp___7"} boogie_si_record_i64($i24);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p0);
    call {:si_unique_call 4348} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i28);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 1808);
    call {:si_unique_call 4349} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i29);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p0);
    call {:si_unique_call 4350} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i30);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 1832);
    call {:si_unique_call 4351} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i31);
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i29);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p33);
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p0);
    call {:si_unique_call 4352} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i36);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 1768);
    call {:si_unique_call 4353} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i37);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 1);
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p38);
    call {:si_unique_call 4354} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i40);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 8);
    call {:si_unique_call 4355} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i41);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p42, 224);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p38);
    call {:si_unique_call 4356} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i43);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 24);
    call {:si_unique_call 4357} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i44);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, ttm_bo_global_init);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p38);
    call {:si_unique_call 4358} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i46);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 32);
    call {:si_unique_call 4359} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i47);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, ttm_bo_global_release);
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4360} $i49 := drm_global_item_ref($p38);
    call {:si_unique_call 4361} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i32($i50);
    call {:si_unique_call 4362} {:cexpr "__cil_tmp33"} boogie_si_record_i32($i51);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $i53 := $xor.i1($i52, 1);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    $i54 := $zext.i1.i32($i53);
    call {:si_unique_call 4363} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i54);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $i56 := $xor.i1($i55, 1);
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i32($i56);
    call {:si_unique_call 4364} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i57);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i57);
    call {:si_unique_call 4365} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i58);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4366} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 4367} {:cexpr "tmp___8"} boogie_si_record_i64($i59);
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb5:
    assume $i60 == 1;
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4368} vslice_dummy_var_185 := drm_err.ref.ref(.str.95, .str.97);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p0);
    call {:si_unique_call 4369} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i62);
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 1816);
    call {:si_unique_call 4370} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i63);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $p64 := $i2p.i64.ref($i63);
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4371} drm_global_item_unref($p64);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $i27 := $i49;
    goto $bb3;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4347} vslice_dummy_var_184 := drm_err.ref.ref(.str.95, .str.96);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $i27 := $i14;
    goto $bb3;
}



const ttm_bo_device_init: ref;

axiom ttm_bo_device_init == $sub.ref(0, 791616);

procedure ttm_bo_device_init($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i1) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_device_init($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i1) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4372} {:cexpr "ttm_bo_device_init:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 4373} {:cexpr "ttm_bo_device_init:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4374} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 4375} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ttm_bo_init_mm: ref;

axiom ttm_bo_init_mm == $sub.ref(0, 792648);

procedure ttm_bo_init_mm($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_init_mm($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4376} {:cexpr "ttm_bo_init_mm:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 4377} {:cexpr "ttm_bo_init_mm:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4378} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 4379} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const drm_mtrr_add: ref;

axiom drm_mtrr_add == $sub.ref(0, 793680);

procedure drm_mtrr_add($i0: i64, $i1: i64, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_mtrr_add($i0: i64, $i1: i64, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4380} {:cexpr "drm_mtrr_add:arg:offset"} boogie_si_record_i64($i0);
    call {:si_unique_call 4381} {:cexpr "drm_mtrr_add:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 4382} {:cexpr "drm_mtrr_add:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1(1);
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4383} $i4 := mtrr_add($i0, $i1, $i2, $i3);
    call {:si_unique_call 4384} {:cexpr "tmp___7"} boogie_si_record_i32($i4);
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ioremap_wc: ref;

axiom ioremap_wc == $sub.ref(0, 794712);

procedure ioremap_wc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_wc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4385} {:cexpr "ioremap_wc:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 4386} {:cexpr "ioremap_wc:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4387} $p2 := external_alloc();
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ttm_object_device_init: ref;

axiom ttm_object_device_init == $sub.ref(0, 795744);

procedure ttm_object_device_init($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation ttm_object_device_init($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4388} {:cexpr "ttm_object_device_init:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4389} $p2 := external_alloc();
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const pci_request_regions: ref;

axiom pci_request_regions == $sub.ref(0, 796776);

procedure pci_request_regions($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_request_regions($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4390} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 4391} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_request_region: ref;

axiom pci_request_region == $sub.ref(0, 797808);

procedure pci_request_region($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_request_region($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4392} {:cexpr "pci_request_region:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4393} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 4394} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vmw_fence_manager_init: ref;

axiom vmw_fence_manager_init == $sub.ref(0, 798840);

procedure vmw_fence_manager_init($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmw_fence_manager_init($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i32;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $i58: i32;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $i63: i32;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $p17: ref;
  var vslice_dummy_var_186: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4395} $p1 := kzalloc(208, 208);
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 4396} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i3);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p2);
    call {:si_unique_call 4397} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i4);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, $i3);
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 4398} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i6);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $i8 := $xor.i1($i7, 1);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 4399} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i9);
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 4400} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i12);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    call {:si_unique_call 4401} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i13);
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4402} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 4403} {:cexpr "tmp___8"} boogie_si_record_i64($i14);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p2);
    call {:si_unique_call 4404} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i18);
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 8);
    call {:si_unique_call 4405} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i19);
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p0);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p2);
    call {:si_unique_call 4406} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i21);
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 16);
    call {:si_unique_call 4407} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i22);
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4408} vslice_dummy_var_186 := spinlock_check($p23);
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p2);
    call {:si_unique_call 4409} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i25);
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 16);
    call {:si_unique_call 4410} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i26);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4411} __raw_spin_lock_init($p27, .str.106, __key___19);
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p2);
    call {:si_unique_call 4412} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i28);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 40);
    call {:si_unique_call 4413} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i29);
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4414} INIT_LIST_HEAD($p30);
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p2);
    call {:si_unique_call 4415} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i31);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 104);
    call {:si_unique_call 4416} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i32);
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4417} INIT_LIST_HEAD($p33);
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p2);
    call {:si_unique_call 4418} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i34);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 56);
    call {:si_unique_call 4419} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i35);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4420} __init_work($p36, 0);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p2);
    call {:si_unique_call 4421} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i37);
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 56);
    call {:si_unique_call 4422} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i38);
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i38);
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p40, 2097664);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p2);
    call {:si_unique_call 4423} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i41);
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 64);
    call {:si_unique_call 4424} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i42);
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i42);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4425} INIT_LIST_HEAD($p43);
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p2);
    call {:si_unique_call 4426} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i44);
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 80);
    call {:si_unique_call 4427} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i45);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $p46 := $i2p.i64.ref($i45);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, vmw_fence_work_func);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p2);
    call {:si_unique_call 4428} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i47);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 100);
    call {:si_unique_call 4429} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i48);
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i48);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, 1);
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4430} $i50 := ttm_round_pot(168);
    call {:si_unique_call 4431} {:cexpr "tmp___9"} boogie_si_record_i64($i50);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p2);
    call {:si_unique_call 4432} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i51);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 88);
    call {:si_unique_call 4433} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i52);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i50);
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i52);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4434} $i55 := ttm_round_pot(104);
    call {:si_unique_call 4435} {:cexpr "tmp___10"} boogie_si_record_i64($i55);
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p2);
    call {:si_unique_call 4436} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i56);
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $i57 := $add.i64($i56, 92);
    call {:si_unique_call 4437} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i57);
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i64.i32($i55);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $p59 := $i2p.i64.ref($i57);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i58);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4438} $i60 := ttm_round_pot(96);
    call {:si_unique_call 4439} {:cexpr "tmp___11"} boogie_si_record_i64($i60);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p2);
    call {:si_unique_call 4440} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i61);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, 96);
    call {:si_unique_call 4441} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i62);
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i64.i32($i60);
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $p64 := $i2p.i64.ref($i62);
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i63);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p2);
    call {:si_unique_call 4442} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i65);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    $i66 := $add.i64($i65, 128);
    call {:si_unique_call 4443} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i66);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $p67 := $i2p.i64.ref($i66);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4444} __mutex_init($p67, .str.107, __key___20);
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p17 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $p17 := $0.ref;
    goto $bb3;
}



const vmw_kms_init: ref;

axiom vmw_kms_init == $sub.ref(0, 799872);

procedure vmw_kms_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed, $CurrAddr;



implementation vmw_kms_init($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var vslice_dummy_var_187: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 4445} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i1);
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 2088);
    call {:si_unique_call 4446} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4447} drm_mode_config_init($p4);
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    call {:si_unique_call 4448} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i5);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 1496);
    call {:si_unique_call 4449} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i6);
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, vmw_kms_funcs);
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p4);
    call {:si_unique_call 4450} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i8);
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 1480);
    call {:si_unique_call 4451} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i9);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 1);
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p4);
    call {:si_unique_call 4452} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i11);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 1484);
    call {:si_unique_call 4453} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i12);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 1);
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p4);
    call {:si_unique_call 4454} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i14);
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 1488);
    call {:si_unique_call 4455} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i15);
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 8192);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p4);
    call {:si_unique_call 4456} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i17);
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 1492);
    call {:si_unique_call 4457} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i18);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 8192);
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4458} $i20 := vmw_kms_init_screen_object_display($p0);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    call {:si_unique_call 4459} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4460} vslice_dummy_var_187 := vmw_kms_init_legacy_display_system($p0);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  SeqInstr_598:
    assume !assertsPassed;
    return;
}



const vmw_overlay_init: ref;

axiom vmw_overlay_init == $sub.ref(0, 800904);

procedure vmw_overlay_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmw_overlay_init($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $i6: i32;
  var vslice_dummy_var_188: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 4461} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i1);
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 2624);
    call {:si_unique_call 4462} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $i5 := $ne.ref($p4, $0.ref);
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    call {:si_unique_call 4463} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i7);
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 1892);
    call {:si_unique_call 4464} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i8);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    call {:si_unique_call 4465} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i10);
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 8);
    call {:si_unique_call 4466} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i11);
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    call {:si_unique_call 4467} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i13);
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 1892);
    call {:si_unique_call 4468} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i14);
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    call {:si_unique_call 4469} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i16);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 32);
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4471} $p20 := kzalloc(176, 208);
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    $i22 := $ne.ref($p21, $0.ref);
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb11:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p21);
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4472} __mutex_init($p23, .str.104, __key___16);
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb17;

  $bb17:
    call $i24, $i25, $i26, $i27, $i28, $i29, $i30, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $p46, $i47 := vmw_overlay_init_loop_$bb17($p21, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $p46, $i47);
    goto $bb17_last;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 1);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i25 == 1);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p0);
    call {:si_unique_call 4488} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i48);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, 2624);
    call {:si_unique_call 4489} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i49);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    $p50 := $i2p.i64.ref($i49);
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $p20);
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb19:
    assume $i25 == 1;
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i24);
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    $i27 := $mul.i64($i26, 104);
    call {:si_unique_call 4473} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i27);
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $i28 := $add.i64(72, $i27);
    call {:si_unique_call 4474} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i28);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p21);
    call {:si_unique_call 4475} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i29);
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, $i28);
    call {:si_unique_call 4476} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i30);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i30);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $0.ref);
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i24);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    $i34 := $mul.i64($i33, 104);
    call {:si_unique_call 4477} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i34);
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 9);
    call {:si_unique_call 4478} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i35);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $i36 := $add.i64(72, $i35);
    call {:si_unique_call 4479} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i36);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p21);
    call {:si_unique_call 4480} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i37);
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, $i36);
    call {:si_unique_call 4481} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i38);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i38);
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 0);
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i24);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $i41 := $mul.i64($i40, 104);
    call {:si_unique_call 4482} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i41);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 8);
    call {:si_unique_call 4483} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i42);
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $i43 := $add.i64(72, $i42);
    call {:si_unique_call 4484} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i43);
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p21);
    call {:si_unique_call 4485} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i44);
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, $i43);
    call {:si_unique_call 4486} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i45);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    $p46 := $i2p.i64.ref($i45);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, 0);
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i24, 1);
    call {:si_unique_call 4487} {:cexpr "i"} boogie_si_record_i32($i47);
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $i24 := $i47;
    goto corral_source_split_9677_dummy;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4470} vslice_dummy_var_188 := printk.ref(.str.103);
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 38);
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  corral_source_split_9677_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9645;
}



const vmw_fifo_have_3d: ref;

axiom vmw_fifo_have_3d == $sub.ref(0, 801936);

procedure vmw_fifo_have_3d($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation vmw_fifo_have_3d($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $i19: i1;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i1;
  var $i14: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 4490} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i1);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 2144);
    call {:si_unique_call 4491} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i2);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 4492} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i5);
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 1856);
    call {:si_unique_call 4493} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i6);
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 4494} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i8);
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 2156);
    call {:si_unique_call 4495} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i9);
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    call {:si_unique_call 4496} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i11);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 32768);
    call {:si_unique_call 4497} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i12);
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p4, $mul.ref(0, 4));
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4498} $i17 := ioread32($p16);
    call {:si_unique_call 4499} {:cexpr "fifo_min"} boogie_si_record_i32($i17);
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    call {:si_unique_call 4500} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i18);
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $i19 := $ule.i64($i18, 28);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p7);
    call {:si_unique_call 4501} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i20);
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 36);
    call {:si_unique_call 4502} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i21);
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    call {:si_unique_call 4503} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i23);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 256);
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := 7;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p4, $mul.ref($i27, 4));
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4504} $i30 := ioread32($p29);
    call {:si_unique_call 4505} {:cexpr "hwversion"} boogie_si_record_i32($i30);
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i32 := $ult.i32($i30, 131073);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p0);
    call {:si_unique_call 4506} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i33);
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 2616);
    call {:si_unique_call 4507} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i34);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i34);
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $i37 := $ne.ref($p36, $0.ref);
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb17:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb3;

  $bb14:
    assume $i32 == 1;
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $i26 := 17;
    goto $bb10;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;
}



const vmw_fb_init: ref;

axiom vmw_fb_init == $sub.ref(0, 802968);

procedure vmw_fb_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmw_fb_init($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $i41: i1;
  var $i43: i64;
  var $i44: i64;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $i80: i32;
  var $i81: i1;
  var $i82: i1;
  var $i83: i32;
  var $i84: i1;
  var $i85: i1;
  var $i86: i32;
  var $i87: i64;
  var $i88: i64;
  var $i89: i1;
  var $i91: i64;
  var $i92: i64;
  var $i93: i64;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $i99: i1;
  var $i100: i32;
  var $i101: i1;
  var $i102: i1;
  var $i103: i32;
  var $i104: i64;
  var $i105: i64;
  var $i106: i1;
  var $i107: i64;
  var $i108: i64;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i64;
  var $i113: i64;
  var $p114: ref;
  var $p115: ref;
  var $i116: i64;
  var $i117: i64;
  var $p118: ref;
  var $i119: i64;
  var $i120: i64;
  var $i121: i64;
  var $p122: ref;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i1;
  var $i127: i1;
  var $i128: i32;
  var $i129: i1;
  var $i130: i1;
  var $i131: i32;
  var $i132: i64;
  var $i133: i64;
  var $i134: i1;
  var $i136: i64;
  var $i137: i64;
  var $i138: i64;
  var $i139: i64;
  var $p140: ref;
  var $i141: i64;
  var $i142: i64;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;
  var $i147: i64;
  var $p148: ref;
  var $i149: i64;
  var $i150: i64;
  var $i151: i64;
  var $i152: i64;
  var $p153: ref;
  var $i155: i64;
  var $i156: i64;
  var $p157: ref;
  var $i158: i64;
  var $i159: i64;
  var $p160: ref;
  var $i161: i64;
  var $i162: i64;
  var $p163: ref;
  var $i164: i64;
  var $i165: i64;
  var $p166: ref;
  var $i167: i64;
  var $i168: i64;
  var $p169: ref;
  var $i170: i64;
  var $i171: i64;
  var $p172: ref;
  var $i173: i64;
  var $i174: i64;
  var $p175: ref;
  var $i176: i64;
  var $i177: i64;
  var $p178: ref;
  var $i179: i64;
  var $i180: i64;
  var $p181: ref;
  var $i182: i64;
  var $i183: i64;
  var $p184: ref;
  var $i185: i64;
  var $i186: i64;
  var $i187: i64;
  var $i188: i64;
  var $i189: i64;
  var $p190: ref;
  var $p192: ref;
  var $i193: i64;
  var $i194: i64;
  var $i195: i64;
  var $i196: i64;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $i200: i64;
  var $i201: i64;
  var $i202: i64;
  var $p203: ref;
  var $i204: i64;
  var $i205: i64;
  var $p206: ref;
  var $i207: i64;
  var $i208: i64;
  var $p209: ref;
  var $i210: i64;
  var $i211: i64;
  var $p212: ref;
  var $i213: i64;
  var $i214: i64;
  var $p215: ref;
  var $i216: i64;
  var $i217: i64;
  var $p218: ref;
  var $i219: i64;
  var $i220: i64;
  var $i221: i64;
  var $p222: ref;
  var $i223: i64;
  var $i224: i64;
  var $i225: i64;
  var $p226: ref;
  var $i227: i64;
  var $i228: i64;
  var $i229: i64;
  var $p230: ref;
  var $i231: i64;
  var $i232: i64;
  var $p233: ref;
  var $i234: i64;
  var $i235: i64;
  var $i236: i64;
  var $p237: ref;
  var $i238: i64;
  var $i239: i64;
  var $p240: ref;
  var $i241: i64;
  var $i242: i64;
  var $p243: ref;
  var $i244: i64;
  var $i245: i64;
  var $i246: i64;
  var $i247: i64;
  var $p248: ref;
  var $i249: i32;
  var $p250: ref;
  var $i251: i64;
  var $i252: i64;
  var $p253: ref;
  var $i254: i64;
  var $i255: i64;
  var $p256: ref;
  var $i257: i64;
  var $i258: i64;
  var $p259: ref;
  var $i260: i64;
  var $i261: i64;
  var $p262: ref;
  var $i263: i64;
  var $i264: i64;
  var $p265: ref;
  var $i266: i64;
  var $i267: i64;
  var $p268: ref;
  var $i269: i64;
  var $i270: i64;
  var $p271: ref;
  var $i272: i64;
  var $i273: i64;
  var $p274: ref;
  var $p275: ref;
  var $i276: i64;
  var $i277: i64;
  var $p278: ref;
  var $p279: ref;
  var $i280: i1;
  var $i282: i64;
  var $i283: i64;
  var $i284: i64;
  var $p285: ref;
  var $p286: ref;
  var $i287: i64;
  var $i288: i64;
  var $i289: i64;
  var $i290: i64;
  var $p291: ref;
  var $i292: i32;
  var $i293: i64;
  var $p294: ref;
  var $i295: i64;
  var $i296: i64;
  var $i297: i64;
  var $i298: i64;
  var $p299: ref;
  var $p300: ref;
  var $i301: i64;
  var $i302: i64;
  var $i303: i64;
  var $i304: i64;
  var $p305: ref;
  var $i306: i32;
  var $i307: i64;
  var $p308: ref;
  var $i309: i64;
  var $i310: i64;
  var $p311: ref;
  var $i312: i64;
  var $i313: i64;
  var $p314: ref;
  var $i315: i64;
  var $i316: i64;
  var $p317: ref;
  var $i318: i64;
  var $i319: i64;
  var $p320: ref;
  var $i321: i64;
  var $i322: i64;
  var $p323: ref;
  var $i324: i64;
  var $i325: i64;
  var $p326: ref;
  var $i328: i64;
  var $i329: i64;
  var $p330: ref;
  var $i331: i64;
  var $i332: i64;
  var $p333: ref;
  var $i334: i32;
  var $i335: i1;
  var $i336: i32;
  var $i337: i1;
  var $i338: i1;
  var $i339: i32;
  var $i340: i1;
  var $i341: i1;
  var $i342: i32;
  var $i343: i64;
  var $i344: i64;
  var $i345: i1;
  var $i281: i32;
  var $i346: i64;
  var $i347: i64;
  var $p348: ref;
  var $i135: i32;
  var $i349: i64;
  var $i350: i64;
  var $p351: ref;
  var $p352: ref;
  var $i90: i32;
  var $i353: i64;
  var $i354: i64;
  var $p355: ref;
  var $p356: ref;
  var $i357: i64;
  var $i358: i64;
  var $p359: ref;
  var $i42: i32;
  var vslice_dummy_var_189: ref;
  var vslice_dummy_var_190: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 4508} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i1);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 2088);
    call {:si_unique_call 4509} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i2);
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    call {:si_unique_call 4510} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i5);
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 1016);
    call {:si_unique_call 4511} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i6);
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    call {:si_unique_call 4512} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i9);
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 144);
    call {:si_unique_call 4513} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i10);
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    call {:si_unique_call 4514} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i12);
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 2124);
    call {:si_unique_call 4515} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i13);
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    call {:si_unique_call 4516} {:cexpr "_min1"} boogie_si_record_i32($i15);
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $i16 := $ult.i32($i15, 2048);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := 2048;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p0);
    call {:si_unique_call 4517} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i18);
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 2128);
    call {:si_unique_call 4518} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i19);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    call {:si_unique_call 4519} {:cexpr "_min1___0"} boogie_si_record_i32($i21);
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $i22 := $ult.i32($i21, 2048);
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := 2048;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p0);
    call {:si_unique_call 4520} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i24);
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 2132);
    call {:si_unique_call 4521} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i25);
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    call {:si_unique_call 4522} {:cexpr "_min1___1"} boogie_si_record_i32($i27);
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $i28 := $ult.i32($i27, $i17);
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i17;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p0);
    call {:si_unique_call 4523} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i30);
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 2136);
    call {:si_unique_call 4524} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i31);
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    call {:si_unique_call 4525} {:cexpr "_min1___2"} boogie_si_record_i32($i33);
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    $i34 := $ult.i32($i33, $i23);
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $i23;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    $i36 := $mul.i32($i17, 32);
    call {:si_unique_call 4526} {:cexpr "__cil_tmp81"} boogie_si_record_i32($i36);
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $i37 := $udiv.i32($i36, 8);
    call {:si_unique_call 4527} {:cexpr "fb_pitch"} boogie_si_record_i32($i37);
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    $i38 := $mul.i32($i37, $i23);
    call {:si_unique_call 4528} {:cexpr "fb_size"} boogie_si_record_i32($i38);
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4529} $i39 := vmw_read($p0, 14);
    call {:si_unique_call 4530} {:cexpr "fb_offset"} boogie_si_record_i32($i39);
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4531} $p40 := framebuffer_alloc(208, $p11);
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    $i41 := $ne.ref($p40, $0.ref);
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i41 == 1);
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 12);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb13:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p0);
    call {:si_unique_call 4532} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i43);
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 2600);
    call {:si_unique_call 4533} {:cexpr "__cil_tmp83"} boogie_si_record_i64($i44);
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    $p46 := $i2p.i64.ref($i44);
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, $p40);
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p40);
    call {:si_unique_call 4534} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i47);
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 1160);
    call {:si_unique_call 4535} {:cexpr "__cil_tmp85"} boogie_si_record_i64($i48);
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i48);
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, $p0);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p51);
    call {:si_unique_call 4536} {:cexpr "__cil_tmp87"} boogie_si_record_i64($i53);
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i53, 124);
    call {:si_unique_call 4537} {:cexpr "__cil_tmp88"} boogie_si_record_i64($i54);
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    $p55 := $i2p.i64.ref($i54);
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 24);
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p51);
    call {:si_unique_call 4538} {:cexpr "__cil_tmp89"} boogie_si_record_i64($i56);
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $i57 := $add.i64($i56, 128);
    call {:si_unique_call 4539} {:cexpr "__cil_tmp90"} boogie_si_record_i64($i57);
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    $p58 := $i2p.i64.ref($i57);
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 32);
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p51);
    call {:si_unique_call 4540} {:cexpr "__cil_tmp91"} boogie_si_record_i64($i59);
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, 8);
    call {:si_unique_call 4541} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i60);
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $p61 := $i2p.i64.ref($i60);
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p61, $0.ref);
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p51);
    call {:si_unique_call 4542} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i62);
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 132);
    call {:si_unique_call 4543} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i63);
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $p64 := $i2p.i64.ref($i63);
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i17);
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p51);
    call {:si_unique_call 4544} {:cexpr "__cil_tmp95"} boogie_si_record_i64($i65);
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    $i66 := $add.i64($i65, 136);
    call {:si_unique_call 4545} {:cexpr "__cil_tmp96"} boogie_si_record_i64($i66);
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    $p67 := $i2p.i64.ref($i66);
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i23);
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p51);
    call {:si_unique_call 4546} {:cexpr "__cil_tmp97"} boogie_si_record_i64($i68);
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $i69 := $add.i64($i68, 8);
    call {:si_unique_call 4547} {:cexpr "__cil_tmp98"} boogie_si_record_i64($i69);
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $i70 := $zext.i32.i64($i38);
    call {:si_unique_call 4548} {:cexpr "__cil_tmp99"} boogie_si_record_i64($i70);
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4549} $p71 := vmalloc($i70);
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $p72 := $i2p.i64.ref($i69);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p72, $p71);
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 4550} {:cexpr "__cil_tmp101"} boogie_si_record_i64($i73);
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p51);
    call {:si_unique_call 4551} {:cexpr "__cil_tmp102"} boogie_si_record_i64($i74);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $i75 := $add.i64($i74, 8);
    call {:si_unique_call 4552} {:cexpr "__cil_tmp103"} boogie_si_record_i64($i75);
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    $p76 := $i2p.i64.ref($i75);
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    call {:si_unique_call 4553} {:cexpr "__cil_tmp105"} boogie_si_record_i64($i78);
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i78, $i73);
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    $i80 := $zext.i1.i32($i79);
    call {:si_unique_call 4554} {:cexpr "__cil_tmp106"} boogie_si_record_i32($i80);
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $i82 := $xor.i1($i81, 1);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $i83 := $zext.i1.i32($i82);
    call {:si_unique_call 4555} {:cexpr "__cil_tmp107"} boogie_si_record_i32($i83);
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    $i85 := $xor.i1($i84, 1);
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    $i86 := $zext.i1.i32($i85);
    call {:si_unique_call 4556} {:cexpr "__cil_tmp108"} boogie_si_record_i32($i86);
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i86);
    call {:si_unique_call 4557} {:cexpr "__cil_tmp109"} boogie_si_record_i64($i87);
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4558} $i88 := ldv__builtin_expect($i87, 0);
    call {:si_unique_call 4559} {:cexpr "tmp___11"} boogie_si_record_i64($i88);
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i91 := $zext.i32.i64($i38);
    call {:si_unique_call 4566} {:cexpr "__cil_tmp110"} boogie_si_record_i64($i91);
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p51);
    call {:si_unique_call 4567} {:cexpr "__cil_tmp111"} boogie_si_record_i64($i92);
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    $i93 := $add.i64($i92, 16);
    call {:si_unique_call 4568} {:cexpr "__cil_tmp112"} boogie_si_record_i64($i93);
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $p94 := $i2p.i64.ref($i93);
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4569} $i95 := vmw_fb_create_bo($p0, $i91, $p94);
    call {:si_unique_call 4570} {:cexpr "ret"} boogie_si_record_i32($i95);
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    $i97 := $zext.i1.i32($i96);
    call {:si_unique_call 4571} {:cexpr "__cil_tmp114"} boogie_si_record_i32($i97);
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    $i99 := $xor.i1($i98, 1);
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    $i100 := $zext.i1.i32($i99);
    call {:si_unique_call 4572} {:cexpr "__cil_tmp115"} boogie_si_record_i32($i100);
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $i102 := $xor.i1($i101, 1);
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $i103 := $zext.i1.i32($i102);
    call {:si_unique_call 4573} {:cexpr "__cil_tmp116"} boogie_si_record_i32($i103);
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i103);
    call {:si_unique_call 4574} {:cexpr "__cil_tmp117"} boogie_si_record_i64($i104);
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4575} $i105 := ldv__builtin_expect($i104, 0);
    call {:si_unique_call 4576} {:cexpr "tmp___12"} boogie_si_record_i64($i105);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p51);
    call {:si_unique_call 4577} {:cexpr "__cil_tmp118"} boogie_si_record_i64($i107);
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $i108 := $add.i64($i107, 16);
    call {:si_unique_call 4578} {:cexpr "__cil_tmp119"} boogie_si_record_i64($i108);
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    $p109 := $i2p.i64.ref($i108);
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    $i112 := $p2i.ref.i64($p51);
    call {:si_unique_call 4579} {:cexpr "__cil_tmp123"} boogie_si_record_i64($i112);
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    $i113 := $add.i64($i112, 16);
    call {:si_unique_call 4580} {:cexpr "__cil_tmp124"} boogie_si_record_i64($i113);
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $p114 := $i2p.i64.ref($i113);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    $i116 := $p2i.ref.i64($p115);
    call {:si_unique_call 4581} {:cexpr "__cil_tmp126"} boogie_si_record_i64($i116);
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    $i117 := $add.i64($i116, 40);
    call {:si_unique_call 4582} {:cexpr "__cil_tmp127"} boogie_si_record_i64($i117);
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $p118 := $i2p.i64.ref($i117);
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    $i119 := $load.i64($M.0, $p118);
    call {:si_unique_call 4583} {:cexpr "__cil_tmp128"} boogie_si_record_i64($i119);
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p51);
    call {:si_unique_call 4584} {:cexpr "__cil_tmp129"} boogie_si_record_i64($i120);
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    $i121 := $add.i64($i120, 24);
    call {:si_unique_call 4585} {:cexpr "__cil_tmp130"} boogie_si_record_i64($i121);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    $p122 := $i2p.i64.ref($i121);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4586} $i123 := ttm_bo_kmap($p111, 0, $i119, $p122);
    call {:si_unique_call 4587} {:cexpr "ret"} boogie_si_record_i32($i123);
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    $i124 := $ne.i32($i123, 0);
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    $i125 := $zext.i1.i32($i124);
    call {:si_unique_call 4588} {:cexpr "__cil_tmp132"} boogie_si_record_i32($i125);
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    $i127 := $xor.i1($i126, 1);
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    $i128 := $zext.i1.i32($i127);
    call {:si_unique_call 4589} {:cexpr "__cil_tmp133"} boogie_si_record_i32($i128);
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $i130 := $xor.i1($i129, 1);
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    $i131 := $zext.i1.i32($i130);
    call {:si_unique_call 4590} {:cexpr "__cil_tmp134"} boogie_si_record_i32($i131);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $i132 := $sext.i32.i64($i131);
    call {:si_unique_call 4591} {:cexpr "__cil_tmp135"} boogie_si_record_i64($i132);
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4592} $i133 := ldv__builtin_expect($i132, 0);
    call {:si_unique_call 4593} {:cexpr "tmp___13"} boogie_si_record_i64($i133);
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    $i134 := $ne.i64($i133, 0);
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i136 := $p2i.ref.i64($p51);
    call {:si_unique_call 4597} {:cexpr "__cil_tmp136"} boogie_si_record_i64($i136);
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    $i137 := $add.i64($i136, 144);
    call {:si_unique_call 4598} {:cexpr "__cil_tmp137"} boogie_si_record_i64($i137);
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    $i138 := $p2i.ref.i64($p51);
    call {:si_unique_call 4599} {:cexpr "__cil_tmp138"} boogie_si_record_i64($i138);
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    $i139 := $add.i64($i138, 24);
    call {:si_unique_call 4600} {:cexpr "__cil_tmp139"} boogie_si_record_i64($i139);
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    $p140 := $i2p.i64.ref($i139);
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    $i141 := $p2i.ref.i64($p51);
    call {:si_unique_call 4601} {:cexpr "__cil_tmp141"} boogie_si_record_i64($i141);
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    $i142 := $add.i64($i141, 156);
    call {:si_unique_call 4602} {:cexpr "__cil_tmp142"} boogie_si_record_i64($i142);
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    $p143 := $i2p.i64.ref($i142);
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4603} $p144 := ttm_kmap_obj_virtual($p140, $p143);
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    $p145 := $i2p.i64.ref($i137);
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p145, $p144);
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    $i146 := $p2i.ref.i64($p51);
    call {:si_unique_call 4604} {:cexpr "__cil_tmp144"} boogie_si_record_i64($i146);
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    $i147 := $add.i64($i146, 152);
    call {:si_unique_call 4605} {:cexpr "__cil_tmp145"} boogie_si_record_i64($i147);
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    $p148 := $i2p.i64.ref($i147);
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p148, $i38);
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    $i149 := $add.i64(0, 0);
    call {:si_unique_call 4606} {:cexpr "__cil_tmp147"} boogie_si_record_i64($i149);
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    $i150 := $add.i64(320, $i149);
    call {:si_unique_call 4607} {:cexpr "__cil_tmp148"} boogie_si_record_i64($i150);
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    $i151 := $p2i.ref.i64($p40);
    call {:si_unique_call 4608} {:cexpr "__cil_tmp149"} boogie_si_record_i64($i151);
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    $i152 := $add.i64($i151, $i150);
    call {:si_unique_call 4609} {:cexpr "__cil_tmp150"} boogie_si_record_i64($i152);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $p153 := $i2p.i64.ref($i152);
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4610} vslice_dummy_var_189 := strcpy($p153, .str.37);
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    $i155 := $p2i.ref.i64($p40);
    call {:si_unique_call 4611} {:cexpr "__cil_tmp153"} boogie_si_record_i64($i155);
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $i156 := $add.i64($i155, 348);
    call {:si_unique_call 4612} {:cexpr "__cil_tmp154"} boogie_si_record_i64($i156);
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    $p157 := $i2p.i64.ref($i156);
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p157, 0);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    $i158 := $p2i.ref.i64($p40);
    call {:si_unique_call 4613} {:cexpr "__cil_tmp156"} boogie_si_record_i64($i158);
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $i159 := $add.i64($i158, 356);
    call {:si_unique_call 4614} {:cexpr "__cil_tmp157"} boogie_si_record_i64($i159);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    $p160 := $i2p.i64.ref($i159);
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p160, 2);
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $i161 := $p2i.ref.i64($p40);
    call {:si_unique_call 4615} {:cexpr "__cil_tmp159"} boogie_si_record_i64($i161);
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    $i162 := $add.i64($i161, 352);
    call {:si_unique_call 4616} {:cexpr "__cil_tmp160"} boogie_si_record_i64($i162);
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $p163 := $i2p.i64.ref($i162);
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p163, 0);
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    $i164 := $p2i.ref.i64($p40);
    call {:si_unique_call 4617} {:cexpr "__cil_tmp162"} boogie_si_record_i64($i164);
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    $i165 := $add.i64($i164, 360);
    call {:si_unique_call 4618} {:cexpr "__cil_tmp163"} boogie_si_record_i64($i165);
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    $p166 := $i2p.i64.ref($i165);
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p166, 1);
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    $i167 := $p2i.ref.i64($p40);
    call {:si_unique_call 4619} {:cexpr "__cil_tmp165"} boogie_si_record_i64($i167);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $i168 := $add.i64($i167, 362);
    call {:si_unique_call 4620} {:cexpr "__cil_tmp166"} boogie_si_record_i64($i168);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    $p169 := $i2p.i64.ref($i168);
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p169, 1);
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    $i170 := $p2i.ref.i64($p40);
    call {:si_unique_call 4621} {:cexpr "__cil_tmp168"} boogie_si_record_i64($i170);
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    $i171 := $add.i64($i170, 364);
    call {:si_unique_call 4622} {:cexpr "__cil_tmp169"} boogie_si_record_i64($i171);
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    $p172 := $i2p.i64.ref($i171);
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p172, 0);
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $i173 := $p2i.ref.i64($p40);
    call {:si_unique_call 4623} {:cexpr "__cil_tmp171"} boogie_si_record_i64($i173);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    $i174 := $add.i64($i173, 388);
    call {:si_unique_call 4624} {:cexpr "__cil_tmp172"} boogie_si_record_i64($i174);
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $p175 := $i2p.i64.ref($i174);
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p175, 0);
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    $i176 := $p2i.ref.i64($p40);
    call {:si_unique_call 4625} {:cexpr "__cil_tmp174"} boogie_si_record_i64($i176);
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    $i177 := $add.i64($i176, 368);
    call {:si_unique_call 4626} {:cexpr "__cil_tmp175"} boogie_si_record_i64($i177);
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $p178 := $i2p.i64.ref($i177);
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p178, $i37);
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    $i179 := $p2i.ref.i64($p40);
    call {:si_unique_call 4627} {:cexpr "__cil_tmp177"} boogie_si_record_i64($i179);
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    $i180 := $add.i64($i179, 336);
    call {:si_unique_call 4628} {:cexpr "__cil_tmp178"} boogie_si_record_i64($i180);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    $p181 := $i2p.i64.ref($i180);
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p181, 0);
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    $i182 := $p2i.ref.i64($p40);
    call {:si_unique_call 4629} {:cexpr "__cil_tmp180"} boogie_si_record_i64($i182);
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    $i183 := $add.i64($i182, 344);
    call {:si_unique_call 4630} {:cexpr "__cil_tmp181"} boogie_si_record_i64($i183);
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    $p184 := $i2p.i64.ref($i183);
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p184, $i38);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    $i185 := $p2i.ref.i64($p40);
    call {:si_unique_call 4631} {:cexpr "__cil_tmp182"} boogie_si_record_i64($i185);
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    $i186 := $add.i64($i185, 1136);
    call {:si_unique_call 4632} {:cexpr "__cil_tmp183"} boogie_si_record_i64($i186);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $i187 := $add.i64(56, 0);
    call {:si_unique_call 4633} {:cexpr "__cil_tmp185"} boogie_si_record_i64($i187);
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    $i188 := $p2i.ref.i64($p51);
    call {:si_unique_call 4634} {:cexpr "__cil_tmp186"} boogie_si_record_i64($i188);
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    $i189 := $add.i64($i188, $i187);
    call {:si_unique_call 4635} {:cexpr "__cil_tmp187"} boogie_si_record_i64($i189);
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    $p190 := $i2p.i64.ref($i189);
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    $p192 := $i2p.i64.ref($i186);
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p192, $p190);
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    $i193 := $p2i.ref.i64($p40);
    call {:si_unique_call 4636} {:cexpr "__cil_tmp189"} boogie_si_record_i64($i193);
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    $i194 := $add.i64($i193, 1120);
    call {:si_unique_call 4637} {:cexpr "__cil_tmp190"} boogie_si_record_i64($i194);
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    $i195 := $p2i.ref.i64($p51);
    call {:si_unique_call 4638} {:cexpr "__cil_tmp191"} boogie_si_record_i64($i195);
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    $i196 := $add.i64($i195, 8);
    call {:si_unique_call 4639} {:cexpr "__cil_tmp192"} boogie_si_record_i64($i196);
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    $p197 := $i2p.i64.ref($i196);
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.0, $p197);
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $p199 := $i2p.i64.ref($i194);
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p199, $p198);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $i200 := $p2i.ref.i64($p40);
    call {:si_unique_call 4640} {:cexpr "__cil_tmp194"} boogie_si_record_i64($i200);
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    $i201 := $add.i64($i200, 1128);
    call {:si_unique_call 4641} {:cexpr "__cil_tmp195"} boogie_si_record_i64($i201);
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $i202 := $zext.i32.i64($i38);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $p203 := $i2p.i64.ref($i201);
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p203, $i202);
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $i204 := $p2i.ref.i64($p40);
    call {:si_unique_call 4642} {:cexpr "__cil_tmp196"} boogie_si_record_i64($i204);
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    $i205 := $add.i64($i204, 8);
    call {:si_unique_call 4643} {:cexpr "__cil_tmp197"} boogie_si_record_i64($i205);
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    $p206 := $i2p.i64.ref($i205);
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p206, 1);
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $i207 := $p2i.ref.i64($p40);
    call {:si_unique_call 4644} {:cexpr "__cil_tmp198"} boogie_si_record_i64($i207);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    $i208 := $add.i64($i207, 1080);
    call {:si_unique_call 4645} {:cexpr "__cil_tmp199"} boogie_si_record_i64($i208);
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    $p209 := $i2p.i64.ref($i208);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p209, vmw_fb_ops);
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    $i210 := $p2i.ref.i64($p40);
    call {:si_unique_call 4646} {:cexpr "__cil_tmp201"} boogie_si_record_i64($i210);
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    $i211 := $add.i64($i210, 192);
    call {:si_unique_call 4647} {:cexpr "__cil_tmp202"} boogie_si_record_i64($i211);
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    $p212 := $i2p.i64.ref($i211);
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p212, 16);
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $i213 := $p2i.ref.i64($p40);
    call {:si_unique_call 4648} {:cexpr "__cil_tmp204"} boogie_si_record_i64($i213);
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    $i214 := $add.i64($i213, 204);
    call {:si_unique_call 4649} {:cexpr "__cil_tmp205"} boogie_si_record_i64($i214);
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    $p215 := $i2p.i64.ref($i214);
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p215, 8);
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $i216 := $p2i.ref.i64($p40);
    call {:si_unique_call 4650} {:cexpr "__cil_tmp207"} boogie_si_record_i64($i216);
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $i217 := $add.i64($i216, 216);
    call {:si_unique_call 4651} {:cexpr "__cil_tmp208"} boogie_si_record_i64($i217);
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    $p218 := $i2p.i64.ref($i217);
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p218, 0);
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    $i219 := $add.i64(160, 36);
    call {:si_unique_call 4652} {:cexpr "__cil_tmp210"} boogie_si_record_i64($i219);
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    $i220 := $p2i.ref.i64($p40);
    call {:si_unique_call 4653} {:cexpr "__cil_tmp211"} boogie_si_record_i64($i220);
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    $i221 := $add.i64($i220, $i219);
    call {:si_unique_call 4654} {:cexpr "__cil_tmp212"} boogie_si_record_i64($i221);
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $p222 := $i2p.i64.ref($i221);
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p222, 8);
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    $i223 := $add.i64(160, 48);
    call {:si_unique_call 4655} {:cexpr "__cil_tmp214"} boogie_si_record_i64($i223);
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $i224 := $p2i.ref.i64($p40);
    call {:si_unique_call 4656} {:cexpr "__cil_tmp215"} boogie_si_record_i64($i224);
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $i225 := $add.i64($i224, $i223);
    call {:si_unique_call 4657} {:cexpr "__cil_tmp216"} boogie_si_record_i64($i225);
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    $p226 := $i2p.i64.ref($i225);
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p226, 8);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    $i227 := $add.i64(160, 60);
    call {:si_unique_call 4658} {:cexpr "__cil_tmp218"} boogie_si_record_i64($i227);
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    $i228 := $p2i.ref.i64($p40);
    call {:si_unique_call 4659} {:cexpr "__cil_tmp219"} boogie_si_record_i64($i228);
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $i229 := $add.i64($i228, $i227);
    call {:si_unique_call 4660} {:cexpr "__cil_tmp220"} boogie_si_record_i64($i229);
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    $p230 := $i2p.i64.ref($i229);
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p230, 8);
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $i231 := $p2i.ref.i64($p40);
    call {:si_unique_call 4661} {:cexpr "__cil_tmp222"} boogie_si_record_i64($i231);
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $i232 := $add.i64($i231, 228);
    call {:si_unique_call 4662} {:cexpr "__cil_tmp223"} boogie_si_record_i64($i232);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    $p233 := $i2p.i64.ref($i232);
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p233, 0);
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    $i234 := $add.i64(160, 72);
    call {:si_unique_call 4663} {:cexpr "__cil_tmp225"} boogie_si_record_i64($i234);
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    $i235 := $p2i.ref.i64($p40);
    call {:si_unique_call 4664} {:cexpr "__cil_tmp226"} boogie_si_record_i64($i235);
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    $i236 := $add.i64($i235, $i234);
    call {:si_unique_call 4665} {:cexpr "__cil_tmp227"} boogie_si_record_i64($i236);
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    $p237 := $i2p.i64.ref($i236);
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p237, 0);
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    $i238 := $p2i.ref.i64($p40);
    call {:si_unique_call 4666} {:cexpr "__cil_tmp229"} boogie_si_record_i64($i238);
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    $i239 := $add.i64($i238, 168);
    call {:si_unique_call 4667} {:cexpr "__cil_tmp230"} boogie_si_record_i64($i239);
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    $p240 := $i2p.i64.ref($i239);
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p240, $i17);
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $i241 := $p2i.ref.i64($p40);
    call {:si_unique_call 4668} {:cexpr "__cil_tmp232"} boogie_si_record_i64($i241);
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $i242 := $add.i64($i241, 172);
    call {:si_unique_call 4669} {:cexpr "__cil_tmp233"} boogie_si_record_i64($i242);
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $p243 := $i2p.i64.ref($i242);
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p243, $i23);
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    $i244 := $p2i.ref.i64($p40);
    call {:si_unique_call 4670} {:cexpr "__cil_tmp235"} boogie_si_record_i64($i244);
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $i245 := $add.i64($i244, 184);
    call {:si_unique_call 4671} {:cexpr "__cil_tmp236"} boogie_si_record_i64($i245);
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    $i246 := $p2i.ref.i64($p51);
    call {:si_unique_call 4672} {:cexpr "__cil_tmp237"} boogie_si_record_i64($i246);
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    $i247 := $add.i64($i246, 128);
    call {:si_unique_call 4673} {:cexpr "__cil_tmp238"} boogie_si_record_i64($i247);
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $p248 := $i2p.i64.ref($i247);
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    $i249 := $load.i32($M.0, $p248);
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    $p250 := $i2p.i64.ref($i245);
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p250, $i249);
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    $i251 := $p2i.ref.i64($p40);
    call {:si_unique_call 4674} {:cexpr "__cil_tmp240"} boogie_si_record_i64($i251);
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $i252 := $add.i64($i251, 176);
    call {:si_unique_call 4675} {:cexpr "__cil_tmp241"} boogie_si_record_i64($i252);
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    $p253 := $i2p.i64.ref($i252);
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p253, 0);
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    $i254 := $p2i.ref.i64($p40);
    call {:si_unique_call 4676} {:cexpr "__cil_tmp243"} boogie_si_record_i64($i254);
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    $i255 := $add.i64($i254, 180);
    call {:si_unique_call 4677} {:cexpr "__cil_tmp244"} boogie_si_record_i64($i255);
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    $p256 := $i2p.i64.ref($i255);
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p256, 0);
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    $i257 := $p2i.ref.i64($p40);
    call {:si_unique_call 4678} {:cexpr "__cil_tmp246"} boogie_si_record_i64($i257);
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $i258 := $add.i64($i257, 244);
    call {:si_unique_call 4679} {:cexpr "__cil_tmp247"} boogie_si_record_i64($i258);
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    $p259 := $i2p.i64.ref($i258);
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p259, 0);
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    $i260 := $p2i.ref.i64($p40);
    call {:si_unique_call 4680} {:cexpr "__cil_tmp249"} boogie_si_record_i64($i260);
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    $i261 := $add.i64($i260, 248);
    call {:si_unique_call 4681} {:cexpr "__cil_tmp250"} boogie_si_record_i64($i261);
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    $p262 := $i2p.i64.ref($i261);
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p262, $sub.i32(0, 1));
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $i263 := $p2i.ref.i64($p40);
    call {:si_unique_call 4682} {:cexpr "__cil_tmp252"} boogie_si_record_i64($i263);
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $i264 := $add.i64($i263, 252);
    call {:si_unique_call 4683} {:cexpr "__cil_tmp253"} boogie_si_record_i64($i264);
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    $p265 := $i2p.i64.ref($i264);
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p265, $sub.i32(0, 1));
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    $i266 := $p2i.ref.i64($p40);
    call {:si_unique_call 4684} {:cexpr "__cil_tmp254"} boogie_si_record_i64($i266);
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    $i267 := $add.i64($i266, 160);
    call {:si_unique_call 4685} {:cexpr "__cil_tmp255"} boogie_si_record_i64($i267);
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    $p268 := $i2p.i64.ref($i267);
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p268, $i29);
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $i269 := $p2i.ref.i64($p40);
    call {:si_unique_call 4686} {:cexpr "__cil_tmp257"} boogie_si_record_i64($i269);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $i270 := $add.i64($i269, 164);
    call {:si_unique_call 4687} {:cexpr "__cil_tmp258"} boogie_si_record_i64($i270);
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $p271 := $i2p.i64.ref($i270);
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p271, $i35);
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    $i272 := $p2i.ref.i64($p40);
    call {:si_unique_call 4688} {:cexpr "__cil_tmp259"} boogie_si_record_i64($i272);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    $i273 := $add.i64($i272, 1168);
    call {:si_unique_call 4689} {:cexpr "__cil_tmp260"} boogie_si_record_i64($i273);
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4690} $p274 := alloc_apertures(1);
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    $p275 := $i2p.i64.ref($i273);
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p275, $p274);
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    $i276 := $p2i.ref.i64($p40);
    call {:si_unique_call 4691} {:cexpr "__cil_tmp261"} boogie_si_record_i64($i276);
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    $i277 := $add.i64($i276, 1168);
    call {:si_unique_call 4692} {:cexpr "__cil_tmp262"} boogie_si_record_i64($i277);
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    $p278 := $i2p.i64.ref($i277);
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $p279 := $load.ref($M.0, $p278);
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $i280 := $ne.ref($p279, $0.ref);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i280} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i280 == 1);
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    $i281 := $sub.i32(0, 12);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    $i346 := $p2i.ref.i64($p51);
    call {:si_unique_call 4693} {:cexpr "__cil_tmp312"} boogie_si_record_i64($i346);
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    $i347 := $add.i64($i346, 24);
    call {:si_unique_call 4694} {:cexpr "__cil_tmp313"} boogie_si_record_i64($i347);
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    $p348 := $i2p.i64.ref($i347);
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4695} ttm_bo_kunmap($p348);
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $i135 := $i281;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    $i349 := $p2i.ref.i64($p51);
    call {:si_unique_call 4594} {:cexpr "__cil_tmp315"} boogie_si_record_i64($i349);
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    $i350 := $add.i64($i349, 16);
    call {:si_unique_call 4595} {:cexpr "__cil_tmp316"} boogie_si_record_i64($i350);
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    $p351 := $i2p.i64.ref($i350);
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    $p352 := $bitcast.ref.ref($p351);
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4596} ttm_bo_unref($p352);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    $i90 := $i135;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    $i353 := $p2i.ref.i64($p51);
    call {:si_unique_call 4560} {:cexpr "__cil_tmp319"} boogie_si_record_i64($i353);
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    $i354 := $add.i64($i353, 8);
    call {:si_unique_call 4561} {:cexpr "__cil_tmp320"} boogie_si_record_i64($i354);
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $p355 := $i2p.i64.ref($i354);
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    $p356 := $load.ref($M.0, $p355);
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4562} vfree($p356);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4563} framebuffer_release($p40);
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $i357 := $p2i.ref.i64($p0);
    call {:si_unique_call 4564} {:cexpr "__cil_tmp323"} boogie_si_record_i64($i357);
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    $i358 := $add.i64($i357, 2600);
    call {:si_unique_call 4565} {:cexpr "__cil_tmp324"} boogie_si_record_i64($i358);
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    $p359 := $i2p.i64.ref($i358);
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p359, $0.ref);
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    $i42 := $i90;
    goto $bb15;

  $bb28:
    assume $i280 == 1;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i282 := $add.i64(8, 0);
    call {:si_unique_call 4696} {:cexpr "__cil_tmp265"} boogie_si_record_i64($i282);
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    $i283 := $p2i.ref.i64($p40);
    call {:si_unique_call 4697} {:cexpr "__cil_tmp266"} boogie_si_record_i64($i283);
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    $i284 := $add.i64($i283, 1168);
    call {:si_unique_call 4698} {:cexpr "__cil_tmp267"} boogie_si_record_i64($i284);
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    $p285 := $i2p.i64.ref($i284);
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    $p286 := $load.ref($M.0, $p285);
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    $i287 := $p2i.ref.i64($p286);
    call {:si_unique_call 4699} {:cexpr "__cil_tmp269"} boogie_si_record_i64($i287);
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    $i288 := $add.i64($i287, $i282);
    call {:si_unique_call 4700} {:cexpr "__cil_tmp270"} boogie_si_record_i64($i288);
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    $i289 := $p2i.ref.i64($p0);
    call {:si_unique_call 4701} {:cexpr "__cil_tmp271"} boogie_si_record_i64($i289);
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    $i290 := $add.i64($i289, 2108);
    call {:si_unique_call 4702} {:cexpr "__cil_tmp272"} boogie_si_record_i64($i290);
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    $p291 := $i2p.i64.ref($i290);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    $i292 := $load.i32($M.0, $p291);
    call {:si_unique_call 4703} {:cexpr "__cil_tmp273"} boogie_si_record_i32($i292);
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    $i293 := $zext.i32.i64($i292);
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    $p294 := $i2p.i64.ref($i288);
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p294, $i293);
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    $i295 := $add.i64(0, 8);
    call {:si_unique_call 4704} {:cexpr "__cil_tmp275"} boogie_si_record_i64($i295);
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    $i296 := $add.i64(8, $i295);
    call {:si_unique_call 4705} {:cexpr "__cil_tmp276"} boogie_si_record_i64($i296);
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    $i297 := $p2i.ref.i64($p40);
    call {:si_unique_call 4706} {:cexpr "__cil_tmp277"} boogie_si_record_i64($i297);
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    $i298 := $add.i64($i297, 1168);
    call {:si_unique_call 4707} {:cexpr "__cil_tmp278"} boogie_si_record_i64($i298);
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $p299 := $i2p.i64.ref($i298);
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    $p300 := $load.ref($M.0, $p299);
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    $i301 := $p2i.ref.i64($p300);
    call {:si_unique_call 4708} {:cexpr "__cil_tmp280"} boogie_si_record_i64($i301);
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    $i302 := $add.i64($i301, $i296);
    call {:si_unique_call 4709} {:cexpr "__cil_tmp281"} boogie_si_record_i64($i302);
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    $i303 := $p2i.ref.i64($p0);
    call {:si_unique_call 4710} {:cexpr "__cil_tmp282"} boogie_si_record_i64($i303);
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    $i304 := $add.i64($i303, 2112);
    call {:si_unique_call 4711} {:cexpr "__cil_tmp283"} boogie_si_record_i64($i304);
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $p305 := $i2p.i64.ref($i304);
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    $i306 := $load.i32($M.0, $p305);
    call {:si_unique_call 4712} {:cexpr "__cil_tmp284"} boogie_si_record_i32($i306);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    $i307 := $zext.i32.i64($i306);
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    $p308 := $i2p.i64.ref($i302);
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p308, $i307);
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    $i309 := $p2i.ref.i64($p51);
    call {:si_unique_call 4713} {:cexpr "__cil_tmp286"} boogie_si_record_i64($i309);
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    $i310 := $add.i64($i309, 196);
    call {:si_unique_call 4714} {:cexpr "__cil_tmp287"} boogie_si_record_i64($i310);
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    $p311 := $i2p.i64.ref($i310);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p311, 0);
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    $i312 := $p2i.ref.i64($p51);
    call {:si_unique_call 4715} {:cexpr "__cil_tmp289"} boogie_si_record_i64($i312);
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    $i313 := $add.i64($i312, 188);
    call {:si_unique_call 4716} {:cexpr "__cil_tmp290"} boogie_si_record_i64($i313);
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    $p314 := $i2p.i64.ref($i313);
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p314, 0);
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    $i315 := $p2i.ref.i64($p51);
    call {:si_unique_call 4717} {:cexpr "__cil_tmp292"} boogie_si_record_i64($i315);
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    $i316 := $add.i64($i315, 200);
    call {:si_unique_call 4718} {:cexpr "__cil_tmp293"} boogie_si_record_i64($i316);
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    $p317 := $i2p.i64.ref($i316);
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p317, 0);
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    $i318 := $p2i.ref.i64($p51);
    call {:si_unique_call 4719} {:cexpr "__cil_tmp295"} boogie_si_record_i64($i318);
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    $i319 := $add.i64($i318, 192);
    call {:si_unique_call 4720} {:cexpr "__cil_tmp296"} boogie_si_record_i64($i319);
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    $p320 := $i2p.i64.ref($i319);
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p320, 0);
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    $i321 := $p2i.ref.i64($p51);
    call {:si_unique_call 4721} {:cexpr "__cil_tmp298"} boogie_si_record_i64($i321);
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $i322 := $add.i64($i321, 184);
    call {:si_unique_call 4722} {:cexpr "__cil_tmp299"} boogie_si_record_i64($i322);
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $p323 := $i2p.i64.ref($i322);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p323, 1);
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i324 := $p2i.ref.i64($p51);
    call {:si_unique_call 4723} {:cexpr "__cil_tmp300"} boogie_si_record_i64($i324);
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $i325 := $add.i64($i324, 160);
    call {:si_unique_call 4724} {:cexpr "__cil_tmp301"} boogie_si_record_i64($i325);
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    $p326 := $i2p.i64.ref($i325);
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4725} vslice_dummy_var_190 := spinlock_check($p326);
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i328 := $p2i.ref.i64($p51);
    call {:si_unique_call 4726} {:cexpr "__cil_tmp303"} boogie_si_record_i64($i328);
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $i329 := $add.i64($i328, 160);
    call {:si_unique_call 4727} {:cexpr "__cil_tmp304"} boogie_si_record_i64($i329);
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    $p330 := $i2p.i64.ref($i329);
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4728} __raw_spin_lock_init($p330, .str.38, __key___12);
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i331 := $p2i.ref.i64($p40);
    call {:si_unique_call 4729} {:cexpr "__cil_tmp306"} boogie_si_record_i64($i331);
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    $i332 := $add.i64($i331, 1072);
    call {:si_unique_call 4730} {:cexpr "__cil_tmp307"} boogie_si_record_i64($i332);
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    $p333 := $i2p.i64.ref($i332);
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p333, vmw_defio);
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4731} fb_deferred_io_init($p40);
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4732} $i334 := register_framebuffer($p40);
    call {:si_unique_call 4733} {:cexpr "ret"} boogie_si_record_i32($i334);
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $i335 := $ne.i32($i334, 0);
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    $i336 := $zext.i1.i32($i335);
    call {:si_unique_call 4734} {:cexpr "__cil_tmp308"} boogie_si_record_i32($i336);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    $i337 := $ne.i32($i336, 0);
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    $i338 := $xor.i1($i337, 1);
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    $i339 := $zext.i1.i32($i338);
    call {:si_unique_call 4735} {:cexpr "__cil_tmp309"} boogie_si_record_i32($i339);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $i340 := $ne.i32($i339, 0);
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    $i341 := $xor.i1($i340, 1);
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    $i342 := $zext.i1.i32($i341);
    call {:si_unique_call 4736} {:cexpr "__cil_tmp310"} boogie_si_record_i32($i342);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    $i343 := $sext.i32.i64($i342);
    call {:si_unique_call 4737} {:cexpr "__cil_tmp311"} boogie_si_record_i64($i343);
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4738} $i344 := ldv__builtin_expect($i343, 0);
    call {:si_unique_call 4739} {:cexpr "tmp___16"} boogie_si_record_i64($i344);
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    $i345 := $ne.i64($i344, 0);
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i345} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i345 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb15;

  $bb38:
    assume $i345 == 1;
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4740} fb_deferred_io_cleanup($p40);
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    $i281 := $i334;
    goto $bb30;

  $bb24:
    assume $i134 == 1;
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    $i135 := $i123;
    goto $bb26;

  $bb21:
    assume $i106 == 1;
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    $i90 := $i95;
    goto $bb19;

  $bb17:
    assume $i89 == 1;
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    $i90 := $sub.i32(0, 12);
    goto $bb19;

  $bb10:
    assume $i34 == 1;
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    $i35 := $i33;
    goto $bb12;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb9;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    goto $bb6;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    goto $bb3;
}



const drm_irq_install: ref;

axiom drm_irq_install == $sub.ref(0, 804000);

procedure drm_irq_install($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_irq_install($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4741} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 4742} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vmwgfx_pm_notifier: ref;

axiom vmwgfx_pm_notifier == $sub.ref(0, 805032);

procedure vmwgfx_pm_notifier($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed, $M.6, $M.11, $M.12, $M.2, $CurrAddr, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmwgfx_pm_notifier($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4743} {:cexpr "vmwgfx_pm_notifier:arg:val"} boogie_si_record_i64($i1);
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 4744} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i3);
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 134632);
    call {:si_unique_call 4745} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i4);
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i32($p5);
    call {:si_unique_call 4746} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i6);
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i6);
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, $i8);
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p7, $mul.ref($i9, 1));
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    call {:si_unique_call 4747} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i12);
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 134384);
    call {:si_unique_call 4748} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i13);
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i1);
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 1);
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i1);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i1);
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 2);
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i1);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 4);
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i23 == 1);
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i1);
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 6);
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i64.i32($i1);
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 5);
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p15);
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4752} ttm_suspend_unlock($p31);
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p15);
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4749} ttm_suspend_lock($p28);
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1(0);
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4750} vmw_execbuf_release_pinned_bo($p11, $i29, 0);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p11);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4751} ttm_bo_swapout_all($p30);
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const register_pm_notifier: ref;

axiom register_pm_notifier == $sub.ref(0, 806064);

procedure register_pm_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_pm_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4753} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 4754} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ttm_suspend_lock: ref;

axiom ttm_suspend_lock == $sub.ref(0, 807096);

procedure ttm_suspend_lock($p0: ref);
  free requires assertsPassed;



implementation ttm_suspend_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    return;
}



const ttm_bo_swapout_all: ref;

axiom ttm_bo_swapout_all == $sub.ref(0, 808128);

procedure ttm_bo_swapout_all($p0: ref);
  free requires assertsPassed;



implementation ttm_bo_swapout_all($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    return;
}



const ttm_suspend_unlock: ref;

axiom ttm_suspend_unlock == $sub.ref(0, 809160);

procedure ttm_suspend_unlock($p0: ref);
  free requires assertsPassed;



implementation ttm_suspend_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    return;
}



const framebuffer_alloc: ref;

axiom framebuffer_alloc == $sub.ref(0, 810192);

procedure framebuffer_alloc($i0: i64, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation framebuffer_alloc($i0: i64, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4755} {:cexpr "framebuffer_alloc:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4756} $p2 := external_alloc();
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const vmw_fb_create_bo: ref;

axiom vmw_fb_create_bo == $sub.ref(0, 811224);

procedure vmw_fb_create_bo($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmw_fb_create_bo($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i1;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i33: i32;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i29: i32;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4757} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 4758} {:cexpr "vmw_fb_create_bo:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref(vmw_vram_ne_placement);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_40 := $M.0;
    cmdloc_dummy_var_41 := $M.0;
    call {:si_unique_call 4759} cmdloc_dummy_var_42 := $memcpy.i8(cmdloc_dummy_var_40, cmdloc_dummy_var_41, $p4, $p5, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_42;
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p3);
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 4);
    call {:si_unique_call 4760} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i7);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i1, 4096);
    call {:si_unique_call 4761} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i8);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64($i8, 1);
    call {:si_unique_call 4762} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i9);
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    $i10 := $lshr.i64($i9, 12);
    call {:si_unique_call 4763} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i10);
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i7);
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    call {:si_unique_call 4764} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i13);
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 134392);
    call {:si_unique_call 4765} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i14);
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1(0);
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4766} $i17 := ttm_write_lock($p15, $i16);
    call {:si_unique_call 4767} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    call {:si_unique_call 4768} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i19);
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    $i21 := $xor.i1($i20, 1);
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    call {:si_unique_call 4769} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i22);
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    $i24 := $xor.i1($i23, 1);
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    call {:si_unique_call 4770} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i25);
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    call {:si_unique_call 4771} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i26);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4772} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 4773} {:cexpr "tmp___7"} boogie_si_record_i64($i27);
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4774} $p30 := __kmalloc(416, 208);
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    $i32 := $ne.ref($p31, $0.ref);
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i32 == 1);
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $i33 := $i17;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p0);
    call {:si_unique_call 4775} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i50);
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 134392);
    call {:si_unique_call 4776} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i51);
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i51);
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4777} ttm_write_unlock($p52);
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    $i29 := $i33;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb5:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1(0);
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4778} $i35 := vmw_dmabuf_init($p0, $p31, $i1, $p3, $i34, vmw_dmabuf_bo_free);
    call {:si_unique_call 4779} {:cexpr "ret"} boogie_si_record_i32($i35);
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    call {:si_unique_call 4780} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i37);
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    $i39 := $xor.i1($i38, 1);
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    call {:si_unique_call 4781} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i40);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    $i42 := $xor.i1($i41, 1);
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    call {:si_unique_call 4782} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i43);
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    call {:si_unique_call 4783} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i44);
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4784} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 4785} {:cexpr "tmp___9"} boogie_si_record_i64($i45);
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p30);
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p0);
    call {:si_unique_call 4786} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i47);
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 134392);
    call {:si_unique_call 4787} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i48);
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i48);
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4788} ttm_write_unlock($p49);
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb3;

  $bb9:
    assume $i46 == 1;
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $i33 := $i35;
    goto $bb7;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $i29 := $i17;
    goto $bb3;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 812256);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const alloc_apertures: ref;

axiom alloc_apertures == $sub.ref(0, 813288);

procedure alloc_apertures($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation alloc_apertures($i0: i32) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p9: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4789} {:cexpr "alloc_apertures:arg:max_num"} boogie_si_record_i32($i0);
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    call {:si_unique_call 4790} {:cexpr "alloc_apertures:arg:__cil_tmp4"} boogie_si_record_i32($i0);
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    $i2 := $mul.i64($i1, 16);
    call {:si_unique_call 4791} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    $i3 := $add.i64(8, $i2);
    call {:si_unique_call 4792} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i3);
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4793} $p4 := kzalloc($i3, 208);
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    $i6 := $ne.ref($p5, $0.ref);
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p5);
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i0);
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $p8 := $p4;
    goto $bb3;
}



const fb_deferred_io_init: ref;

axiom fb_deferred_io_init == $sub.ref(0, 814320);

procedure fb_deferred_io_init($p0: ref);
  free requires assertsPassed;



implementation fb_deferred_io_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    return;
}



const register_framebuffer: ref;

axiom register_framebuffer == $sub.ref(0, 815352);

procedure register_framebuffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_framebuffer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4794} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 4795} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vmw_dmabuf_bo_free: ref;

axiom vmw_dmabuf_bo_free == $sub.ref(0, 816384);

procedure vmw_dmabuf_bo_free($p0: ref);
  free requires assertsPassed;



implementation vmw_dmabuf_bo_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4796} $p1 := vmw_dma_buffer($p0);
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4797} kfree($p2);
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    return;
}



const vmw_dmabuf_init: ref;

axiom vmw_dmabuf_init == $sub.ref(0, 817416);

procedure vmw_dmabuf_init($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i1, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vmw_dmabuf_init($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i1, $p5: ref) returns ($r: i32)
{
  var $i6: i8;
  var $p7: ref;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $i28: i32;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4798} {:cexpr "vmw_dmabuf_init:arg:size"} boogie_si_record_i64($i2);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i4);
    call {:si_unique_call 4799} {:cexpr "vmw_dmabuf_init:arg:interruptible"} boogie_si_record_i1($i4);
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := $ne.ref($p5, $0.ref);
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $i9 := $xor.i1($i8, 1);
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 4800} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i10);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $i12 := $xor.i1($i11, 1);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    call {:si_unique_call 4801} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i13);
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    $i15 := $xor.i1($i14, 1);
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    call {:si_unique_call 4802} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i16);
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    call {:si_unique_call 4803} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i17);
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4804} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 4805} {:cexpr "tmp___7"} boogie_si_record_i64($i18);
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4807} $i20 := ttm_bo_acc_size($p7, $i2, 416);
    call {:si_unique_call 4808} {:cexpr "acc_size"} boogie_si_record_i64($i20);
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p1);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_43 := $M.0;
    call {:si_unique_call 4809} cmdloc_dummy_var_44 := $memset.i8(cmdloc_dummy_var_43, $p21, 0, 416, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_44;
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    call {:si_unique_call 4810} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i22);
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 384);
    call {:si_unique_call 4811} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i23);
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4812} INIT_LIST_HEAD($p24);
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p1);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i6);
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4813} $i28 := ttm_bo_init($p7, $p25, $i2, 0, $p3, 0, 0, $i27, $p26, $i20, $p5);
    call {:si_unique_call 4814} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call {:si_unique_call 4806} devirtbounce(0, .str.61, 1560, 12);
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call vmw_dmabuf_init_loop_$bb7();
    goto $bb7_last;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb8_dummy;

  $bb8_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const ttm_bo_acc_size: ref;

axiom ttm_bo_acc_size == $sub.ref(0, 818448);

procedure ttm_bo_acc_size($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation ttm_bo_acc_size($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4815} {:cexpr "ttm_bo_acc_size:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 4816} {:cexpr "ttm_bo_acc_size:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4817} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 4818} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ttm_bo_init: ref;

axiom ttm_bo_init == $sub.ref(0, 819480);

procedure ttm_bo_init($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref, $i5: i32, $i6: i64, $i7: i1, $p8: ref, $i9: i64, $p10: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_init($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref, $i5: i32, $i6: i64, $i7: i1, $p8: ref, $i9: i64, $p10: ref) returns ($r: i32)
{
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4819} {:cexpr "ttm_bo_init:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 4820} {:cexpr "ttm_bo_init:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 4821} {:cexpr "ttm_bo_init:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 4822} {:cexpr "ttm_bo_init:arg:arg6"} boogie_si_record_i64($i6);
    call {:si_unique_call 4823} {:cexpr "ttm_bo_init:arg:arg7"} boogie_si_record_i1($i7);
    call {:si_unique_call 4824} {:cexpr "ttm_bo_init:arg:arg9"} boogie_si_record_i64($i9);
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4825} $i11 := __VERIFIER_nondet_int();
    call {:si_unique_call 4826} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i11);
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const drm_mode_config_init: ref;

axiom drm_mode_config_init == $sub.ref(0, 820512);

procedure drm_mode_config_init($p0: ref);
  free requires assertsPassed;



implementation drm_mode_config_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    return;
}



const vmw_kms_init_screen_object_display: ref;

axiom vmw_kms_init_screen_object_display == $sub.ref(0, 821544);

procedure vmw_kms_init_screen_object_display($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed, $CurrAddr;



implementation vmw_kms_init_screen_object_display($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i1;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i32;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i1;
  var $i62: i32;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $i74: i1;
  var $i75: i32;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i82: i32;
  var $i66: i32;
  var $i84: i64;
  var $i85: i64;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i64;
  var $p92: ref;
  var $i40: i32;
  var $i11: i32;
  var vslice_dummy_var_191: i32;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;
  var vslice_dummy_var_194: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 4827} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i1);
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 2088);
    call {:si_unique_call 4828} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i2);
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 4829} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i5);
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 2616);
    call {:si_unique_call 4830} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i6);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    $i9 := $ne.ref($p8, $0.ref);
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    call {:si_unique_call 4832} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i12);
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 1892);
    call {:si_unique_call 4833} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i13);
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    call {:si_unique_call 4834} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i15);
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 512);
    call {:si_unique_call 4835} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i16);
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4836} vslice_dummy_var_192 := printk.ref(.str.121);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 38);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4837} $p19 := __kmalloc(16, 208);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p0);
    call {:si_unique_call 4838} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i20);
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 2616);
    call {:si_unique_call 4839} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i21);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i21);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p19);
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p0);
    call {:si_unique_call 4840} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i24);
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 2616);
    call {:si_unique_call 4841} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i25);
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    $i28 := $ne.ref($p27, $0.ref);
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $i29 := $xor.i1($i28, 1);
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    call {:si_unique_call 4842} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i30);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    $i32 := $xor.i1($i31, 1);
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    call {:si_unique_call 4843} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i33);
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    $i35 := $xor.i1($i34, 1);
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i32($i35);
    call {:si_unique_call 4844} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i36);
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    call {:si_unique_call 4845} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i37);
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4846} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 4847} {:cexpr "tmp___8"} boogie_si_record_i64($i38);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p0);
    call {:si_unique_call 4848} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i41);
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 2616);
    call {:si_unique_call 4849} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i42);
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i42);
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 0);
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p0);
    call {:si_unique_call 4850} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i46);
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 2616);
    call {:si_unique_call 4851} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i47);
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    call {:si_unique_call 4852} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i50);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 8);
    call {:si_unique_call 4853} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i51);
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i51);
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, $0.ref);
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4854} $i54 := drm_vblank_init($p4, 8);
    call {:si_unique_call 4855} {:cexpr "ret"} boogie_si_record_i32($i54);
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i32($i55);
    call {:si_unique_call 4856} {:cexpr "__cil_tmp38"} boogie_si_record_i32($i56);
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    $i58 := $xor.i1($i57, 1);
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    $i59 := $zext.i1.i32($i58);
    call {:si_unique_call 4857} {:cexpr "__cil_tmp39"} boogie_si_record_i32($i59);
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    $i61 := $xor.i1($i60, 1);
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    $i62 := $zext.i1.i32($i61);
    call {:si_unique_call 4858} {:cexpr "__cil_tmp40"} boogie_si_record_i32($i62);
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    call {:si_unique_call 4859} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i63);
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4860} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 4861} {:cexpr "tmp___9"} boogie_si_record_i64($i64);
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4867} $i67 := drm_mode_create_dirty_info_property($p4);
    call {:si_unique_call 4868} {:cexpr "ret"} boogie_si_record_i32($i67);
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i32($i68);
    call {:si_unique_call 4869} {:cexpr "__cil_tmp42"} boogie_si_record_i32($i69);
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    $i71 := $xor.i1($i70, 1);
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    $i72 := $zext.i1.i32($i71);
    call {:si_unique_call 4870} {:cexpr "__cil_tmp43"} boogie_si_record_i32($i72);
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    $i74 := $xor.i1($i73, 1);
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    $i75 := $zext.i1.i32($i74);
    call {:si_unique_call 4871} {:cexpr "__cil_tmp44"} boogie_si_record_i32($i75);
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i75);
    call {:si_unique_call 4872} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i76);
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4873} $i77 := ldv__builtin_expect($i76, 0);
    call {:si_unique_call 4874} {:cexpr "tmp___10"} boogie_si_record_i64($i77);
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i79 := 0;
    goto $bb20;

  $bb20:
    call $i79, $i80, $i82, vslice_dummy_var_193 := vmw_kms_init_screen_object_display_loop_$bb20($p0, $i79, $i80, $i82, vslice_dummy_var_193);
    goto $bb20_last;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i79, 8);
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i80 == 1);
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4878} vslice_dummy_var_194 := printk.ref(.str.122);
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb22:
    assume $i80 == 1;
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4876} vslice_dummy_var_193 := vmw_sou_init($p0, $i79);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    $i82 := $add.i32($i79, 1);
    call {:si_unique_call 4877} {:cexpr "i"} boogie_si_record_i32($i82);
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    $i79 := $i82;
    goto corral_source_split_10535_dummy;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i78 == 1;
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4875} drm_vblank_cleanup($p4);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $i66 := $i67;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p0);
    call {:si_unique_call 4862} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i84);
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    $i85 := $add.i64($i84, 2616);
    call {:si_unique_call 4863} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i85);
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $p86 := $i2p.i64.ref($i85);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4864} kfree($p88);
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p0);
    call {:si_unique_call 4865} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i89);
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    $i90 := $add.i64($i89, 2616);
    call {:si_unique_call 4866} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i90);
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    $p92 := $i2p.i64.ref($i90);
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p92, $0.ref);
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    $i40 := $i66;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    $i11 := $i40;
    goto $bb3;

  $bb12:
    assume $i65 == 1;
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $i66 := $i54;
    goto $bb14;

  $bb8:
    assume $i39 == 1;
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 12);
    goto $bb10;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4831} vslice_dummy_var_191 := printk.ref(.str.120);
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  corral_source_split_10535_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10526;
}



const vmw_kms_init_legacy_display_system: ref;

axiom vmw_kms_init_legacy_display_system == $sub.ref(0, 822576);

procedure vmw_kms_init_legacy_display_system($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed, $CurrAddr;



implementation vmw_kms_init_legacy_display_system($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i1;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i57: i32;
  var $i56: i32;
  var $i58: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i71: i32;
  var $i59: i32;
  var $i73: i64;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i64;
  var $p81: ref;
  var $i11: i32;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 4879} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i1);
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 2088);
    call {:si_unique_call 4880} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i2);
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 4881} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i5);
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 2608);
    call {:si_unique_call 4882} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i6);
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    $i9 := $ne.ref($p8, $0.ref);
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4884} $p12 := __kmalloc(32, 208);
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    call {:si_unique_call 4885} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i13);
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 2608);
    call {:si_unique_call 4886} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i14);
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i14);
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p12);
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p0);
    call {:si_unique_call 4887} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i17);
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 2608);
    call {:si_unique_call 4888} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i18);
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    $i21 := $ne.ref($p20, $0.ref);
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p0);
    call {:si_unique_call 4889} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i22);
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 2608);
    call {:si_unique_call 4890} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i23);
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4891} INIT_LIST_HEAD($p26);
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p0);
    call {:si_unique_call 4892} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i27);
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 2608);
    call {:si_unique_call 4893} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i28);
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    call {:si_unique_call 4894} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i31);
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 16);
    call {:si_unique_call 4895} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i32);
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 0);
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p0);
    call {:si_unique_call 4896} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i34);
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 2608);
    call {:si_unique_call 4897} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i35);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    call {:si_unique_call 4898} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i38);
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 20);
    call {:si_unique_call 4899} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i39);
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, 0);
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p0);
    call {:si_unique_call 4900} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i41);
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 2608);
    call {:si_unique_call 4901} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i42);
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i42);
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    call {:si_unique_call 4902} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i45);
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 24);
    call {:si_unique_call 4903} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i46);
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i46);
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $0.ref);
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p0);
    call {:si_unique_call 4904} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i49);
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i49, 2156);
    call {:si_unique_call 4905} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i50);
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $p51 := $i2p.i64.ref($i50);
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    call {:si_unique_call 4906} {:cexpr "__cil_tmp37"} boogie_si_record_i32($i52);
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 65536);
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i54 == 1);
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4909} $i57 := drm_vblank_init($p4, 1);
    call {:si_unique_call 4910} {:cexpr "ret"} boogie_si_record_i32($i57);
    assume {:verifier.code 0} true;
    $i56 := $i57;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i56, 0);
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4916} $i60 := drm_mode_create_dirty_info_property($p4);
    call {:si_unique_call 4917} {:cexpr "ret"} boogie_si_record_i32($i60);
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p0);
    call {:si_unique_call 4919} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i62);
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 2156);
    call {:si_unique_call 4920} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i63);
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    $p64 := $i2p.i64.ref($i63);
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    call {:si_unique_call 4921} {:cexpr "__cil_tmp40"} boogie_si_record_i32($i65);
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 65536);
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i67 == 1);
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4922} vslice_dummy_var_196 := vmw_ldu_init($p0, 0);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i67 == 1;
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    $i68 := 0;
    goto $bb21;

  $bb21:
    call $i68, $i69, $i71, vslice_dummy_var_197 := vmw_kms_init_legacy_display_system_loop_$bb21($p0, $i68, $i69, $i71, vslice_dummy_var_197);
    goto $bb21_last;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i68, 8);
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i69 == 1);
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb23:
    assume $i69 == 1;
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4923} vslice_dummy_var_197 := vmw_ldu_init($p0, $i68);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i68, 1);
    call {:si_unique_call 4924} {:cexpr "i"} boogie_si_record_i32($i71);
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    $i68 := $i71;
    goto corral_source_split_10657_dummy;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i61 == 1;
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4918} drm_vblank_cleanup($p4);
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    $i59 := $i60;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p0);
    call {:si_unique_call 4911} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i73);
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i73, 2608);
    call {:si_unique_call 4912} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i74);
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $p75 := $i2p.i64.ref($i74);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4913} kfree($p77);
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p0);
    call {:si_unique_call 4914} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i78);
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $i79 := $add.i64($i78, 2608);
    call {:si_unique_call 4915} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i79);
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $p81 := $i2p.i64.ref($i79);
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p81, $0.ref);
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    $i11 := $i59;
    goto $bb3;

  $bb11:
    assume $i58 == 1;
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    $i59 := $i56;
    goto $bb13;

  $bb8:
    assume $i54 == 1;
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4907} $i55 := drm_vblank_init($p4, 8);
    call {:si_unique_call 4908} {:cexpr "ret"} boogie_si_record_i32($i55);
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    $i56 := $i55;
    goto $bb10;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4883} vslice_dummy_var_195 := printk.ref(.str.91);
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  corral_source_split_10657_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10648;
}



const drm_vblank_init: ref;

axiom drm_vblank_init == $sub.ref(0, 823608);

procedure drm_vblank_init($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_vblank_init($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4925} {:cexpr "drm_vblank_init:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4926} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 4927} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const drm_mode_create_dirty_info_property: ref;

axiom drm_mode_create_dirty_info_property == $sub.ref(0, 824640);

procedure drm_mode_create_dirty_info_property($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_mode_create_dirty_info_property($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4928} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 4929} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vmw_ldu_init: ref;

axiom vmw_ldu_init == $sub.ref(0, 825672);

procedure vmw_ldu_init($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed, $CurrAddr;



implementation vmw_ldu_init($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $i55: i32;
  var $p56: ref;
  var $i59: i64;
  var $i60: i64;
  var $i61: i32;
  var $p62: ref;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $i68: i64;
  var $i69: i64;
  var $p70: ref;
  var $p71: ref;
  var $i9: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4930} {:cexpr "vmw_ldu_init:arg:unit"} boogie_si_record_i32($i1);
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 4931} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i2);
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 2088);
    call {:si_unique_call 4932} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i3);
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4933} $p6 := kzalloc(2088, 208);
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    $i8 := $ne.ref($p7, $0.ref);
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p7);
    call {:si_unique_call 4934} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i10);
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 2032);
    call {:si_unique_call 4935} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i11);
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i1);
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p7);
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p7);
    call {:si_unique_call 4936} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i14);
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 544);
    call {:si_unique_call 4937} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i15);
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p7);
    call {:si_unique_call 4938} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i17);
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 616);
    call {:si_unique_call 4939} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i18);
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p7);
    call {:si_unique_call 4940} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i20);
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 2072);
    call {:si_unique_call 4941} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i21);
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4942} INIT_LIST_HEAD($p22);
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p7);
    call {:si_unique_call 4943} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i23);
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 2044);
    call {:si_unique_call 4944} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i24);
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i1, 0);
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 4945} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i26);
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    $p28 := $i2p.i64.ref($i24);
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i8($i27);
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, $i29);
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p7);
    call {:si_unique_call 4946} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i30);
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 2036);
    call {:si_unique_call 4947} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i31);
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    call {:si_unique_call 4948} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i32);
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 2132);
    call {:si_unique_call 4949} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i33);
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i31);
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p7);
    call {:si_unique_call 4950} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i37);
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 2040);
    call {:si_unique_call 4951} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i38);
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p0);
    call {:si_unique_call 4952} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i39);
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 2136);
    call {:si_unique_call 4953} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i40);
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i40);
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i38);
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i42);
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p7);
    call {:si_unique_call 4954} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i44);
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 2048);
    call {:si_unique_call 4955} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i45);
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    $p47 := $i2p.i64.ref($i45);
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, $0.ref);
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p7);
    call {:si_unique_call 4956} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i48);
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, 2064);
    call {:si_unique_call 4957} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i49);
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    $p50 := $i2p.i64.ref($i49);
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, 1);
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4958} vslice_dummy_var_198 := drm_connector_init($p5, $p19, vmw_legacy_connector_funcs, 15);
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p19);
    call {:si_unique_call 4959} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i52);
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 840);
    call {:si_unique_call 4960} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i53);
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i8.i1(1);
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4961} $i55 := vmw_du_connector_detect($p19, $i54);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    $p56 := $i2p.i64.ref($i53);
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i55);
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4962} vslice_dummy_var_199 := drm_encoder_init($p5, $p16, vmw_legacy_encoder_funcs, 5);
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4963} vslice_dummy_var_200 := drm_mode_connector_attach_encoder($p19, $p16);
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p16);
    call {:si_unique_call 4964} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i59);
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, 36);
    call {:si_unique_call 4965} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i60);
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    $i61 := $shl.i32(1, $i1);
    call {:si_unique_call 4966} {:cexpr "__cil_tmp51"} boogie_si_record_i32($i61);
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    $p62 := $i2p.i64.ref($i60);
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i61);
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p16);
    call {:si_unique_call 4967} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i63);
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 40);
    call {:si_unique_call 4968} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i64);
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    $p65 := $i2p.i64.ref($i64);
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, 0);
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4969} vslice_dummy_var_201 := drm_crtc_init($p5, $p13, vmw_legacy_crtc_funcs);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4970} vslice_dummy_var_202 := drm_mode_crtc_set_gamma_size($p13, 256);
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p5);
    call {:si_unique_call 4971} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i68);
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    $i69 := $add.i64($i68, 1800);
    call {:si_unique_call 4972} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i69);
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    $p70 := $i2p.i64.ref($i69);
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4973} vslice_dummy_var_203 := drm_connector_attach_property($p19, $p71, 1);
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  SeqInstr_616:
    assume !assertsPassed;
    return;
}



const drm_connector_init: ref;

axiom drm_connector_init == $sub.ref(0, 826704);

procedure drm_connector_init($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_connector_init($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4974} {:cexpr "drm_connector_init:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4975} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 4976} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vmw_du_connector_detect: ref;

axiom vmw_du_connector_detect == $sub.ref(0, 827736);

procedure vmw_du_connector_detect($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation vmw_du_connector_detect($p0: ref, $i1: i1) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $i38: i8;
  var $i39: i1;
  var $i40: i32;
  var $i41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4977} {:cexpr "vmw_du_connector_detect:arg:force"} boogie_si_record_i1($i1);
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4978} $p4 := vmw_priv($p3);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 4979} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i5);
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 616);
    call {:si_unique_call 4980} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i6);
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i32($p7);
    call {:si_unique_call 4981} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i8);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i8);
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, $i10);
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p9, $mul.ref($i11, 1));
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_10767;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p4);
    call {:si_unique_call 4982} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i14);
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 2184);
    call {:si_unique_call 4983} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i15);
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4984} mutex_lock($p16);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4985} $i17 := vmw_read($p4, 31);
    call {:si_unique_call 4986} {:cexpr "num_displays"} boogie_si_record_i32($i17);
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p4);
    call {:si_unique_call 4987} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i18);
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 2184);
    call {:si_unique_call 4988} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i19);
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4989} mutex_unlock($p20);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 4990} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i21);
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 616);
    call {:si_unique_call 4991} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i22);
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i32($p23);
    call {:si_unique_call 4992} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i24);
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p0);
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i24);
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    $i27 := $sub.i64(0, $i26);
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p25, $mul.ref($i27, 1));
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    call {:si_unique_call 4993} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i30);
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 2032);
    call {:si_unique_call 4994} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i31);
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    call {:si_unique_call 4995} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i33);
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    $i34 := $ult.i32($i33, $i17);
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i41 := 2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb1:
    assume $i34 == 1;
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p13);
    call {:si_unique_call 4996} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i35);
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 2044);
    call {:si_unique_call 4997} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i36);
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i36);
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i38);
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := 2;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb6;

  $bb3:
    assume $i39 == 1;
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    $i40 := 1;
    goto $bb5;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  SeqInstr_619:
    assume !assertsPassed;
    return;
}



const drm_encoder_init: ref;

axiom drm_encoder_init == $sub.ref(0, 828768);

procedure drm_encoder_init($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_encoder_init($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4998} {:cexpr "drm_encoder_init:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4999} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 5000} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const drm_mode_connector_attach_encoder: ref;

axiom drm_mode_connector_attach_encoder == $sub.ref(0, 829800);

procedure drm_mode_connector_attach_encoder($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_mode_connector_attach_encoder($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5001} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 5002} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const drm_crtc_init: ref;

axiom drm_crtc_init == $sub.ref(0, 830832);

procedure drm_crtc_init($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_crtc_init($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5003} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 5004} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const drm_mode_crtc_set_gamma_size: ref;

axiom drm_mode_crtc_set_gamma_size == $sub.ref(0, 831864);

procedure drm_mode_crtc_set_gamma_size($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_mode_crtc_set_gamma_size($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5005} {:cexpr "drm_mode_crtc_set_gamma_size:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5006} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 5007} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const drm_connector_attach_property: ref;

axiom drm_connector_attach_property == $sub.ref(0, 832896);

procedure drm_connector_attach_property($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation drm_connector_attach_property($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5008} {:cexpr "drm_connector_attach_property:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5009} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 5010} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vmw_sou_init: ref;

axiom vmw_sou_init == $sub.ref(0, 833928);

procedure vmw_sou_init($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed, $CurrAddr;



implementation vmw_sou_init($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $i55: i32;
  var $p56: ref;
  var $i59: i64;
  var $i60: i64;
  var $i61: i32;
  var $p62: ref;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $i68: i64;
  var $i69: i64;
  var $p70: ref;
  var $p71: ref;
  var $i9: i32;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;
  var vslice_dummy_var_206: i32;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i32;
  var vslice_dummy_var_209: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5011} {:cexpr "vmw_sou_init:arg:unit"} boogie_si_record_i32($i1);
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 5012} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i2);
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 2088);
    call {:si_unique_call 5013} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i3);
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5014} $p6 := kzalloc(2096, 208);
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    $i8 := $ne.ref($p7, $0.ref);
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p7);
    call {:si_unique_call 5015} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i10);
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 2032);
    call {:si_unique_call 5016} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i11);
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i1);
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p7);
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p7);
    call {:si_unique_call 5017} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i14);
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 544);
    call {:si_unique_call 5018} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i15);
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p7);
    call {:si_unique_call 5019} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i17);
    goto corral_source_split_10841;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 616);
    call {:si_unique_call 5020} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i18);
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p7);
    call {:si_unique_call 5021} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i20);
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 2089);
    call {:si_unique_call 5022} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i21);
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    goto corral_source_split_10847;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p7);
    call {:si_unique_call 5023} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i23);
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 2044);
    call {:si_unique_call 5024} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i24);
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i1, 0);
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 5025} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i26);
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    $p28 := $i2p.i64.ref($i24);
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i8($i27);
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, $i29);
    goto corral_source_split_10855;

  corral_source_split_10855:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p7);
    call {:si_unique_call 5026} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i30);
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 2036);
    call {:si_unique_call 5027} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i31);
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    call {:si_unique_call 5028} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i32);
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 2132);
    call {:si_unique_call 5029} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i33);
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i31);
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p7);
    call {:si_unique_call 5030} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i37);
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 2040);
    call {:si_unique_call 5031} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i38);
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p0);
    call {:si_unique_call 5032} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i39);
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 2136);
    call {:si_unique_call 5033} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i40);
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i40);
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i38);
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i42);
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p7);
    call {:si_unique_call 5034} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i44);
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 2048);
    call {:si_unique_call 5035} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i45);
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    $p47 := $i2p.i64.ref($i45);
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, $0.ref);
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p7);
    call {:si_unique_call 5036} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i48);
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, 2064);
    call {:si_unique_call 5037} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i49);
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    $p50 := $i2p.i64.ref($i49);
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, 1);
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5038} vslice_dummy_var_204 := drm_connector_init($p5, $p19, vmw_legacy_connector_funcs___0, 15);
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p19);
    call {:si_unique_call 5039} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i52);
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 840);
    call {:si_unique_call 5040} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i53);
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i8.i1(1);
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5041} $i55 := vmw_du_connector_detect($p19, $i54);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    $p56 := $i2p.i64.ref($i53);
    goto corral_source_split_10886;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i55);
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5042} vslice_dummy_var_205 := drm_encoder_init($p5, $p16, vmw_screen_object_encoder_funcs, 5);
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5043} vslice_dummy_var_206 := drm_mode_connector_attach_encoder($p19, $p16);
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p16);
    call {:si_unique_call 5044} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i59);
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, 36);
    call {:si_unique_call 5045} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i60);
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    $i61 := $shl.i32(1, $i1);
    call {:si_unique_call 5046} {:cexpr "__cil_tmp50"} boogie_si_record_i32($i61);
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    $p62 := $i2p.i64.ref($i60);
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i61);
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p16);
    call {:si_unique_call 5047} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i63);
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 40);
    call {:si_unique_call 5048} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i64);
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    $p65 := $i2p.i64.ref($i64);
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, 0);
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5049} vslice_dummy_var_207 := drm_crtc_init($p5, $p13, vmw_screen_object_crtc_funcs);
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5050} vslice_dummy_var_208 := drm_mode_crtc_set_gamma_size($p13, 256);
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p5);
    call {:si_unique_call 5051} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i68);
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    $i69 := $add.i64($i68, 1800);
    call {:si_unique_call 5052} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i69);
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    $p70 := $i2p.i64.ref($i69);
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5053} vslice_dummy_var_209 := drm_connector_attach_property($p19, $p71, 1);
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  SeqInstr_625:
    assume !assertsPassed;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 834960);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5054} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    return;
}



const vmw_fence_work_func: ref;

axiom vmw_fence_work_func == $sub.ref(0, 835992);

procedure vmw_fence_work_func($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed, $M.6, $CurrAddr, $M.2, $M.11, $M.12, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation vmw_fence_work_func($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i8;
  var $i24: i1;
  var $i25: i8;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i1;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i8;
  var $i34: i1;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $p75: ref;
  var $i76: i1;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $p85: ref;
  var $i86: i64;
  var $i87: i64;
  var $p88: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 5055} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_10909;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5056} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i2);
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 56);
    call {:si_unique_call 5057} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i3);
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i32($p4);
    call {:si_unique_call 5058} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i5);
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i5);
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64(0, $i7);
    goto corral_source_split_10916;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p6, $mul.ref($i8, 1));
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i11, $i12, $p13, $i14, $i15, $p16, $i17, $i18, $p19, $i20, $i21, $p22, $i23, $i24, $i25, $i26, $i27, $p28, $i29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $p37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $i45, $i46, $p47, $p48, $p49, $i50, $p51, $i52, $i53, $p54, $p55, $p56, $p57, $p58, $i59, $p60, $i61, $i62, $p63, $i65, $p66, $p67, $p68, $i69, $i70, $p71, $i72, $i73, $p74, $p75, $i76, $i77, $i78, $p79, $p80, $p81, $p82, $p83, $i84, $p85, $i86, $i87, $p88 := vmw_fence_work_func_loop_$bb1($p1, $p10, $i11, $i12, $p13, $i14, $i15, $p16, $i17, $i18, $p19, $i20, $i21, $p22, $i23, $i24, $i25, $i26, $i27, $p28, $i29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $p37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $i45, $i46, $p47, $p48, $p49, $i50, $p51, $i52, $i53, $p54, $p55, $p56, $p57, $p58, $i59, $p60, $i61, $i62, $p63, $i65, $p66, $p67, $p68, $i69, $i70, $p71, $i72, $i73, $p74, $p75, $i76, $i77, $i78, $p79, $p80, $p81, $p82, $p83, $i84, $p85, $i86, $i87, $p88);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5059} INIT_LIST_HEAD($p1);
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    call {:si_unique_call 5060} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i11);
    goto corral_source_split_10921;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 128);
    call {:si_unique_call 5061} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i12);
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5062} mutex_lock($p13);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p10);
    call {:si_unique_call 5063} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i14);
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 16);
    call {:si_unique_call 5064} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i15);
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5065} spin_lock_irq($p16);
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p10);
    call {:si_unique_call 5066} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i17);
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 104);
    call {:si_unique_call 5067} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i18);
    goto corral_source_split_10930;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5068} list_splice_init($p19, $p1);
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p10);
    call {:si_unique_call 5069} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i20);
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 201);
    call {:si_unique_call 5070} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i21);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i8($i24);
    call {:si_unique_call 5071} {:cexpr "seqno_valid"} boogie_si_record_i8($i25);
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p10);
    call {:si_unique_call 5072} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i26);
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, 16);
    call {:si_unique_call 5073} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i27);
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    $p28 := $i2p.i64.ref($i27);
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5074} spin_unlock_irq($p28);
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i25);
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i29 == 1);
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p10);
    call {:si_unique_call 5075} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i30);
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 200);
    call {:si_unique_call 5076} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i31);
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1($i33);
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p10);
    call {:si_unique_call 5082} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i42);
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, 128);
    call {:si_unique_call 5083} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i43);
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i43);
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5084} mutex_unlock($p44);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5085} $i45 := list_empty($p1);
    call {:si_unique_call 5086} {:cexpr "tmp___7"} boogie_si_record_i32($i45);
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p1);
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i32($p49);
    call {:si_unique_call 5087} {:cexpr "__cil_tmp48"} boogie_si_record_i32($i50);
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p48);
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    $i52 := $zext.i32.i64($i50);
    goto corral_source_split_10977;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    $i53 := $sub.i64(0, $i52);
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p51, $mul.ref($i53, 1));
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i32($p58);
    call {:si_unique_call 5088} {:cexpr "__cil_tmp54"} boogie_si_record_i32($i59);
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p57);
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    $i61 := $zext.i32.i64($i59);
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    $i62 := $sub.i64(0, $i61);
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p60, $mul.ref($i62, 1));
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p1);
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    $p66, $p67 := $p54, $p63;
    goto $bb13;

  $bb13:
    call $p66, $p67, $p68, $i69, $i70, $p71, $i72, $i73, $p74, $p75, $i76, $i77, $i78, $p79, $p80, $p81, $p82, $p83, $i84, $p85, $i86, $i87, $p88 := vmw_fence_work_func_loop_$bb13($i65, $p66, $p67, $p68, $i69, $i70, $p71, $i72, $i73, $p74, $p75, $i76, $i77, $i78, $p79, $p80, $p81, $p82, $p83, $i84, $p85, $i86, $i87, $p88);
    goto $bb13_last;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p66);
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    call {:si_unique_call 5089} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i69);
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, $i65);
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i70 == 1);
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb18_dummy;

  $bb15:
    assume $i70 == 1;
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p66);
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5090} list_del_init($p71);
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p66);
    call {:si_unique_call 5091} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i72);
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i72, 32);
    call {:si_unique_call 5092} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i73);
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    $p74 := $i2p.i64.ref($i73);
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    $i76 := $ne.ref($p75, $0.ref);
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p67);
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i32($p83);
    call {:si_unique_call 5096} {:cexpr "__cil_tmp69"} boogie_si_record_i32($i84);
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p82);
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    $i86 := $zext.i32.i64($i84);
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    $i87 := $sub.i64(0, $i86);
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p85, $mul.ref($i87, 1));
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    $p66, $p67 := $p67, $p88;
    goto corral_source_split_11024_dummy;

  $bb19:
    assume $i76 == 1;
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p66);
    call {:si_unique_call 5093} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i77);
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    $i78 := $add.i64($i77, 32);
    call {:si_unique_call 5094} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i78);
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    $p79 := $i2p.i64.ref($i78);
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    call {:si_unique_call 5095} devirtbounce.11($p80, $p66);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i46 == 1;
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i34 == 1;
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p10);
    call {:si_unique_call 5077} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i35);
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 200);
    call {:si_unique_call 5078} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i36);
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i36);
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, 0);
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p10);
    call {:si_unique_call 5079} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i38);
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 8);
    call {:si_unique_call 5080} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i39);
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5081} vmw_goal_waiter_remove($p41);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  corral_source_split_11024_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10992;

  $bb18_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ttm_round_pot: ref;

axiom ttm_round_pot == $sub.ref(0, 837024);

procedure ttm_round_pot($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ttm_round_pot($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5097} {:cexpr "ttm_round_pot:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5098} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 5099} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vmw_goal_waiter_remove: ref;

axiom vmw_goal_waiter_remove == $sub.ref(0, 838056);

procedure vmw_goal_waiter_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed;



implementation vmw_goal_waiter_remove($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11029;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 5100} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i1);
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 2184);
    call {:si_unique_call 5101} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i2);
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5102} mutex_lock($p3);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    call {:si_unique_call 5103} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i4);
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 2972);
    call {:si_unique_call 5104} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i5);
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 5105} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i6);
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 2972);
    call {:si_unique_call 5106} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i7);
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 5107} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i9);
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i9, 1);
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i5);
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    call {:si_unique_call 5108} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i12);
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 2972);
    call {:si_unique_call 5109} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i13);
    goto corral_source_split_11044;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    call {:si_unique_call 5110} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i15);
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p0);
    call {:si_unique_call 5128} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i37);
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 2184);
    call {:si_unique_call 5129} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i38);
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i38);
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5130} mutex_unlock($p39);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p0);
    call {:si_unique_call 5111} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i17);
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 2984);
    call {:si_unique_call 5112} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i18);
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5113} $p20 := spinlock_check($p19);
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5114} $i21 := _raw_spin_lock_irqsave($p20);
    call {:si_unique_call 5115} {:cexpr "irq_flags"} boogie_si_record_i64($i21);
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p0);
    call {:si_unique_call 5116} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i22);
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 3016);
    call {:si_unique_call 5117} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i23);
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p0);
    call {:si_unique_call 5118} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i24);
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 3016);
    call {:si_unique_call 5119} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i25);
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    call {:si_unique_call 5120} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i27);
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, $sub.i32(0, 5));
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i23);
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p0);
    call {:si_unique_call 5121} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i30);
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 3016);
    call {:si_unique_call 5122} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i31);
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_11068;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    call {:si_unique_call 5123} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i33);
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5124} vmw_write($p0, 33, $i33);
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p0);
    call {:si_unique_call 5125} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i34);
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 2984);
    call {:si_unique_call 5126} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i35);
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5127} spin_unlock_irqrestore($p36, $i21);
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_640:
    assume !assertsPassed;
    return;
}



const mtrr_add: ref;

axiom mtrr_add == $sub.ref(0, 839088);

procedure mtrr_add($i0: i64, $i1: i64, $i2: i32, $i3: i1) returns ($r: i32);
  free requires assertsPassed;



implementation mtrr_add($i0: i64, $i1: i64, $i2: i32, $i3: i1) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5131} {:cexpr "mtrr_add:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 5132} {:cexpr "mtrr_add:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 5133} {:cexpr "mtrr_add:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 5134} {:cexpr "mtrr_add:arg:arg3"} boogie_si_record_i1($i3);
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5135} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 5136} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_11082;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vmw_ttm_mem_global_init: ref;

axiom vmw_ttm_mem_global_init == $sub.ref(0, 840120);

procedure vmw_ttm_mem_global_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vmw_ttm_mem_global_init($p0: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var vslice_dummy_var_210: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5137} vslice_dummy_var_210 := printk.ref(.str.278);
    goto corral_source_split_11085;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 5138} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 16);
    call {:si_unique_call 5139} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i3);
    goto corral_source_split_11087;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5140} $i7 := ttm_mem_global_init($p6);
    call {:si_unique_call 5141} {:cexpr "tmp___7"} boogie_si_record_i32($i7);
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const vmw_ttm_mem_global_release: ref;

axiom vmw_ttm_mem_global_release == $sub.ref(0, 841152);

procedure vmw_ttm_mem_global_release($p0: ref);
  free requires assertsPassed;



implementation vmw_ttm_mem_global_release($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 5142} {:cexpr "__cil_tmp2"} boogie_si_record_i64($i1);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 16);
    call {:si_unique_call 5143} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5144} ttm_mem_global_release($p5);
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    return;
}



const drm_global_item_ref: ref;

axiom drm_global_item_ref == $sub.ref(0, 842184);

procedure drm_global_item_ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_global_item_ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5145} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5146} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ttm_bo_global_init: ref;

axiom ttm_bo_global_init == $sub.ref(0, 843216);

procedure ttm_bo_global_init($p0: ref) returns ($r: i32);



const ttm_bo_global_release: ref;

axiom ttm_bo_global_release == $sub.ref(0, 844248);

procedure ttm_bo_global_release($p0: ref);



const ttm_mem_global_release: ref;

axiom ttm_mem_global_release == $sub.ref(0, 845280);

procedure ttm_mem_global_release($p0: ref);
  free requires assertsPassed;



implementation ttm_mem_global_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    return;
}



const ttm_mem_global_init: ref;

axiom ttm_mem_global_init == $sub.ref(0, 846312);

procedure ttm_mem_global_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_mem_global_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5147} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5148} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vmw_getparam_ioctl: ref;

axiom vmw_getparam_ioctl == $sub.ref(0, 847344);

procedure vmw_getparam_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_dmabuf_alloc_ioctl: ref;

axiom vmw_dmabuf_alloc_ioctl == $sub.ref(0, 848376);

procedure vmw_dmabuf_alloc_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_dmabuf_unref_ioctl: ref;

axiom vmw_dmabuf_unref_ioctl == $sub.ref(0, 849408);

procedure vmw_dmabuf_unref_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_kms_cursor_bypass_ioctl: ref;

axiom vmw_kms_cursor_bypass_ioctl == $sub.ref(0, 850440);

procedure vmw_kms_cursor_bypass_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_overlay_ioctl: ref;

axiom vmw_overlay_ioctl == $sub.ref(0, 851472);

procedure vmw_overlay_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_stream_claim_ioctl: ref;

axiom vmw_stream_claim_ioctl == $sub.ref(0, 852504);

procedure vmw_stream_claim_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_stream_unref_ioctl: ref;

axiom vmw_stream_unref_ioctl == $sub.ref(0, 853536);

procedure vmw_stream_unref_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_context_define_ioctl: ref;

axiom vmw_context_define_ioctl == $sub.ref(0, 854568);

procedure vmw_context_define_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_context_destroy_ioctl: ref;

axiom vmw_context_destroy_ioctl == $sub.ref(0, 855600);

procedure vmw_context_destroy_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_surface_define_ioctl: ref;

axiom vmw_surface_define_ioctl == $sub.ref(0, 856632);

procedure vmw_surface_define_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_surface_destroy_ioctl: ref;

axiom vmw_surface_destroy_ioctl == $sub.ref(0, 857664);

procedure vmw_surface_destroy_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_surface_reference_ioctl: ref;

axiom vmw_surface_reference_ioctl == $sub.ref(0, 858696);

procedure vmw_surface_reference_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_execbuf_ioctl: ref;

axiom vmw_execbuf_ioctl == $sub.ref(0, 859728);

procedure vmw_execbuf_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_get_cap_3d_ioctl: ref;

axiom vmw_get_cap_3d_ioctl == $sub.ref(0, 860760);

procedure vmw_get_cap_3d_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_fence_obj_wait_ioctl: ref;

axiom vmw_fence_obj_wait_ioctl == $sub.ref(0, 861792);

procedure vmw_fence_obj_wait_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_fence_obj_signaled_ioctl: ref;

axiom vmw_fence_obj_signaled_ioctl == $sub.ref(0, 862824);

procedure vmw_fence_obj_signaled_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_fence_obj_unref_ioctl: ref;

axiom vmw_fence_obj_unref_ioctl == $sub.ref(0, 863856);

procedure vmw_fence_obj_unref_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_fence_event_ioctl: ref;

axiom vmw_fence_event_ioctl == $sub.ref(0, 864888);

procedure vmw_fence_event_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_present_ioctl: ref;

axiom vmw_present_ioctl == $sub.ref(0, 865920);

procedure vmw_present_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_present_readback_ioctl: ref;

axiom vmw_present_readback_ioctl == $sub.ref(0, 866952);

procedure vmw_present_readback_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_kms_update_layout_ioctl: ref;

axiom vmw_kms_update_layout_ioctl == $sub.ref(0, 867984);

procedure vmw_kms_update_layout_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_du_update_layout: ref;

axiom vmw_du_update_layout == $sub.ref(0, 869016);

procedure vmw_du_update_layout($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 870048);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);



const kmalloc_array: ref;

axiom kmalloc_array == $sub.ref(0, 871080);

procedure kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);



const drm_mode_object_find: ref;

axiom drm_mode_object_find == $sub.ref(0, 872112);

procedure drm_mode_object_find($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);



const vmw_kms_readback: ref;

axiom vmw_kms_readback == $sub.ref(0, 873144);

procedure vmw_kms_readback($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $i5: i32) returns ($r: i32);



const vmw_kms_present: ref;

axiom vmw_kms_present == $sub.ref(0, 874176);

procedure vmw_kms_present($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i32, $p7: ref, $i8: i32) returns ($r: i32);



const ttm_ref_object_add: ref;

axiom ttm_ref_object_add == $sub.ref(0, 875208);

procedure ttm_ref_object_add($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);



const vmw_event_fence_action_create: ref;

axiom vmw_event_fence_action_create == $sub.ref(0, 876240);

procedure vmw_event_fence_action_create($p0: ref, $p1: ref, $i2: i32, $i3: i64, $i4: i1) returns ($r: i32);



const vmw_event_fence_action_queue: ref;

axiom vmw_event_fence_action_queue == $sub.ref(0, 877272);

procedure vmw_event_fence_action_queue($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $i5: i1) returns ($r: i32);



const vmw_event_fence_action_seq_passed: ref;

axiom vmw_event_fence_action_seq_passed == $sub.ref(0, 878304);

procedure vmw_event_fence_action_seq_passed($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmw_event_fence_action_seq_passed($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i1;
  var $i52: i32;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i32;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $i70: i64;
  var $i71: i32;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $i75: i64;
  var $i76: i64;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $p88: ref;
  var $i89: i64;
  var $i90: i64;
  var $p91: ref;
  var $i92: i64;
  var $i93: i64;
  var $p94: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 5149} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i32($p2);
    call {:si_unique_call 5150} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i3);
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i3);
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64(0, $i5);
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p4, $mul.ref($i6, 1));
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    call {:si_unique_call 5151} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i9);
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 72);
    call {:si_unique_call 5152} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i10);
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p8);
    call {:si_unique_call 5153} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i13);
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 56);
    call {:si_unique_call 5154} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i14);
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5155} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i17);
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p16);
    call {:si_unique_call 5156} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i18);
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, $i17);
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    call {:si_unique_call 5157} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i20);
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_11129;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    $i22 := $xor.i1($i21, 1);
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    call {:si_unique_call 5158} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i23);
    goto corral_source_split_11131;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    $i25 := $xor.i1($i24, 1);
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 5159} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i26);
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    call {:si_unique_call 5160} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i27);
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5161} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 5162} {:cexpr "tmp___7"} boogie_si_record_i64($i28);
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p16);
    call {:si_unique_call 5163} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i30);
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 24);
    call {:si_unique_call 5164} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i31);
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p12);
    call {:si_unique_call 5165} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i34);
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 872);
    call {:si_unique_call 5166} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i35);
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_11148;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5167} $p37 := spinlock_check($p36);
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5168} $i38 := _raw_spin_lock_irqsave($p37);
    call {:si_unique_call 5169} {:cexpr "irq_flags"} boogie_si_record_i64($i38);
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5170} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i39);
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p8);
    call {:si_unique_call 5171} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i40);
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 80);
    call {:si_unique_call 5172} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i41);
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    call {:si_unique_call 5173} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i44);
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, $i39);
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i32($i45);
    call {:si_unique_call 5174} {:cexpr "__cil_tmp41"} boogie_si_record_i32($i46);
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    $i48 := $xor.i1($i47, 1);
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i32($i48);
    call {:si_unique_call 5175} {:cexpr "__cil_tmp42"} boogie_si_record_i32($i49);
    goto corral_source_split_11162;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    $i51 := $xor.i1($i50, 1);
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    call {:si_unique_call 5176} {:cexpr "__cil_tmp43"} boogie_si_record_i32($i52);
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i52);
    call {:si_unique_call 5177} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i53);
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5178} $i54 := ldv__builtin_expect($i53, 1);
    call {:si_unique_call 5179} {:cexpr "tmp___9"} boogie_si_record_i64($i54);
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p8);
    call {:si_unique_call 5188} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i72);
    goto corral_source_split_11191;

  corral_source_split_11191:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i72, 40);
    call {:si_unique_call 5189} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i73);
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    $p74 := $i2p.i64.ref($i73);
    goto corral_source_split_11193;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5190} list_del_init($p74);
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p8);
    call {:si_unique_call 5191} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i75);
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    $i76 := $add.i64($i75, 56);
    call {:si_unique_call 5192} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i76);
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    $p77 := $i2p.i64.ref($i76);
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    call {:si_unique_call 5193} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i79);
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    $i80 := $add.i64($i79, 8);
    call {:si_unique_call 5194} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i80);
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    $p81 := $i2p.i64.ref($i80);
    goto corral_source_split_11201;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p33);
    call {:si_unique_call 5195} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i82);
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, 216);
    call {:si_unique_call 5196} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i83);
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    $p84 := $i2p.i64.ref($i83);
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5197} list_add_tail($p81, $p84);
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p8);
    call {:si_unique_call 5198} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i85);
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 56);
    call {:si_unique_call 5199} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i86);
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    goto corral_source_split_11208;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    $p88 := $i2p.i64.ref($i86);
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p88, $0.ref);
    goto corral_source_split_11210;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p33);
    call {:si_unique_call 5200} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i89);
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    $i90 := $add.i64($i89, 176);
    call {:si_unique_call 5201} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i90);
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    $p91 := $i2p.i64.ref($i90);
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5202} __wake_up($p91, 3, 0, $0.ref);
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p12);
    call {:si_unique_call 5203} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i92);
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    $i93 := $add.i64($i92, 872);
    call {:si_unique_call 5204} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i93);
    goto corral_source_split_11216;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    $p94 := $i2p.i64.ref($i93);
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5205} spin_unlock_irqrestore($p94, $i38);
    goto corral_source_split_11218;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i55 == 1;
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5180} do_gettimeofday($p1);
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p8);
    call {:si_unique_call 5181} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i56);
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    $i57 := $add.i64($i56, 80);
    call {:si_unique_call 5182} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i57);
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    $p58 := $i2p.i64.ref($i57);
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p1);
    goto corral_source_split_11176;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.27, $p60);
    call {:si_unique_call 5183} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i61);
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i64.i32($i61);
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i62);
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p8);
    call {:si_unique_call 5184} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i63);
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 88);
    call {:si_unique_call 5185} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i64);
    goto corral_source_split_11181;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    $p65 := $i2p.i64.ref($i64);
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p1);
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i67, 8);
    call {:si_unique_call 5186} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i68);
    goto corral_source_split_11185;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    $p69 := $i2p.i64.ref($i68);
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.0, $p69);
    call {:si_unique_call 5187} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i70);
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i64.i32($i70);
    goto corral_source_split_11188;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i71);
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmw_event_fence_action_cleanup: ref;

axiom vmw_event_fence_action_cleanup == $sub.ref(0, 879336);

procedure vmw_event_fence_action_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $CurrAddr, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation vmw_event_fence_action_cleanup($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11220;

  corral_source_split_11220:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i32($p1);
    call {:si_unique_call 5206} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i2);
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i2);
    goto corral_source_split_11224;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, $i4);
    goto corral_source_split_11225;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 1));
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    call {:si_unique_call 5207} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i8);
    goto corral_source_split_11228;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 64);
    call {:si_unique_call 5208} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i9);
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    call {:si_unique_call 5209} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i12);
    goto corral_source_split_11232;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 8);
    call {:si_unique_call 5210} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i13);
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    call {:si_unique_call 5211} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i16);
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 16);
    call {:si_unique_call 5212} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i17);
    goto corral_source_split_11238;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5213} $p19 := spinlock_check($p18);
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5214} $i20 := _raw_spin_lock_irqsave($p19);
    call {:si_unique_call 5215} {:cexpr "irq_flags"} boogie_si_record_i64($i20);
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p7);
    call {:si_unique_call 5216} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i21);
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 40);
    call {:si_unique_call 5217} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i22);
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5218} list_del($p23);
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p15);
    call {:si_unique_call 5219} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i24);
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 16);
    call {:si_unique_call 5220} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i25);
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5221} spin_unlock_irqrestore($p26, $i20);
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p7);
    call {:si_unique_call 5222} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i27);
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 64);
    call {:si_unique_call 5223} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i28);
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5224} vmw_fence_obj_unreference($p29);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    goto corral_source_split_11254;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p7);
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5225} kfree($p30);
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_646:
    assume !assertsPassed;
    return;
}



const vmw_fence_obj_add_action: ref;

axiom vmw_fence_obj_add_action == $sub.ref(0, 880368);

procedure vmw_fence_obj_add_action($p0: ref, $p1: ref);



const vmw_fence_goal_check_locked: ref;

axiom vmw_fence_goal_check_locked == $sub.ref(0, 881400);

procedure vmw_fence_goal_check_locked($p0: ref) returns ($r: i1);



const vmw_goal_waiter_add: ref;

axiom vmw_goal_waiter_add == $sub.ref(0, 882432);

procedure vmw_goal_waiter_add($p0: ref);



const do_gettimeofday: ref;

axiom do_gettimeofday == $sub.ref(0, 883464);

procedure do_gettimeofday($p0: ref);
  free requires assertsPassed;



implementation do_gettimeofday($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    return;
}



const memcpy_fromio: ref;

axiom memcpy_fromio == $sub.ref(0, 884496);

procedure memcpy_fromio($p0: ref, $p1: ref, $i2: i64);



const vmw_kms_cursor_post_execbuf: ref;

axiom vmw_kms_cursor_post_execbuf == $sub.ref(0, 885528);

procedure vmw_kms_cursor_post_execbuf($p0: ref);



const vmw_cursor_update_image: ref;

axiom vmw_cursor_update_image == $sub.ref(0, 886560);

procedure vmw_cursor_update_image($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, assertsPassed, $M.3, $M.4, $CurrAddr, $M.6, $M.11, $M.12, $M.13, $M.10, $M.16;



implementation vmw_cursor_update_image($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $i12: i32;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5226} {:cexpr "vmw_cursor_update_image:arg:width"} boogie_si_record_i32($i2);
    call {:si_unique_call 5227} {:cexpr "vmw_cursor_update_image:arg:height"} boogie_si_record_i32($i3);
    call {:si_unique_call 5228} {:cexpr "vmw_cursor_update_image:arg:hotspotX"} boogie_si_record_i32($i4);
    call {:si_unique_call 5229} {:cexpr "vmw_cursor_update_image:arg:hotspotY"} boogie_si_record_i32($i5);
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i2, $i3);
    call {:si_unique_call 5230} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i6);
    goto corral_source_split_11261;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i6, 4);
    call {:si_unique_call 5231} {:cexpr "image_size"} boogie_si_record_i32($i7);
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    call {:si_unique_call 5232} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i8);
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    $i9 := $add.i64(24, $i8);
    call {:si_unique_call 5233} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i9);
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    call {:si_unique_call 5234} {:cexpr "cmd_size"} boogie_si_record_i32($i10);
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    $i11 := $ne.ref($p1, $0.ref);
    goto corral_source_split_11266;

  corral_source_split_11266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_11268;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5235} $p13 := vmw_fifo_reserve($p0, $i10);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_11273;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5236} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i15);
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p14);
    call {:si_unique_call 5237} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i16);
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, $i15);
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    call {:si_unique_call 5238} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i18);
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    $i20 := $xor.i1($i19, 1);
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    call {:si_unique_call 5239} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i21);
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    $i23 := $xor.i1($i22, 1);
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    call {:si_unique_call 5240} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i24);
    goto corral_source_split_11283;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    call {:si_unique_call 5241} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i25);
    goto corral_source_split_11284;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5242} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 5243} {:cexpr "tmp___8"} boogie_si_record_i64($i26);
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p14);
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.0;
    call {:si_unique_call 5245} cmdloc_dummy_var_46 := $memset.i8(cmdloc_dummy_var_45, $p29, 0, 24, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_46;
    goto corral_source_split_11292;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i7);
    call {:si_unique_call 5246} {:cexpr "__len"} boogie_si_record_i64($i30);
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p14, $mul.ref(1, 24));
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p1);
    goto corral_source_split_11296;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5247} vslice_dummy_var_212 := memcpy($p32, $p33, $i30);
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p14);
    goto corral_source_split_11298;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 22);
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p14);
    call {:si_unique_call 5248} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i36);
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 4);
    call {:si_unique_call 5249} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i37);
    goto corral_source_split_11301;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 0);
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p14);
    call {:si_unique_call 5250} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i39);
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 16);
    call {:si_unique_call 5251} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i40);
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i40);
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i2);
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p14);
    call {:si_unique_call 5252} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i42);
    goto corral_source_split_11308;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, 20);
    call {:si_unique_call 5253} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i43);
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i43);
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i3);
    goto corral_source_split_11311;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p14);
    call {:si_unique_call 5254} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i45);
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 8);
    call {:si_unique_call 5255} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i46);
    goto corral_source_split_11313;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    $p47 := $i2p.i64.ref($i46);
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i4);
    goto corral_source_split_11315;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p14);
    call {:si_unique_call 5256} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i48);
    goto corral_source_split_11316;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, 12);
    call {:si_unique_call 5257} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i49);
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    $p50 := $i2p.i64.ref($i49);
    goto corral_source_split_11318;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, $i5);
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5258} vmw_fifo_commit($p0, $i10);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_11288;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5244} vslice_dummy_var_211 := drm_err.ref.ref(.str.11, .str.12);
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_649:
    assume !assertsPassed;
    return;
}



const vmw_surface_init: ref;

axiom vmw_surface_init == $sub.ref(0, 887592);

procedure vmw_surface_init($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_user_surface_base_release: ref;

axiom vmw_user_surface_base_release == $sub.ref(0, 888624);

procedure vmw_user_surface_base_release($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation vmw_user_surface_base_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 5259} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p0);
    goto corral_source_split_11323;

  corral_source_split_11323:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i32($p3);
    call {:si_unique_call 5260} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i4);
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_11326;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i4);
    goto corral_source_split_11327;

  corral_source_split_11327:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, $i6);
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p5, $mul.ref($i7, 1));
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    call {:si_unique_call 5261} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i10);
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 64);
    call {:si_unique_call 5262} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i11);
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p12);
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p0, $0.ref);
    goto corral_source_split_11336;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5263} vmw_resource_unreference($p1);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    goto corral_source_split_11337;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_655:
    assume !assertsPassed;
    return;
}



const vmw_surface_remove_from_lists: ref;

axiom vmw_surface_remove_from_lists == $sub.ref(0, 889656);

procedure vmw_surface_remove_from_lists($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vmw_surface_remove_from_lists($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11339;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i32($p1);
    call {:si_unique_call 5264} {:cexpr "__cil_tmp6"} boogie_si_record_i32($i2);
    goto corral_source_split_11341;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i2);
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, $i4);
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 1));
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    call {:si_unique_call 5265} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i8);
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 96);
    call {:si_unique_call 5266} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i9);
    goto corral_source_split_11348;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5267} list_del_init($p10);
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    return;
}



const vmw_resource_init: ref;

axiom vmw_resource_init == $sub.ref(0, 890688);

procedure vmw_resource_init($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i1, $p5: ref, $p6: ref) returns ($r: i32);



const vmw_hw_surface_destroy: ref;

axiom vmw_hw_surface_destroy == $sub.ref(0, 891720);

procedure vmw_hw_surface_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, assertsPassed, $M.3, $M.4, $CurrAddr, $M.6, $M.11, $M.12, $M.10, $M.16, $M.13;



implementation vmw_hw_surface_destroy($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $i56: i1;
  var vslice_dummy_var_213: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 5268} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i1);
    goto corral_source_split_11353;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 8);
    call {:si_unique_call 5269} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i2);
    goto corral_source_split_11354;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_11356;

  corral_source_split_11356:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 5270} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i5);
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 24);
    call {:si_unique_call 5271} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i6);
    goto corral_source_split_11358;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 5272} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i8);
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, $sub.i32(0, 1));
    goto corral_source_split_11361;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i8.i1(0);
    goto corral_source_split_11419;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5307} vmw_3d_resource_dec($p4, $i56);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_11363;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5273} $i10 := vmw_surface_destroy_size();
    call {:si_unique_call 5274} {:cexpr "tmp___7"} boogie_si_record_i32($i10);
    goto corral_source_split_11364;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5275} $p11 := vmw_fifo_reserve($p4, $i10);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    goto corral_source_split_11365;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5276} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i12);
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p11);
    call {:si_unique_call 5277} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i13);
    goto corral_source_split_11367;

  corral_source_split_11367:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, $i12);
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    call {:si_unique_call 5278} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i15);
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    $i17 := $xor.i1($i16, 1);
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    call {:si_unique_call 5279} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i18);
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_11373;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    $i20 := $xor.i1($i19, 1);
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    call {:si_unique_call 5280} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i21);
    goto corral_source_split_11375;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    call {:si_unique_call 5281} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i22);
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5282} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 5283} {:cexpr "tmp___8"} boogie_si_record_i64($i23);
    goto corral_source_split_11377;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p0);
    call {:si_unique_call 5285} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i26);
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, 24);
    call {:si_unique_call 5286} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i27);
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    $p28 := $i2p.i64.ref($i27);
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    call {:si_unique_call 5287} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i29);
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5288} vmw_surface_destroy_encode($i29, $p11);
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5289} $i30 := vmw_surface_destroy_size();
    call {:si_unique_call 5290} {:cexpr "tmp___9"} boogie_si_record_i32($i30);
    goto corral_source_split_11388;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5291} vmw_fifo_commit($p4, $i30);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p4);
    call {:si_unique_call 5292} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i31);
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 134304);
    call {:si_unique_call 5293} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i32);
    goto corral_source_split_11391;

  corral_source_split_11391:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i32);
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5294} mutex_lock($p33);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_11393;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i32($p34);
    call {:si_unique_call 5295} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i35);
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p0);
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i35);
    goto corral_source_split_11397;

  corral_source_split_11397:
    assume {:verifier.code 0} true;
    $i38 := $sub.i64(0, $i37);
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p36, $mul.ref($i38, 1));
    goto corral_source_split_11399;

  corral_source_split_11399:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p4);
    call {:si_unique_call 5296} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i41);
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 134784);
    call {:si_unique_call 5297} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i42);
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p40);
    call {:si_unique_call 5298} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i43);
    goto corral_source_split_11403;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 200);
    call {:si_unique_call 5299} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i44);
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    call {:si_unique_call 5300} {:cexpr "__cil_tmp37"} boogie_si_record_i32($i46);
    goto corral_source_split_11406;

  corral_source_split_11406:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p4);
    call {:si_unique_call 5301} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i47);
    goto corral_source_split_11407;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 134784);
    call {:si_unique_call 5302} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i48);
    goto corral_source_split_11408;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i48);
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    call {:si_unique_call 5303} {:cexpr "__cil_tmp40"} boogie_si_record_i32($i50);
    goto corral_source_split_11410;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32($i50, $i46);
    goto corral_source_split_11411;

  corral_source_split_11411:
    assume {:verifier.code 0} true;
    $p52 := $i2p.i64.ref($i42);
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i51);
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p4);
    call {:si_unique_call 5304} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i53);
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i53, 134304);
    call {:si_unique_call 5305} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i54);
    goto corral_source_split_11415;

  corral_source_split_11415:
    assume {:verifier.code 0} true;
    $p55 := $i2p.i64.ref($i54);
    goto corral_source_split_11416;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5306} mutex_unlock($p55);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    goto corral_source_split_11417;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i24 == 1;
    goto corral_source_split_11380;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5284} vslice_dummy_var_213 := drm_err.ref.ref(.str.263, .str.262);
    goto corral_source_split_11381;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_658:
    assume !assertsPassed;
    return;
}



const vmw_resource_activate: ref;

axiom vmw_resource_activate == $sub.ref(0, 892752);

procedure vmw_resource_activate($p0: ref, $p1: ref);



const vmw_resource_lookup: ref;

axiom vmw_resource_lookup == $sub.ref(0, 893784);

procedure vmw_resource_lookup($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);



const vmw_user_context_free: ref;

axiom vmw_user_context_free == $sub.ref(0, 894816);

procedure vmw_user_context_free($p0: ref);
  free requires assertsPassed;



implementation vmw_user_context_free($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5308} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i1);
    goto corral_source_split_11423;

  corral_source_split_11423:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 64);
    call {:si_unique_call 5309} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i2);
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i32($p3);
    call {:si_unique_call 5310} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i4);
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_11427;

  corral_source_split_11427:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i4);
    goto corral_source_split_11428;

  corral_source_split_11428:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, $i6);
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p5, $mul.ref($i7, 1));
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_11431;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    call {:si_unique_call 5311} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i10);
    goto corral_source_split_11432;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 8);
    call {:si_unique_call 5312} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i11);
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_11434;

  corral_source_split_11434:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_11435;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p9);
    goto corral_source_split_11436;

  corral_source_split_11436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5313} kfree($p14);
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5314} $p15 := vmw_mem_glob($p13);
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    $i16 := $M.25;
    goto corral_source_split_11439;

  corral_source_split_11439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5315} ttm_mem_global_free($p15, $i16);
    goto corral_source_split_11440;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    return;
}



const vmw_context_init: ref;

axiom vmw_context_init == $sub.ref(0, 895848);

procedure vmw_context_init($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_user_context_base_release: ref;

axiom vmw_user_context_base_release == $sub.ref(0, 896880);

procedure vmw_user_context_base_release($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation vmw_user_context_base_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 5316} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11442;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p0);
    goto corral_source_split_11443;

  corral_source_split_11443:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_11444;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i32($p3);
    call {:si_unique_call 5317} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i4);
    goto corral_source_split_11445;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_11446;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i4);
    goto corral_source_split_11447;

  corral_source_split_11447:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, $i6);
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p5, $mul.ref($i7, 1));
    goto corral_source_split_11449;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_11450;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    call {:si_unique_call 5318} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i10);
    goto corral_source_split_11451;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 64);
    call {:si_unique_call 5319} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i11);
    goto corral_source_split_11452;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p12);
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p0, $0.ref);
    goto corral_source_split_11456;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5320} vmw_resource_unreference($p1);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto corral_source_split_11457;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_673:
    assume !assertsPassed;
    return;
}



const vmw_hw_context_destroy: ref;

axiom vmw_hw_context_destroy == $sub.ref(0, 897912);

procedure vmw_hw_context_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed, $M.6, $M.11, $M.12, $M.2, $CurrAddr, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_hw_context_destroy($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i1;
  var vslice_dummy_var_214: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 5321} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i1);
    goto corral_source_split_11460;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 8);
    call {:si_unique_call 5322} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i2);
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_11462;

  corral_source_split_11462:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_11463;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    call {:si_unique_call 5323} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i5);
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 24);
    call {:si_unique_call 5324} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i6);
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_11466;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 5325} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i8);
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1(1);
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5326} vmw_execbuf_release_pinned_bo($p4, $i9, $i8);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto corral_source_split_11469;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5327} $p10 := vmw_fifo_reserve($p4, 12);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    goto corral_source_split_11470;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5328} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i12);
    goto corral_source_split_11472;

  corral_source_split_11472:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p11);
    call {:si_unique_call 5329} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i13);
    goto corral_source_split_11473;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, $i12);
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    call {:si_unique_call 5330} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i15);
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_11476;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    $i17 := $xor.i1($i16, 1);
    goto corral_source_split_11477;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    call {:si_unique_call 5331} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i18);
    goto corral_source_split_11478;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    $i20 := $xor.i1($i19, 1);
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    call {:si_unique_call 5332} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i21);
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    call {:si_unique_call 5333} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i22);
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5334} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 5335} {:cexpr "tmp___8"} boogie_si_record_i64($i23);
    goto corral_source_split_11483;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p11);
    goto corral_source_split_11489;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 1046);
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p11);
    call {:si_unique_call 5337} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i27);
    goto corral_source_split_11491;

  corral_source_split_11491:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 4);
    call {:si_unique_call 5338} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i28);
    goto corral_source_split_11492;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_11493;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 4);
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p11);
    call {:si_unique_call 5339} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i30);
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 8);
    call {:si_unique_call 5340} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i31);
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    call {:si_unique_call 5341} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i32);
    goto corral_source_split_11497;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 24);
    call {:si_unique_call 5342} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i33);
    goto corral_source_split_11498;

  corral_source_split_11498:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    call {:si_unique_call 5343} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i35);
    goto corral_source_split_11500;

  corral_source_split_11500:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i31);
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_11502;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5344} vmw_fifo_commit($p4, 12);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    goto corral_source_split_11503;

  corral_source_split_11503:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1(0);
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5345} vmw_3d_resource_dec($p4, $i37);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    goto corral_source_split_11505;

  corral_source_split_11505:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5336} vslice_dummy_var_214 := drm_err.ref.ref(.str.261, .str.262);
    goto corral_source_split_11487;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  SeqInstr_676:
    assume !assertsPassed;
    return;
}



const vmw_user_stream_free: ref;

axiom vmw_user_stream_free == $sub.ref(0, 898944);

procedure vmw_user_stream_free($p0: ref);
  free requires assertsPassed;



implementation vmw_user_stream_free($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11507;

  corral_source_split_11507:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5346} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i1);
    goto corral_source_split_11508;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 64);
    call {:si_unique_call 5347} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i2);
    goto corral_source_split_11509;

  corral_source_split_11509:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i32($p3);
    call {:si_unique_call 5348} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i4);
    goto corral_source_split_11511;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i4);
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, $i6);
    goto corral_source_split_11514;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p5, $mul.ref($i7, 1));
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_11516;

  corral_source_split_11516:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    call {:si_unique_call 5349} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i10);
    goto corral_source_split_11517;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 8);
    call {:si_unique_call 5350} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i11);
    goto corral_source_split_11518;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_11519;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_11520;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p9);
    goto corral_source_split_11521;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5351} kfree($p14);
    goto corral_source_split_11522;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5352} $p15 := vmw_mem_glob($p13);
    goto corral_source_split_11523;

  corral_source_split_11523:
    assume {:verifier.code 0} true;
    $i16 := $M.24;
    goto corral_source_split_11524;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5353} ttm_mem_global_free($p15, $i16);
    goto corral_source_split_11525;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    return;
}



const vmw_stream_init: ref;

axiom vmw_stream_init == $sub.ref(0, 899976);

procedure vmw_stream_init($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_user_stream_base_release: ref;

axiom vmw_user_stream_base_release == $sub.ref(0, 901008);

procedure vmw_user_stream_base_release($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation vmw_user_stream_base_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 5354} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11527;

  corral_source_split_11527:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p0);
    goto corral_source_split_11528;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_11529;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i32($p3);
    call {:si_unique_call 5355} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i4);
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_11531;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i4);
    goto corral_source_split_11532;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, $i6);
    goto corral_source_split_11533;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p5, $mul.ref($i7, 1));
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_11535;

  corral_source_split_11535:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    call {:si_unique_call 5356} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i10);
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 64);
    call {:si_unique_call 5357} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i11);
    goto corral_source_split_11537;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_11538;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p12);
    goto corral_source_split_11539;

  corral_source_split_11539:
    assume {:verifier.code 0} true;
    goto corral_source_split_11540;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p0, $0.ref);
    goto corral_source_split_11541;

  corral_source_split_11541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5358} vmw_resource_unreference($p1);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_688:
    assume !assertsPassed;
    return;
}



const vmw_overlay_claim: ref;

axiom vmw_overlay_claim == $sub.ref(0, 902040);

procedure vmw_overlay_claim($p0: ref, $p1: ref) returns ($r: i32);



const vmw_stream_destroy: ref;

axiom vmw_stream_destroy == $sub.ref(0, 903072);

procedure vmw_stream_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed, $M.11, $M.12, $M.2, $M.6, $CurrAddr, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_stream_destroy($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i32;
  var $i41: i64;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 5359} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i1);
    goto corral_source_split_11545;

  corral_source_split_11545:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 8);
    call {:si_unique_call 5360} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i2);
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_11547;

  corral_source_split_11547:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_11548;

  corral_source_split_11548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5361} vslice_dummy_var_215 := printk.ref.ref(.str.266, .str.267);
    goto corral_source_split_11549;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i32($p6);
    call {:si_unique_call 5362} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i7);
    goto corral_source_split_11551;

  corral_source_split_11551:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_11552;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i7);
    goto corral_source_split_11553;

  corral_source_split_11553:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, $i9);
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p8, $mul.ref($i10, 1));
    goto corral_source_split_11555;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    call {:si_unique_call 5363} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i13);
    goto corral_source_split_11557;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 96);
    call {:si_unique_call 5364} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i14);
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_11559;

  corral_source_split_11559:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    call {:si_unique_call 5365} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i16);
    goto corral_source_split_11560;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5366} $i17 := vmw_overlay_unref($p4, $i16);
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    call {:si_unique_call 5367} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_11561;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    call {:si_unique_call 5368} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i19);
    goto corral_source_split_11563;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_11564;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    $i21 := $xor.i1($i20, 1);
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    call {:si_unique_call 5369} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i22);
    goto corral_source_split_11566;

  corral_source_split_11566:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    $i24 := $xor.i1($i23, 1);
    goto corral_source_split_11568;

  corral_source_split_11568:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    call {:si_unique_call 5370} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i25);
    goto corral_source_split_11569;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_11570;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    $i27 := $xor.i1($i26, 1);
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    call {:si_unique_call 5371} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i28);
    goto corral_source_split_11572;

  corral_source_split_11572:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    $i30 := $xor.i1($i29, 1);
    goto corral_source_split_11574;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    call {:si_unique_call 5372} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i31);
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    call {:si_unique_call 5373} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i32);
    goto corral_source_split_11576;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5374} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 5375} {:cexpr "tmp___7"} boogie_si_record_i64($i33);
    goto corral_source_split_11577;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_11578;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i25, 0);
    goto corral_source_split_11583;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    $i36 := $xor.i1($i35, 1);
    goto corral_source_split_11584;

  corral_source_split_11584:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    call {:si_unique_call 5377} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i37);
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_11586;

  corral_source_split_11586:
    assume {:verifier.code 0} true;
    $i39 := $xor.i1($i38, 1);
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    call {:si_unique_call 5378} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i40);
    goto corral_source_split_11588;

  corral_source_split_11588:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    call {:si_unique_call 5379} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i41);
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5380} vslice_dummy_var_216 := ldv__builtin_expect($i41, 0);
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i34 == 1;
    goto corral_source_split_11580;

  corral_source_split_11580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5376} warn_slowpath_null(.str.61, 1723);
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_691:
    assume !assertsPassed;
    return;
}



const vmw_overlay_unref: ref;

axiom vmw_overlay_unref == $sub.ref(0, 904104);

procedure vmw_overlay_unref($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed, $M.11, $M.12, $M.2, $M.6, $CurrAddr, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_overlay_unref($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i8;
  var $i28: i1;
  var $i29: i8;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i32;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i1;
  var $i53: i32;
  var $i54: i64;
  var $i56: i1;
  var $i57: i1;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $i18: i32;
  var vslice_dummy_var_217: i64;
  var vslice_dummy_var_218: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5381} {:cexpr "vmw_overlay_unref:arg:stream_id"} boogie_si_record_i32($i1);
    goto corral_source_split_11592;

  corral_source_split_11592:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 5382} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i2);
    goto corral_source_split_11593;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 2624);
    call {:si_unique_call 5383} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i3);
    goto corral_source_split_11594;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_11595;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_11596;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $uge.i32($i1, 1);
    goto corral_source_split_11598;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 5384} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i7);
    goto corral_source_split_11599;

  corral_source_split_11599:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_11600;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    $i9 := $xor.i1($i8, 1);
    goto corral_source_split_11601;

  corral_source_split_11601:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 5385} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i10);
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_11603;

  corral_source_split_11603:
    assume {:verifier.code 0} true;
    $i12 := $xor.i1($i11, 1);
    goto corral_source_split_11604;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    call {:si_unique_call 5386} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i13);
    goto corral_source_split_11605;

  corral_source_split_11605:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    call {:si_unique_call 5387} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i14);
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5388} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 5389} {:cexpr "tmp___7"} boogie_si_record_i64($i15);
    goto corral_source_split_11607;

  corral_source_split_11607:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_11608;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i17 := $ne.ref($p5, $0.ref);
    goto corral_source_split_11614;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    goto corral_source_split_11616;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 38);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_11618;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb13:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p5);
    goto corral_source_split_11620;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5391} mutex_lock($p19);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i1);
    goto corral_source_split_11622;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    $i21 := $mul.i64($i20, 104);
    call {:si_unique_call 5392} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i21);
    goto corral_source_split_11623;

  corral_source_split_11623:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 8);
    call {:si_unique_call 5393} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i22);
    goto corral_source_split_11624;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    $i23 := $add.i64(72, $i22);
    call {:si_unique_call 5394} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i23);
    goto corral_source_split_11625;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p5);
    call {:si_unique_call 5395} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i24);
    goto corral_source_split_11626;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, $i23);
    call {:si_unique_call 5396} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i25);
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_11628;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i8($i28);
    call {:si_unique_call 5397} {:cexpr "__cil_tmp19"} boogie_si_record_i8($i29);
    goto corral_source_split_11631;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i29);
    goto corral_source_split_11632;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    $i31 := $xor.i1($i30, 1);
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    call {:si_unique_call 5398} {:cexpr "__cil_tmp20"} boogie_si_record_i32($i32);
    goto corral_source_split_11634;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_11635;

  corral_source_split_11635:
    assume {:verifier.code 0} true;
    $i34 := $xor.i1($i33, 1);
    goto corral_source_split_11636;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    call {:si_unique_call 5399} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i35);
    goto corral_source_split_11637;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_11638;

  corral_source_split_11638:
    assume {:verifier.code 0} true;
    $i37 := $xor.i1($i36, 1);
    goto corral_source_split_11639;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i32($i37);
    call {:si_unique_call 5400} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i38);
    goto corral_source_split_11640;

  corral_source_split_11640:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    $i40 := $xor.i1($i39, 1);
    goto corral_source_split_11642;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i32($i40);
    call {:si_unique_call 5401} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i41);
    goto corral_source_split_11643;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_11644;

  corral_source_split_11644:
    assume {:verifier.code 0} true;
    $i43 := $xor.i1($i42, 1);
    goto corral_source_split_11645;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i43);
    call {:si_unique_call 5402} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i44);
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    call {:si_unique_call 5403} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i45);
    goto corral_source_split_11647;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5404} $i46 := ldv__builtin_expect($i45, 0);
    call {:si_unique_call 5405} {:cexpr "tmp___8"} boogie_si_record_i64($i46);
    goto corral_source_split_11648;

  corral_source_split_11648:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_11649;

  corral_source_split_11649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i38, 0);
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    $i49 := $xor.i1($i48, 1);
    goto corral_source_split_11655;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i32($i49);
    call {:si_unique_call 5407} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i50);
    goto corral_source_split_11656;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_11657;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    $i52 := $xor.i1($i51, 1);
    goto corral_source_split_11658;

  corral_source_split_11658:
    assume {:verifier.code 0} true;
    $i53 := $zext.i1.i32($i52);
    call {:si_unique_call 5408} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i53);
    goto corral_source_split_11659;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i53);
    call {:si_unique_call 5409} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i54);
    goto corral_source_split_11660;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5410} vslice_dummy_var_217 := ldv__builtin_expect($i54, 0);
    goto corral_source_split_11661;

  corral_source_split_11661:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i8.i1(0);
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i8.i1(0);
    goto corral_source_split_11663;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5411} vslice_dummy_var_218 := vmw_overlay_stop($p0, $i1, $i56, $i57);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    goto corral_source_split_11664;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64($i1);
    goto corral_source_split_11665;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    $i60 := $mul.i64($i59, 104);
    call {:si_unique_call 5412} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i60);
    goto corral_source_split_11666;

  corral_source_split_11666:
    assume {:verifier.code 0} true;
    $i61 := $add.i64($i60, 8);
    call {:si_unique_call 5413} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i61);
    goto corral_source_split_11667;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    $i62 := $add.i64(72, $i61);
    call {:si_unique_call 5414} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i62);
    goto corral_source_split_11668;

  corral_source_split_11668:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p5);
    call {:si_unique_call 5415} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i63);
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, $i62);
    call {:si_unique_call 5416} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i64);
    goto corral_source_split_11670;

  corral_source_split_11670:
    assume {:verifier.code 0} true;
    $p65 := $i2p.i64.ref($i64);
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, 0);
    goto corral_source_split_11672;

  corral_source_split_11672:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p5);
    goto corral_source_split_11673;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5417} mutex_unlock($p66);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_11674;

  corral_source_split_11674:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb15;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  SeqInstr_697:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i47 == 1;
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5406} warn_slowpath_null(.str.98, 556);
    goto corral_source_split_11652;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_694:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_11610;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call {:si_unique_call 5390} devirtbounce(0, .str.98, 549, 12);
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call vmw_overlay_unref_loop_$bb7();
    goto $bb7_last;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb8_dummy;

  $bb8_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const vmw_user_stream_lookup: ref;

axiom vmw_user_stream_lookup == $sub.ref(0, 905136);

procedure vmw_user_stream_lookup($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);



const vmw_user_dmabuf_destroy: ref;

axiom vmw_user_dmabuf_destroy == $sub.ref(0, 906168);

procedure vmw_user_dmabuf_destroy($p0: ref);
  free requires assertsPassed;



implementation vmw_user_dmabuf_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11676;

  corral_source_split_11676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5418} $p1 := vmw_user_dma_buffer($p0);
    goto corral_source_split_11677;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_11678;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5419} kfree($p2);
    goto corral_source_split_11679;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    return;
}



const vmw_user_dmabuf_release: ref;

axiom vmw_user_dmabuf_release == $sub.ref(0, 907200);

procedure vmw_user_dmabuf_release($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmw_user_dmabuf_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 5420} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p0);
    goto corral_source_split_11682;

  corral_source_split_11682:
    assume {:verifier.code 0} true;
    goto corral_source_split_11683;

  corral_source_split_11683:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p0, $0.ref);
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5421} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i4);
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p2);
    call {:si_unique_call 5422} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i5);
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, $i4);
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 5423} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i7);
    goto corral_source_split_11688;

  corral_source_split_11688:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    $i9 := $xor.i1($i8, 1);
    goto corral_source_split_11690;

  corral_source_split_11690:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 5424} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i10);
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_11692;

  corral_source_split_11692:
    assume {:verifier.code 0} true;
    $i12 := $xor.i1($i11, 1);
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    call {:si_unique_call 5425} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i13);
    goto corral_source_split_11694;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    call {:si_unique_call 5426} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i14);
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5427} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 5428} {:cexpr "tmp___7"} boogie_si_record_i64($i15);
    goto corral_source_split_11696;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_11701;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i32($p17);
    call {:si_unique_call 5429} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i18);
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p2);
    goto corral_source_split_11703;

  corral_source_split_11703:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i18);
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    $i21 := $sub.i64(0, $i20);
    goto corral_source_split_11705;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p19, $mul.ref($i21, 1));
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_11707;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    call {:si_unique_call 5430} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i24);
    goto corral_source_split_11708;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 64);
    call {:si_unique_call 5431} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i25);
    goto corral_source_split_11709;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_11710;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p26);
    goto corral_source_split_11711;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5432} ttm_bo_unref($p1);
    goto corral_source_split_11712;

  corral_source_split_11712:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmw_user_dma_buffer: ref;

axiom vmw_user_dma_buffer == $sub.ref(0, 908232);

procedure vmw_user_dma_buffer($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vmw_user_dma_buffer($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11714;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5433} $p1 := vmw_dma_buffer($p0);
    goto corral_source_split_11715;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5434} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
    goto corral_source_split_11716;

  corral_source_split_11716:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 64);
    call {:si_unique_call 5435} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i3);
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_11718;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i32($p4);
    call {:si_unique_call 5436} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i5);
    goto corral_source_split_11719;

  corral_source_split_11719:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i5);
    goto corral_source_split_11721;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64(0, $i7);
    goto corral_source_split_11722;

  corral_source_split_11722:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p6, $mul.ref($i8, 1));
    goto corral_source_split_11723;

  corral_source_split_11723:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_11724;

  corral_source_split_11724:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;
}



const vmw_overlay_num_overlays: ref;

axiom vmw_overlay_num_overlays == $sub.ref(0, 909264);

procedure vmw_overlay_num_overlays($p0: ref) returns ($r: i32);



const vmw_overlay_num_free_overlays: ref;

axiom vmw_overlay_num_free_overlays == $sub.ref(0, 910296);

procedure vmw_overlay_num_free_overlays($p0: ref) returns ($r: i32);



const noop_llseek: ref;

axiom noop_llseek == $sub.ref(0, 911328);

procedure noop_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);



const vmw_fops_read: ref;

axiom vmw_fops_read == $sub.ref(0, 912360);

procedure vmw_fops_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);



const vmw_fops_poll: ref;

axiom vmw_fops_poll == $sub.ref(0, 913392);

procedure vmw_fops_poll($p0: ref, $p1: ref) returns ($r: i32);



const vmw_unlocked_ioctl: ref;

axiom vmw_unlocked_ioctl == $sub.ref(0, 914424);

procedure vmw_unlocked_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation vmw_unlocked_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i1;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $i50: i32;
  var $i53: i64;
  var $i52: i64;
  var vslice_dummy_var_219: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5437} {:cexpr "vmw_unlocked_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 5438} {:cexpr "vmw_unlocked_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 5439} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i3);
    goto corral_source_split_11727;

  corral_source_split_11727:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 200);
    call {:si_unique_call 5440} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i4);
    goto corral_source_split_11728;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_11729;

  corral_source_split_11729:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_11730;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_11731;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    call {:si_unique_call 5441} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i8);
    goto corral_source_split_11732;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 40);
    call {:si_unique_call 5442} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i9);
    goto corral_source_split_11733;

  corral_source_split_11733:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_11735;

  corral_source_split_11735:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    call {:si_unique_call 5443} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i12);
    goto corral_source_split_11736;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 784);
    call {:si_unique_call 5444} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i13);
    goto corral_source_split_11737;

  corral_source_split_11737:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_11739;

  corral_source_split_11739:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(256, 1);
    call {:si_unique_call 5445} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i16);
    goto corral_source_split_11740;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i1, $i16);
    call {:si_unique_call 5446} {:cexpr "nr"} boogie_si_record_i32($i17);
    goto corral_source_split_11741;

  corral_source_split_11741:
    assume {:verifier.code 0} true;
    $i18 := $uge.i32($i17, 64);
    goto corral_source_split_11742;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5467} $i53 := drm_ioctl($p0, $i1, $i2);
    call {:si_unique_call 5468} {:cexpr "tmp___8"} boogie_si_record_i64($i53);
    goto corral_source_split_11787;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    $i52 := $i53;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_11785;

  corral_source_split_11785:
    assume {:verifier.code 0} true;
    $r := $i52;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_11744;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    $i19 := $ult.i32($i17, 160);
    goto corral_source_split_11745;

  corral_source_split_11745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p15);
    call {:si_unique_call 5447} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i20);
    goto corral_source_split_11748;

  corral_source_split_11748:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 1112);
    call {:si_unique_call 5448} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i21);
    goto corral_source_split_11749;

  corral_source_split_11749:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_11750;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_11751;

  corral_source_split_11751:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    call {:si_unique_call 5449} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i24);
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 416);
    call {:si_unique_call 5450} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i25);
    goto corral_source_split_11753;

  corral_source_split_11753:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_11754;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    call {:si_unique_call 5451} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i27);
    goto corral_source_split_11755;

  corral_source_split_11755:
    assume {:verifier.code 0} true;
    $i28 := $add.i32(64, $i27);
    call {:si_unique_call 5452} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i28);
    goto corral_source_split_11756;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    $i29 := $ult.i32($i17, $i28);
    goto corral_source_split_11757;

  corral_source_split_11757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i29 == 1;
    goto corral_source_split_11759;

  corral_source_split_11759:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i17, 64);
    call {:si_unique_call 5453} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i30);
    goto corral_source_split_11760;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i30);
    goto corral_source_split_11761;

  corral_source_split_11761:
    assume {:verifier.code 0} true;
    $i32 := $mul.i64($i31, 24);
    call {:si_unique_call 5454} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i32);
    goto corral_source_split_11762;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($p2i.ref.i64(vmw_ioctls), $i32);
    call {:si_unique_call 5455} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i33);
    goto corral_source_split_11763;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_11764;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    call {:si_unique_call 5456} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i35);
    goto corral_source_split_11765;

  corral_source_split_11765:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 16);
    call {:si_unique_call 5457} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i36);
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i36);
    goto corral_source_split_11767;

  corral_source_split_11767:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    call {:si_unique_call 5458} {:cexpr "__cil_tmp34"} boogie_si_record_i32($i38);
    goto corral_source_split_11768;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, $i1);
    goto corral_source_split_11769;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    call {:si_unique_call 5459} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i40);
    goto corral_source_split_11770;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_11771;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    $i42 := $xor.i1($i41, 1);
    goto corral_source_split_11772;

  corral_source_split_11772:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    call {:si_unique_call 5460} {:cexpr "__cil_tmp36"} boogie_si_record_i32($i43);
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_11774;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    $i45 := $xor.i1($i44, 1);
    goto corral_source_split_11775;

  corral_source_split_11775:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i32($i45);
    call {:si_unique_call 5461} {:cexpr "__cil_tmp37"} boogie_si_record_i32($i46);
    goto corral_source_split_11776;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    call {:si_unique_call 5462} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i47);
    goto corral_source_split_11777;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5463} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 5464} {:cexpr "tmp___7"} boogie_si_record_i64($i48);
    goto corral_source_split_11778;

  corral_source_split_11778:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_11779;

  corral_source_split_11779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb7:
    assume $i49 == 1;
    goto corral_source_split_11781;

  corral_source_split_11781:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32($i17, 64);
    call {:si_unique_call 5465} {:cexpr "__cil_tmp39"} boogie_si_record_i32($i50);
    goto corral_source_split_11782;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5466} vslice_dummy_var_219 := drm_err.ref.ref.i32(.str.194, .str.195, $i50);
    goto corral_source_split_11783;

  corral_source_split_11783:
    assume {:verifier.code 0} true;
    $i52 := $sub.i64(0, 22);
    goto $bb9;
}



const drm_compat_ioctl: ref;

axiom drm_compat_ioctl == $sub.ref(0, 915456);

procedure drm_compat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);



const vmw_mmap: ref;

axiom vmw_mmap == $sub.ref(0, 916488);

procedure vmw_mmap($p0: ref, $p1: ref) returns ($r: i32);



const drm_open: ref;

axiom drm_open == $sub.ref(0, 917520);

procedure drm_open($p0: ref, $p1: ref) returns ($r: i32);



const drm_release: ref;

axiom drm_release == $sub.ref(0, 918552);

procedure drm_release($p0: ref, $p1: ref) returns ($r: i32);



const drm_fasync: ref;

axiom drm_fasync == $sub.ref(0, 919584);

procedure drm_fasync($i0: i32, $p1: ref, $i2: i32) returns ($r: i32);



const ttm_bo_mmap: ref;

axiom ttm_bo_mmap == $sub.ref(0, 920616);

procedure ttm_bo_mmap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const drm_ioctl: ref;

axiom drm_ioctl == $sub.ref(0, 921648);

procedure drm_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation drm_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5469} {:cexpr "drm_ioctl:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 5470} {:cexpr "drm_ioctl:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5471} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 5472} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_11790;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const drm_poll: ref;

axiom drm_poll == $sub.ref(0, 922680);

procedure drm_poll($p0: ref, $p1: ref) returns ($r: i32);



const drm_read: ref;

axiom drm_read == $sub.ref(0, 923712);

procedure drm_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);



const vmw_probe: ref;

axiom vmw_probe == $sub.ref(0, 924744);

procedure vmw_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vmw_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11792;

  corral_source_split_11792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5473} $i2 := drm_get_pci_dev($p0, $p1, driver);
    call {:si_unique_call 5474} {:cexpr "tmp___7"} boogie_si_record_i32($i2);
    goto corral_source_split_11793;

  corral_source_split_11793:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vmw_remove: ref;

axiom vmw_remove == $sub.ref(0, 925776);

procedure vmw_remove($p0: ref);
  free requires assertsPassed;



implementation vmw_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11795;

  corral_source_split_11795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5475} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_11796;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_11797;

  corral_source_split_11797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5476} drm_put_dev($p2);
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    return;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 926808);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11800;

  corral_source_split_11800:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 5477} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
    goto corral_source_split_11801;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 144);
    call {:si_unique_call 5478} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_11802;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_11803;

  corral_source_split_11803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5479} $p4 := dev_get_drvdata($p3);
    goto corral_source_split_11804;

  corral_source_split_11804:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const drm_put_dev: ref;

axiom drm_put_dev == $sub.ref(0, 927840);

procedure drm_put_dev($p0: ref);
  free requires assertsPassed;



implementation drm_put_dev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11806;

  corral_source_split_11806:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 928872);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11808;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5480} $p1 := external_alloc();
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const drm_get_pci_dev: ref;

axiom drm_get_pci_dev == $sub.ref(0, 929904);

procedure drm_get_pci_dev($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_get_pci_dev($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11811;

  corral_source_split_11811:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5481} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 5482} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_11812;

  corral_source_split_11812:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vmw_pm_prepare: ref;

axiom vmw_pm_prepare == $sub.ref(0, 930936);

procedure vmw_pm_prepare($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed, $M.2, $M.6, $M.11, $M.12, $CurrAddr, $M.3, $M.4, $M.10, $M.13, $M.16;



implementation vmw_pm_prepare($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i8;
  var $i20: i1;
  var $i21: i1;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i8;
  var $i32: i1;
  var $i33: i1;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $i38: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5483} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i1);
    goto corral_source_split_11815;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 144);
    call {:si_unique_call 5484} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i2);
    goto corral_source_split_11816;

  corral_source_split_11816:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_11817;

  corral_source_split_11817:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i32($p3);
    call {:si_unique_call 5485} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i4);
    goto corral_source_split_11818;

  corral_source_split_11818:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_11819;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i4);
    goto corral_source_split_11820;

  corral_source_split_11820:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, $i6);
    goto corral_source_split_11821;

  corral_source_split_11821:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p5, $mul.ref($i7, 1));
    goto corral_source_split_11822;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_11823;

  corral_source_split_11823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5486} $p10 := pci_get_drvdata($p9);
    goto corral_source_split_11824;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_11825;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5487} $p12 := vmw_priv($p11);
    goto corral_source_split_11826;

  corral_source_split_11826:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    call {:si_unique_call 5488} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i13);
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 134656);
    call {:si_unique_call 5489} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i14);
    goto corral_source_split_11828;

  corral_source_split_11828:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_11829;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 1);
    goto corral_source_split_11830;

  corral_source_split_11830:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p12);
    call {:si_unique_call 5490} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i16);
    goto corral_source_split_11831;

  corral_source_split_11831:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 134378);
    call {:si_unique_call 5491} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i17);
    goto corral_source_split_11832;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_11833;

  corral_source_split_11833:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_11834;

  corral_source_split_11834:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_11835;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p12);
    call {:si_unique_call 5493} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i22);
    goto corral_source_split_11841;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 134736);
    call {:si_unique_call 5494} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i23);
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_11843;

  corral_source_split_11843:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    call {:si_unique_call 5495} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i25);
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_11845;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_11864;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_11847;

  corral_source_split_11847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5496} vslice_dummy_var_220 := printk.ref(.str.193);
    goto corral_source_split_11848;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p12);
    call {:si_unique_call 5497} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i28);
    goto corral_source_split_11849;

  corral_source_split_11849:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 134378);
    call {:si_unique_call 5498} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i29);
    goto corral_source_split_11850;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_11851;

  corral_source_split_11851:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_11852;

  corral_source_split_11852:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_11853;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p12);
    call {:si_unique_call 5500} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i35);
    goto corral_source_split_11859;

  corral_source_split_11859:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 134656);
    call {:si_unique_call 5501} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i36);
    goto corral_source_split_11860;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i36);
    goto corral_source_split_11861;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, 0);
    goto corral_source_split_11862;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 16);
    goto $bb9;

  $bb6:
    assume $i32 == 1;
    goto corral_source_split_11855;

  corral_source_split_11855:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1(1);
    goto corral_source_split_11856;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5499} vslice_dummy_var_221 := vmw_3d_resource_inc($p12, $i33);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_706:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_11837;

  corral_source_split_11837:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1(1);
    goto corral_source_split_11838;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5492} vmw_3d_resource_dec($p12, $i21);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    goto corral_source_split_11839;

  corral_source_split_11839:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_703:
    assume !assertsPassed;
    return;
}



const vmw_pm_complete: ref;

axiom vmw_pm_complete == $sub.ref(0, 931968);

procedure vmw_pm_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed, $M.2, $M.6, $M.11, $M.12, $CurrAddr, $M.3, $M.4, $M.10, $M.13, $M.16;



implementation vmw_pm_complete($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i8;
  var $i17: i1;
  var $i18: i1;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var vslice_dummy_var_222: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11866;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5502} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i1);
    goto corral_source_split_11867;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 144);
    call {:si_unique_call 5503} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i2);
    goto corral_source_split_11868;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_11869;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i32($p3);
    call {:si_unique_call 5504} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i4);
    goto corral_source_split_11870;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_11871;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i4);
    goto corral_source_split_11872;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, $i6);
    goto corral_source_split_11873;

  corral_source_split_11873:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p5, $mul.ref($i7, 1));
    goto corral_source_split_11874;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_11875;

  corral_source_split_11875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5505} $p10 := pci_get_drvdata($p9);
    goto corral_source_split_11876;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_11877;

  corral_source_split_11877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5506} $p12 := vmw_priv($p11);
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    call {:si_unique_call 5507} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i13);
    goto corral_source_split_11879;

  corral_source_split_11879:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 134378);
    call {:si_unique_call 5508} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i14);
    goto corral_source_split_11880;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_11881;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_11882;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_11883;

  corral_source_split_11883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p12);
    call {:si_unique_call 5510} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i20);
    goto corral_source_split_11889;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 134656);
    call {:si_unique_call 5511} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i21);
    goto corral_source_split_11890;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_11891;

  corral_source_split_11891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_11885;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1(0);
    goto corral_source_split_11886;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5509} vslice_dummy_var_222 := vmw_3d_resource_inc($p12, $i18);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    goto corral_source_split_11887;

  corral_source_split_11887:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_709:
    assume !assertsPassed;
    return;
}



const vmw_pm_suspend: ref;

axiom vmw_pm_suspend == $sub.ref(0, 933000);

procedure vmw_pm_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vmw_pm_suspend($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5512} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i1);
    goto corral_source_split_11895;

  corral_source_split_11895:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 144);
    call {:si_unique_call 5513} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i2);
    goto corral_source_split_11896;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_11897;

  corral_source_split_11897:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i32($p3);
    call {:si_unique_call 5514} {:cexpr "__cil_tmp10"} boogie_si_record_i32($i4);
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_11899;

  corral_source_split_11899:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i4);
    goto corral_source_split_11900;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, $i6);
    goto corral_source_split_11901;

  corral_source_split_11901:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p5, $mul.ref($i7, 1));
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_11903;

  corral_source_split_11903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5515} $i10 := vmw_pci_suspend($p9, 0);
    call {:si_unique_call 5516} {:cexpr "tmp___7"} boogie_si_record_i32($i10);
    goto corral_source_split_11904;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const vmw_pm_resume: ref;

axiom vmw_pm_resume == $sub.ref(0, 934032);

procedure vmw_pm_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vmw_pm_resume($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11906;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5517} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i1);
    goto corral_source_split_11907;

  corral_source_split_11907:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 144);
    call {:si_unique_call 5518} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i2);
    goto corral_source_split_11908;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_11909;

  corral_source_split_11909:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i32($p3);
    call {:si_unique_call 5519} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i4);
    goto corral_source_split_11910;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_11911;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i4);
    goto corral_source_split_11912;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, $i6);
    goto corral_source_split_11913;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p5, $mul.ref($i7, 1));
    goto corral_source_split_11914;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_11915;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5520} $i10 := vmw_pci_resume($p9);
    call {:si_unique_call 5521} {:cexpr "tmp___7"} boogie_si_record_i32($i10);
    goto corral_source_split_11916;

  corral_source_split_11916:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const vmw_pci_resume: ref;

axiom vmw_pci_resume == $sub.ref(0, 935064);

procedure vmw_pci_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vmw_pci_resume($p0: ref) returns ($r: i32)
{
  var $i2: i32;
  var vslice_dummy_var_223: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11918;

  corral_source_split_11918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5522} vslice_dummy_var_223 := pci_set_power_state($p0, 0);
    goto corral_source_split_11919;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5523} pci_restore_state($p0);
    goto corral_source_split_11920;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5524} $i2 := pci_enable_device($p0);
    call {:si_unique_call 5525} {:cexpr "tmp___7"} boogie_si_record_i32($i2);
    goto corral_source_split_11921;

  corral_source_split_11921:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_set_power_state: ref;

axiom pci_set_power_state == $sub.ref(0, 936096);

procedure pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5526} {:cexpr "pci_set_power_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_11923;

  corral_source_split_11923:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5527} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 5528} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11924;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_restore_state: ref;

axiom pci_restore_state == $sub.ref(0, 937128);

procedure pci_restore_state($p0: ref);
  free requires assertsPassed;



implementation pci_restore_state($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11926;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 938160);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11928;

  corral_source_split_11928:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5529} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5530} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_11929;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vmw_pci_suspend: ref;

axiom vmw_pci_suspend == $sub.ref(0, 939192);

procedure vmw_pci_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vmw_pci_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var vslice_dummy_var_224: i32;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5531} {:cexpr "vmw_pci_suspend:arg:state_event10"} boogie_si_record_i32($i1);
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5532} $p2 := pci_get_drvdata($p0);
    goto corral_source_split_11932;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_11933;

  corral_source_split_11933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5533} $p4 := vmw_priv($p3);
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    call {:si_unique_call 5534} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i5);
    goto corral_source_split_11935;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 134736);
    call {:si_unique_call 5535} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i6);
    goto corral_source_split_11936;

  corral_source_split_11936:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_11937;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 5536} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i8);
    goto corral_source_split_11938;

  corral_source_split_11938:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_11939;

  corral_source_split_11939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5538} vslice_dummy_var_225 := pci_save_state($p0);
    goto corral_source_split_11946;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5539} pci_disable_device($p0);
    goto corral_source_split_11947;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5540} vslice_dummy_var_226 := pci_set_power_state($p0, 3);
    goto corral_source_split_11948;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11944;

  corral_source_split_11944:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_11941;

  corral_source_split_11941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5537} vslice_dummy_var_224 := printk.ref(.str.193);
    goto corral_source_split_11942;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 16);
    goto $bb3;
}



const pci_save_state: ref;

axiom pci_save_state == $sub.ref(0, 940224);

procedure pci_save_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_save_state($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11950;

  corral_source_split_11950:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5541} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5542} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_11951;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 941256);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11953;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    return;
}



const vmw_fb_check_var: ref;

axiom vmw_fb_check_var == $sub.ref(0, 942288);

procedure vmw_fb_check_var($p0: ref, $p1: ref) returns ($r: i32);



const vmw_fb_setcolreg: ref;

axiom vmw_fb_setcolreg == $sub.ref(0, 943320);

procedure vmw_fb_setcolreg($i0: i32, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32);



const vmw_fb_blank: ref;

axiom vmw_fb_blank == $sub.ref(0, 944352);

procedure vmw_fb_blank($i0: i32, $p1: ref) returns ($r: i32);



const vmw_fb_pan_display: ref;

axiom vmw_fb_pan_display == $sub.ref(0, 945384);

procedure vmw_fb_pan_display($p0: ref, $p1: ref) returns ($r: i32);



const vmw_fb_fillrect: ref;

axiom vmw_fb_fillrect == $sub.ref(0, 946416);

procedure vmw_fb_fillrect($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vmw_fb_fillrect($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11955;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5543} cfb_fillrect($p0, $p1);
    goto corral_source_split_11956;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 5544} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_11957;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 1160);
    call {:si_unique_call 5545} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i3);
    goto corral_source_split_11958;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_11959;

  corral_source_split_11959:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_11960;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_11961;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_11962;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 5546} {:cexpr "__cil_tmp7"} boogie_si_record_i32($i8);
    goto corral_source_split_11963;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    call {:si_unique_call 5547} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i9);
    goto corral_source_split_11964;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 4);
    call {:si_unique_call 5548} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i10);
    goto corral_source_split_11965;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_11966;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 5549} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i12);
    goto corral_source_split_11967;

  corral_source_split_11967:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    call {:si_unique_call 5550} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i13);
    goto corral_source_split_11968;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 8);
    call {:si_unique_call 5551} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i14);
    goto corral_source_split_11969;

  corral_source_split_11969:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_11970;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    call {:si_unique_call 5552} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i16);
    goto corral_source_split_11971;

  corral_source_split_11971:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p1);
    call {:si_unique_call 5553} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i17);
    goto corral_source_split_11972;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 12);
    call {:si_unique_call 5554} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i18);
    goto corral_source_split_11973;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_11974;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    call {:si_unique_call 5555} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i20);
    goto corral_source_split_11975;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5556} vmw_fb_dirty_mark($p6, $i8, $i12, $i16, $i20);
    goto corral_source_split_11976;

  corral_source_split_11976:
    assume {:verifier.code 0} true;
    return;
}



const vmw_fb_copyarea: ref;

axiom vmw_fb_copyarea == $sub.ref(0, 947448);

procedure vmw_fb_copyarea($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vmw_fb_copyarea($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5557} cfb_copyarea($p0, $p1);
    goto corral_source_split_11979;

  corral_source_split_11979:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 5558} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_11980;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 1160);
    call {:si_unique_call 5559} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i3);
    goto corral_source_split_11981;

  corral_source_split_11981:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_11982;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_11984;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_11985;

  corral_source_split_11985:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 5560} {:cexpr "__cil_tmp7"} boogie_si_record_i32($i8);
    goto corral_source_split_11986;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    call {:si_unique_call 5561} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i9);
    goto corral_source_split_11987;

  corral_source_split_11987:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 4);
    call {:si_unique_call 5562} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i10);
    goto corral_source_split_11988;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_11989;

  corral_source_split_11989:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 5563} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i12);
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    call {:si_unique_call 5564} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i13);
    goto corral_source_split_11991;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 8);
    call {:si_unique_call 5565} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i14);
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_11993;

  corral_source_split_11993:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    call {:si_unique_call 5566} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i16);
    goto corral_source_split_11994;

  corral_source_split_11994:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p1);
    call {:si_unique_call 5567} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i17);
    goto corral_source_split_11995;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 12);
    call {:si_unique_call 5568} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i18);
    goto corral_source_split_11996;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_11997;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    call {:si_unique_call 5569} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i20);
    goto corral_source_split_11998;

  corral_source_split_11998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5570} vmw_fb_dirty_mark($p6, $i8, $i12, $i16, $i20);
    goto corral_source_split_11999;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    return;
}



const vmw_fb_imageblit: ref;

axiom vmw_fb_imageblit == $sub.ref(0, 948480);

procedure vmw_fb_imageblit($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vmw_fb_imageblit($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12001;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5571} cfb_imageblit($p0, $p1);
    goto corral_source_split_12002;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 5572} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_12003;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 1160);
    call {:si_unique_call 5573} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i3);
    goto corral_source_split_12004;

  corral_source_split_12004:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_12005;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_12006;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_12007;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_12008;

  corral_source_split_12008:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 5574} {:cexpr "__cil_tmp7"} boogie_si_record_i32($i8);
    goto corral_source_split_12009;

  corral_source_split_12009:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    call {:si_unique_call 5575} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i9);
    goto corral_source_split_12010;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 4);
    call {:si_unique_call 5576} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i10);
    goto corral_source_split_12011;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_12012;

  corral_source_split_12012:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 5577} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i12);
    goto corral_source_split_12013;

  corral_source_split_12013:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    call {:si_unique_call 5578} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i13);
    goto corral_source_split_12014;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 8);
    call {:si_unique_call 5579} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i14);
    goto corral_source_split_12015;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_12016;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    call {:si_unique_call 5580} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i16);
    goto corral_source_split_12017;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p1);
    call {:si_unique_call 5581} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i17);
    goto corral_source_split_12018;

  corral_source_split_12018:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 12);
    call {:si_unique_call 5582} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i18);
    goto corral_source_split_12019;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_12020;

  corral_source_split_12020:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    call {:si_unique_call 5583} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i20);
    goto corral_source_split_12021;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5584} vmw_fb_dirty_mark($p6, $i8, $i12, $i16, $i20);
    goto corral_source_split_12022;

  corral_source_split_12022:
    assume {:verifier.code 0} true;
    return;
}



const cfb_imageblit: ref;

axiom cfb_imageblit == $sub.ref(0, 949512);

procedure cfb_imageblit($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation cfb_imageblit($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12024;

  corral_source_split_12024:
    assume {:verifier.code 0} true;
    return;
}



const cfb_copyarea: ref;

axiom cfb_copyarea == $sub.ref(0, 950544);

procedure cfb_copyarea($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation cfb_copyarea($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12026;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    return;
}



const cfb_fillrect: ref;

axiom cfb_fillrect == $sub.ref(0, 951576);

procedure cfb_fillrect($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation cfb_fillrect($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12028;

  corral_source_split_12028:
    assume {:verifier.code 0} true;
    return;
}



const vmw_ttm_bind: ref;

axiom vmw_ttm_bind == $sub.ref(0, 952608);

procedure vmw_ttm_bind($p0: ref, $p1: ref) returns ($r: i32);



const vmw_ttm_unbind: ref;

axiom vmw_ttm_unbind == $sub.ref(0, 953640);

procedure vmw_ttm_unbind($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed, $M.2, $CurrAddr, $M.3, $M.4, $M.6, $M.11, $M.12, $M.13, $M.10, $M.16;



implementation vmw_ttm_unbind($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12030;

  corral_source_split_12030:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_12031;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i32($p1);
    call {:si_unique_call 5585} {:cexpr "__cil_tmp6"} boogie_si_record_i32($i2);
    goto corral_source_split_12032;

  corral_source_split_12032:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i2);
    goto corral_source_split_12034;

  corral_source_split_12034:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, $i4);
    goto corral_source_split_12035;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 1));
    goto corral_source_split_12036;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_12037;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    call {:si_unique_call 5586} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i8);
    goto corral_source_split_12038;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 80);
    call {:si_unique_call 5587} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i9);
    goto corral_source_split_12039;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_12040;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_12041;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p7);
    call {:si_unique_call 5588} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i12);
    goto corral_source_split_12042;

  corral_source_split_12042:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 88);
    call {:si_unique_call 5589} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i13);
    goto corral_source_split_12043;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_12044;

  corral_source_split_12044:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    call {:si_unique_call 5590} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i15);
    goto corral_source_split_12045;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5591} vmw_gmr_unbind($p11, $i15);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    goto corral_source_split_12046;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_712:
    assume !assertsPassed;
    return;
}



const vmw_ttm_destroy: ref;

axiom vmw_ttm_destroy == $sub.ref(0, 954672);

procedure vmw_ttm_destroy($p0: ref);
  free requires assertsPassed;



implementation vmw_ttm_destroy($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12048;

  corral_source_split_12048:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_12049;

  corral_source_split_12049:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i32($p1);
    call {:si_unique_call 5592} {:cexpr "__cil_tmp6"} boogie_si_record_i32($i2);
    goto corral_source_split_12050;

  corral_source_split_12050:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_12051;

  corral_source_split_12051:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i2);
    goto corral_source_split_12052;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, $i4);
    goto corral_source_split_12053;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 1));
    goto corral_source_split_12054;

  corral_source_split_12054:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_12055;

  corral_source_split_12055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5593} ttm_tt_fini($p0);
    goto corral_source_split_12056;

  corral_source_split_12056:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_12057;

  corral_source_split_12057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5594} kfree($p8);
    goto corral_source_split_12058;

  corral_source_split_12058:
    assume {:verifier.code 0} true;
    return;
}



const ttm_tt_fini: ref;

axiom ttm_tt_fini == $sub.ref(0, 955704);

procedure ttm_tt_fini($p0: ref);
  free requires assertsPassed;



implementation ttm_tt_fini($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12060;

  corral_source_split_12060:
    assume {:verifier.code 0} true;
    return;
}



const vmw_gmr_unbind: ref;

axiom vmw_gmr_unbind == $sub.ref(0, 956736);

procedure vmw_gmr_unbind($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, assertsPassed, $M.2, $CurrAddr, $M.3, $M.4, $M.6, $M.11, $M.12, $M.13, $M.10, $M.16;



implementation vmw_gmr_unbind($p0: ref, $i1: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5595} {:cexpr "vmw_gmr_unbind:arg:gmr_id"} boogie_si_record_i32($i1);
    goto corral_source_split_12062;

  corral_source_split_12062:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 5596} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_12063;

  corral_source_split_12063:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 2156);
    call {:si_unique_call 5597} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_12064;

  corral_source_split_12064:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_12065;

  corral_source_split_12065:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 5598} {:cexpr "__cil_tmp6"} boogie_si_record_i32($i5);
    goto corral_source_split_12066;

  corral_source_split_12066:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 4194304);
    call {:si_unique_call 5599} {:cexpr "__cil_tmp7"} boogie_si_record_i32($i6);
    goto corral_source_split_12067;

  corral_source_split_12067:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_12068;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    $i8 := $xor.i1($i7, 1);
    goto corral_source_split_12069;

  corral_source_split_12069:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 5600} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i9);
    goto corral_source_split_12070;

  corral_source_split_12070:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_12071;

  corral_source_split_12071:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_12072;

  corral_source_split_12072:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 5601} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i12);
    goto corral_source_split_12073;

  corral_source_split_12073:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    call {:si_unique_call 5602} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i13);
    goto corral_source_split_12074;

  corral_source_split_12074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5603} $i14 := ldv__builtin_expect($i13, 1);
    call {:si_unique_call 5604} {:cexpr "tmp___7"} boogie_si_record_i64($i14);
    goto corral_source_split_12075;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_12076;

  corral_source_split_12076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p0);
    call {:si_unique_call 5606} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i16);
    goto corral_source_split_12081;

  corral_source_split_12081:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 2184);
    call {:si_unique_call 5607} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i17);
    goto corral_source_split_12082;

  corral_source_split_12082:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_12083;

  corral_source_split_12083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5608} mutex_lock($p18);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    call {:si_unique_call 5609} {:cexpr "vmw_gmr_unbind:arg:__cil_tmp14"} boogie_si_record_i32($i1);
    goto corral_source_split_12084;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5610} vmw_write($p0, 41, $i1);
    call {:si_unique_call 5611} devirtbounce.1(0);
    goto corral_source_split_12085;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5612} vmw_write($p0, 42, 0);
    call {:si_unique_call 5613} devirtbounce.1(0);
    goto corral_source_split_12086;

  corral_source_split_12086:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    call {:si_unique_call 5614} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i19);
    goto corral_source_split_12087;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 2184);
    call {:si_unique_call 5615} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i20);
    goto corral_source_split_12088;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_12089;

  corral_source_split_12089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5616} mutex_unlock($p21);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    goto corral_source_split_12090;

  corral_source_split_12090:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  SeqInstr_718:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_12078;

  corral_source_split_12078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5605} vmw_gmr2_unbind($p0, $i1);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    goto corral_source_split_12079;

  corral_source_split_12079:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_715:
    assume !assertsPassed;
    return;
}



const vmw_gmr2_unbind: ref;

axiom vmw_gmr2_unbind == $sub.ref(0, 957768);

procedure vmw_gmr2_unbind($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $CurrAddr, assertsPassed, $M.3, $M.4, $M.6, $M.11, $M.12, $M.13, $M.10, $M.16;



implementation vmw_gmr2_unbind($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var vslice_dummy_var_227: i32;
  var vslice_dummy_var_228: ref;
  var vslice_dummy_var_229: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 5617} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 5618} {:cexpr "vmw_gmr2_unbind:arg:gmr_id"} boogie_si_record_i32($i1);
    goto corral_source_split_12092;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32(12);
    call {:si_unique_call 5619} {:cexpr "define_size"} boogie_si_record_i32($i3);
    goto corral_source_split_12093;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5620} $p4 := vmw_fifo_reserve($p0, $i3);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    goto corral_source_split_12094;

  corral_source_split_12094:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_12095;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5621} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i6);
    goto corral_source_split_12096;

  corral_source_split_12096:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p5);
    call {:si_unique_call 5622} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i7);
    goto corral_source_split_12097;

  corral_source_split_12097:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, $i6);
    goto corral_source_split_12098;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 5623} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i9);
    goto corral_source_split_12099;

  corral_source_split_12099:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_12100;

  corral_source_split_12100:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_12101;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 5624} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i12);
    goto corral_source_split_12102;

  corral_source_split_12102:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_12103;

  corral_source_split_12103:
    assume {:verifier.code 0} true;
    $i14 := $xor.i1($i13, 1);
    goto corral_source_split_12104;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    call {:si_unique_call 5625} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i15);
    goto corral_source_split_12105;

  corral_source_split_12105:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    call {:si_unique_call 5626} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i16);
    goto corral_source_split_12106;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5627} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 5628} {:cexpr "tmp___8"} boogie_si_record_i64($i17);
    goto corral_source_split_12107;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_12108;

  corral_source_split_12108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p2);
    goto corral_source_split_12113;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i1);
    goto corral_source_split_12114;

  corral_source_split_12114:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p2);
    goto corral_source_split_12115;

  corral_source_split_12115:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 4);
    call {:si_unique_call 5630} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i22);
    goto corral_source_split_12116;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_12117;

  corral_source_split_12117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    goto corral_source_split_12118;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p5, $mul.ref(1, 4));
    goto corral_source_split_12119;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 41);
    goto corral_source_split_12120;

  corral_source_split_12120:
    assume {:verifier.code 0} true;
    $i25 := $uge.i64(8, 64);
    goto corral_source_split_12121;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    goto corral_source_split_12128;

  corral_source_split_12128:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p24);
    goto corral_source_split_12129;

  corral_source_split_12129:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p2);
    goto corral_source_split_12130;

  corral_source_split_12130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5632} vslice_dummy_var_229 := memcpy($p29, $p30, 8);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5633} vmw_fifo_commit($p0, $i3);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    goto corral_source_split_12132;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_12123;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p24);
    goto corral_source_split_12124;

  corral_source_split_12124:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p2);
    goto corral_source_split_12125;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5631} vslice_dummy_var_228 := memcpy($p26, $p27, 8);
    goto corral_source_split_12126;

  corral_source_split_12126:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5629} vslice_dummy_var_227 := drm_err.ref.ref(.str.162, .str.163);
    goto corral_source_split_12111;

  corral_source_split_12111:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_724:
    assume !assertsPassed;
    return;
}



const vmw_gmr_bind: ref;

axiom vmw_gmr_bind == $sub.ref(0, 958800);

procedure vmw_gmr_bind($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i32);



const vmw_gmr2_bind: ref;

axiom vmw_gmr2_bind == $sub.ref(0, 959832);

procedure vmw_gmr2_bind($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i32);



const vmw_gmr_count_descriptors: ref;

axiom vmw_gmr_count_descriptors == $sub.ref(0, 960864);

procedure vmw_gmr_count_descriptors($p0: ref, $i1: i64) returns ($r: i64);



const vmw_gmr_build_descriptors: ref;

axiom vmw_gmr_build_descriptors == $sub.ref(0, 961896);

procedure vmw_gmr_build_descriptors($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const vmw_gmr_fire_descriptors: ref;

axiom vmw_gmr_fire_descriptors == $sub.ref(0, 962928);

procedure vmw_gmr_fire_descriptors($p0: ref, $i1: i32, $p2: ref);



const vmw_gmr_free_descriptors: ref;

axiom vmw_gmr_free_descriptors == $sub.ref(0, 963960);

procedure vmw_gmr_free_descriptors($p0: ref);



const __free_pages: ref;

axiom __free_pages == $sub.ref(0, 964992);

procedure __free_pages($p0: ref, $i1: i32);



const alloc_pages: ref;

axiom alloc_pages == $sub.ref(0, 966024);

procedure alloc_pages($i0: i32, $i1: i32) returns ($r: ref);



const __kunmap_atomic: ref;

axiom __kunmap_atomic == $sub.ref(0, 967056);

procedure __kunmap_atomic($p0: ref);



const kmap_atomic: ref;

axiom kmap_atomic == $sub.ref(0, 968088);

procedure kmap_atomic($p0: ref) returns ($r: ref);



const pagefault_disable: ref;

axiom pagefault_disable == $sub.ref(0, 969120);

procedure pagefault_disable();



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 970152);

procedure current_thread_info() returns ($r: ref);



const __bad_percpu_size: ref;

axiom __bad_percpu_size == $sub.ref(0, 971184);

procedure __bad_percpu_size();



const pagefault_enable: ref;

axiom pagefault_enable == $sub.ref(0, 972216);

procedure pagefault_enable();



const alloc_pages_current: ref;

axiom alloc_pages_current == $sub.ref(0, 973248);

procedure alloc_pages_current($i0: i32, $i1: i32) returns ($r: ref);



const vmw_du_connector_dpms: ref;

axiom vmw_du_connector_dpms == $sub.ref(0, 974280);

procedure vmw_du_connector_dpms($p0: ref, $i1: i32);



const vmw_du_connector_save: ref;

axiom vmw_du_connector_save == $sub.ref(0, 975312);

procedure vmw_du_connector_save($p0: ref);
  free requires assertsPassed;



implementation vmw_du_connector_save($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    return;
}



const vmw_du_connector_restore: ref;

axiom vmw_du_connector_restore == $sub.ref(0, 976344);

procedure vmw_du_connector_restore($p0: ref);
  free requires assertsPassed;



implementation vmw_du_connector_restore($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12136;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    return;
}



const vmw_du_connector_fill_modes: ref;

axiom vmw_du_connector_fill_modes == $sub.ref(0, 977376);

procedure vmw_du_connector_fill_modes($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const vmw_du_connector_set_property: ref;

axiom vmw_du_connector_set_property == $sub.ref(0, 978408);

procedure vmw_du_connector_set_property($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const vmw_ldu_connector_destroy: ref;

axiom vmw_ldu_connector_destroy == $sub.ref(0, 979440);

procedure vmw_ldu_connector_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation vmw_ldu_connector_destroy($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12138;

  corral_source_split_12138:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5634} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i1);
    goto corral_source_split_12139;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 616);
    call {:si_unique_call 5635} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
    goto corral_source_split_12140;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_12141;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i32($p3);
    call {:si_unique_call 5636} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i4);
    goto corral_source_split_12142;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_12143;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i4);
    goto corral_source_split_12144;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, $i6);
    goto corral_source_split_12145;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p5, $mul.ref($i7, 1));
    goto corral_source_split_12146;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_12147;

  corral_source_split_12147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5637} vmw_ldu_destroy($p9);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    goto corral_source_split_12148;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_730:
    assume !assertsPassed;
    return;
}



const vmw_ldu_destroy: ref;

axiom vmw_ldu_destroy == $sub.ref(0, 980472);

procedure vmw_ldu_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation vmw_ldu_destroy($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12150;

  corral_source_split_12150:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 5638} {:cexpr "__cil_tmp2"} boogie_si_record_i64($i1);
    goto corral_source_split_12151;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 2072);
    call {:si_unique_call 5639} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_12152;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_12153;

  corral_source_split_12153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5640} list_del_init($p3);
    goto corral_source_split_12154;

  corral_source_split_12154:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_12155;

  corral_source_split_12155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5641} vmw_display_unit_cleanup($p4);
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    goto corral_source_split_12156;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_12157;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5642} kfree($p5);
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_733:
    assume !assertsPassed;
    return;
}



const vmw_display_unit_cleanup: ref;

axiom vmw_display_unit_cleanup == $sub.ref(0, 981504);

procedure vmw_display_unit_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation vmw_display_unit_cleanup($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12160;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 5643} {:cexpr "__cil_tmp2"} boogie_si_record_i64($i1);
    goto corral_source_split_12161;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 1992);
    call {:si_unique_call 5644} {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
    goto corral_source_split_12162;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_12163;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_12164;

  corral_source_split_12164:
    assume {:verifier.code 0} true;
    $i5 := $ne.ref($p4, $0.ref);
    goto corral_source_split_12165;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    call {:si_unique_call 5648} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i9);
    goto corral_source_split_12173;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 2000);
    call {:si_unique_call 5649} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i10);
    goto corral_source_split_12174;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_12175;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_12176;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    $i13 := $ne.ref($p12, $0.ref);
    goto corral_source_split_12177;

  corral_source_split_12177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_12185;

  corral_source_split_12185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5653} drm_crtc_cleanup($p17);
    goto corral_source_split_12186;

  corral_source_split_12186:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p0);
    call {:si_unique_call 5654} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i18);
    goto corral_source_split_12187;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 544);
    call {:si_unique_call 5655} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i19);
    goto corral_source_split_12188;

  corral_source_split_12188:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_12189;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5656} drm_encoder_cleanup($p20);
    goto corral_source_split_12190;

  corral_source_split_12190:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    call {:si_unique_call 5657} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i21);
    goto corral_source_split_12191;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 616);
    call {:si_unique_call 5658} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i22);
    goto corral_source_split_12192;

  corral_source_split_12192:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_12193;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5659} drm_connector_cleanup($p23);
    goto corral_source_split_12194;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_12179;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    call {:si_unique_call 5650} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i14);
    goto corral_source_split_12180;

  corral_source_split_12180:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 2000);
    call {:si_unique_call 5651} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i15);
    goto corral_source_split_12181;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_12182;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5652} vmw_dmabuf_unreference($p16);
    goto corral_source_split_12183;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_12167;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 5645} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i6);
    goto corral_source_split_12168;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 1992);
    call {:si_unique_call 5646} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i7);
    goto corral_source_split_12169;

  corral_source_split_12169:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_12170;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5647} vmw_surface_unreference($p8);
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    goto corral_source_split_12171;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_736:
    assume !assertsPassed;
    return;
}



const drm_crtc_cleanup: ref;

axiom drm_crtc_cleanup == $sub.ref(0, 982536);

procedure drm_crtc_cleanup($p0: ref);
  free requires assertsPassed;



implementation drm_crtc_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12196;

  corral_source_split_12196:
    assume {:verifier.code 0} true;
    return;
}



const drm_encoder_cleanup: ref;

axiom drm_encoder_cleanup == $sub.ref(0, 983568);

procedure drm_encoder_cleanup($p0: ref);
  free requires assertsPassed;



implementation drm_encoder_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12198;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    return;
}



const drm_connector_cleanup: ref;

axiom drm_connector_cleanup == $sub.ref(0, 984600);

procedure drm_connector_cleanup($p0: ref);
  free requires assertsPassed;



implementation drm_connector_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12200;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    return;
}



const drm_mode_duplicate: ref;

axiom drm_mode_duplicate == $sub.ref(0, 985632);

procedure drm_mode_duplicate($p0: ref, $p1: ref) returns ($r: ref);



const vmw_guess_mode_timing: ref;

axiom vmw_guess_mode_timing == $sub.ref(0, 986664);

procedure vmw_guess_mode_timing($p0: ref);



const drm_mode_probed_add: ref;

axiom drm_mode_probed_add == $sub.ref(0, 987696);

procedure drm_mode_probed_add($p0: ref, $p1: ref);



const drm_mode_destroy: ref;

axiom drm_mode_destroy == $sub.ref(0, 988728);

procedure drm_mode_destroy($p0: ref, $p1: ref);



const drm_mode_vrefresh: ref;

axiom drm_mode_vrefresh == $sub.ref(0, 989760);

procedure drm_mode_vrefresh($p0: ref) returns ($r: i32);



const list_move: ref;

axiom list_move == $sub.ref(0, 990792);

procedure list_move($p0: ref, $p1: ref);



const drm_mode_connector_list_update: ref;

axiom drm_mode_connector_list_update == $sub.ref(0, 991824);

procedure drm_mode_connector_list_update($p0: ref);



const list_add: ref;

axiom list_add == $sub.ref(0, 992856);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12202;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_12203;

  corral_source_split_12203:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_12204;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5660} __list_add($p0, $p1, $p3);
    goto corral_source_split_12205;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    return;
}



const vmw_ldu_encoder_destroy: ref;

axiom vmw_ldu_encoder_destroy == $sub.ref(0, 993888);

procedure vmw_ldu_encoder_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation vmw_ldu_encoder_destroy($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12207;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5661} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i1);
    goto corral_source_split_12208;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 544);
    call {:si_unique_call 5662} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
    goto corral_source_split_12209;

  corral_source_split_12209:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_12210;

  corral_source_split_12210:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i32($p3);
    call {:si_unique_call 5663} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i4);
    goto corral_source_split_12211;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_12212;

  corral_source_split_12212:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i4);
    goto corral_source_split_12213;

  corral_source_split_12213:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, $i6);
    goto corral_source_split_12214;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p5, $mul.ref($i7, 1));
    goto corral_source_split_12215;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_12216;

  corral_source_split_12216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5664} vmw_ldu_destroy($p9);
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    goto corral_source_split_12217;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_739:
    assume !assertsPassed;
    return;
}



const vmw_du_crtc_save: ref;

axiom vmw_du_crtc_save == $sub.ref(0, 994920);

procedure vmw_du_crtc_save($p0: ref);
  free requires assertsPassed;



implementation vmw_du_crtc_save($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    return;
}



const vmw_du_crtc_restore: ref;

axiom vmw_du_crtc_restore == $sub.ref(0, 995952);

procedure vmw_du_crtc_restore($p0: ref);
  free requires assertsPassed;



implementation vmw_du_crtc_restore($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12221;

  corral_source_split_12221:
    assume {:verifier.code 0} true;
    return;
}



const vmw_du_crtc_cursor_set: ref;

axiom vmw_du_crtc_cursor_set == $sub.ref(0, 996984);

procedure vmw_du_crtc_cursor_set($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);



const vmw_du_crtc_cursor_move: ref;

axiom vmw_du_crtc_cursor_move == $sub.ref(0, 998016);

procedure vmw_du_crtc_cursor_move($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const vmw_du_crtc_gamma_set: ref;

axiom vmw_du_crtc_gamma_set == $sub.ref(0, 999048);

procedure vmw_du_crtc_gamma_set($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32);



const vmw_ldu_crtc_destroy: ref;

axiom vmw_ldu_crtc_destroy == $sub.ref(0, 1000080);

procedure vmw_ldu_crtc_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation vmw_ldu_crtc_destroy($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12223;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_12224;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i32($p1);
    call {:si_unique_call 5665} {:cexpr "__cil_tmp5"} boogie_si_record_i32($i2);
    goto corral_source_split_12225;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_12226;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i2);
    goto corral_source_split_12227;

  corral_source_split_12227:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, $i4);
    goto corral_source_split_12228;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 1));
    goto corral_source_split_12229;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5666} vmw_ldu_destroy($p7);
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    goto corral_source_split_12231;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_742:
    assume !assertsPassed;
    return;
}



const vmw_ldu_crtc_set_config: ref;

axiom vmw_ldu_crtc_set_config == $sub.ref(0, 1001112);

procedure vmw_ldu_crtc_set_config($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.11, $M.12, $M.2, $M.6, $M.10, assertsPassed, $M.16, $CurrAddr, $M.3, $M.4, $M.13;



implementation vmw_ldu_crtc_set_config($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $i73: i64;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $i81: i1;
  var $i82: i1;
  var $i83: i64;
  var $i84: i64;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i64;
  var $p89: ref;
  var $i90: i32;
  var $i91: i1;
  var $i92: i64;
  var $i93: i64;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $i97: i64;
  var $i98: i64;
  var $i99: i64;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $i103: i64;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $i107: i1;
  var $i109: i64;
  var $i110: i64;
  var $p111: ref;
  var $i112: i64;
  var $i113: i64;
  var $p114: ref;
  var $i115: i64;
  var $i116: i64;
  var $p117: ref;
  var $i118: i64;
  var $i119: i1;
  var $i120: i64;
  var $i121: i64;
  var $p122: ref;
  var $p123: ref;
  var $i124: i1;
  var $i125: i64;
  var $i126: i64;
  var $p127: ref;
  var $p128: ref;
  var $i129: i1;
  var $i130: i64;
  var $i131: i64;
  var $p133: ref;
  var $i134: i64;
  var $i135: i64;
  var $p137: ref;
  var $i138: i64;
  var $i139: i64;
  var $p141: ref;
  var $i143: i32;
  var $i144: i64;
  var $i145: i64;
  var $p146: ref;
  var $p147: ref;
  var $i148: i64;
  var $i149: i64;
  var $p150: ref;
  var $p151: ref;
  var $i152: i64;
  var $i153: i64;
  var $p154: ref;
  var $i155: i32;
  var $i156: i64;
  var $i157: i64;
  var $p158: ref;
  var $i159: i32;
  var $i160: i64;
  var $i161: i64;
  var $p162: ref;
  var $i163: i32;
  var $i164: i32;
  var $i165: i1;
  var $i167: i64;
  var $i168: i64;
  var $p169: ref;
  var $i170: i32;
  var $i171: i64;
  var $i172: i64;
  var $p173: ref;
  var $i174: i32;
  var $i175: i64;
  var $i176: i64;
  var $p177: ref;
  var $i178: i32;
  var $i179: i32;
  var $i180: i1;
  var $i183: i64;
  var $i184: i64;
  var $p185: ref;
  var $i186: i64;
  var $i187: i64;
  var $p188: ref;
  var $i189: i64;
  var $i190: i64;
  var $p191: ref;
  var $i192: i64;
  var $i193: i64;
  var $i194: i64;
  var $i195: i64;
  var $p196: ref;
  var $i197: i32;
  var $p198: ref;
  var $i199: i64;
  var $i200: i64;
  var $i201: i64;
  var $i202: i64;
  var $p203: ref;
  var $i204: i32;
  var $p205: ref;
  var $i206: i64;
  var $i207: i64;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $i212: i32;
  var $i2: i32;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var vslice_dummy_var_230: i32;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;
  var vslice_dummy_var_234: i32;
  var vslice_dummy_var_235: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12233;

  corral_source_split_12233:
    assume {:verifier.code 0} true;
    $i1 := $ne.ref($p0, $0.ref);
    goto corral_source_split_12234;

  corral_source_split_12234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12236;

  corral_source_split_12236:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12238;

  corral_source_split_12238:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 5667} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i3);
    goto corral_source_split_12240;

  corral_source_split_12240:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 24);
    call {:si_unique_call 5668} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i4);
    goto corral_source_split_12241;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_12242;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    $i7 := $ne.ref($p6, $0.ref);
    goto corral_source_split_12244;

  corral_source_split_12244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    goto corral_source_split_12246;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 5669} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i8);
    goto corral_source_split_12248;

  corral_source_split_12248:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 24);
    call {:si_unique_call 5670} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i9);
    goto corral_source_split_12249;

  corral_source_split_12249:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_12250;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_12251;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_12252;

  corral_source_split_12252:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i32($p12);
    call {:si_unique_call 5671} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i13);
    goto corral_source_split_12253;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p11);
    goto corral_source_split_12254;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i13);
    goto corral_source_split_12255;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    $i16 := $sub.i64(0, $i15);
    goto corral_source_split_12256;

  corral_source_split_12256:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p14, $mul.ref($i16, 1));
    goto corral_source_split_12257;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_12258;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    call {:si_unique_call 5672} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i19);
    goto corral_source_split_12259;

  corral_source_split_12259:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 16);
    call {:si_unique_call 5673} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i20);
    goto corral_source_split_12260;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_12261;

  corral_source_split_12261:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    $i23 := $ne.ref($p22, $0.ref);
    goto corral_source_split_12263;

  corral_source_split_12263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    goto corral_source_split_12278;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p35 := $0.ref;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_12280;

  corral_source_split_12280:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p11);
    goto corral_source_split_12281;

  corral_source_split_12281:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_12282;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5677} $p39 := vmw_priv($p38);
    goto corral_source_split_12283;

  corral_source_split_12283:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p0);
    call {:si_unique_call 5678} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i40);
    goto corral_source_split_12284;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 56);
    call {:si_unique_call 5679} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i41);
    goto corral_source_split_12285;

  corral_source_split_12285:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_12286;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    call {:si_unique_call 5680} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i43);
    goto corral_source_split_12287;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    $i44 := $ugt.i64($i43, 1);
    goto corral_source_split_12288;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p0);
    call {:si_unique_call 5682} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i46);
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 56);
    call {:si_unique_call 5683} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i47);
    goto corral_source_split_12294;

  corral_source_split_12294:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_12295;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    call {:si_unique_call 5684} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i49);
    goto corral_source_split_12296;

  corral_source_split_12296:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 1);
    goto corral_source_split_12297;

  corral_source_split_12297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p39);
    call {:si_unique_call 5696} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i73);
    goto corral_source_split_12325;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i73, 2608);
    call {:si_unique_call 5697} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i74);
    goto corral_source_split_12326;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    $p75 := $i2p.i64.ref($i74);
    goto corral_source_split_12327;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_12328;

  corral_source_split_12328:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    call {:si_unique_call 5698} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i77);
    goto corral_source_split_12329;

  corral_source_split_12329:
    assume {:verifier.code 0} true;
    $i78 := $add.i64($i77, 24);
    call {:si_unique_call 5699} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i78);
    goto corral_source_split_12330;

  corral_source_split_12330:
    assume {:verifier.code 0} true;
    $p79 := $i2p.i64.ref($i78);
    goto corral_source_split_12331;

  corral_source_split_12331:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_12332;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    $i81 := $ne.ref($p80, $0.ref);
    goto corral_source_split_12333;

  corral_source_split_12333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p18);
    call {:si_unique_call 5716} {:cexpr "__cil_tmp87"} boogie_si_record_i64($i109);
    goto corral_source_split_12375;

  corral_source_split_12375:
    assume {:verifier.code 0} true;
    $i110 := $add.i64($i109, 616);
    call {:si_unique_call 5717} {:cexpr "__cil_tmp88"} boogie_si_record_i64($i110);
    goto corral_source_split_12376;

  corral_source_split_12376:
    assume {:verifier.code 0} true;
    $p111 := $i2p.i64.ref($i110);
    goto corral_source_split_12377;

  corral_source_split_12377:
    assume {:verifier.code 0} true;
    $i112 := $p2i.ref.i64($p18);
    call {:si_unique_call 5718} {:cexpr "__cil_tmp90"} boogie_si_record_i64($i112);
    goto corral_source_split_12378;

  corral_source_split_12378:
    assume {:verifier.code 0} true;
    $i113 := $add.i64($i112, 544);
    call {:si_unique_call 5719} {:cexpr "__cil_tmp91"} boogie_si_record_i64($i113);
    goto corral_source_split_12379;

  corral_source_split_12379:
    assume {:verifier.code 0} true;
    $p114 := $i2p.i64.ref($i113);
    goto corral_source_split_12380;

  corral_source_split_12380:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p0);
    call {:si_unique_call 5720} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i115);
    goto corral_source_split_12381;

  corral_source_split_12381:
    assume {:verifier.code 0} true;
    $i116 := $add.i64($i115, 56);
    call {:si_unique_call 5721} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i116);
    goto corral_source_split_12382;

  corral_source_split_12382:
    assume {:verifier.code 0} true;
    $p117 := $i2p.i64.ref($i116);
    goto corral_source_split_12383;

  corral_source_split_12383:
    assume {:verifier.code 0} true;
    $i118 := $load.i64($M.0, $p117);
    call {:si_unique_call 5722} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i118);
    goto corral_source_split_12384;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    $i119 := $eq.i64($i118, 0);
    goto corral_source_split_12385;

  corral_source_split_12385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i119 == 1);
    goto corral_source_split_12389;

  corral_source_split_12389:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p0);
    call {:si_unique_call 5723} {:cexpr "__cil_tmp95"} boogie_si_record_i64($i120);
    goto corral_source_split_12390;

  corral_source_split_12390:
    assume {:verifier.code 0} true;
    $i121 := $add.i64($i120, 32);
    call {:si_unique_call 5724} {:cexpr "__cil_tmp96"} boogie_si_record_i64($i121);
    goto corral_source_split_12391;

  corral_source_split_12391:
    assume {:verifier.code 0} true;
    $p122 := $i2p.i64.ref($i121);
    goto corral_source_split_12392;

  corral_source_split_12392:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_12393;

  corral_source_split_12393:
    assume {:verifier.code 0} true;
    $i124 := $ne.ref($p123, $0.ref);
    goto corral_source_split_12394;

  corral_source_split_12394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i124 == 1);
    goto corral_source_split_12421;

  corral_source_split_12421:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i130 := $p2i.ref.i64($p111);
    call {:si_unique_call 5725} {:cexpr "__cil_tmp101"} boogie_si_record_i64($i130);
    goto corral_source_split_12396;

  corral_source_split_12396:
    assume {:verifier.code 0} true;
    $i131 := $add.i64($i130, 1208);
    call {:si_unique_call 5726} {:cexpr "__cil_tmp102"} boogie_si_record_i64($i131);
    goto corral_source_split_12397;

  corral_source_split_12397:
    assume {:verifier.code 0} true;
    goto corral_source_split_12398;

  corral_source_split_12398:
    assume {:verifier.code 0} true;
    $p133 := $i2p.i64.ref($i131);
    goto corral_source_split_12399;

  corral_source_split_12399:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p133, $0.ref);
    goto corral_source_split_12400;

  corral_source_split_12400:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p114);
    call {:si_unique_call 5727} {:cexpr "__cil_tmp104"} boogie_si_record_i64($i134);
    goto corral_source_split_12401;

  corral_source_split_12401:
    assume {:verifier.code 0} true;
    $i135 := $add.i64($i134, 48);
    call {:si_unique_call 5728} {:cexpr "__cil_tmp105"} boogie_si_record_i64($i135);
    goto corral_source_split_12402;

  corral_source_split_12402:
    assume {:verifier.code 0} true;
    goto corral_source_split_12403;

  corral_source_split_12403:
    assume {:verifier.code 0} true;
    $p137 := $i2p.i64.ref($i135);
    goto corral_source_split_12404;

  corral_source_split_12404:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p137, $0.ref);
    goto corral_source_split_12405;

  corral_source_split_12405:
    assume {:verifier.code 0} true;
    $i138 := $p2i.ref.i64($p11);
    call {:si_unique_call 5729} {:cexpr "__cil_tmp107"} boogie_si_record_i64($i138);
    goto corral_source_split_12406;

  corral_source_split_12406:
    assume {:verifier.code 0} true;
    $i139 := $add.i64($i138, 32);
    call {:si_unique_call 5730} {:cexpr "__cil_tmp108"} boogie_si_record_i64($i139);
    goto corral_source_split_12407;

  corral_source_split_12407:
    assume {:verifier.code 0} true;
    goto corral_source_split_12408;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    $p141 := $i2p.i64.ref($i139);
    goto corral_source_split_12409;

  corral_source_split_12409:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p141, $0.ref);
    goto corral_source_split_12410;

  corral_source_split_12410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5731} vslice_dummy_var_233 := vmw_ldu_del_active($p39, $p18);
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    goto corral_source_split_12411;

  corral_source_split_12411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5732} $i143 := vmw_ldu_commit_list($p39);
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    call {:si_unique_call 5733} {:cexpr "tmp___8"} boogie_si_record_i32($i143);
    goto corral_source_split_12412;

  corral_source_split_12412:
    assume {:verifier.code 0} true;
    $i2 := $i143;
    goto $bb3;

  SeqInstr_748:
    assume !assertsPassed;
    return;

  SeqInstr_745:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i124 == 1;
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p0);
    call {:si_unique_call 5734} {:cexpr "__cil_tmp98"} boogie_si_record_i64($i125);
    goto corral_source_split_12415;

  corral_source_split_12415:
    assume {:verifier.code 0} true;
    $i126 := $add.i64($i125, 16);
    call {:si_unique_call 5735} {:cexpr "__cil_tmp99"} boogie_si_record_i64($i126);
    goto corral_source_split_12416;

  corral_source_split_12416:
    assume {:verifier.code 0} true;
    $p127 := $i2p.i64.ref($i126);
    goto corral_source_split_12417;

  corral_source_split_12417:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_12418;

  corral_source_split_12418:
    assume {:verifier.code 0} true;
    $i129 := $ne.ref($p128, $0.ref);
    goto corral_source_split_12419;

  corral_source_split_12419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i129 == 1);
    goto corral_source_split_12423;

  corral_source_split_12423:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb41:
    assume $i129 == 1;
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i144 := $p2i.ref.i64($p0);
    call {:si_unique_call 5736} {:cexpr "__cil_tmp110"} boogie_si_record_i64($i144);
    goto corral_source_split_12425;

  corral_source_split_12425:
    assume {:verifier.code 0} true;
    $i145 := $add.i64($i144, 32);
    call {:si_unique_call 5737} {:cexpr "__cil_tmp111"} boogie_si_record_i64($i145);
    goto corral_source_split_12426;

  corral_source_split_12426:
    assume {:verifier.code 0} true;
    $p146 := $i2p.i64.ref($i145);
    goto corral_source_split_12427;

  corral_source_split_12427:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_12428;

  corral_source_split_12428:
    assume {:verifier.code 0} true;
    $i148 := $p2i.ref.i64($p0);
    call {:si_unique_call 5738} {:cexpr "__cil_tmp112"} boogie_si_record_i64($i148);
    goto corral_source_split_12429;

  corral_source_split_12429:
    assume {:verifier.code 0} true;
    $i149 := $add.i64($i148, 16);
    call {:si_unique_call 5739} {:cexpr "__cil_tmp113"} boogie_si_record_i64($i149);
    goto corral_source_split_12430;

  corral_source_split_12430:
    assume {:verifier.code 0} true;
    $p150 := $i2p.i64.ref($i149);
    goto corral_source_split_12431;

  corral_source_split_12431:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_12432;

  corral_source_split_12432:
    assume {:verifier.code 0} true;
    $i152 := $p2i.ref.i64($p151);
    call {:si_unique_call 5740} {:cexpr "__cil_tmp114"} boogie_si_record_i64($i152);
    goto corral_source_split_12433;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    $i153 := $add.i64($i152, 72);
    call {:si_unique_call 5741} {:cexpr "__cil_tmp115"} boogie_si_record_i64($i153);
    goto corral_source_split_12434;

  corral_source_split_12434:
    assume {:verifier.code 0} true;
    $p154 := $i2p.i64.ref($i153);
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    call {:si_unique_call 5742} {:cexpr "__cil_tmp116"} boogie_si_record_i32($i155);
    goto corral_source_split_12436;

  corral_source_split_12436:
    assume {:verifier.code 0} true;
    $i156 := $p2i.ref.i64($p147);
    call {:si_unique_call 5743} {:cexpr "__cil_tmp117"} boogie_si_record_i64($i156);
    goto corral_source_split_12437;

  corral_source_split_12437:
    assume {:verifier.code 0} true;
    $i157 := $add.i64($i156, 68);
    call {:si_unique_call 5744} {:cexpr "__cil_tmp118"} boogie_si_record_i64($i157);
    goto corral_source_split_12438;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    $p158 := $i2p.i64.ref($i157);
    goto corral_source_split_12439;

  corral_source_split_12439:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.0, $p158);
    call {:si_unique_call 5745} {:cexpr "__cil_tmp119"} boogie_si_record_i32($i159);
    goto corral_source_split_12440;

  corral_source_split_12440:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p0);
    call {:si_unique_call 5746} {:cexpr "__cil_tmp121"} boogie_si_record_i64($i160);
    goto corral_source_split_12441;

  corral_source_split_12441:
    assume {:verifier.code 0} true;
    $i161 := $add.i64($i160, 40);
    call {:si_unique_call 5747} {:cexpr "__cil_tmp122"} boogie_si_record_i64($i161);
    goto corral_source_split_12442;

  corral_source_split_12442:
    assume {:verifier.code 0} true;
    $p162 := $i2p.i64.ref($i161);
    goto corral_source_split_12443;

  corral_source_split_12443:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, $p162);
    call {:si_unique_call 5748} {:cexpr "__cil_tmp123"} boogie_si_record_i32($i163);
    goto corral_source_split_12444;

  corral_source_split_12444:
    assume {:verifier.code 0} true;
    $i164 := $add.i32($i163, $i159);
    call {:si_unique_call 5749} {:cexpr "__cil_tmp124"} boogie_si_record_i32($i164);
    goto corral_source_split_12445;

  corral_source_split_12445:
    assume {:verifier.code 0} true;
    $i165 := $ugt.i32($i164, $i155);
    goto corral_source_split_12446;

  corral_source_split_12446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i165 == 1);
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    $i167 := $p2i.ref.i64($p151);
    call {:si_unique_call 5751} {:cexpr "__cil_tmp125"} boogie_si_record_i64($i167);
    goto corral_source_split_12452;

  corral_source_split_12452:
    assume {:verifier.code 0} true;
    $i168 := $add.i64($i167, 76);
    call {:si_unique_call 5752} {:cexpr "__cil_tmp126"} boogie_si_record_i64($i168);
    goto corral_source_split_12453;

  corral_source_split_12453:
    assume {:verifier.code 0} true;
    $p169 := $i2p.i64.ref($i168);
    goto corral_source_split_12454;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    $i170 := $load.i32($M.0, $p169);
    call {:si_unique_call 5753} {:cexpr "__cil_tmp127"} boogie_si_record_i32($i170);
    goto corral_source_split_12455;

  corral_source_split_12455:
    assume {:verifier.code 0} true;
    $i171 := $p2i.ref.i64($p147);
    call {:si_unique_call 5754} {:cexpr "__cil_tmp128"} boogie_si_record_i64($i171);
    goto corral_source_split_12456;

  corral_source_split_12456:
    assume {:verifier.code 0} true;
    $i172 := $add.i64($i171, 88);
    call {:si_unique_call 5755} {:cexpr "__cil_tmp129"} boogie_si_record_i64($i172);
    goto corral_source_split_12457;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    $p173 := $i2p.i64.ref($i172);
    goto corral_source_split_12458;

  corral_source_split_12458:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.0, $p173);
    call {:si_unique_call 5756} {:cexpr "__cil_tmp130"} boogie_si_record_i32($i174);
    goto corral_source_split_12459;

  corral_source_split_12459:
    assume {:verifier.code 0} true;
    $i175 := $p2i.ref.i64($p0);
    call {:si_unique_call 5757} {:cexpr "__cil_tmp132"} boogie_si_record_i64($i175);
    goto corral_source_split_12460;

  corral_source_split_12460:
    assume {:verifier.code 0} true;
    $i176 := $add.i64($i175, 44);
    call {:si_unique_call 5758} {:cexpr "__cil_tmp133"} boogie_si_record_i64($i176);
    goto corral_source_split_12461;

  corral_source_split_12461:
    assume {:verifier.code 0} true;
    $p177 := $i2p.i64.ref($i176);
    goto corral_source_split_12462;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    $i178 := $load.i32($M.0, $p177);
    call {:si_unique_call 5759} {:cexpr "__cil_tmp134"} boogie_si_record_i32($i178);
    goto corral_source_split_12463;

  corral_source_split_12463:
    assume {:verifier.code 0} true;
    $i179 := $add.i32($i178, $i174);
    call {:si_unique_call 5760} {:cexpr "__cil_tmp135"} boogie_si_record_i32($i179);
    goto corral_source_split_12464;

  corral_source_split_12464:
    assume {:verifier.code 0} true;
    $i180 := $ugt.i32($i179, $i170);
    goto corral_source_split_12465;

  corral_source_split_12465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5762} vslice_dummy_var_236 := vmw_fb_off($p39);
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    goto corral_source_split_12470;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    $i183 := $p2i.ref.i64($p11);
    call {:si_unique_call 5763} {:cexpr "__cil_tmp136"} boogie_si_record_i64($i183);
    goto corral_source_split_12471;

  corral_source_split_12471:
    assume {:verifier.code 0} true;
    $i184 := $add.i64($i183, 32);
    call {:si_unique_call 5764} {:cexpr "__cil_tmp137"} boogie_si_record_i64($i184);
    goto corral_source_split_12472;

  corral_source_split_12472:
    assume {:verifier.code 0} true;
    $p185 := $i2p.i64.ref($i184);
    goto corral_source_split_12473;

  corral_source_split_12473:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p185, $p151);
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    $i186 := $p2i.ref.i64($p114);
    call {:si_unique_call 5765} {:cexpr "__cil_tmp138"} boogie_si_record_i64($i186);
    goto corral_source_split_12475;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    $i187 := $add.i64($i186, 48);
    call {:si_unique_call 5766} {:cexpr "__cil_tmp139"} boogie_si_record_i64($i187);
    goto corral_source_split_12476;

  corral_source_split_12476:
    assume {:verifier.code 0} true;
    $p188 := $i2p.i64.ref($i187);
    goto corral_source_split_12477;

  corral_source_split_12477:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p188, $p11);
    goto corral_source_split_12478;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    $i189 := $p2i.ref.i64($p111);
    call {:si_unique_call 5767} {:cexpr "__cil_tmp140"} boogie_si_record_i64($i189);
    goto corral_source_split_12479;

  corral_source_split_12479:
    assume {:verifier.code 0} true;
    $i190 := $add.i64($i189, 1208);
    call {:si_unique_call 5768} {:cexpr "__cil_tmp141"} boogie_si_record_i64($i190);
    goto corral_source_split_12480;

  corral_source_split_12480:
    assume {:verifier.code 0} true;
    $p191 := $i2p.i64.ref($i190);
    goto corral_source_split_12481;

  corral_source_split_12481:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p191, $p114);
    goto corral_source_split_12482;

  corral_source_split_12482:
    assume {:verifier.code 0} true;
    $i192 := $p2i.ref.i64($p11);
    call {:si_unique_call 5769} {:cexpr "__cil_tmp142"} boogie_si_record_i64($i192);
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    $i193 := $add.i64($i192, 480);
    call {:si_unique_call 5770} {:cexpr "__cil_tmp143"} boogie_si_record_i64($i193);
    goto corral_source_split_12484;

  corral_source_split_12484:
    assume {:verifier.code 0} true;
    $i194 := $p2i.ref.i64($p0);
    call {:si_unique_call 5771} {:cexpr "__cil_tmp144"} boogie_si_record_i64($i194);
    goto corral_source_split_12485;

  corral_source_split_12485:
    assume {:verifier.code 0} true;
    $i195 := $add.i64($i194, 40);
    call {:si_unique_call 5772} {:cexpr "__cil_tmp145"} boogie_si_record_i64($i195);
    goto corral_source_split_12486;

  corral_source_split_12486:
    assume {:verifier.code 0} true;
    $p196 := $i2p.i64.ref($i195);
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.0, $p196);
    call {:si_unique_call 5773} {:cexpr "__cil_tmp146"} boogie_si_record_i32($i197);
    goto corral_source_split_12488;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    $p198 := $i2p.i64.ref($i193);
    goto corral_source_split_12489;

  corral_source_split_12489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p198, $i197);
    goto corral_source_split_12490;

  corral_source_split_12490:
    assume {:verifier.code 0} true;
    $i199 := $p2i.ref.i64($p11);
    call {:si_unique_call 5774} {:cexpr "__cil_tmp147"} boogie_si_record_i64($i199);
    goto corral_source_split_12491;

  corral_source_split_12491:
    assume {:verifier.code 0} true;
    $i200 := $add.i64($i199, 484);
    call {:si_unique_call 5775} {:cexpr "__cil_tmp148"} boogie_si_record_i64($i200);
    goto corral_source_split_12492;

  corral_source_split_12492:
    assume {:verifier.code 0} true;
    $i201 := $p2i.ref.i64($p0);
    call {:si_unique_call 5776} {:cexpr "__cil_tmp149"} boogie_si_record_i64($i201);
    goto corral_source_split_12493;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    $i202 := $add.i64($i201, 44);
    call {:si_unique_call 5777} {:cexpr "__cil_tmp150"} boogie_si_record_i64($i202);
    goto corral_source_split_12494;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    $p203 := $i2p.i64.ref($i202);
    goto corral_source_split_12495;

  corral_source_split_12495:
    assume {:verifier.code 0} true;
    $i204 := $load.i32($M.0, $p203);
    call {:si_unique_call 5778} {:cexpr "__cil_tmp151"} boogie_si_record_i32($i204);
    goto corral_source_split_12496;

  corral_source_split_12496:
    assume {:verifier.code 0} true;
    $p205 := $i2p.i64.ref($i200);
    goto corral_source_split_12497;

  corral_source_split_12497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p205, $i204);
    goto corral_source_split_12498;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    $i206 := $p2i.ref.i64($p11);
    call {:si_unique_call 5779} {:cexpr "__cil_tmp152"} boogie_si_record_i64($i206);
    goto corral_source_split_12499;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    $i207 := $add.i64($i206, 48);
    call {:si_unique_call 5780} {:cexpr "__cil_tmp153"} boogie_si_record_i64($i207);
    goto corral_source_split_12500;

  corral_source_split_12500:
    assume {:verifier.code 0} true;
    $p208 := $i2p.i64.ref($i207);
    goto corral_source_split_12501;

  corral_source_split_12501:
    assume {:verifier.code 0} true;
    $p209 := $bitcast.ref.ref($p208);
    goto corral_source_split_12502;

  corral_source_split_12502:
    assume {:verifier.code 0} true;
    $p210 := $bitcast.ref.ref($p147);
    goto corral_source_split_12503;

  corral_source_split_12503:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_47 := $M.0;
    cmdloc_dummy_var_48 := $M.0;
    call {:si_unique_call 5781} cmdloc_dummy_var_49 := $memcpy.i8(cmdloc_dummy_var_47, cmdloc_dummy_var_48, $p209, $p210, 216, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_49;
    goto corral_source_split_12504;

  corral_source_split_12504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5782} vslice_dummy_var_237 := vmw_ldu_add_active($p39, $p18, $p35);
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    goto corral_source_split_12505;

  corral_source_split_12505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5783} $i212 := vmw_ldu_commit_list($p39);
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    call {:si_unique_call 5784} {:cexpr "tmp___9"} boogie_si_record_i32($i212);
    goto corral_source_split_12506;

  corral_source_split_12506:
    assume {:verifier.code 0} true;
    $i2 := $i212;
    goto $bb3;

  SeqInstr_757:
    assume !assertsPassed;
    return;

  SeqInstr_754:
    assume !assertsPassed;
    return;

  SeqInstr_751:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i180 == 1;
    goto corral_source_split_12467;

  corral_source_split_12467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5761} vslice_dummy_var_235 := drm_err.ref.ref(.str.271, .str.275);
    goto corral_source_split_12468;

  corral_source_split_12468:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 22);
    goto $bb3;

  $bb46:
    assume $i165 == 1;
    goto corral_source_split_12448;

  corral_source_split_12448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5750} vslice_dummy_var_234 := drm_err.ref.ref(.str.271, .str.275);
    goto corral_source_split_12449;

  corral_source_split_12449:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 22);
    goto $bb3;

  $bb36:
    assume $i119 == 1;
    goto corral_source_split_12387;

  corral_source_split_12387:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb20:
    assume $i81 == 1;
    goto corral_source_split_12335;

  corral_source_split_12335:
    assume {:verifier.code 0} true;
    $i82 := $ne.ref($p35, $0.ref);
    goto corral_source_split_12336;

  corral_source_split_12336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb22:
    assume $i82 == 1;
    goto corral_source_split_12338;

  corral_source_split_12338:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p39);
    call {:si_unique_call 5700} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i83);
    goto corral_source_split_12339;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    $i84 := $add.i64($i83, 2608);
    call {:si_unique_call 5701} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i84);
    goto corral_source_split_12340;

  corral_source_split_12340:
    assume {:verifier.code 0} true;
    $p85 := $i2p.i64.ref($i84);
    goto corral_source_split_12341;

  corral_source_split_12341:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_12342;

  corral_source_split_12342:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    call {:si_unique_call 5702} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i87);
    goto corral_source_split_12343;

  corral_source_split_12343:
    assume {:verifier.code 0} true;
    $i88 := $add.i64($i87, 16);
    call {:si_unique_call 5703} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i88);
    goto corral_source_split_12344;

  corral_source_split_12344:
    assume {:verifier.code 0} true;
    $p89 := $i2p.i64.ref($i88);
    goto corral_source_split_12345;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    call {:si_unique_call 5704} {:cexpr "__cil_tmp73"} boogie_si_record_i32($i90);
    goto corral_source_split_12346;

  corral_source_split_12346:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 1);
    goto corral_source_split_12347;

  corral_source_split_12347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i91 == 1);
    goto corral_source_split_12356;

  corral_source_split_12356:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p35);
    call {:si_unique_call 5709} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i97);
    goto corral_source_split_12360;

  corral_source_split_12360:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p39);
    call {:si_unique_call 5710} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i98);
    goto corral_source_split_12361;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    $i99 := $add.i64($i98, 2608);
    call {:si_unique_call 5711} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i99);
    goto corral_source_split_12362;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    $p100 := $i2p.i64.ref($i99);
    goto corral_source_split_12363;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_12364;

  corral_source_split_12364:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p101);
    call {:si_unique_call 5712} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i102);
    goto corral_source_split_12365;

  corral_source_split_12365:
    assume {:verifier.code 0} true;
    $i103 := $add.i64($i102, 24);
    call {:si_unique_call 5713} {:cexpr "__cil_tmp83"} boogie_si_record_i64($i103);
    goto corral_source_split_12366;

  corral_source_split_12366:
    assume {:verifier.code 0} true;
    $p104 := $i2p.i64.ref($i103);
    goto corral_source_split_12367;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_12368;

  corral_source_split_12368:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p105);
    call {:si_unique_call 5714} {:cexpr "__cil_tmp85"} boogie_si_record_i64($i106);
    goto corral_source_split_12369;

  corral_source_split_12369:
    assume {:verifier.code 0} true;
    $i107 := $ne.i64($i106, $i97);
    goto corral_source_split_12370;

  corral_source_split_12370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i107 == 1;
    goto corral_source_split_12372;

  corral_source_split_12372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5715} vslice_dummy_var_232 := drm_err.ref.ref(.str.271, .str.274);
    goto corral_source_split_12373;

  corral_source_split_12373:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 22);
    goto $bb3;

  $bb24:
    assume $i91 == 1;
    goto corral_source_split_12349;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p18);
    call {:si_unique_call 5705} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i92);
    goto corral_source_split_12350;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    $i93 := $add.i64($i92, 2072);
    call {:si_unique_call 5706} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i93);
    goto corral_source_split_12351;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    $p94 := $i2p.i64.ref($i93);
    goto corral_source_split_12352;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5707} $i95 := list_empty($p94);
    call {:si_unique_call 5708} {:cexpr "tmp___7"} boogie_si_record_i32($i95);
    goto corral_source_split_12353;

  corral_source_split_12353:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_12354;

  corral_source_split_12354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb26:
    assume $i96 == 1;
    goto corral_source_split_12358;

  corral_source_split_12358:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb14:
    assume $i50 == 1;
    goto corral_source_split_12299;

  corral_source_split_12299:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p18);
    call {:si_unique_call 5685} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i51);
    goto corral_source_split_12300;

  corral_source_split_12300:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 616);
    call {:si_unique_call 5686} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i52);
    goto corral_source_split_12301;

  corral_source_split_12301:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_12302;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    call {:si_unique_call 5687} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i54);
    goto corral_source_split_12303;

  corral_source_split_12303:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p0);
    call {:si_unique_call 5688} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i55);
    goto corral_source_split_12304;

  corral_source_split_12304:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 48);
    call {:si_unique_call 5689} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i56);
    goto corral_source_split_12305;

  corral_source_split_12305:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_12306;

  corral_source_split_12306:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_12307;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref(0, 8));
    goto corral_source_split_12308;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_12309;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    call {:si_unique_call 5690} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i61);
    goto corral_source_split_12310;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, $i54);
    goto corral_source_split_12311;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i62 == 1;
    goto corral_source_split_12313;

  corral_source_split_12313:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p0);
    call {:si_unique_call 5691} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i63);
    goto corral_source_split_12314;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 48);
    call {:si_unique_call 5692} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i64);
    goto corral_source_split_12315;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    $p65 := $i2p.i64.ref($i64);
    goto corral_source_split_12316;

  corral_source_split_12316:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_12317;

  corral_source_split_12317:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(0, 8));
    goto corral_source_split_12318;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_12319;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p18);
    call {:si_unique_call 5693} {:cexpr "__cil_tmp60"} boogie_si_record_i64($i69);
    goto corral_source_split_12320;

  corral_source_split_12320:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, 616);
    call {:si_unique_call 5694} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i70);
    goto corral_source_split_12321;

  corral_source_split_12321:
    assume {:verifier.code 0} true;
    $p71 := $i2p.i64.ref($i70);
    goto corral_source_split_12322;

  corral_source_split_12322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5695} vslice_dummy_var_231 := drm_err.ref.ref.ref.ref(.str.271, .str.273, $p68, $p71);
    goto corral_source_split_12323;

  corral_source_split_12323:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 22);
    goto $bb3;

  $bb11:
    assume $i44 == 1;
    goto corral_source_split_12290;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5681} vslice_dummy_var_230 := drm_err.ref.ref(.str.271, .str.272);
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_12265;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p0);
    call {:si_unique_call 5674} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i24);
    goto corral_source_split_12266;

  corral_source_split_12266:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 16);
    call {:si_unique_call 5675} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i25);
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_12268;

  corral_source_split_12268:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_12269;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_12270;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i32($p28);
    call {:si_unique_call 5676} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i29);
    goto corral_source_split_12271;

  corral_source_split_12271:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p27);
    goto corral_source_split_12272;

  corral_source_split_12272:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i29);
    goto corral_source_split_12273;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    $i32 := $sub.i64(0, $i31);
    goto corral_source_split_12274;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p30, $mul.ref($i32, 1));
    goto corral_source_split_12275;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    goto corral_source_split_12276;

  corral_source_split_12276:
    assume {:verifier.code 0} true;
    $p35 := $p33;
    goto $bb10;
}



const vmw_ldu_del_active: ref;

axiom vmw_ldu_del_active == $sub.ref(0, 1002144);

procedure vmw_ldu_del_active($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.11, $M.12, $M.2, $M.6, $M.10, assertsPassed, $M.16, $M.3, $M.4, $CurrAddr, $M.13;



implementation vmw_ldu_del_active($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i1;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $i51: i1;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $i65: i64;
  var $i66: i64;
  var $p68: ref;
  var vslice_dummy_var_238: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12508;

  corral_source_split_12508:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 5785} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
    goto corral_source_split_12509;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 2608);
    call {:si_unique_call 5786} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i3);
    goto corral_source_split_12510;

  corral_source_split_12510:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_12511;

  corral_source_split_12511:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_12512;

  corral_source_split_12512:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p1);
    call {:si_unique_call 5787} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i6);
    goto corral_source_split_12513;

  corral_source_split_12513:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 2072);
    call {:si_unique_call 5788} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i7);
    goto corral_source_split_12514;

  corral_source_split_12514:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_12515;

  corral_source_split_12515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5789} $i9 := list_empty($p8);
    call {:si_unique_call 5790} {:cexpr "tmp___7"} boogie_si_record_i32($i9);
    goto corral_source_split_12516;

  corral_source_split_12516:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_12517;

  corral_source_split_12517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p1);
    call {:si_unique_call 5791} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i11);
    goto corral_source_split_12521;

  corral_source_split_12521:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 2072);
    call {:si_unique_call 5792} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i12);
    goto corral_source_split_12522;

  corral_source_split_12522:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_12523;

  corral_source_split_12523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5793} list_del_init($p13);
    goto corral_source_split_12524;

  corral_source_split_12524:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p5);
    call {:si_unique_call 5794} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i14);
    goto corral_source_split_12525;

  corral_source_split_12525:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 16);
    call {:si_unique_call 5795} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i15);
    goto corral_source_split_12526;

  corral_source_split_12526:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p5);
    call {:si_unique_call 5796} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i16);
    goto corral_source_split_12527;

  corral_source_split_12527:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 16);
    call {:si_unique_call 5797} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i17);
    goto corral_source_split_12528;

  corral_source_split_12528:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_12529;

  corral_source_split_12529:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    call {:si_unique_call 5798} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i19);
    goto corral_source_split_12530;

  corral_source_split_12530:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i19, 1);
    goto corral_source_split_12531;

  corral_source_split_12531:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i15);
    goto corral_source_split_12532;

  corral_source_split_12532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_12533;

  corral_source_split_12533:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p5);
    call {:si_unique_call 5799} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i22);
    goto corral_source_split_12534;

  corral_source_split_12534:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 16);
    call {:si_unique_call 5800} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i23);
    goto corral_source_split_12535;

  corral_source_split_12535:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_12536;

  corral_source_split_12536:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    call {:si_unique_call 5801} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i25);
    goto corral_source_split_12537;

  corral_source_split_12537:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_12538;

  corral_source_split_12538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_12540;

  corral_source_split_12540:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p5);
    call {:si_unique_call 5802} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i27);
    goto corral_source_split_12542;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 24);
    call {:si_unique_call 5803} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i28);
    goto corral_source_split_12543;

  corral_source_split_12543:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_12544;

  corral_source_split_12544:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_12545;

  corral_source_split_12545:
    assume {:verifier.code 0} true;
    $i31 := $ne.ref($p30, $0.ref);
    goto corral_source_split_12546;

  corral_source_split_12546:
    assume {:verifier.code 0} true;
    $i32 := $xor.i1($i31, 1);
    goto corral_source_split_12547;

  corral_source_split_12547:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    call {:si_unique_call 5804} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i33);
    goto corral_source_split_12548;

  corral_source_split_12548:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_12549;

  corral_source_split_12549:
    assume {:verifier.code 0} true;
    $i35 := $xor.i1($i34, 1);
    goto corral_source_split_12550;

  corral_source_split_12550:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i32($i35);
    call {:si_unique_call 5805} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i36);
    goto corral_source_split_12551;

  corral_source_split_12551:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_12552;

  corral_source_split_12552:
    assume {:verifier.code 0} true;
    $i38 := $xor.i1($i37, 1);
    goto corral_source_split_12553;

  corral_source_split_12553:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    call {:si_unique_call 5806} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i39);
    goto corral_source_split_12554;

  corral_source_split_12554:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    call {:si_unique_call 5807} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i40);
    goto corral_source_split_12555;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5808} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 5809} {:cexpr "tmp___8"} boogie_si_record_i64($i41);
    goto corral_source_split_12556;

  corral_source_split_12556:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_12557;

  corral_source_split_12557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p5);
    call {:si_unique_call 5811} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i43);
    goto corral_source_split_12563;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 24);
    call {:si_unique_call 5812} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i44);
    goto corral_source_split_12564;

  corral_source_split_12564:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_12565;

  corral_source_split_12565:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    call {:si_unique_call 5813} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i47);
    goto corral_source_split_12567;

  corral_source_split_12567:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 128);
    call {:si_unique_call 5814} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i48);
    goto corral_source_split_12568;

  corral_source_split_12568:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i48);
    goto corral_source_split_12569;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_12570;

  corral_source_split_12570:
    assume {:verifier.code 0} true;
    $i51 := $ne.ref($p50, $0.ref);
    goto corral_source_split_12571;

  corral_source_split_12571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p5);
    call {:si_unique_call 5822} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i65);
    goto corral_source_split_12587;

  corral_source_split_12587:
    assume {:verifier.code 0} true;
    $i66 := $add.i64($i65, 24);
    call {:si_unique_call 5823} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i66);
    goto corral_source_split_12588;

  corral_source_split_12588:
    assume {:verifier.code 0} true;
    goto corral_source_split_12589;

  corral_source_split_12589:
    assume {:verifier.code 0} true;
    $p68 := $i2p.i64.ref($i66);
    goto corral_source_split_12590;

  corral_source_split_12590:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $0.ref);
    goto corral_source_split_12591;

  corral_source_split_12591:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i51 == 1;
    goto corral_source_split_12573;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p5);
    call {:si_unique_call 5815} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i52);
    goto corral_source_split_12574;

  corral_source_split_12574:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 24);
    call {:si_unique_call 5816} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i53);
    goto corral_source_split_12575;

  corral_source_split_12575:
    assume {:verifier.code 0} true;
    $p54 := $i2p.i64.ref($i53);
    goto corral_source_split_12576;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_12577;

  corral_source_split_12577:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    call {:si_unique_call 5817} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i56);
    goto corral_source_split_12578;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    $i57 := $add.i64($i56, 128);
    call {:si_unique_call 5818} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i57);
    goto corral_source_split_12579;

  corral_source_split_12579:
    assume {:verifier.code 0} true;
    $p58 := $i2p.i64.ref($i57);
    goto corral_source_split_12580;

  corral_source_split_12580:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_12581;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p5);
    call {:si_unique_call 5819} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i60);
    goto corral_source_split_12582;

  corral_source_split_12582:
    assume {:verifier.code 0} true;
    $i61 := $add.i64($i60, 24);
    call {:si_unique_call 5820} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i61);
    goto corral_source_split_12583;

  corral_source_split_12583:
    assume {:verifier.code 0} true;
    $p62 := $i2p.i64.ref($i61);
    goto corral_source_split_12584;

  corral_source_split_12584:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    call {:si_unique_call 5821} vslice_dummy_var_238 := devirtbounce.19($p59, $p63);
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    goto corral_source_split_12585;

  corral_source_split_12585:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_760:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i42 == 1;
    goto corral_source_split_12559;

  corral_source_split_12559:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    call {:si_unique_call 5810} devirtbounce(0, .str.92, 166, 12);
    goto corral_source_split_12561;

  corral_source_split_12561:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call vmw_ldu_del_active_loop_$bb13();
    goto $bb13_last;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_12519;

  corral_source_split_12519:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto $bb14;
}



const vmw_ldu_commit_list: ref;

axiom vmw_ldu_commit_list == $sub.ref(0, 1003176);

procedure vmw_ldu_commit_list($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $CurrAddr, assertsPassed, $M.3, $M.4, $M.6, $M.11, $M.12, $M.13, $M.10, $M.16;



implementation vmw_ldu_commit_list($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $i54: i32;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i32;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $i80: i64;
  var $i81: i64;
  var $i82: i64;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $i87: i64;
  var $p88: ref;
  var $i89: i32;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $i93: i32;
  var $i94: i64;
  var $i95: i64;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $i105: i64;
  var $p106: ref;
  var $i107: i32;
  var $p108: ref;
  var $i109: i64;
  var $i110: i64;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $i114: i64;
  var $i115: i64;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $i119: i64;
  var $p120: ref;
  var $i121: i32;
  var $i122: i64;
  var $i123: i64;
  var $p124: ref;
  var $i125: i32;
  var $i126: i64;
  var $i127: i64;
  var $i128: i64;
  var $p129: ref;
  var $i130: i32;
  var $i131: i64;
  var $i132: i64;
  var $p133: ref;
  var $i134: i32;
  var $i135: i64;
  var $i136: i64;
  var $p137: ref;
  var $i138: i32;
  var $i140: i64;
  var $i141: i64;
  var $p142: ref;
  var $i143: i32;
  var $i144: i1;
  var $i145: i64;
  var $i146: i64;
  var $p147: ref;
  var $i148: i32;
  var $i149: i32;
  var $p150: ref;
  var $p151: ref;
  var $i152: i64;
  var $i153: i64;
  var $p154: ref;
  var $i155: i32;
  var $p156: ref;
  var $i157: i64;
  var $i158: i64;
  var $p159: ref;
  var $p161: ref;
  var $i162: i64;
  var $i163: i32;
  var $p164: ref;
  var $i165: i64;
  var $i166: i64;
  var $p167: ref;
  var $i168: i64;
  var $i169: i1;
  var $i170: i32;
  var $p171: ref;
  var $i172: i1;
  var $i173: i1;
  var $i174: i32;
  var $i175: i64;
  var $i176: i64;
  var $p177: ref;
  var $i178: i32;
  var $i179: i64;
  var $i180: i64;
  var $p181: ref;
  var $i182: i32;
  var $i183: i64;
  var $i184: i64;
  var $p185: ref;
  var $i186: i32;
  var $i187: i64;
  var $i188: i64;
  var $p189: ref;
  var $i190: i32;
  var $i191: i32;
  var $i192: i64;
  var $i193: i64;
  var $p194: ref;
  var $p195: ref;
  var $i196: i64;
  var $i197: i64;
  var $p198: ref;
  var $i199: i32;
  var $p200: ref;
  var $i201: i64;
  var $i202: i64;
  var $p203: ref;
  var $i205: i64;
  var $i206: i64;
  var $p207: ref;
  var $i208: i32;
  var $i209: i1;
  var $i210: i32;
  var $i211: i1;
  var $i212: i1;
  var $i213: i32;
  var $i214: i1;
  var $i215: i1;
  var $i216: i32;
  var $i217: i64;
  var $i218: i64;
  var $i219: i1;
  var $i220: i64;
  var $i221: i64;
  var $i222: i64;
  var $i223: i64;
  var $p224: ref;
  var $i225: i32;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $i229: i64;
  var $i230: i64;
  var $p231: ref;
  var $i232: i32;
  var $p233: ref;
  var $i234: i64;
  var $i235: i64;
  var $p236: ref;
  var $p238: ref;
  var $p239: ref;
  var $i240: i64;
  var $i241: i64;
  var $i242: i64;
  var $p243: ref;
  var $i244: i64;
  var $i245: i1;
  var $p246: ref;
  var $i247: i64;
  var $i248: i64;
  var $p249: ref;
  var $p250: ref;
  var $i251: i1;
  var $i252: i64;
  var $i253: i64;
  var $p254: ref;
  var $p255: ref;
  var $i256: i64;
  var $i257: i64;
  var $p258: ref;
  var $i259: i32;
  var $i260: i64;
  var $i261: i64;
  var $p262: ref;
  var $i263: i32;
  var $i264: i32;
  var $i265: i1;
  var $i267: i64;
  var $i268: i64;
  var $p269: ref;
  var $p270: ref;
  var $i271: i64;
  var $i272: i64;
  var $p273: ref;
  var $i274: i32;
  var $p275: ref;
  var $i276: i64;
  var $i277: i64;
  var $p278: ref;
  var $i79: i32;
  var vslice_dummy_var_239: i32;
  var vslice_dummy_var_240: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12593;

  corral_source_split_12593:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 5824} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i1);
    goto corral_source_split_12594;

  corral_source_split_12594:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 2608);
    call {:si_unique_call 5825} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i2);
    goto corral_source_split_12595;

  corral_source_split_12595:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_12596;

  corral_source_split_12596:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_12597;

  corral_source_split_12597:
    assume {:verifier.code 0} true;
    goto corral_source_split_12598;

  corral_source_split_12598:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 5826} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i6);
    goto corral_source_split_12599;

  corral_source_split_12599:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 2156);
    call {:si_unique_call 5827} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i7);
    goto corral_source_split_12600;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_12601;

  corral_source_split_12601:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 5828} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i9);
    goto corral_source_split_12602;

  corral_source_split_12602:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 524288);
    call {:si_unique_call 5829} {:cexpr "__cil_tmp36"} boogie_si_record_i32($i10);
    goto corral_source_split_12603;

  corral_source_split_12603:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_12604;

  corral_source_split_12604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_12606;

  corral_source_split_12606:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p4);
    goto corral_source_split_12607;

  corral_source_split_12607:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_12608;

  corral_source_split_12608:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5830} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i14);
    goto corral_source_split_12609;

  corral_source_split_12609:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 2072);
    call {:si_unique_call 5831} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i15);
    goto corral_source_split_12610;

  corral_source_split_12610:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_12611;

  corral_source_split_12611:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i32($p16);
    call {:si_unique_call 5832} {:cexpr "__cil_tmp42"} boogie_si_record_i32($i17);
    goto corral_source_split_12612;

  corral_source_split_12612:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p13);
    goto corral_source_split_12613;

  corral_source_split_12613:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i17);
    goto corral_source_split_12614;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    $i20 := $sub.i64(0, $i19);
    goto corral_source_split_12615;

  corral_source_split_12615:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p18, $mul.ref($i20, 1));
    goto corral_source_split_12616;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    goto corral_source_split_12617;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p4);
    goto corral_source_split_12618;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_12619;

  corral_source_split_12619:
    assume {:verifier.code 0} true;
    $i25, $i26, $i27, $p28, $p29 := 0, 0, 0, $0.ref, $p21;
    goto $bb3;

  $bb3:
    call $i25, $i26, $i27, $p28, $p29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $p37, $p38, $p39, $i40, $i41, $p42, $i43, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $p53, $i54, $i55, $i56, $p57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $p65, $p66, $i67, $i68, $p69, $i70, $p71, $i72, $i73, $p74 := vmw_ldu_commit_list_loop_$bb3($i24, $i25, $i26, $i27, $p28, $p29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $p37, $p38, $p39, $i40, $i41, $p42, $i43, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $p53, $i54, $i55, $i56, $p57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $p65, $p66, $i67, $i68, $p69, $i70, $p71, $i72, $i73, $p74);
    goto $bb3_last;

  corral_source_split_12621:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    call {:si_unique_call 5833} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i30);
    goto corral_source_split_12623;

  corral_source_split_12623:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 2072);
    call {:si_unique_call 5834} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i31);
    goto corral_source_split_12624;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_12625;

  corral_source_split_12625:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    call {:si_unique_call 5835} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i33);
    goto corral_source_split_12626;

  corral_source_split_12626:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, $i24);
    goto corral_source_split_12627;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    $i35, $i36, $p37, $p38 := $i25, $i26, $p28, $p29;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12631;

  corral_source_split_12631:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5843} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i76);
    goto corral_source_split_12645;

  corral_source_split_12645:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p37);
    call {:si_unique_call 5844} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i77);
    goto corral_source_split_12646;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i77, $i76);
    goto corral_source_split_12647;

  corral_source_split_12647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i80 := $add.i64(0, 32);
    call {:si_unique_call 5858} {:cexpr "__cil_tmp95"} boogie_si_record_i64($i80);
    goto corral_source_split_12685;

  corral_source_split_12685:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p38);
    call {:si_unique_call 5859} {:cexpr "__cil_tmp96"} boogie_si_record_i64($i81);
    goto corral_source_split_12686;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i81, $i80);
    call {:si_unique_call 5860} {:cexpr "__cil_tmp97"} boogie_si_record_i64($i82);
    goto corral_source_split_12687;

  corral_source_split_12687:
    assume {:verifier.code 0} true;
    $p83 := $i2p.i64.ref($i82);
    goto corral_source_split_12688;

  corral_source_split_12688:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_12689;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    $i85 := $add.i64(40, 0);
    call {:si_unique_call 5861} {:cexpr "__cil_tmp101"} boogie_si_record_i64($i85);
    goto corral_source_split_12690;

  corral_source_split_12690:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p84);
    call {:si_unique_call 5862} {:cexpr "__cil_tmp102"} boogie_si_record_i64($i86);
    goto corral_source_split_12691;

  corral_source_split_12691:
    assume {:verifier.code 0} true;
    $i87 := $add.i64($i86, $i85);
    call {:si_unique_call 5863} {:cexpr "__cil_tmp103"} boogie_si_record_i64($i87);
    goto corral_source_split_12692;

  corral_source_split_12692:
    assume {:verifier.code 0} true;
    $p88 := $i2p.i64.ref($i87);
    goto corral_source_split_12693;

  corral_source_split_12693:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    call {:si_unique_call 5864} {:cexpr "__cil_tmp104"} boogie_si_record_i32($i89);
    goto corral_source_split_12694;

  corral_source_split_12694:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p84);
    call {:si_unique_call 5865} {:cexpr "__cil_tmp105"} boogie_si_record_i64($i90);
    goto corral_source_split_12695;

  corral_source_split_12695:
    assume {:verifier.code 0} true;
    $i91 := $add.i64($i90, 84);
    call {:si_unique_call 5866} {:cexpr "__cil_tmp106"} boogie_si_record_i64($i91);
    goto corral_source_split_12696;

  corral_source_split_12696:
    assume {:verifier.code 0} true;
    $p92 := $i2p.i64.ref($i91);
    goto corral_source_split_12697;

  corral_source_split_12697:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    call {:si_unique_call 5867} {:cexpr "__cil_tmp107"} boogie_si_record_i32($i93);
    goto corral_source_split_12698;

  corral_source_split_12698:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p84);
    call {:si_unique_call 5868} {:cexpr "__cil_tmp109"} boogie_si_record_i64($i94);
    goto corral_source_split_12699;

  corral_source_split_12699:
    assume {:verifier.code 0} true;
    $i95 := $add.i64($i94, 80);
    call {:si_unique_call 5869} {:cexpr "__cil_tmp110"} boogie_si_record_i64($i95);
    goto corral_source_split_12700;

  corral_source_split_12700:
    assume {:verifier.code 0} true;
    $p96 := $i2p.i64.ref($i95);
    goto corral_source_split_12701;

  corral_source_split_12701:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    call {:si_unique_call 5870} {:cexpr "__cil_tmp111"} boogie_si_record_i32($i97);
    goto corral_source_split_12702;

  corral_source_split_12702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5871} $i98 := vmw_kms_write_svga($p0, $i36, $i35, $i89, $i93, $i97);
    call {:si_unique_call 5872} {:cexpr "tmp___9"} boogie_si_record_i32($i98);
    goto corral_source_split_12703;

  corral_source_split_12703:
    assume {:verifier.code 0} true;
    $i79 := $i98;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_12683;

  corral_source_split_12683:
    assume {:verifier.code 0} true;
    $r := $i79;
    return;

  $bb15:
    assume $i78 == 1;
    goto corral_source_split_12681;

  corral_source_split_12681:
    assume {:verifier.code 0} true;
    $i79 := 0;
    goto $bb17;

  $bb5:
    assume $i34 == 1;
    goto corral_source_split_12629;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p29);
    goto corral_source_split_12633;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    call {:si_unique_call 5836} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i40);
    goto corral_source_split_12634;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 116);
    call {:si_unique_call 5837} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i41);
    goto corral_source_split_12635;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_12636;

  corral_source_split_12636:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    call {:si_unique_call 5838} {:cexpr "__cil_tmp56"} boogie_si_record_i32($i43);
    goto corral_source_split_12637;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p39);
    call {:si_unique_call 5839} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i44);
    goto corral_source_split_12638;

  corral_source_split_12638:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 480);
    call {:si_unique_call 5840} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i45);
    goto corral_source_split_12639;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    $p46 := $i2p.i64.ref($i45);
    goto corral_source_split_12640;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    call {:si_unique_call 5841} {:cexpr "__cil_tmp59"} boogie_si_record_i32($i47);
    goto corral_source_split_12641;

  corral_source_split_12641:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i47, $i43);
    call {:si_unique_call 5842} {:cexpr "_max2"} boogie_si_record_i32($i48);
    goto corral_source_split_12642;

  corral_source_split_12642:
    assume {:verifier.code 0} true;
    $i49 := $sgt.i32($i26, $i48);
    goto corral_source_split_12643;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $i48;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_12651;

  corral_source_split_12651:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p39);
    call {:si_unique_call 5845} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i51);
    goto corral_source_split_12652;

  corral_source_split_12652:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 136);
    call {:si_unique_call 5846} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i52);
    goto corral_source_split_12653;

  corral_source_split_12653:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_12654;

  corral_source_split_12654:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    call {:si_unique_call 5847} {:cexpr "__cil_tmp71"} boogie_si_record_i32($i54);
    goto corral_source_split_12655;

  corral_source_split_12655:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p39);
    call {:si_unique_call 5848} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i55);
    goto corral_source_split_12656;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 484);
    call {:si_unique_call 5849} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i56);
    goto corral_source_split_12657;

  corral_source_split_12657:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_12658;

  corral_source_split_12658:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    call {:si_unique_call 5850} {:cexpr "__cil_tmp74"} boogie_si_record_i32($i58);
    goto corral_source_split_12659;

  corral_source_split_12659:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, $i54);
    call {:si_unique_call 5851} {:cexpr "_max2___0"} boogie_si_record_i32($i59);
    goto corral_source_split_12660;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    $i60 := $sgt.i32($i25, $i59);
    goto corral_source_split_12661;

  corral_source_split_12661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $i59;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_12665;

  corral_source_split_12665:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i27, 1);
    call {:si_unique_call 5852} {:cexpr "i"} boogie_si_record_i32($i62);
    goto corral_source_split_12666;

  corral_source_split_12666:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p29);
    call {:si_unique_call 5853} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i63);
    goto corral_source_split_12667;

  corral_source_split_12667:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 2072);
    call {:si_unique_call 5854} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i64);
    goto corral_source_split_12668;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    $p65 := $i2p.i64.ref($i64);
    goto corral_source_split_12669;

  corral_source_split_12669:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_12670;

  corral_source_split_12670:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5855} {:cexpr "__cil_tmp85"} boogie_si_record_i64($i67);
    goto corral_source_split_12671;

  corral_source_split_12671:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i67, 2072);
    call {:si_unique_call 5856} {:cexpr "__cil_tmp86"} boogie_si_record_i64($i68);
    goto corral_source_split_12672;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    $p69 := $i2p.i64.ref($i68);
    goto corral_source_split_12673;

  corral_source_split_12673:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i32($p69);
    call {:si_unique_call 5857} {:cexpr "__cil_tmp88"} boogie_si_record_i32($i70);
    goto corral_source_split_12674;

  corral_source_split_12674:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p66);
    goto corral_source_split_12675;

  corral_source_split_12675:
    assume {:verifier.code 0} true;
    $i72 := $zext.i32.i64($i70);
    goto corral_source_split_12676;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    $i73 := $sub.i64(0, $i72);
    goto corral_source_split_12677;

  corral_source_split_12677:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p71, $mul.ref($i73, 1));
    goto corral_source_split_12678;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    goto corral_source_split_12679;

  corral_source_split_12679:
    assume {:verifier.code 0} true;
    $i25, $i26, $i27, $p28, $p29 := $i61, $i50, $i62, $p29, $p74;
    goto corral_source_split_12679_dummy;

  $bb12:
    assume $i60 == 1;
    goto corral_source_split_12663;

  corral_source_split_12663:
    assume {:verifier.code 0} true;
    $i61 := $i25;
    goto $bb14;

  $bb9:
    assume $i49 == 1;
    goto corral_source_split_12649;

  corral_source_split_12649:
    assume {:verifier.code 0} true;
    $i50 := $i26;
    goto $bb11;

  $bb1:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p4);
    goto corral_source_split_12705;

  corral_source_split_12705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5873} $i100 := list_empty($p99);
    call {:si_unique_call 5874} {:cexpr "tmp___10"} boogie_si_record_i32($i100);
    goto corral_source_split_12706;

  corral_source_split_12706:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_12707;

  corral_source_split_12707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i101 == 1);
    goto corral_source_split_12711;

  corral_source_split_12711:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p4);
    goto corral_source_split_12712;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_12713;

  corral_source_split_12713:
    assume {:verifier.code 0} true;
    $i104 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5875} {:cexpr "__cil_tmp116"} boogie_si_record_i64($i104);
    goto corral_source_split_12714;

  corral_source_split_12714:
    assume {:verifier.code 0} true;
    $i105 := $add.i64($i104, 2072);
    call {:si_unique_call 5876} {:cexpr "__cil_tmp117"} boogie_si_record_i64($i105);
    goto corral_source_split_12715;

  corral_source_split_12715:
    assume {:verifier.code 0} true;
    $p106 := $i2p.i64.ref($i105);
    goto corral_source_split_12716;

  corral_source_split_12716:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i32($p106);
    call {:si_unique_call 5877} {:cexpr "__cil_tmp119"} boogie_si_record_i32($i107);
    goto corral_source_split_12717;

  corral_source_split_12717:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p103);
    goto corral_source_split_12718;

  corral_source_split_12718:
    assume {:verifier.code 0} true;
    $i109 := $zext.i32.i64($i107);
    goto corral_source_split_12719;

  corral_source_split_12719:
    assume {:verifier.code 0} true;
    $i110 := $sub.i64(0, $i109);
    goto corral_source_split_12720;

  corral_source_split_12720:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p108, $mul.ref($i110, 1));
    goto corral_source_split_12721;

  corral_source_split_12721:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_12722;

  corral_source_split_12722:
    assume {:verifier.code 0} true;
    $i113 := $add.i64(0, 32);
    call {:si_unique_call 5878} {:cexpr "__cil_tmp123"} boogie_si_record_i64($i113);
    goto corral_source_split_12723;

  corral_source_split_12723:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p112);
    call {:si_unique_call 5879} {:cexpr "__cil_tmp124"} boogie_si_record_i64($i114);
    goto corral_source_split_12724;

  corral_source_split_12724:
    assume {:verifier.code 0} true;
    $i115 := $add.i64($i114, $i113);
    call {:si_unique_call 5880} {:cexpr "__cil_tmp125"} boogie_si_record_i64($i115);
    goto corral_source_split_12725;

  corral_source_split_12725:
    assume {:verifier.code 0} true;
    $p116 := $i2p.i64.ref($i115);
    goto corral_source_split_12726;

  corral_source_split_12726:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_12727;

  corral_source_split_12727:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p117);
    call {:si_unique_call 5881} {:cexpr "__cil_tmp126"} boogie_si_record_i64($i118);
    goto corral_source_split_12728;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    $i119 := $add.i64($i118, 72);
    call {:si_unique_call 5882} {:cexpr "__cil_tmp127"} boogie_si_record_i64($i119);
    goto corral_source_split_12729;

  corral_source_split_12729:
    assume {:verifier.code 0} true;
    $p120 := $i2p.i64.ref($i119);
    goto corral_source_split_12730;

  corral_source_split_12730:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    call {:si_unique_call 5883} {:cexpr "__cil_tmp128"} boogie_si_record_i32($i121);
    goto corral_source_split_12731;

  corral_source_split_12731:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p117);
    call {:si_unique_call 5884} {:cexpr "__cil_tmp129"} boogie_si_record_i64($i122);
    goto corral_source_split_12732;

  corral_source_split_12732:
    assume {:verifier.code 0} true;
    $i123 := $add.i64($i122, 76);
    call {:si_unique_call 5885} {:cexpr "__cil_tmp130"} boogie_si_record_i64($i123);
    goto corral_source_split_12733;

  corral_source_split_12733:
    assume {:verifier.code 0} true;
    $p124 := $i2p.i64.ref($i123);
    goto corral_source_split_12734;

  corral_source_split_12734:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    call {:si_unique_call 5886} {:cexpr "__cil_tmp131"} boogie_si_record_i32($i125);
    goto corral_source_split_12735;

  corral_source_split_12735:
    assume {:verifier.code 0} true;
    $i126 := $add.i64(40, 0);
    call {:si_unique_call 5887} {:cexpr "__cil_tmp133"} boogie_si_record_i64($i126);
    goto corral_source_split_12736;

  corral_source_split_12736:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p117);
    call {:si_unique_call 5888} {:cexpr "__cil_tmp134"} boogie_si_record_i64($i127);
    goto corral_source_split_12737;

  corral_source_split_12737:
    assume {:verifier.code 0} true;
    $i128 := $add.i64($i127, $i126);
    call {:si_unique_call 5889} {:cexpr "__cil_tmp135"} boogie_si_record_i64($i128);
    goto corral_source_split_12738;

  corral_source_split_12738:
    assume {:verifier.code 0} true;
    $p129 := $i2p.i64.ref($i128);
    goto corral_source_split_12739;

  corral_source_split_12739:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    call {:si_unique_call 5890} {:cexpr "__cil_tmp136"} boogie_si_record_i32($i130);
    goto corral_source_split_12740;

  corral_source_split_12740:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($p117);
    call {:si_unique_call 5891} {:cexpr "__cil_tmp137"} boogie_si_record_i64($i131);
    goto corral_source_split_12741;

  corral_source_split_12741:
    assume {:verifier.code 0} true;
    $i132 := $add.i64($i131, 84);
    call {:si_unique_call 5892} {:cexpr "__cil_tmp138"} boogie_si_record_i64($i132);
    goto corral_source_split_12742;

  corral_source_split_12742:
    assume {:verifier.code 0} true;
    $p133 := $i2p.i64.ref($i132);
    goto corral_source_split_12743;

  corral_source_split_12743:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    call {:si_unique_call 5893} {:cexpr "__cil_tmp139"} boogie_si_record_i32($i134);
    goto corral_source_split_12744;

  corral_source_split_12744:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p117);
    call {:si_unique_call 5894} {:cexpr "__cil_tmp141"} boogie_si_record_i64($i135);
    goto corral_source_split_12745;

  corral_source_split_12745:
    assume {:verifier.code 0} true;
    $i136 := $add.i64($i135, 80);
    call {:si_unique_call 5895} {:cexpr "__cil_tmp142"} boogie_si_record_i64($i136);
    goto corral_source_split_12746;

  corral_source_split_12746:
    assume {:verifier.code 0} true;
    $p137 := $i2p.i64.ref($i136);
    goto corral_source_split_12747;

  corral_source_split_12747:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, $p137);
    call {:si_unique_call 5896} {:cexpr "__cil_tmp143"} boogie_si_record_i32($i138);
    goto corral_source_split_12748;

  corral_source_split_12748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5897} vslice_dummy_var_239 := vmw_kms_write_svga($p0, $i121, $i125, $i130, $i134, $i138);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p4);
    call {:si_unique_call 5898} {:cexpr "__cil_tmp144"} boogie_si_record_i64($i140);
    goto corral_source_split_12750;

  corral_source_split_12750:
    assume {:verifier.code 0} true;
    $i141 := $add.i64($i140, 16);
    call {:si_unique_call 5899} {:cexpr "__cil_tmp145"} boogie_si_record_i64($i141);
    goto corral_source_split_12751;

  corral_source_split_12751:
    assume {:verifier.code 0} true;
    $p142 := $i2p.i64.ref($i141);
    goto corral_source_split_12752;

  corral_source_split_12752:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.0, $p142);
    goto corral_source_split_12753;

  corral_source_split_12753:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i143, 0);
    goto corral_source_split_12754;

  corral_source_split_12754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    $i149 := 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_12762;

  corral_source_split_12762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5903} vmw_write($p0, 34, $i149);
    goto corral_source_split_12763;

  corral_source_split_12763:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p4);
    goto corral_source_split_12764;

  corral_source_split_12764:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_12765;

  corral_source_split_12765:
    assume {:verifier.code 0} true;
    $i152 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5904} {:cexpr "__cil_tmp150"} boogie_si_record_i64($i152);
    goto corral_source_split_12766;

  corral_source_split_12766:
    assume {:verifier.code 0} true;
    $i153 := $add.i64($i152, 2072);
    call {:si_unique_call 5905} {:cexpr "__cil_tmp151"} boogie_si_record_i64($i153);
    goto corral_source_split_12767;

  corral_source_split_12767:
    assume {:verifier.code 0} true;
    $p154 := $i2p.i64.ref($i153);
    goto corral_source_split_12768;

  corral_source_split_12768:
    assume {:verifier.code 0} true;
    $i155 := $p2i.ref.i32($p154);
    call {:si_unique_call 5906} {:cexpr "__cil_tmp153"} boogie_si_record_i32($i155);
    goto corral_source_split_12769;

  corral_source_split_12769:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p151);
    goto corral_source_split_12770;

  corral_source_split_12770:
    assume {:verifier.code 0} true;
    $i157 := $zext.i32.i64($i155);
    goto corral_source_split_12771;

  corral_source_split_12771:
    assume {:verifier.code 0} true;
    $i158 := $sub.i64(0, $i157);
    goto corral_source_split_12772;

  corral_source_split_12772:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($p156, $mul.ref($i158, 1));
    goto corral_source_split_12773;

  corral_source_split_12773:
    assume {:verifier.code 0} true;
    goto corral_source_split_12774;

  corral_source_split_12774:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p4);
    goto corral_source_split_12775;

  corral_source_split_12775:
    assume {:verifier.code 0} true;
    $i162 := $p2i.ref.i64($p161);
    goto corral_source_split_12776;

  corral_source_split_12776:
    assume {:verifier.code 0} true;
    $i163, $p164 := 0, $p159;
    goto $bb26;

  $bb26:
    call $i163, $p164, $i165, $i166, $p167, $i168, $i169, $i170, $p171, $i172, $i173, $i174, $i175, $i176, $p177, $i178, $i179, $i180, $p181, $i182, $i183, $i184, $p185, $i186, $i187, $i188, $p189, $i190, $i191, $i192, $i193, $p194, $p195, $i196, $i197, $p198, $i199, $p200, $i201, $i202, $p203 := vmw_ldu_commit_list_loop_$bb26($p0, $i162, $i163, $p164, $i165, $i166, $p167, $i168, $i169, $i170, $p171, $i172, $i173, $i174, $i175, $i176, $p177, $i178, $i179, $i180, $p181, $i182, $i183, $i184, $p185, $i186, $i187, $i188, $p189, $i190, $i191, $i192, $i193, $p194, $p195, $i196, $i197, $p198, $i199, $p200, $i201, $i202, $p203);
    goto $bb26_last;

  corral_source_split_12778:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i165 := $p2i.ref.i64($p164);
    call {:si_unique_call 5907} {:cexpr "__cil_tmp158"} boogie_si_record_i64($i165);
    goto corral_source_split_12780;

  corral_source_split_12780:
    assume {:verifier.code 0} true;
    $i166 := $add.i64($i165, 2072);
    call {:si_unique_call 5908} {:cexpr "__cil_tmp159"} boogie_si_record_i64($i166);
    goto corral_source_split_12781;

  corral_source_split_12781:
    assume {:verifier.code 0} true;
    $p167 := $i2p.i64.ref($i166);
    goto corral_source_split_12782;

  corral_source_split_12782:
    assume {:verifier.code 0} true;
    $i168 := $p2i.ref.i64($p167);
    call {:si_unique_call 5909} {:cexpr "__cil_tmp161"} boogie_si_record_i64($i168);
    goto corral_source_split_12783;

  corral_source_split_12783:
    assume {:verifier.code 0} true;
    $i169 := $ne.i64($i168, $i162);
    goto corral_source_split_12784;

  corral_source_split_12784:
    assume {:verifier.code 0} true;
    $i170 := $i163;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_12788;

  corral_source_split_12788:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i205 := $p2i.ref.i64($p4);
    call {:si_unique_call 5936} {:cexpr "__cil_tmp193"} boogie_si_record_i64($i205);
    goto corral_source_split_12832;

  corral_source_split_12832:
    assume {:verifier.code 0} true;
    $i206 := $add.i64($i205, 16);
    call {:si_unique_call 5937} {:cexpr "__cil_tmp194"} boogie_si_record_i64($i206);
    goto corral_source_split_12833;

  corral_source_split_12833:
    assume {:verifier.code 0} true;
    $p207 := $i2p.i64.ref($i206);
    goto corral_source_split_12834;

  corral_source_split_12834:
    assume {:verifier.code 0} true;
    $i208 := $load.i32($M.0, $p207);
    call {:si_unique_call 5938} {:cexpr "__cil_tmp195"} boogie_si_record_i32($i208);
    goto corral_source_split_12835;

  corral_source_split_12835:
    assume {:verifier.code 0} true;
    $i209 := $ne.i32($i170, $i208);
    goto corral_source_split_12836;

  corral_source_split_12836:
    assume {:verifier.code 0} true;
    $i210 := $zext.i1.i32($i209);
    call {:si_unique_call 5939} {:cexpr "__cil_tmp197"} boogie_si_record_i32($i210);
    goto corral_source_split_12837;

  corral_source_split_12837:
    assume {:verifier.code 0} true;
    $i211 := $ne.i32($i210, 0);
    goto corral_source_split_12838;

  corral_source_split_12838:
    assume {:verifier.code 0} true;
    $i212 := $xor.i1($i211, 1);
    goto corral_source_split_12839;

  corral_source_split_12839:
    assume {:verifier.code 0} true;
    $i213 := $zext.i1.i32($i212);
    call {:si_unique_call 5940} {:cexpr "__cil_tmp198"} boogie_si_record_i32($i213);
    goto corral_source_split_12840;

  corral_source_split_12840:
    assume {:verifier.code 0} true;
    $i214 := $ne.i32($i213, 0);
    goto corral_source_split_12841;

  corral_source_split_12841:
    assume {:verifier.code 0} true;
    $i215 := $xor.i1($i214, 1);
    goto corral_source_split_12842;

  corral_source_split_12842:
    assume {:verifier.code 0} true;
    $i216 := $zext.i1.i32($i215);
    call {:si_unique_call 5941} {:cexpr "__cil_tmp199"} boogie_si_record_i32($i216);
    goto corral_source_split_12843;

  corral_source_split_12843:
    assume {:verifier.code 0} true;
    $i217 := $sext.i32.i64($i216);
    call {:si_unique_call 5942} {:cexpr "__cil_tmp200"} boogie_si_record_i64($i217);
    goto corral_source_split_12844;

  corral_source_split_12844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5943} $i218 := ldv__builtin_expect($i217, 0);
    call {:si_unique_call 5944} {:cexpr "tmp___12"} boogie_si_record_i64($i218);
    goto corral_source_split_12845;

  corral_source_split_12845:
    assume {:verifier.code 0} true;
    $i219 := $ne.i64($i218, 0);
    goto corral_source_split_12846;

  corral_source_split_12846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i220 := $p2i.ref.i64($p4);
    call {:si_unique_call 5946} {:cexpr "__cil_tmp201"} boogie_si_record_i64($i220);
    goto corral_source_split_12852;

  corral_source_split_12852:
    assume {:verifier.code 0} true;
    $i221 := $add.i64($i220, 20);
    call {:si_unique_call 5947} {:cexpr "__cil_tmp202"} boogie_si_record_i64($i221);
    goto corral_source_split_12853;

  corral_source_split_12853:
    assume {:verifier.code 0} true;
    $i222 := $p2i.ref.i64($p4);
    call {:si_unique_call 5948} {:cexpr "__cil_tmp203"} boogie_si_record_i64($i222);
    goto corral_source_split_12854;

  corral_source_split_12854:
    assume {:verifier.code 0} true;
    $i223 := $add.i64($i222, 16);
    call {:si_unique_call 5949} {:cexpr "__cil_tmp204"} boogie_si_record_i64($i223);
    goto corral_source_split_12855;

  corral_source_split_12855:
    assume {:verifier.code 0} true;
    $p224 := $i2p.i64.ref($i223);
    goto corral_source_split_12856;

  corral_source_split_12856:
    assume {:verifier.code 0} true;
    $i225 := $load.i32($M.0, $p224);
    goto corral_source_split_12857;

  corral_source_split_12857:
    assume {:verifier.code 0} true;
    $p226 := $i2p.i64.ref($i221);
    goto corral_source_split_12858;

  corral_source_split_12858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p226, $i225);
    goto corral_source_split_12859;

  corral_source_split_12859:
    assume {:verifier.code 0} true;
    $p227 := $bitcast.ref.ref($p4);
    goto corral_source_split_12860;

  corral_source_split_12860:
    assume {:verifier.code 0} true;
    $p228 := $load.ref($M.0, $p227);
    goto corral_source_split_12861;

  corral_source_split_12861:
    assume {:verifier.code 0} true;
    $i229 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5950} {:cexpr "__cil_tmp207"} boogie_si_record_i64($i229);
    goto corral_source_split_12862;

  corral_source_split_12862:
    assume {:verifier.code 0} true;
    $i230 := $add.i64($i229, 2072);
    call {:si_unique_call 5951} {:cexpr "__cil_tmp208"} boogie_si_record_i64($i230);
    goto corral_source_split_12863;

  corral_source_split_12863:
    assume {:verifier.code 0} true;
    $p231 := $i2p.i64.ref($i230);
    goto corral_source_split_12864;

  corral_source_split_12864:
    assume {:verifier.code 0} true;
    $i232 := $p2i.ref.i32($p231);
    call {:si_unique_call 5952} {:cexpr "__cil_tmp210"} boogie_si_record_i32($i232);
    goto corral_source_split_12865;

  corral_source_split_12865:
    assume {:verifier.code 0} true;
    $p233 := $bitcast.ref.ref($p228);
    goto corral_source_split_12866;

  corral_source_split_12866:
    assume {:verifier.code 0} true;
    $i234 := $zext.i32.i64($i232);
    goto corral_source_split_12867;

  corral_source_split_12867:
    assume {:verifier.code 0} true;
    $i235 := $sub.i64(0, $i234);
    goto corral_source_split_12868;

  corral_source_split_12868:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($p233, $mul.ref($i235, 1));
    goto corral_source_split_12869;

  corral_source_split_12869:
    assume {:verifier.code 0} true;
    goto corral_source_split_12870;

  corral_source_split_12870:
    assume {:verifier.code 0} true;
    $p238 := $p236;
    goto $bb44;

  $bb44:
    call $p238, $p239, $i240, $i241, $i242, $p243, $i244, $i245, $p246, $i247, $i248, $p249, $p250, $i251, $i252, $i253, $p254, $p255, $i256, $i257, $p258, $i259, $i260, $i261, $p262, $i263, $i264, $i265, $i267, $i268, $p269, $p270, $i271, $i272, $p273, $i274, $p275, $i276, $i277, $p278, vslice_dummy_var_240 := vmw_ldu_commit_list_loop_$bb44($p0, $p4, $p238, $p239, $i240, $i241, $i242, $p243, $i244, $i245, $p246, $i247, $i248, $p249, $p250, $i251, $i252, $i253, $p254, $p255, $i256, $i257, $p258, $i259, $i260, $i261, $p262, $i263, $i264, $i265, $i267, $i268, $p269, $p270, $i271, $i272, $p273, $i274, $p275, $i276, $i277, $p278, vslice_dummy_var_240);
    goto $bb44_last;

  corral_source_split_12872:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p239 := $bitcast.ref.ref($p4);
    goto corral_source_split_12874;

  corral_source_split_12874:
    assume {:verifier.code 0} true;
    $i240 := $p2i.ref.i64($p239);
    call {:si_unique_call 5953} {:cexpr "__cil_tmp214"} boogie_si_record_i64($i240);
    goto corral_source_split_12875;

  corral_source_split_12875:
    assume {:verifier.code 0} true;
    $i241 := $p2i.ref.i64($p238);
    call {:si_unique_call 5954} {:cexpr "__cil_tmp215"} boogie_si_record_i64($i241);
    goto corral_source_split_12876;

  corral_source_split_12876:
    assume {:verifier.code 0} true;
    $i242 := $add.i64($i241, 2072);
    call {:si_unique_call 5955} {:cexpr "__cil_tmp216"} boogie_si_record_i64($i242);
    goto corral_source_split_12877;

  corral_source_split_12877:
    assume {:verifier.code 0} true;
    $p243 := $i2p.i64.ref($i242);
    goto corral_source_split_12878;

  corral_source_split_12878:
    assume {:verifier.code 0} true;
    $i244 := $p2i.ref.i64($p243);
    call {:si_unique_call 5956} {:cexpr "__cil_tmp218"} boogie_si_record_i64($i244);
    goto corral_source_split_12879;

  corral_source_split_12879:
    assume {:verifier.code 0} true;
    $i245 := $ne.i64($i244, $i240);
    goto corral_source_split_12880;

  corral_source_split_12880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i245 == 1);
    goto corral_source_split_12884;

  corral_source_split_12884:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i79 := 0;
    goto $bb17;

  $bb46:
    assume $i245 == 1;
    goto corral_source_split_12882;

  corral_source_split_12882:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p246 := $bitcast.ref.ref($p238);
    goto corral_source_split_12886;

  corral_source_split_12886:
    assume {:verifier.code 0} true;
    $i247 := $p2i.ref.i64($p246);
    call {:si_unique_call 5957} {:cexpr "__cil_tmp219"} boogie_si_record_i64($i247);
    goto corral_source_split_12887;

  corral_source_split_12887:
    assume {:verifier.code 0} true;
    $i248 := $add.i64($i247, 2000);
    call {:si_unique_call 5958} {:cexpr "__cil_tmp220"} boogie_si_record_i64($i248);
    goto corral_source_split_12888;

  corral_source_split_12888:
    assume {:verifier.code 0} true;
    $p249 := $i2p.i64.ref($i248);
    goto corral_source_split_12889;

  corral_source_split_12889:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.0, $p249);
    goto corral_source_split_12890;

  corral_source_split_12890:
    assume {:verifier.code 0} true;
    $i251 := $ne.ref($p250, $0.ref);
    goto corral_source_split_12891;

  corral_source_split_12891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i251 == 1);
    goto corral_source_split_12893;

  corral_source_split_12893:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i267 := $p2i.ref.i64($p238);
    call {:si_unique_call 5959} {:cexpr "__cil_tmp235"} boogie_si_record_i64($i267);
    goto corral_source_split_12895;

  corral_source_split_12895:
    assume {:verifier.code 0} true;
    $i268 := $add.i64($i267, 2072);
    call {:si_unique_call 5960} {:cexpr "__cil_tmp236"} boogie_si_record_i64($i268);
    goto corral_source_split_12896;

  corral_source_split_12896:
    assume {:verifier.code 0} true;
    $p269 := $i2p.i64.ref($i268);
    goto corral_source_split_12897;

  corral_source_split_12897:
    assume {:verifier.code 0} true;
    $p270 := $load.ref($M.0, $p269);
    goto corral_source_split_12898;

  corral_source_split_12898:
    assume {:verifier.code 0} true;
    $i271 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5961} {:cexpr "__cil_tmp239"} boogie_si_record_i64($i271);
    goto corral_source_split_12899;

  corral_source_split_12899:
    assume {:verifier.code 0} true;
    $i272 := $add.i64($i271, 2072);
    call {:si_unique_call 5962} {:cexpr "__cil_tmp240"} boogie_si_record_i64($i272);
    goto corral_source_split_12900;

  corral_source_split_12900:
    assume {:verifier.code 0} true;
    $p273 := $i2p.i64.ref($i272);
    goto corral_source_split_12901;

  corral_source_split_12901:
    assume {:verifier.code 0} true;
    $i274 := $p2i.ref.i32($p273);
    call {:si_unique_call 5963} {:cexpr "__cil_tmp242"} boogie_si_record_i32($i274);
    goto corral_source_split_12902;

  corral_source_split_12902:
    assume {:verifier.code 0} true;
    $p275 := $bitcast.ref.ref($p270);
    goto corral_source_split_12903;

  corral_source_split_12903:
    assume {:verifier.code 0} true;
    $i276 := $zext.i32.i64($i274);
    goto corral_source_split_12904;

  corral_source_split_12904:
    assume {:verifier.code 0} true;
    $i277 := $sub.i64(0, $i276);
    goto corral_source_split_12905;

  corral_source_split_12905:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($p275, $mul.ref($i277, 1));
    goto corral_source_split_12906;

  corral_source_split_12906:
    assume {:verifier.code 0} true;
    goto corral_source_split_12907;

  corral_source_split_12907:
    assume {:verifier.code 0} true;
    $p238 := $p278;
    goto corral_source_split_12907_dummy;

  $bb50:
    assume $i251 == 1;
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i252 := $p2i.ref.i64($p246);
    call {:si_unique_call 5964} {:cexpr "__cil_tmp222"} boogie_si_record_i64($i252);
    goto corral_source_split_12909;

  corral_source_split_12909:
    assume {:verifier.code 0} true;
    $i253 := $add.i64($i252, 2000);
    call {:si_unique_call 5965} {:cexpr "__cil_tmp223"} boogie_si_record_i64($i253);
    goto corral_source_split_12910;

  corral_source_split_12910:
    assume {:verifier.code 0} true;
    $p254 := $i2p.i64.ref($i253);
    goto corral_source_split_12911;

  corral_source_split_12911:
    assume {:verifier.code 0} true;
    $p255 := $load.ref($M.0, $p254);
    goto corral_source_split_12912;

  corral_source_split_12912:
    assume {:verifier.code 0} true;
    $i256 := $p2i.ref.i64($p246);
    call {:si_unique_call 5966} {:cexpr "__cil_tmp227"} boogie_si_record_i64($i256);
    goto corral_source_split_12913;

  corral_source_split_12913:
    assume {:verifier.code 0} true;
    $i257 := $add.i64($i256, 2024);
    call {:si_unique_call 5967} {:cexpr "__cil_tmp228"} boogie_si_record_i64($i257);
    goto corral_source_split_12914;

  corral_source_split_12914:
    assume {:verifier.code 0} true;
    $p258 := $i2p.i64.ref($i257);
    goto corral_source_split_12915;

  corral_source_split_12915:
    assume {:verifier.code 0} true;
    $i259 := $load.i32($M.0, $p258);
    call {:si_unique_call 5968} {:cexpr "__cil_tmp229"} boogie_si_record_i32($i259);
    goto corral_source_split_12916;

  corral_source_split_12916:
    assume {:verifier.code 0} true;
    $i260 := $p2i.ref.i64($p246);
    call {:si_unique_call 5969} {:cexpr "__cil_tmp231"} boogie_si_record_i64($i260);
    goto corral_source_split_12917;

  corral_source_split_12917:
    assume {:verifier.code 0} true;
    $i261 := $add.i64($i260, 2028);
    call {:si_unique_call 5970} {:cexpr "__cil_tmp232"} boogie_si_record_i64($i261);
    goto corral_source_split_12918;

  corral_source_split_12918:
    assume {:verifier.code 0} true;
    $p262 := $i2p.i64.ref($i261);
    goto corral_source_split_12919;

  corral_source_split_12919:
    assume {:verifier.code 0} true;
    $i263 := $load.i32($M.0, $p262);
    call {:si_unique_call 5971} {:cexpr "__cil_tmp233"} boogie_si_record_i32($i263);
    goto corral_source_split_12920;

  corral_source_split_12920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5972} $i264 := vmw_cursor_update_dmabuf($p0, $p255, 64, 64, $i259, $i263);
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    call {:si_unique_call 5973} {:cexpr "ret"} boogie_si_record_i32($i264);
    goto corral_source_split_12921;

  corral_source_split_12921:
    assume {:verifier.code 0} true;
    $i265 := $eq.i32($i264, 0);
    goto corral_source_split_12922;

  corral_source_split_12922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5974} vslice_dummy_var_240 := drm_err.ref.ref(.str.276, .str.277);
    goto corral_source_split_12926;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb54:
    assume $i265 == 1;
    goto corral_source_split_12924;

  corral_source_split_12924:
    assume {:verifier.code 0} true;
    goto $bb49;

  SeqInstr_763:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i219 == 1;
    goto corral_source_split_12848;

  corral_source_split_12848:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    call {:si_unique_call 5945} devirtbounce(0, .str.92, 130, 12);
    goto corral_source_split_12850;

  corral_source_split_12850:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    call vmw_ldu_commit_list_loop_$bb38();
    goto $bb38_last;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb39_dummy;

  $bb28:
    assume $i169 == 1;
    goto corral_source_split_12786;

  corral_source_split_12786:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p171 := $bitcast.ref.ref($p164);
    goto corral_source_split_12790;

  corral_source_split_12790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5910} vmw_write($p0, 35, $i163);
    goto corral_source_split_12791;

  corral_source_split_12791:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i163, 0);
    goto corral_source_split_12792;

  corral_source_split_12792:
    assume {:verifier.code 0} true;
    $i173 := $xor.i1($i172, 1);
    goto corral_source_split_12793;

  corral_source_split_12793:
    assume {:verifier.code 0} true;
    $i174 := $zext.i1.i32($i173);
    call {:si_unique_call 5911} {:cexpr "__cil_tmp163"} boogie_si_record_i32($i174);
    goto corral_source_split_12794;

  corral_source_split_12794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5912} vmw_write($p0, 36, $i174);
    goto corral_source_split_12795;

  corral_source_split_12795:
    assume {:verifier.code 0} true;
    $i175 := $p2i.ref.i64($p171);
    call {:si_unique_call 5913} {:cexpr "__cil_tmp165"} boogie_si_record_i64($i175);
    goto corral_source_split_12796;

  corral_source_split_12796:
    assume {:verifier.code 0} true;
    $i176 := $add.i64($i175, 480);
    call {:si_unique_call 5914} {:cexpr "__cil_tmp166"} boogie_si_record_i64($i176);
    goto corral_source_split_12797;

  corral_source_split_12797:
    assume {:verifier.code 0} true;
    $p177 := $i2p.i64.ref($i176);
    goto corral_source_split_12798;

  corral_source_split_12798:
    assume {:verifier.code 0} true;
    $i178 := $load.i32($M.0, $p177);
    call {:si_unique_call 5915} {:cexpr "__cil_tmp167"} boogie_si_record_i32($i178);
    goto corral_source_split_12799;

  corral_source_split_12799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5916} vmw_write($p0, 37, $i178);
    goto corral_source_split_12800;

  corral_source_split_12800:
    assume {:verifier.code 0} true;
    $i179 := $p2i.ref.i64($p171);
    call {:si_unique_call 5917} {:cexpr "__cil_tmp169"} boogie_si_record_i64($i179);
    goto corral_source_split_12801;

  corral_source_split_12801:
    assume {:verifier.code 0} true;
    $i180 := $add.i64($i179, 484);
    call {:si_unique_call 5918} {:cexpr "__cil_tmp170"} boogie_si_record_i64($i180);
    goto corral_source_split_12802;

  corral_source_split_12802:
    assume {:verifier.code 0} true;
    $p181 := $i2p.i64.ref($i180);
    goto corral_source_split_12803;

  corral_source_split_12803:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.0, $p181);
    call {:si_unique_call 5919} {:cexpr "__cil_tmp171"} boogie_si_record_i32($i182);
    goto corral_source_split_12804;

  corral_source_split_12804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5920} vmw_write($p0, 38, $i182);
    goto corral_source_split_12805;

  corral_source_split_12805:
    assume {:verifier.code 0} true;
    $i183 := $p2i.ref.i64($p171);
    call {:si_unique_call 5921} {:cexpr "__cil_tmp174"} boogie_si_record_i64($i183);
    goto corral_source_split_12806;

  corral_source_split_12806:
    assume {:verifier.code 0} true;
    $i184 := $add.i64($i183, 116);
    call {:si_unique_call 5922} {:cexpr "__cil_tmp175"} boogie_si_record_i64($i184);
    goto corral_source_split_12807;

  corral_source_split_12807:
    assume {:verifier.code 0} true;
    $p185 := $i2p.i64.ref($i184);
    goto corral_source_split_12808;

  corral_source_split_12808:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.0, $p185);
    call {:si_unique_call 5923} {:cexpr "__cil_tmp176"} boogie_si_record_i32($i186);
    goto corral_source_split_12809;

  corral_source_split_12809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5924} vmw_write($p0, 39, $i186);
    goto corral_source_split_12810;

  corral_source_split_12810:
    assume {:verifier.code 0} true;
    $i187 := $p2i.ref.i64($p171);
    call {:si_unique_call 5925} {:cexpr "__cil_tmp179"} boogie_si_record_i64($i187);
    goto corral_source_split_12811;

  corral_source_split_12811:
    assume {:verifier.code 0} true;
    $i188 := $add.i64($i187, 136);
    call {:si_unique_call 5926} {:cexpr "__cil_tmp180"} boogie_si_record_i64($i188);
    goto corral_source_split_12812;

  corral_source_split_12812:
    assume {:verifier.code 0} true;
    $p189 := $i2p.i64.ref($i188);
    goto corral_source_split_12813;

  corral_source_split_12813:
    assume {:verifier.code 0} true;
    $i190 := $load.i32($M.0, $p189);
    call {:si_unique_call 5927} {:cexpr "__cil_tmp181"} boogie_si_record_i32($i190);
    goto corral_source_split_12814;

  corral_source_split_12814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5928} vmw_write($p0, 40, $i190);
    goto corral_source_split_12815;

  corral_source_split_12815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5929} vmw_write($p0, 35, $sub.i32(0, 1));
    goto corral_source_split_12816;

  corral_source_split_12816:
    assume {:verifier.code 0} true;
    $i191 := $add.i32($i163, 1);
    call {:si_unique_call 5930} {:cexpr "i"} boogie_si_record_i32($i191);
    goto corral_source_split_12817;

  corral_source_split_12817:
    assume {:verifier.code 0} true;
    $i192 := $p2i.ref.i64($p164);
    call {:si_unique_call 5931} {:cexpr "__cil_tmp183"} boogie_si_record_i64($i192);
    goto corral_source_split_12818;

  corral_source_split_12818:
    assume {:verifier.code 0} true;
    $i193 := $add.i64($i192, 2072);
    call {:si_unique_call 5932} {:cexpr "__cil_tmp184"} boogie_si_record_i64($i193);
    goto corral_source_split_12819;

  corral_source_split_12819:
    assume {:verifier.code 0} true;
    $p194 := $i2p.i64.ref($i193);
    goto corral_source_split_12820;

  corral_source_split_12820:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.0, $p194);
    goto corral_source_split_12821;

  corral_source_split_12821:
    assume {:verifier.code 0} true;
    $i196 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5933} {:cexpr "__cil_tmp187"} boogie_si_record_i64($i196);
    goto corral_source_split_12822;

  corral_source_split_12822:
    assume {:verifier.code 0} true;
    $i197 := $add.i64($i196, 2072);
    call {:si_unique_call 5934} {:cexpr "__cil_tmp188"} boogie_si_record_i64($i197);
    goto corral_source_split_12823;

  corral_source_split_12823:
    assume {:verifier.code 0} true;
    $p198 := $i2p.i64.ref($i197);
    goto corral_source_split_12824;

  corral_source_split_12824:
    assume {:verifier.code 0} true;
    $i199 := $p2i.ref.i32($p198);
    call {:si_unique_call 5935} {:cexpr "__cil_tmp190"} boogie_si_record_i32($i199);
    goto corral_source_split_12825;

  corral_source_split_12825:
    assume {:verifier.code 0} true;
    $p200 := $bitcast.ref.ref($p195);
    goto corral_source_split_12826;

  corral_source_split_12826:
    assume {:verifier.code 0} true;
    $i201 := $zext.i32.i64($i199);
    goto corral_source_split_12827;

  corral_source_split_12827:
    assume {:verifier.code 0} true;
    $i202 := $sub.i64(0, $i201);
    goto corral_source_split_12828;

  corral_source_split_12828:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($p200, $mul.ref($i202, 1));
    goto corral_source_split_12829;

  corral_source_split_12829:
    assume {:verifier.code 0} true;
    goto corral_source_split_12830;

  corral_source_split_12830:
    assume {:verifier.code 0} true;
    $i163, $p164 := $i191, $p203;
    goto corral_source_split_12830_dummy;

  $bb23:
    assume $i144 == 1;
    goto corral_source_split_12756;

  corral_source_split_12756:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p4);
    call {:si_unique_call 5900} {:cexpr "__cil_tmp146"} boogie_si_record_i64($i145);
    goto corral_source_split_12757;

  corral_source_split_12757:
    assume {:verifier.code 0} true;
    $i146 := $add.i64($i145, 16);
    call {:si_unique_call 5901} {:cexpr "__cil_tmp147"} boogie_si_record_i64($i146);
    goto corral_source_split_12758;

  corral_source_split_12758:
    assume {:verifier.code 0} true;
    $p147 := $i2p.i64.ref($i146);
    goto corral_source_split_12759;

  corral_source_split_12759:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p147);
    call {:si_unique_call 5902} {:cexpr "tmp___11"} boogie_si_record_i32($i148);
    goto corral_source_split_12760;

  corral_source_split_12760:
    assume {:verifier.code 0} true;
    $i149 := $i148;
    goto $bb25;

  $bb20:
    assume $i101 == 1;
    goto corral_source_split_12709;

  corral_source_split_12709:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_12679_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12621;

  corral_source_split_12907_dummy:
    assume false;
    return;

  $bb44_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_12872;

  $bb39_dummy:
    assume false;
    return;

  $bb38_last:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_12830_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12778;
}



const vmw_fb_off: ref;

axiom vmw_fb_off == $sub.ref(0, 1004208);

procedure vmw_fb_off($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed, $M.6, $M.11, $M.12, $M.2, $CurrAddr, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_fb_off($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i1;
  var $i6: i32;
  var vslice_dummy_var_241: i1;
  var vslice_dummy_var_242: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12928;

  corral_source_split_12928:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 5975} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i1);
    goto corral_source_split_12929;

  corral_source_split_12929:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 2600);
    call {:si_unique_call 5976} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i2);
    goto corral_source_split_12930;

  corral_source_split_12930:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_12931;

  corral_source_split_12931:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_12932;

  corral_source_split_12932:
    assume {:verifier.code 0} true;
    $i5 := $ne.ref($p4, $0.ref);
    goto corral_source_split_12933;

  corral_source_split_12933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_12935;

  corral_source_split_12935:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12937;

  corral_source_split_12937:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    call {:si_unique_call 5977} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i7);
    goto corral_source_split_12939;

  corral_source_split_12939:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 2600);
    call {:si_unique_call 5978} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i8);
    goto corral_source_split_12940;

  corral_source_split_12940:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_12941;

  corral_source_split_12941:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_12942;

  corral_source_split_12942:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_12943;

  corral_source_split_12943:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    call {:si_unique_call 5979} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i12);
    goto corral_source_split_12944;

  corral_source_split_12944:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 1160);
    call {:si_unique_call 5980} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i13);
    goto corral_source_split_12945;

  corral_source_split_12945:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_12946;

  corral_source_split_12946:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_12947;

  corral_source_split_12947:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_12948;

  corral_source_split_12948:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    call {:si_unique_call 5981} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i17);
    goto corral_source_split_12950;

  corral_source_split_12950:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 160);
    call {:si_unique_call 5982} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i18);
    goto corral_source_split_12951;

  corral_source_split_12951:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_12952;

  corral_source_split_12952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5983} $p20 := spinlock_check($p19);
    goto corral_source_split_12953;

  corral_source_split_12953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5984} $i21 := _raw_spin_lock_irqsave($p20);
    call {:si_unique_call 5985} {:cexpr "flags"} boogie_si_record_i64($i21);
    goto corral_source_split_12954;

  corral_source_split_12954:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p16);
    call {:si_unique_call 5986} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i22);
    goto corral_source_split_12956;

  corral_source_split_12956:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 184);
    call {:si_unique_call 5987} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i23);
    goto corral_source_split_12957;

  corral_source_split_12957:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_12958;

  corral_source_split_12958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 0);
    goto corral_source_split_12959;

  corral_source_split_12959:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p16);
    call {:si_unique_call 5988} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i25);
    goto corral_source_split_12960;

  corral_source_split_12960:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 160);
    call {:si_unique_call 5989} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i26);
    goto corral_source_split_12961;

  corral_source_split_12961:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_12962;

  corral_source_split_12962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5990} spin_unlock_irqrestore($p27, $i21);
    goto corral_source_split_12963;

  corral_source_split_12963:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p11);
    call {:si_unique_call 5991} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i28);
    goto corral_source_split_12964;

  corral_source_split_12964:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 960);
    call {:si_unique_call 5992} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i29);
    goto corral_source_split_12965;

  corral_source_split_12965:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i29);
    goto corral_source_split_12966;

  corral_source_split_12966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5993} vslice_dummy_var_241 := flush_delayed_work_sync($p30);
    goto corral_source_split_12967;

  corral_source_split_12967:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p16);
    call {:si_unique_call 5994} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i32);
    goto corral_source_split_12968;

  corral_source_split_12968:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 144);
    call {:si_unique_call 5995} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i33);
    goto corral_source_split_12969;

  corral_source_split_12969:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_12970;

  corral_source_split_12970:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $0.ref);
    goto corral_source_split_12971;

  corral_source_split_12971:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p16);
    call {:si_unique_call 5996} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i35);
    goto corral_source_split_12972;

  corral_source_split_12972:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 24);
    call {:si_unique_call 5997} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i36);
    goto corral_source_split_12973;

  corral_source_split_12973:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i36);
    goto corral_source_split_12974;

  corral_source_split_12974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5998} ttm_bo_kunmap($p37);
    goto corral_source_split_12975;

  corral_source_split_12975:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p16);
    call {:si_unique_call 5999} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i38);
    goto corral_source_split_12976;

  corral_source_split_12976:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 16);
    call {:si_unique_call 6000} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i39);
    goto corral_source_split_12977;

  corral_source_split_12977:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_12978;

  corral_source_split_12978:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_12979;

  corral_source_split_12979:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1(0);
    goto corral_source_split_12980;

  corral_source_split_12980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6001} vslice_dummy_var_242 := vmw_dmabuf_unpin($p0, $p41, $i42);
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    goto corral_source_split_12981;

  corral_source_split_12981:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  SeqInstr_766:
    assume !assertsPassed;
    return;
}



const vmw_ldu_add_active: ref;

axiom vmw_ldu_add_active == $sub.ref(0, 1005240);

procedure vmw_ldu_add_active($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.11, $M.12, $M.2, $M.6, $M.10, assertsPassed, $M.16, $M.3, $M.4, $CurrAddr, $M.13;



implementation vmw_ldu_add_active($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i1;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i1;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $i60: i1;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $i66: i64;
  var $i67: i64;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $i97: i64;
  var $i98: i64;
  var $p99: ref;
  var $i100: i32;
  var $i101: i64;
  var $i102: i64;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i64;
  var $i108: i64;
  var $p109: ref;
  var $i110: i64;
  var $i111: i64;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $i115: i64;
  var $p116: ref;
  var $i117: i32;
  var $p118: ref;
  var $i119: i64;
  var $i120: i64;
  var $p121: ref;
  var $p96: ref;
  var $i123: i64;
  var $i124: i64;
  var $p125: ref;
  var $i126: i64;
  var $i127: i64;
  var $i128: i64;
  var $i129: i64;
  var $p130: ref;
  var $i131: i32;
  var $i132: i32;
  var $p133: ref;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12983;

  corral_source_split_12983:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 6002} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i3);
    goto corral_source_split_12984;

  corral_source_split_12984:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 2608);
    call {:si_unique_call 6003} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i4);
    goto corral_source_split_12985;

  corral_source_split_12985:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_12986;

  corral_source_split_12986:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_12987;

  corral_source_split_12987:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    call {:si_unique_call 6004} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i7);
    goto corral_source_split_12989;

  corral_source_split_12989:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 16);
    call {:si_unique_call 6005} {:cexpr "__cil_tmp15"} boogie_si_record_i64($i8);
    goto corral_source_split_12990;

  corral_source_split_12990:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_12991;

  corral_source_split_12991:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    call {:si_unique_call 6006} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i10);
    goto corral_source_split_12992;

  corral_source_split_12992:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_12993;

  corral_source_split_12993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    goto corral_source_split_12995;

  corral_source_split_12995:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p6);
    call {:si_unique_call 6007} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i12);
    goto corral_source_split_12996;

  corral_source_split_12996:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 24);
    call {:si_unique_call 6008} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i13);
    goto corral_source_split_12997;

  corral_source_split_12997:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_12998;

  corral_source_split_12998:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_12999;

  corral_source_split_12999:
    assume {:verifier.code 0} true;
    $i16 := $ne.ref($p15, $0.ref);
    goto corral_source_split_13000;

  corral_source_split_13000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_13004;

  corral_source_split_13004:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_13006;

  corral_source_split_13006:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    call {:si_unique_call 6009} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i19);
    goto corral_source_split_13007;

  corral_source_split_13007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6010} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 6011} {:cexpr "tmp___8"} boogie_si_record_i64($i20);
    goto corral_source_split_13008;

  corral_source_split_13008:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_13009;

  corral_source_split_13009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p6);
    call {:si_unique_call 6013} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i22);
    goto corral_source_split_13015;

  corral_source_split_13015:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 24);
    call {:si_unique_call 6014} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i23);
    goto corral_source_split_13016;

  corral_source_split_13016:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_13017;

  corral_source_split_13017:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_13018;

  corral_source_split_13018:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    call {:si_unique_call 6015} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i26);
    goto corral_source_split_13019;

  corral_source_split_13019:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p2);
    call {:si_unique_call 6016} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i27);
    goto corral_source_split_13020;

  corral_source_split_13020:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, $i26);
    goto corral_source_split_13021;

  corral_source_split_13021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p1);
    call {:si_unique_call 6037} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i69);
    goto corral_source_split_13072;

  corral_source_split_13072:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, 2072);
    call {:si_unique_call 6038} {:cexpr "__cil_tmp49"} boogie_si_record_i64($i70);
    goto corral_source_split_13073;

  corral_source_split_13073:
    assume {:verifier.code 0} true;
    $p71 := $i2p.i64.ref($i70);
    goto corral_source_split_13074;

  corral_source_split_13074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6039} $i72 := list_empty($p71);
    call {:si_unique_call 6040} {:cexpr "tmp___9"} boogie_si_record_i32($i72);
    goto corral_source_split_13075;

  corral_source_split_13075:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_13076;

  corral_source_split_13076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i73 == 1);
    goto corral_source_split_13080;

  corral_source_split_13080:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb31:
    assume $i73 == 1;
    goto corral_source_split_13078;

  corral_source_split_13078:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_13082;

  corral_source_split_13082:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p6);
    goto corral_source_split_13083;

  corral_source_split_13083:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_13084;

  corral_source_split_13084:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 6041} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i77);
    goto corral_source_split_13085;

  corral_source_split_13085:
    assume {:verifier.code 0} true;
    $i78 := $add.i64($i77, 2072);
    call {:si_unique_call 6042} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i78);
    goto corral_source_split_13086;

  corral_source_split_13086:
    assume {:verifier.code 0} true;
    $p79 := $i2p.i64.ref($i78);
    goto corral_source_split_13087;

  corral_source_split_13087:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i32($p79);
    call {:si_unique_call 6043} {:cexpr "__cil_tmp57"} boogie_si_record_i32($i80);
    goto corral_source_split_13088;

  corral_source_split_13088:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p76);
    goto corral_source_split_13089;

  corral_source_split_13089:
    assume {:verifier.code 0} true;
    $i82 := $zext.i32.i64($i80);
    goto corral_source_split_13090;

  corral_source_split_13090:
    assume {:verifier.code 0} true;
    $i83 := $sub.i64(0, $i82);
    goto corral_source_split_13091;

  corral_source_split_13091:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p81, $mul.ref($i83, 1));
    goto corral_source_split_13092;

  corral_source_split_13092:
    assume {:verifier.code 0} true;
    goto corral_source_split_13093;

  corral_source_split_13093:
    assume {:verifier.code 0} true;
    $p86, $p87 := $p84, $p6;
    goto $bb35;

  $bb35:
    call $p86, $p87, $p88, $i89, $i90, $i91, $p92, $i93, $i94, $p95, $i97, $i98, $p99, $i100, $i101, $i102, $p103, $i104, $i105, $p106, $i107, $i108, $p109, $i110, $i111, $p112, $p113, $i114, $i115, $p116, $i117, $p118, $i119, $i120, $p121 := vmw_ldu_add_active_loop_$bb35($p1, $p6, $p86, $p87, $p88, $i89, $i90, $i91, $p92, $i93, $i94, $p95, $i97, $i98, $p99, $i100, $i101, $i102, $p103, $i104, $i105, $p106, $i107, $i108, $p109, $i110, $i111, $p112, $p113, $i114, $i115, $p116, $i117, $p118, $i119, $i120, $p121);
    goto $bb35_last;

  corral_source_split_13095:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p6);
    goto corral_source_split_13097;

  corral_source_split_13097:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    call {:si_unique_call 6044} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i89);
    goto corral_source_split_13098;

  corral_source_split_13098:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p86);
    call {:si_unique_call 6045} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i90);
    goto corral_source_split_13099;

  corral_source_split_13099:
    assume {:verifier.code 0} true;
    $i91 := $add.i64($i90, 2072);
    call {:si_unique_call 6046} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i91);
    goto corral_source_split_13100;

  corral_source_split_13100:
    assume {:verifier.code 0} true;
    $p92 := $i2p.i64.ref($i91);
    goto corral_source_split_13101;

  corral_source_split_13101:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p92);
    call {:si_unique_call 6047} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i93);
    goto corral_source_split_13102;

  corral_source_split_13102:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, $i89);
    goto corral_source_split_13103;

  corral_source_split_13103:
    assume {:verifier.code 0} true;
    $p95 := $p87;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_13107;

  corral_source_split_13107:
    assume {:verifier.code 0} true;
    $p96 := $p95;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_13119;

  corral_source_split_13119:
    assume {:verifier.code 0} true;
    $i123 := $p2i.ref.i64($p1);
    call {:si_unique_call 6054} {:cexpr "__cil_tmp86"} boogie_si_record_i64($i123);
    goto corral_source_split_13120;

  corral_source_split_13120:
    assume {:verifier.code 0} true;
    $i124 := $add.i64($i123, 2072);
    call {:si_unique_call 6055} {:cexpr "__cil_tmp87"} boogie_si_record_i64($i124);
    goto corral_source_split_13121;

  corral_source_split_13121:
    assume {:verifier.code 0} true;
    $p125 := $i2p.i64.ref($i124);
    goto corral_source_split_13122;

  corral_source_split_13122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6056} list_add($p125, $p96);
    goto corral_source_split_13123;

  corral_source_split_13123:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p6);
    call {:si_unique_call 6057} {:cexpr "__cil_tmp89"} boogie_si_record_i64($i126);
    goto corral_source_split_13124;

  corral_source_split_13124:
    assume {:verifier.code 0} true;
    $i127 := $add.i64($i126, 16);
    call {:si_unique_call 6058} {:cexpr "__cil_tmp90"} boogie_si_record_i64($i127);
    goto corral_source_split_13125;

  corral_source_split_13125:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p6);
    call {:si_unique_call 6059} {:cexpr "__cil_tmp91"} boogie_si_record_i64($i128);
    goto corral_source_split_13126;

  corral_source_split_13126:
    assume {:verifier.code 0} true;
    $i129 := $add.i64($i128, 16);
    call {:si_unique_call 6060} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i129);
    goto corral_source_split_13127;

  corral_source_split_13127:
    assume {:verifier.code 0} true;
    $p130 := $i2p.i64.ref($i129);
    goto corral_source_split_13128;

  corral_source_split_13128:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    call {:si_unique_call 6061} {:cexpr "__cil_tmp93"} boogie_si_record_i32($i131);
    goto corral_source_split_13129;

  corral_source_split_13129:
    assume {:verifier.code 0} true;
    $i132 := $add.i32($i131, 1);
    goto corral_source_split_13130;

  corral_source_split_13130:
    assume {:verifier.code 0} true;
    $p133 := $i2p.i64.ref($i127);
    goto corral_source_split_13131;

  corral_source_split_13131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p133, $i132);
    goto corral_source_split_13132;

  corral_source_split_13132:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb37:
    assume $i94 == 1;
    goto corral_source_split_13105;

  corral_source_split_13105:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p1);
    call {:si_unique_call 6048} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i97);
    goto corral_source_split_13109;

  corral_source_split_13109:
    assume {:verifier.code 0} true;
    $i98 := $add.i64($i97, 2032);
    call {:si_unique_call 6049} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i98);
    goto corral_source_split_13110;

  corral_source_split_13110:
    assume {:verifier.code 0} true;
    $p99 := $i2p.i64.ref($i98);
    goto corral_source_split_13111;

  corral_source_split_13111:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    call {:si_unique_call 6050} {:cexpr "__cil_tmp69"} boogie_si_record_i32($i100);
    goto corral_source_split_13112;

  corral_source_split_13112:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p86);
    call {:si_unique_call 6051} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i101);
    goto corral_source_split_13113;

  corral_source_split_13113:
    assume {:verifier.code 0} true;
    $i102 := $add.i64($i101, 2032);
    call {:si_unique_call 6052} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i102);
    goto corral_source_split_13114;

  corral_source_split_13114:
    assume {:verifier.code 0} true;
    $p103 := $i2p.i64.ref($i102);
    goto corral_source_split_13115;

  corral_source_split_13115:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    call {:si_unique_call 6053} {:cexpr "__cil_tmp73"} boogie_si_record_i32($i104);
    goto corral_source_split_13116;

  corral_source_split_13116:
    assume {:verifier.code 0} true;
    $i105 := $ugt.i32($i104, $i100);
    goto corral_source_split_13117;

  corral_source_split_13117:
    assume {:verifier.code 0} true;
    $p106 := $p87;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p86);
    call {:si_unique_call 6062} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i107);
    goto corral_source_split_13136;

  corral_source_split_13136:
    assume {:verifier.code 0} true;
    $i108 := $add.i64($i107, 2072);
    call {:si_unique_call 6063} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i108);
    goto corral_source_split_13137;

  corral_source_split_13137:
    assume {:verifier.code 0} true;
    $p109 := $i2p.i64.ref($i108);
    goto corral_source_split_13138;

  corral_source_split_13138:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p86);
    call {:si_unique_call 6064} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i110);
    goto corral_source_split_13139;

  corral_source_split_13139:
    assume {:verifier.code 0} true;
    $i111 := $add.i64($i110, 2072);
    call {:si_unique_call 6065} {:cexpr "__cil_tmp77"} boogie_si_record_i64($i111);
    goto corral_source_split_13140;

  corral_source_split_13140:
    assume {:verifier.code 0} true;
    $p112 := $i2p.i64.ref($i111);
    goto corral_source_split_13141;

  corral_source_split_13141:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_13142;

  corral_source_split_13142:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 6066} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i114);
    goto corral_source_split_13143;

  corral_source_split_13143:
    assume {:verifier.code 0} true;
    $i115 := $add.i64($i114, 2072);
    call {:si_unique_call 6067} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i115);
    goto corral_source_split_13144;

  corral_source_split_13144:
    assume {:verifier.code 0} true;
    $p116 := $i2p.i64.ref($i115);
    goto corral_source_split_13145;

  corral_source_split_13145:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i32($p116);
    call {:si_unique_call 6068} {:cexpr "__cil_tmp83"} boogie_si_record_i32($i117);
    goto corral_source_split_13146;

  corral_source_split_13146:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p113);
    goto corral_source_split_13147;

  corral_source_split_13147:
    assume {:verifier.code 0} true;
    $i119 := $zext.i32.i64($i117);
    goto corral_source_split_13148;

  corral_source_split_13148:
    assume {:verifier.code 0} true;
    $i120 := $sub.i64(0, $i119);
    goto corral_source_split_13149;

  corral_source_split_13149:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p118, $mul.ref($i120, 1));
    goto corral_source_split_13150;

  corral_source_split_13150:
    assume {:verifier.code 0} true;
    goto corral_source_split_13151;

  corral_source_split_13151:
    assume {:verifier.code 0} true;
    $p86, $p87 := $p121, $p109;
    goto corral_source_split_13151_dummy;

  $bb41:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_13134;

  corral_source_split_13134:
    assume {:verifier.code 0} true;
    $p96 := $p106;
    goto $bb40;

  $bb19:
    assume $i28 == 1;
    goto corral_source_split_13023;

  corral_source_split_13023:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p6);
    call {:si_unique_call 6017} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i29);
    goto corral_source_split_13024;

  corral_source_split_13024:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 24);
    call {:si_unique_call 6018} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i30);
    goto corral_source_split_13025;

  corral_source_split_13025:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_13026;

  corral_source_split_13026:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_13027;

  corral_source_split_13027:
    assume {:verifier.code 0} true;
    $i33 := $ne.ref($p32, $0.ref);
    goto corral_source_split_13028;

  corral_source_split_13028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p2);
    call {:si_unique_call 6030} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i56);
    goto corral_source_split_13055;

  corral_source_split_13055:
    assume {:verifier.code 0} true;
    $i57 := $add.i64($i56, 120);
    call {:si_unique_call 6031} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i57);
    goto corral_source_split_13056;

  corral_source_split_13056:
    assume {:verifier.code 0} true;
    $p58 := $i2p.i64.ref($i57);
    goto corral_source_split_13057;

  corral_source_split_13057:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_13058;

  corral_source_split_13058:
    assume {:verifier.code 0} true;
    $i60 := $ne.ref($p59, $0.ref);
    goto corral_source_split_13059;

  corral_source_split_13059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p6);
    call {:si_unique_call 6035} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i66);
    goto corral_source_split_13067;

  corral_source_split_13067:
    assume {:verifier.code 0} true;
    $i67 := $add.i64($i66, 24);
    call {:si_unique_call 6036} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i67);
    goto corral_source_split_13068;

  corral_source_split_13068:
    assume {:verifier.code 0} true;
    $p68 := $i2p.i64.ref($i67);
    goto corral_source_split_13069;

  corral_source_split_13069:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $p2);
    goto corral_source_split_13070;

  corral_source_split_13070:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i60 == 1;
    goto corral_source_split_13061;

  corral_source_split_13061:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p2);
    call {:si_unique_call 6032} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i61);
    goto corral_source_split_13062;

  corral_source_split_13062:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, 120);
    call {:si_unique_call 6033} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i62);
    goto corral_source_split_13063;

  corral_source_split_13063:
    assume {:verifier.code 0} true;
    $p63 := $i2p.i64.ref($i62);
    goto corral_source_split_13064;

  corral_source_split_13064:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    call {:si_unique_call 6034} vslice_dummy_var_244 := devirtbounce.19($p64, $p2);
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    goto corral_source_split_13065;

  corral_source_split_13065:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_772:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i33 == 1;
    goto corral_source_split_13030;

  corral_source_split_13030:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p6);
    call {:si_unique_call 6019} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i34);
    goto corral_source_split_13031;

  corral_source_split_13031:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 24);
    call {:si_unique_call 6020} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i35);
    goto corral_source_split_13032;

  corral_source_split_13032:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_13033;

  corral_source_split_13033:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_13034;

  corral_source_split_13034:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    call {:si_unique_call 6021} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i38);
    goto corral_source_split_13035;

  corral_source_split_13035:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 128);
    call {:si_unique_call 6022} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i39);
    goto corral_source_split_13036;

  corral_source_split_13036:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_13037;

  corral_source_split_13037:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_13038;

  corral_source_split_13038:
    assume {:verifier.code 0} true;
    $i42 := $ne.ref($p41, $0.ref);
    goto corral_source_split_13039;

  corral_source_split_13039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i42 == 1;
    goto corral_source_split_13041;

  corral_source_split_13041:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p6);
    call {:si_unique_call 6023} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i43);
    goto corral_source_split_13042;

  corral_source_split_13042:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 24);
    call {:si_unique_call 6024} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i44);
    goto corral_source_split_13043;

  corral_source_split_13043:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_13044;

  corral_source_split_13044:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_13045;

  corral_source_split_13045:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    call {:si_unique_call 6025} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i47);
    goto corral_source_split_13046;

  corral_source_split_13046:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 128);
    call {:si_unique_call 6026} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i48);
    goto corral_source_split_13047;

  corral_source_split_13047:
    assume {:verifier.code 0} true;
    $p49 := $i2p.i64.ref($i48);
    goto corral_source_split_13048;

  corral_source_split_13048:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_13049;

  corral_source_split_13049:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p6);
    call {:si_unique_call 6027} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i51);
    goto corral_source_split_13050;

  corral_source_split_13050:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 24);
    call {:si_unique_call 6028} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i52);
    goto corral_source_split_13051;

  corral_source_split_13051:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_13052;

  corral_source_split_13052:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    call {:si_unique_call 6029} vslice_dummy_var_243 := devirtbounce.19($p50, $p54);
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    goto corral_source_split_13053;

  corral_source_split_13053:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_769:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_13011;

  corral_source_split_13011:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    call {:si_unique_call 6012} devirtbounce(0, .str.92, 183, 12);
    goto corral_source_split_13013;

  corral_source_split_13013:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call vmw_ldu_add_active_loop_$bb13();
    goto $bb13_last;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_13002;

  corral_source_split_13002:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb7;

  $bb3:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb8;

  corral_source_split_13151_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_13095;

  $bb14_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto $bb14;
}



const flush_delayed_work_sync: ref;

axiom flush_delayed_work_sync == $sub.ref(0, 1006272);

procedure flush_delayed_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation flush_delayed_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13153;

  corral_source_split_13153:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6069} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 6070} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_13154;

  corral_source_split_13154:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vmw_cursor_update_dmabuf: ref;

axiom vmw_cursor_update_dmabuf == $sub.ref(0, 1007304);

procedure vmw_cursor_update_dmabuf($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $CurrAddr, assertsPassed, $M.3, $M.4, $M.6, $M.11, $M.12, $M.13, $M.10, $M.16;



implementation vmw_cursor_update_dmabuf($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i32;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i45: i32;
  var $p49: ref;
  var $i31: i32;
  var vslice_dummy_var_245: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 6071} $p6 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 6072} $p7 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 6073} {:cexpr "vmw_cursor_update_dmabuf:arg:width"} boogie_si_record_i32($i2);
    call {:si_unique_call 6074} {:cexpr "vmw_cursor_update_dmabuf:arg:height"} boogie_si_record_i32($i3);
    call {:si_unique_call 6075} {:cexpr "vmw_cursor_update_dmabuf:arg:hotspotX"} boogie_si_record_i32($i4);
    call {:si_unique_call 6076} {:cexpr "vmw_cursor_update_dmabuf:arg:hotspotY"} boogie_si_record_i32($i5);
    goto corral_source_split_13156;

  corral_source_split_13156:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i2, $i3);
    call {:si_unique_call 6077} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i8);
    goto corral_source_split_13157;

  corral_source_split_13157:
    assume {:verifier.code 0} true;
    $i9 := $mul.i32($i8, 4);
    call {:si_unique_call 6078} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i9);
    goto corral_source_split_13158;

  corral_source_split_13158:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    call {:si_unique_call 6079} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i10);
    goto corral_source_split_13159;

  corral_source_split_13159:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 4096);
    call {:si_unique_call 6080} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i11);
    goto corral_source_split_13160;

  corral_source_split_13160:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64($i11, 1);
    call {:si_unique_call 6081} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i12);
    goto corral_source_split_13161;

  corral_source_split_13161:
    assume {:verifier.code 0} true;
    $i13 := $lshr.i64($i12, 12);
    call {:si_unique_call 6082} {:cexpr "kmap_num"} boogie_si_record_i64($i13);
    goto corral_source_split_13162;

  corral_source_split_13162:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_13163;

  corral_source_split_13163:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1(1);
    goto corral_source_split_13164;

  corral_source_split_13164:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1(0);
    goto corral_source_split_13165;

  corral_source_split_13165:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1(0);
    goto corral_source_split_13166;

  corral_source_split_13166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6083} $i18 := ttm_bo_reserve($p14, $i15, $i16, $i17, 0);
    call {:si_unique_call 6084} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_13167;

  corral_source_split_13167:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_13168;

  corral_source_split_13168:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    call {:si_unique_call 6085} {:cexpr "__cil_tmp26"} boogie_si_record_i32($i20);
    goto corral_source_split_13169;

  corral_source_split_13169:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_13170;

  corral_source_split_13170:
    assume {:verifier.code 0} true;
    $i22 := $xor.i1($i21, 1);
    goto corral_source_split_13171;

  corral_source_split_13171:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    call {:si_unique_call 6086} {:cexpr "__cil_tmp27"} boogie_si_record_i32($i23);
    goto corral_source_split_13172;

  corral_source_split_13172:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_13173;

  corral_source_split_13173:
    assume {:verifier.code 0} true;
    $i25 := $xor.i1($i24, 1);
    goto corral_source_split_13174;

  corral_source_split_13174:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 6087} {:cexpr "__cil_tmp28"} boogie_si_record_i32($i26);
    goto corral_source_split_13175;

  corral_source_split_13175:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    call {:si_unique_call 6088} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i27);
    goto corral_source_split_13176;

  corral_source_split_13176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6089} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 6090} {:cexpr "tmp___7"} boogie_si_record_i64($i28);
    goto corral_source_split_13177;

  corral_source_split_13177:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_13178;

  corral_source_split_13178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p1);
    goto corral_source_split_13185;

  corral_source_split_13185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6092} $i33 := ttm_bo_kmap($p32, 0, $i13, $p6);
    call {:si_unique_call 6093} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_13186;

  corral_source_split_13186:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_13187;

  corral_source_split_13187:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    call {:si_unique_call 6094} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i35);
    goto corral_source_split_13188;

  corral_source_split_13188:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_13189;

  corral_source_split_13189:
    assume {:verifier.code 0} true;
    $i37 := $xor.i1($i36, 1);
    goto corral_source_split_13190;

  corral_source_split_13190:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i32($i37);
    call {:si_unique_call 6095} {:cexpr "__cil_tmp32"} boogie_si_record_i32($i38);
    goto corral_source_split_13191;

  corral_source_split_13191:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_13192;

  corral_source_split_13192:
    assume {:verifier.code 0} true;
    $i40 := $xor.i1($i39, 1);
    goto corral_source_split_13193;

  corral_source_split_13193:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i32($i40);
    call {:si_unique_call 6096} {:cexpr "__cil_tmp33"} boogie_si_record_i32($i41);
    goto corral_source_split_13194;

  corral_source_split_13194:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    call {:si_unique_call 6097} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i42);
    goto corral_source_split_13195;

  corral_source_split_13195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6098} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 6099} {:cexpr "tmp___8"} boogie_si_record_i64($i43);
    goto corral_source_split_13196;

  corral_source_split_13196:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_13197;

  corral_source_split_13197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6101} $p46 := ttm_kmap_obj_virtual($p6, $p7);
    goto corral_source_split_13205;

  corral_source_split_13205:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_13206;

  corral_source_split_13206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6102} $i48 := vmw_cursor_update_image($p0, $p47, $i2, $i3, $i4, $i5);
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    call {:si_unique_call 6103} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_13207;

  corral_source_split_13207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6104} ttm_bo_kunmap($p6);
    goto corral_source_split_13208;

  corral_source_split_13208:
    assume {:verifier.code 0} true;
    $i45 := $i48;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_13201;

  corral_source_split_13201:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p1);
    goto corral_source_split_13202;

  corral_source_split_13202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6100} ttm_bo_unreserve($p49);
    goto corral_source_split_13203;

  corral_source_split_13203:
    assume {:verifier.code 0} true;
    $i31 := $i45;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13183;

  corral_source_split_13183:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  SeqInstr_775:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i44 == 1;
    goto corral_source_split_13199;

  corral_source_split_13199:
    assume {:verifier.code 0} true;
    $i45 := $i33;
    goto $bb7;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_13180;

  corral_source_split_13180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6091} vslice_dummy_var_245 := drm_err.ref.ref(.str.13, .str.14);
    goto corral_source_split_13181;

  corral_source_split_13181:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb3;
}



const vmw_cursor_update_position: ref;

axiom vmw_cursor_update_position == $sub.ref(0, 1008336);

procedure vmw_cursor_update_position($p0: ref, $i1: i1, $i2: i32, $i3: i32);



const vmw_sou_connector_destroy: ref;

axiom vmw_sou_connector_destroy == $sub.ref(0, 1009368);

procedure vmw_sou_connector_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation vmw_sou_connector_destroy($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13210;

  corral_source_split_13210:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 6105} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i1);
    goto corral_source_split_13211;

  corral_source_split_13211:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 616);
    call {:si_unique_call 6106} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
    goto corral_source_split_13212;

  corral_source_split_13212:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_13213;

  corral_source_split_13213:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i32($p3);
    call {:si_unique_call 6107} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i4);
    goto corral_source_split_13214;

  corral_source_split_13214:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_13215;

  corral_source_split_13215:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i4);
    goto corral_source_split_13216;

  corral_source_split_13216:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, $i6);
    goto corral_source_split_13217;

  corral_source_split_13217:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p5, $mul.ref($i7, 1));
    goto corral_source_split_13218;

  corral_source_split_13218:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_13219;

  corral_source_split_13219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6108} vmw_sou_destroy($p9);
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    goto corral_source_split_13220;

  corral_source_split_13220:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_778:
    assume !assertsPassed;
    return;
}



const vmw_sou_destroy: ref;

axiom vmw_sou_destroy == $sub.ref(0, 1010400);

procedure vmw_sou_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation vmw_sou_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13222;

  corral_source_split_13222:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_13223;

  corral_source_split_13223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6109} vmw_display_unit_cleanup($p1);
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    goto corral_source_split_13224;

  corral_source_split_13224:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_13225;

  corral_source_split_13225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6110} kfree($p2);
    goto corral_source_split_13226;

  corral_source_split_13226:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_781:
    assume !assertsPassed;
    return;
}



const vmw_sou_encoder_destroy: ref;

axiom vmw_sou_encoder_destroy == $sub.ref(0, 1011432);

procedure vmw_sou_encoder_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation vmw_sou_encoder_destroy($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13228;

  corral_source_split_13228:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 6111} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i1);
    goto corral_source_split_13229;

  corral_source_split_13229:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 544);
    call {:si_unique_call 6112} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
    goto corral_source_split_13230;

  corral_source_split_13230:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_13231;

  corral_source_split_13231:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i32($p3);
    call {:si_unique_call 6113} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i4);
    goto corral_source_split_13232;

  corral_source_split_13232:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_13233;

  corral_source_split_13233:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i4);
    goto corral_source_split_13234;

  corral_source_split_13234:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, $i6);
    goto corral_source_split_13235;

  corral_source_split_13235:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p5, $mul.ref($i7, 1));
    goto corral_source_split_13236;

  corral_source_split_13236:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_13237;

  corral_source_split_13237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6114} vmw_sou_destroy($p9);
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    goto corral_source_split_13238;

  corral_source_split_13238:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_784:
    assume !assertsPassed;
    return;
}



const vmw_sou_crtc_destroy: ref;

axiom vmw_sou_crtc_destroy == $sub.ref(0, 1012464);

procedure vmw_sou_crtc_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation vmw_sou_crtc_destroy($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13240;

  corral_source_split_13240:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_13241;

  corral_source_split_13241:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i32($p1);
    call {:si_unique_call 6115} {:cexpr "__cil_tmp5"} boogie_si_record_i32($i2);
    goto corral_source_split_13242;

  corral_source_split_13242:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_13243;

  corral_source_split_13243:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i2);
    goto corral_source_split_13244;

  corral_source_split_13244:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, $i4);
    goto corral_source_split_13245;

  corral_source_split_13245:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 1));
    goto corral_source_split_13246;

  corral_source_split_13246:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_13247;

  corral_source_split_13247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6116} vmw_sou_destroy($p7);
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    goto corral_source_split_13248;

  corral_source_split_13248:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_787:
    assume !assertsPassed;
    return;
}



const vmw_sou_crtc_set_config: ref;

axiom vmw_sou_crtc_set_config == $sub.ref(0, 1013496);

procedure vmw_sou_crtc_set_config($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.2, $M.6, $M.1, $M.10, assertsPassed, $M.16, $M.3, $M.4, $CurrAddr, $M.13;



implementation vmw_sou_crtc_set_config($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $i73: i64;
  var $i74: i64;
  var $p75: ref;
  var $i76: i8;
  var $i77: i1;
  var $i78: i64;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $p85: ref;
  var $i86: i1;
  var $i87: i1;
  var $i88: i64;
  var $i89: i64;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $i95: i64;
  var $i96: i64;
  var $p97: ref;
  var $i98: i8;
  var $i99: i1;
  var $i100: i64;
  var $i101: i64;
  var $i102: i64;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $i106: i64;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $i110: i1;
  var $i112: i64;
  var $i113: i64;
  var $p114: ref;
  var $i115: i64;
  var $i116: i64;
  var $p117: ref;
  var $i118: i64;
  var $i119: i64;
  var $p120: ref;
  var $i121: i64;
  var $i122: i1;
  var $i123: i64;
  var $i124: i64;
  var $p125: ref;
  var $p126: ref;
  var $i127: i1;
  var $i128: i64;
  var $i129: i64;
  var $p130: ref;
  var $p131: ref;
  var $i132: i1;
  var $i133: i32;
  var $i134: i1;
  var $i135: i32;
  var $i136: i1;
  var $i137: i1;
  var $i138: i32;
  var $i139: i1;
  var $i140: i1;
  var $i141: i32;
  var $i142: i64;
  var $i143: i64;
  var $i144: i1;
  var $i145: i64;
  var $i146: i64;
  var $p148: ref;
  var $i149: i64;
  var $i150: i64;
  var $p152: ref;
  var $i153: i64;
  var $i154: i64;
  var $p156: ref;
  var $i157: i64;
  var $i158: i64;
  var $p159: ref;
  var $i160: i64;
  var $i161: i64;
  var $p162: ref;
  var $i163: i64;
  var $i164: i64;
  var $p165: ref;
  var $p166: ref;
  var $i167: i64;
  var $i168: i64;
  var $p169: ref;
  var $p170: ref;
  var $i171: i64;
  var $i172: i64;
  var $p173: ref;
  var $i174: i32;
  var $i175: i64;
  var $i176: i64;
  var $p177: ref;
  var $i178: i32;
  var $i179: i64;
  var $i180: i64;
  var $p181: ref;
  var $i182: i32;
  var $i183: i32;
  var $i184: i1;
  var $i186: i64;
  var $i187: i64;
  var $p188: ref;
  var $i189: i32;
  var $i190: i64;
  var $i191: i64;
  var $p192: ref;
  var $i193: i32;
  var $i194: i64;
  var $i195: i64;
  var $p196: ref;
  var $i197: i32;
  var $i198: i32;
  var $i199: i1;
  var $i202: i64;
  var $i203: i64;
  var $p204: ref;
  var $i205: i32;
  var $i206: i64;
  var $i207: i64;
  var $p208: ref;
  var $i209: i32;
  var $i210: i1;
  var $i211: i64;
  var $i212: i64;
  var $p213: ref;
  var $i214: i32;
  var $i215: i64;
  var $i216: i64;
  var $p217: ref;
  var $i218: i32;
  var $i219: i1;
  var $i220: i32;
  var $i221: i1;
  var $i222: i32;
  var $i223: i1;
  var $i224: i1;
  var $i225: i32;
  var $i226: i1;
  var $i227: i1;
  var $i228: i32;
  var $i229: i64;
  var $i230: i64;
  var $i231: i1;
  var $i232: i64;
  var $i233: i64;
  var $p234: ref;
  var $p235: ref;
  var $i236: i1;
  var $i237: i64;
  var $i238: i64;
  var $p239: ref;
  var $i240: i32;
  var $i241: i64;
  var $i242: i64;
  var $p243: ref;
  var $i244: i32;
  var $i245: i32;
  var $i246: i32;
  var $i247: i64;
  var $i248: i32;
  var $i249: i1;
  var $i250: i32;
  var $i251: i1;
  var $i252: i1;
  var $i253: i32;
  var $i254: i1;
  var $i255: i1;
  var $i256: i32;
  var $i257: i64;
  var $i258: i64;
  var $i259: i1;
  var $i260: i64;
  var $i261: i64;
  var $p262: ref;
  var $i263: i32;
  var $i264: i64;
  var $i265: i64;
  var $p266: ref;
  var $i267: i32;
  var $i268: i32;
  var $i269: i1;
  var $i270: i32;
  var $i271: i1;
  var $i272: i1;
  var $i273: i32;
  var $i274: i1;
  var $i275: i1;
  var $i276: i32;
  var $i277: i64;
  var $i278: i64;
  var $i279: i1;
  var $i280: i64;
  var $i281: i64;
  var $p282: ref;
  var $i283: i8;
  var $i284: i1;
  var $i285: i64;
  var $i286: i64;
  var $p288: ref;
  var $i289: i64;
  var $i290: i64;
  var $p292: ref;
  var $i293: i64;
  var $i294: i64;
  var $p296: ref;
  var $i297: i64;
  var $i298: i64;
  var $p299: ref;
  var $i300: i64;
  var $i301: i64;
  var $p302: ref;
  var $i303: i64;
  var $i304: i64;
  var $p305: ref;
  var $i306: i64;
  var $i307: i64;
  var $p308: ref;
  var $i309: i64;
  var $i310: i64;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $i314: i64;
  var $i315: i64;
  var $p316: ref;
  var $i317: i64;
  var $i318: i64;
  var $i319: i64;
  var $i320: i64;
  var $p321: ref;
  var $i322: i32;
  var $p323: ref;
  var $i324: i64;
  var $i325: i64;
  var $i326: i64;
  var $i327: i64;
  var $p328: ref;
  var $i329: i32;
  var $p330: ref;
  var $i2: i32;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var vslice_dummy_var_246: i32;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i32;
  var vslice_dummy_var_249: i32;
  var vslice_dummy_var_250: i32;
  var vslice_dummy_var_251: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13250;

  corral_source_split_13250:
    assume {:verifier.code 0} true;
    $i1 := $ne.ref($p0, $0.ref);
    goto corral_source_split_13251;

  corral_source_split_13251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_13253;

  corral_source_split_13253:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13255;

  corral_source_split_13255:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 6117} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i3);
    goto corral_source_split_13257;

  corral_source_split_13257:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 24);
    call {:si_unique_call 6118} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i4);
    goto corral_source_split_13258;

  corral_source_split_13258:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_13259;

  corral_source_split_13259:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_13260;

  corral_source_split_13260:
    assume {:verifier.code 0} true;
    $i7 := $ne.ref($p6, $0.ref);
    goto corral_source_split_13261;

  corral_source_split_13261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    goto corral_source_split_13263;

  corral_source_split_13263:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 6119} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i8);
    goto corral_source_split_13265;

  corral_source_split_13265:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 24);
    call {:si_unique_call 6120} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i9);
    goto corral_source_split_13266;

  corral_source_split_13266:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_13267;

  corral_source_split_13267:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_13268;

  corral_source_split_13268:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_13269;

  corral_source_split_13269:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i32($p12);
    call {:si_unique_call 6121} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i13);
    goto corral_source_split_13270;

  corral_source_split_13270:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p11);
    goto corral_source_split_13271;

  corral_source_split_13271:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i13);
    goto corral_source_split_13272;

  corral_source_split_13272:
    assume {:verifier.code 0} true;
    $i16 := $sub.i64(0, $i15);
    goto corral_source_split_13273;

  corral_source_split_13273:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p14, $mul.ref($i16, 1));
    goto corral_source_split_13274;

  corral_source_split_13274:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_13275;

  corral_source_split_13275:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    call {:si_unique_call 6122} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i19);
    goto corral_source_split_13276;

  corral_source_split_13276:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 16);
    call {:si_unique_call 6123} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i20);
    goto corral_source_split_13277;

  corral_source_split_13277:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_13278;

  corral_source_split_13278:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_13279;

  corral_source_split_13279:
    assume {:verifier.code 0} true;
    $i23 := $ne.ref($p22, $0.ref);
    goto corral_source_split_13280;

  corral_source_split_13280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    goto corral_source_split_13295;

  corral_source_split_13295:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p35 := $0.ref;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_13297;

  corral_source_split_13297:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p11);
    goto corral_source_split_13298;

  corral_source_split_13298:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_13299;

  corral_source_split_13299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6127} $p39 := vmw_priv($p38);
    goto corral_source_split_13300;

  corral_source_split_13300:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p0);
    call {:si_unique_call 6128} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i40);
    goto corral_source_split_13301;

  corral_source_split_13301:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 56);
    call {:si_unique_call 6129} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i41);
    goto corral_source_split_13302;

  corral_source_split_13302:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i41);
    goto corral_source_split_13303;

  corral_source_split_13303:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    call {:si_unique_call 6130} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i43);
    goto corral_source_split_13304;

  corral_source_split_13304:
    assume {:verifier.code 0} true;
    $i44 := $ugt.i64($i43, 1);
    goto corral_source_split_13305;

  corral_source_split_13305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p0);
    call {:si_unique_call 6132} {:cexpr "__cil_tmp43"} boogie_si_record_i64($i46);
    goto corral_source_split_13310;

  corral_source_split_13310:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 56);
    call {:si_unique_call 6133} {:cexpr "__cil_tmp44"} boogie_si_record_i64($i47);
    goto corral_source_split_13311;

  corral_source_split_13311:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_13312;

  corral_source_split_13312:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    call {:si_unique_call 6134} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i49);
    goto corral_source_split_13313;

  corral_source_split_13313:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 1);
    goto corral_source_split_13314;

  corral_source_split_13314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p18);
    call {:si_unique_call 6146} {:cexpr "__cil_tmp67"} boogie_si_record_i64($i73);
    goto corral_source_split_13342;

  corral_source_split_13342:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i73, 2064);
    call {:si_unique_call 6147} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i74);
    goto corral_source_split_13343;

  corral_source_split_13343:
    assume {:verifier.code 0} true;
    $p75 := $i2p.i64.ref($i74);
    goto corral_source_split_13344;

  corral_source_split_13344:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.0, $p75);
    goto corral_source_split_13345;

  corral_source_split_13345:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i8.i1($i76);
    goto corral_source_split_13346;

  corral_source_split_13346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i112 := $p2i.ref.i64($p18);
    call {:si_unique_call 6164} {:cexpr "__cil_tmp89"} boogie_si_record_i64($i112);
    goto corral_source_split_13399;

  corral_source_split_13399:
    assume {:verifier.code 0} true;
    $i113 := $add.i64($i112, 616);
    call {:si_unique_call 6165} {:cexpr "__cil_tmp90"} boogie_si_record_i64($i113);
    goto corral_source_split_13400;

  corral_source_split_13400:
    assume {:verifier.code 0} true;
    $p114 := $i2p.i64.ref($i113);
    goto corral_source_split_13401;

  corral_source_split_13401:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p18);
    call {:si_unique_call 6166} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i115);
    goto corral_source_split_13402;

  corral_source_split_13402:
    assume {:verifier.code 0} true;
    $i116 := $add.i64($i115, 544);
    call {:si_unique_call 6167} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i116);
    goto corral_source_split_13403;

  corral_source_split_13403:
    assume {:verifier.code 0} true;
    $p117 := $i2p.i64.ref($i116);
    goto corral_source_split_13404;

  corral_source_split_13404:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p0);
    call {:si_unique_call 6168} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i118);
    goto corral_source_split_13405;

  corral_source_split_13405:
    assume {:verifier.code 0} true;
    $i119 := $add.i64($i118, 56);
    call {:si_unique_call 6169} {:cexpr "__cil_tmp95"} boogie_si_record_i64($i119);
    goto corral_source_split_13406;

  corral_source_split_13406:
    assume {:verifier.code 0} true;
    $p120 := $i2p.i64.ref($i119);
    goto corral_source_split_13407;

  corral_source_split_13407:
    assume {:verifier.code 0} true;
    $i121 := $load.i64($M.0, $p120);
    call {:si_unique_call 6170} {:cexpr "__cil_tmp96"} boogie_si_record_i64($i121);
    goto corral_source_split_13408;

  corral_source_split_13408:
    assume {:verifier.code 0} true;
    $i122 := $eq.i64($i121, 0);
    goto corral_source_split_13409;

  corral_source_split_13409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i122 == 1);
    goto corral_source_split_13413;

  corral_source_split_13413:
    assume {:verifier.code 0} true;
    $i123 := $p2i.ref.i64($p0);
    call {:si_unique_call 6171} {:cexpr "__cil_tmp97"} boogie_si_record_i64($i123);
    goto corral_source_split_13414;

  corral_source_split_13414:
    assume {:verifier.code 0} true;
    $i124 := $add.i64($i123, 32);
    call {:si_unique_call 6172} {:cexpr "__cil_tmp98"} boogie_si_record_i64($i124);
    goto corral_source_split_13415;

  corral_source_split_13415:
    assume {:verifier.code 0} true;
    $p125 := $i2p.i64.ref($i124);
    goto corral_source_split_13416;

  corral_source_split_13416:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_13417;

  corral_source_split_13417:
    assume {:verifier.code 0} true;
    $i127 := $ne.ref($p126, $0.ref);
    goto corral_source_split_13418;

  corral_source_split_13418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i127 == 1);
    goto corral_source_split_13440;

  corral_source_split_13440:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6173} $i133 := vmw_sou_fifo_destroy($p39, $p18);
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    call {:si_unique_call 6174} {:cexpr "ret"} boogie_si_record_i32($i133);
    goto corral_source_split_13420;

  corral_source_split_13420:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i133, 0);
    goto corral_source_split_13421;

  corral_source_split_13421:
    assume {:verifier.code 0} true;
    $i135 := $zext.i1.i32($i134);
    call {:si_unique_call 6175} {:cexpr "__cil_tmp103"} boogie_si_record_i32($i135);
    goto corral_source_split_13422;

  corral_source_split_13422:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i135, 0);
    goto corral_source_split_13423;

  corral_source_split_13423:
    assume {:verifier.code 0} true;
    $i137 := $xor.i1($i136, 1);
    goto corral_source_split_13424;

  corral_source_split_13424:
    assume {:verifier.code 0} true;
    $i138 := $zext.i1.i32($i137);
    call {:si_unique_call 6176} {:cexpr "__cil_tmp104"} boogie_si_record_i32($i138);
    goto corral_source_split_13425;

  corral_source_split_13425:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_13426;

  corral_source_split_13426:
    assume {:verifier.code 0} true;
    $i140 := $xor.i1($i139, 1);
    goto corral_source_split_13427;

  corral_source_split_13427:
    assume {:verifier.code 0} true;
    $i141 := $zext.i1.i32($i140);
    call {:si_unique_call 6177} {:cexpr "__cil_tmp105"} boogie_si_record_i32($i141);
    goto corral_source_split_13428;

  corral_source_split_13428:
    assume {:verifier.code 0} true;
    $i142 := $sext.i32.i64($i141);
    call {:si_unique_call 6178} {:cexpr "__cil_tmp106"} boogie_si_record_i64($i142);
    goto corral_source_split_13429;

  corral_source_split_13429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6179} $i143 := ldv__builtin_expect($i142, 0);
    call {:si_unique_call 6180} {:cexpr "tmp___7"} boogie_si_record_i64($i143);
    goto corral_source_split_13430;

  corral_source_split_13430:
    assume {:verifier.code 0} true;
    $i144 := $ne.i64($i143, 0);
    goto corral_source_split_13431;

  corral_source_split_13431:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p114);
    call {:si_unique_call 6183} {:cexpr "__cil_tmp107"} boogie_si_record_i64($i145);
    goto corral_source_split_13446;

  corral_source_split_13446:
    assume {:verifier.code 0} true;
    $i146 := $add.i64($i145, 1208);
    call {:si_unique_call 6184} {:cexpr "__cil_tmp108"} boogie_si_record_i64($i146);
    goto corral_source_split_13447;

  corral_source_split_13447:
    assume {:verifier.code 0} true;
    goto corral_source_split_13448;

  corral_source_split_13448:
    assume {:verifier.code 0} true;
    $p148 := $i2p.i64.ref($i146);
    goto corral_source_split_13449;

  corral_source_split_13449:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p148, $0.ref);
    goto corral_source_split_13450;

  corral_source_split_13450:
    assume {:verifier.code 0} true;
    $i149 := $p2i.ref.i64($p117);
    call {:si_unique_call 6185} {:cexpr "__cil_tmp110"} boogie_si_record_i64($i149);
    goto corral_source_split_13451;

  corral_source_split_13451:
    assume {:verifier.code 0} true;
    $i150 := $add.i64($i149, 48);
    call {:si_unique_call 6186} {:cexpr "__cil_tmp111"} boogie_si_record_i64($i150);
    goto corral_source_split_13452;

  corral_source_split_13452:
    assume {:verifier.code 0} true;
    goto corral_source_split_13453;

  corral_source_split_13453:
    assume {:verifier.code 0} true;
    $p152 := $i2p.i64.ref($i150);
    goto corral_source_split_13454;

  corral_source_split_13454:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p152, $0.ref);
    goto corral_source_split_13455;

  corral_source_split_13455:
    assume {:verifier.code 0} true;
    $i153 := $p2i.ref.i64($p11);
    call {:si_unique_call 6187} {:cexpr "__cil_tmp113"} boogie_si_record_i64($i153);
    goto corral_source_split_13456;

  corral_source_split_13456:
    assume {:verifier.code 0} true;
    $i154 := $add.i64($i153, 32);
    call {:si_unique_call 6188} {:cexpr "__cil_tmp114"} boogie_si_record_i64($i154);
    goto corral_source_split_13457;

  corral_source_split_13457:
    assume {:verifier.code 0} true;
    goto corral_source_split_13458;

  corral_source_split_13458:
    assume {:verifier.code 0} true;
    $p156 := $i2p.i64.ref($i154);
    goto corral_source_split_13459;

  corral_source_split_13459:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p156, $0.ref);
    goto corral_source_split_13460;

  corral_source_split_13460:
    assume {:verifier.code 0} true;
    $i157 := $p2i.ref.i64($p11);
    call {:si_unique_call 6189} {:cexpr "__cil_tmp116"} boogie_si_record_i64($i157);
    goto corral_source_split_13461;

  corral_source_split_13461:
    assume {:verifier.code 0} true;
    $i158 := $add.i64($i157, 480);
    call {:si_unique_call 6190} {:cexpr "__cil_tmp117"} boogie_si_record_i64($i158);
    goto corral_source_split_13462;

  corral_source_split_13462:
    assume {:verifier.code 0} true;
    $p159 := $i2p.i64.ref($i158);
    goto corral_source_split_13463;

  corral_source_split_13463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p159, 0);
    goto corral_source_split_13464;

  corral_source_split_13464:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p11);
    call {:si_unique_call 6191} {:cexpr "__cil_tmp118"} boogie_si_record_i64($i160);
    goto corral_source_split_13465;

  corral_source_split_13465:
    assume {:verifier.code 0} true;
    $i161 := $add.i64($i160, 484);
    call {:si_unique_call 6192} {:cexpr "__cil_tmp119"} boogie_si_record_i64($i161);
    goto corral_source_split_13466;

  corral_source_split_13466:
    assume {:verifier.code 0} true;
    $p162 := $i2p.i64.ref($i161);
    goto corral_source_split_13467;

  corral_source_split_13467:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p162, 0);
    goto corral_source_split_13468;

  corral_source_split_13468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6193} vmw_sou_del_active($p39, $p18);
    goto corral_source_split_13469;

  corral_source_split_13469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6194} vmw_sou_backing_free($p39, $p18);
    goto corral_source_split_13470;

  corral_source_split_13470:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb46:
    assume $i144 == 1;
    goto corral_source_split_13444;

  corral_source_split_13444:
    assume {:verifier.code 0} true;
    $i2 := $i133;
    goto $bb3;

  SeqInstr_790:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i127 == 1;
    goto corral_source_split_13433;

  corral_source_split_13433:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p0);
    call {:si_unique_call 6181} {:cexpr "__cil_tmp100"} boogie_si_record_i64($i128);
    goto corral_source_split_13434;

  corral_source_split_13434:
    assume {:verifier.code 0} true;
    $i129 := $add.i64($i128, 16);
    call {:si_unique_call 6182} {:cexpr "__cil_tmp101"} boogie_si_record_i64($i129);
    goto corral_source_split_13435;

  corral_source_split_13435:
    assume {:verifier.code 0} true;
    $p130 := $i2p.i64.ref($i129);
    goto corral_source_split_13436;

  corral_source_split_13436:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_13437;

  corral_source_split_13437:
    assume {:verifier.code 0} true;
    $i132 := $ne.ref($p131, $0.ref);
    goto corral_source_split_13438;

  corral_source_split_13438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i132 == 1);
    goto corral_source_split_13442;

  corral_source_split_13442:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb44:
    assume $i132 == 1;
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i163 := $p2i.ref.i64($p0);
    call {:si_unique_call 6195} {:cexpr "__cil_tmp120"} boogie_si_record_i64($i163);
    goto corral_source_split_13472;

  corral_source_split_13472:
    assume {:verifier.code 0} true;
    $i164 := $add.i64($i163, 32);
    call {:si_unique_call 6196} {:cexpr "__cil_tmp121"} boogie_si_record_i64($i164);
    goto corral_source_split_13473;

  corral_source_split_13473:
    assume {:verifier.code 0} true;
    $p165 := $i2p.i64.ref($i164);
    goto corral_source_split_13474;

  corral_source_split_13474:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.0, $p165);
    goto corral_source_split_13475;

  corral_source_split_13475:
    assume {:verifier.code 0} true;
    $i167 := $p2i.ref.i64($p0);
    call {:si_unique_call 6197} {:cexpr "__cil_tmp122"} boogie_si_record_i64($i167);
    goto corral_source_split_13476;

  corral_source_split_13476:
    assume {:verifier.code 0} true;
    $i168 := $add.i64($i167, 16);
    call {:si_unique_call 6198} {:cexpr "__cil_tmp123"} boogie_si_record_i64($i168);
    goto corral_source_split_13477;

  corral_source_split_13477:
    assume {:verifier.code 0} true;
    $p169 := $i2p.i64.ref($i168);
    goto corral_source_split_13478;

  corral_source_split_13478:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    goto corral_source_split_13479;

  corral_source_split_13479:
    assume {:verifier.code 0} true;
    $i171 := $p2i.ref.i64($p170);
    call {:si_unique_call 6199} {:cexpr "__cil_tmp124"} boogie_si_record_i64($i171);
    goto corral_source_split_13480;

  corral_source_split_13480:
    assume {:verifier.code 0} true;
    $i172 := $add.i64($i171, 72);
    call {:si_unique_call 6200} {:cexpr "__cil_tmp125"} boogie_si_record_i64($i172);
    goto corral_source_split_13481;

  corral_source_split_13481:
    assume {:verifier.code 0} true;
    $p173 := $i2p.i64.ref($i172);
    goto corral_source_split_13482;

  corral_source_split_13482:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.0, $p173);
    call {:si_unique_call 6201} {:cexpr "__cil_tmp126"} boogie_si_record_i32($i174);
    goto corral_source_split_13483;

  corral_source_split_13483:
    assume {:verifier.code 0} true;
    $i175 := $p2i.ref.i64($p166);
    call {:si_unique_call 6202} {:cexpr "__cil_tmp127"} boogie_si_record_i64($i175);
    goto corral_source_split_13484;

  corral_source_split_13484:
    assume {:verifier.code 0} true;
    $i176 := $add.i64($i175, 68);
    call {:si_unique_call 6203} {:cexpr "__cil_tmp128"} boogie_si_record_i64($i176);
    goto corral_source_split_13485;

  corral_source_split_13485:
    assume {:verifier.code 0} true;
    $p177 := $i2p.i64.ref($i176);
    goto corral_source_split_13486;

  corral_source_split_13486:
    assume {:verifier.code 0} true;
    $i178 := $load.i32($M.0, $p177);
    call {:si_unique_call 6204} {:cexpr "__cil_tmp129"} boogie_si_record_i32($i178);
    goto corral_source_split_13487;

  corral_source_split_13487:
    assume {:verifier.code 0} true;
    $i179 := $p2i.ref.i64($p0);
    call {:si_unique_call 6205} {:cexpr "__cil_tmp131"} boogie_si_record_i64($i179);
    goto corral_source_split_13488;

  corral_source_split_13488:
    assume {:verifier.code 0} true;
    $i180 := $add.i64($i179, 40);
    call {:si_unique_call 6206} {:cexpr "__cil_tmp132"} boogie_si_record_i64($i180);
    goto corral_source_split_13489;

  corral_source_split_13489:
    assume {:verifier.code 0} true;
    $p181 := $i2p.i64.ref($i180);
    goto corral_source_split_13490;

  corral_source_split_13490:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.0, $p181);
    call {:si_unique_call 6207} {:cexpr "__cil_tmp133"} boogie_si_record_i32($i182);
    goto corral_source_split_13491;

  corral_source_split_13491:
    assume {:verifier.code 0} true;
    $i183 := $add.i32($i182, $i178);
    call {:si_unique_call 6208} {:cexpr "__cil_tmp134"} boogie_si_record_i32($i183);
    goto corral_source_split_13492;

  corral_source_split_13492:
    assume {:verifier.code 0} true;
    $i184 := $ugt.i32($i183, $i174);
    goto corral_source_split_13493;

  corral_source_split_13493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i184 == 1);
    goto corral_source_split_13498;

  corral_source_split_13498:
    assume {:verifier.code 0} true;
    $i186 := $p2i.ref.i64($p170);
    call {:si_unique_call 6210} {:cexpr "__cil_tmp135"} boogie_si_record_i64($i186);
    goto corral_source_split_13499;

  corral_source_split_13499:
    assume {:verifier.code 0} true;
    $i187 := $add.i64($i186, 76);
    call {:si_unique_call 6211} {:cexpr "__cil_tmp136"} boogie_si_record_i64($i187);
    goto corral_source_split_13500;

  corral_source_split_13500:
    assume {:verifier.code 0} true;
    $p188 := $i2p.i64.ref($i187);
    goto corral_source_split_13501;

  corral_source_split_13501:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.0, $p188);
    call {:si_unique_call 6212} {:cexpr "__cil_tmp137"} boogie_si_record_i32($i189);
    goto corral_source_split_13502;

  corral_source_split_13502:
    assume {:verifier.code 0} true;
    $i190 := $p2i.ref.i64($p166);
    call {:si_unique_call 6213} {:cexpr "__cil_tmp138"} boogie_si_record_i64($i190);
    goto corral_source_split_13503;

  corral_source_split_13503:
    assume {:verifier.code 0} true;
    $i191 := $add.i64($i190, 88);
    call {:si_unique_call 6214} {:cexpr "__cil_tmp139"} boogie_si_record_i64($i191);
    goto corral_source_split_13504;

  corral_source_split_13504:
    assume {:verifier.code 0} true;
    $p192 := $i2p.i64.ref($i191);
    goto corral_source_split_13505;

  corral_source_split_13505:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.0, $p192);
    call {:si_unique_call 6215} {:cexpr "__cil_tmp140"} boogie_si_record_i32($i193);
    goto corral_source_split_13506;

  corral_source_split_13506:
    assume {:verifier.code 0} true;
    $i194 := $p2i.ref.i64($p0);
    call {:si_unique_call 6216} {:cexpr "__cil_tmp142"} boogie_si_record_i64($i194);
    goto corral_source_split_13507;

  corral_source_split_13507:
    assume {:verifier.code 0} true;
    $i195 := $add.i64($i194, 44);
    call {:si_unique_call 6217} {:cexpr "__cil_tmp143"} boogie_si_record_i64($i195);
    goto corral_source_split_13508;

  corral_source_split_13508:
    assume {:verifier.code 0} true;
    $p196 := $i2p.i64.ref($i195);
    goto corral_source_split_13509;

  corral_source_split_13509:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.0, $p196);
    call {:si_unique_call 6218} {:cexpr "__cil_tmp144"} boogie_si_record_i32($i197);
    goto corral_source_split_13510;

  corral_source_split_13510:
    assume {:verifier.code 0} true;
    $i198 := $add.i32($i197, $i193);
    call {:si_unique_call 6219} {:cexpr "__cil_tmp145"} boogie_si_record_i32($i198);
    goto corral_source_split_13511;

  corral_source_split_13511:
    assume {:verifier.code 0} true;
    $i199 := $ugt.i32($i198, $i189);
    goto corral_source_split_13512;

  corral_source_split_13512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6221} vslice_dummy_var_251 := vmw_fb_off($p39);
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    goto corral_source_split_13517;

  corral_source_split_13517:
    assume {:verifier.code 0} true;
    $i202 := $p2i.ref.i64($p11);
    call {:si_unique_call 6222} {:cexpr "__cil_tmp147"} boogie_si_record_i64($i202);
    goto corral_source_split_13518;

  corral_source_split_13518:
    assume {:verifier.code 0} true;
    $i203 := $add.i64($i202, 116);
    call {:si_unique_call 6223} {:cexpr "__cil_tmp148"} boogie_si_record_i64($i203);
    goto corral_source_split_13519;

  corral_source_split_13519:
    assume {:verifier.code 0} true;
    $p204 := $i2p.i64.ref($i203);
    goto corral_source_split_13520;

  corral_source_split_13520:
    assume {:verifier.code 0} true;
    $i205 := $load.i32($M.0, $p204);
    call {:si_unique_call 6224} {:cexpr "__cil_tmp149"} boogie_si_record_i32($i205);
    goto corral_source_split_13521;

  corral_source_split_13521:
    assume {:verifier.code 0} true;
    $i206 := $p2i.ref.i64($p166);
    call {:si_unique_call 6225} {:cexpr "__cil_tmp150"} boogie_si_record_i64($i206);
    goto corral_source_split_13522;

  corral_source_split_13522:
    assume {:verifier.code 0} true;
    $i207 := $add.i64($i206, 68);
    call {:si_unique_call 6226} {:cexpr "__cil_tmp151"} boogie_si_record_i64($i207);
    goto corral_source_split_13523;

  corral_source_split_13523:
    assume {:verifier.code 0} true;
    $p208 := $i2p.i64.ref($i207);
    goto corral_source_split_13524;

  corral_source_split_13524:
    assume {:verifier.code 0} true;
    $i209 := $load.i32($M.0, $p208);
    call {:si_unique_call 6227} {:cexpr "__cil_tmp152"} boogie_si_record_i32($i209);
    goto corral_source_split_13525;

  corral_source_split_13525:
    assume {:verifier.code 0} true;
    $i210 := $ne.i32($i209, $i205);
    goto corral_source_split_13526;

  corral_source_split_13526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i210 == 1);
    goto corral_source_split_13530;

  corral_source_split_13530:
    assume {:verifier.code 0} true;
    $i211 := $p2i.ref.i64($p11);
    call {:si_unique_call 6228} {:cexpr "__cil_tmp154"} boogie_si_record_i64($i211);
    goto corral_source_split_13531;

  corral_source_split_13531:
    assume {:verifier.code 0} true;
    $i212 := $add.i64($i211, 136);
    call {:si_unique_call 6229} {:cexpr "__cil_tmp155"} boogie_si_record_i64($i212);
    goto corral_source_split_13532;

  corral_source_split_13532:
    assume {:verifier.code 0} true;
    $p213 := $i2p.i64.ref($i212);
    goto corral_source_split_13533;

  corral_source_split_13533:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.0, $p213);
    call {:si_unique_call 6230} {:cexpr "__cil_tmp156"} boogie_si_record_i32($i214);
    goto corral_source_split_13534;

  corral_source_split_13534:
    assume {:verifier.code 0} true;
    $i215 := $p2i.ref.i64($p166);
    call {:si_unique_call 6231} {:cexpr "__cil_tmp157"} boogie_si_record_i64($i215);
    goto corral_source_split_13535;

  corral_source_split_13535:
    assume {:verifier.code 0} true;
    $i216 := $add.i64($i215, 88);
    call {:si_unique_call 6232} {:cexpr "__cil_tmp158"} boogie_si_record_i64($i216);
    goto corral_source_split_13536;

  corral_source_split_13536:
    assume {:verifier.code 0} true;
    $p217 := $i2p.i64.ref($i216);
    goto corral_source_split_13537;

  corral_source_split_13537:
    assume {:verifier.code 0} true;
    $i218 := $load.i32($M.0, $p217);
    call {:si_unique_call 6233} {:cexpr "__cil_tmp159"} boogie_si_record_i32($i218);
    goto corral_source_split_13538;

  corral_source_split_13538:
    assume {:verifier.code 0} true;
    $i219 := $ne.i32($i218, $i214);
    goto corral_source_split_13539;

  corral_source_split_13539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i232 := $p2i.ref.i64($p18);
    call {:si_unique_call 6243} {:cexpr "__cil_tmp164"} boogie_si_record_i64($i232);
    goto corral_source_split_13560;

  corral_source_split_13560:
    assume {:verifier.code 0} true;
    $i233 := $add.i64($i232, 2080);
    call {:si_unique_call 6244} {:cexpr "__cil_tmp165"} boogie_si_record_i64($i233);
    goto corral_source_split_13561;

  corral_source_split_13561:
    assume {:verifier.code 0} true;
    $p234 := $i2p.i64.ref($i233);
    goto corral_source_split_13562;

  corral_source_split_13562:
    assume {:verifier.code 0} true;
    $p235 := $load.ref($M.0, $p234);
    goto corral_source_split_13563;

  corral_source_split_13563:
    assume {:verifier.code 0} true;
    $i236 := $ne.ref($p235, $0.ref);
    goto corral_source_split_13564;

  corral_source_split_13564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i236} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i236 == 1);
    goto corral_source_split_13566;

  corral_source_split_13566:
    assume {:verifier.code 0} true;
    $i237 := $p2i.ref.i64($p166);
    call {:si_unique_call 6245} {:cexpr "__cil_tmp167"} boogie_si_record_i64($i237);
    goto corral_source_split_13567;

  corral_source_split_13567:
    assume {:verifier.code 0} true;
    $i238 := $add.i64($i237, 88);
    call {:si_unique_call 6246} {:cexpr "__cil_tmp168"} boogie_si_record_i64($i238);
    goto corral_source_split_13568;

  corral_source_split_13568:
    assume {:verifier.code 0} true;
    $p239 := $i2p.i64.ref($i238);
    goto corral_source_split_13569;

  corral_source_split_13569:
    assume {:verifier.code 0} true;
    $i240 := $load.i32($M.0, $p239);
    call {:si_unique_call 6247} {:cexpr "__cil_tmp169"} boogie_si_record_i32($i240);
    goto corral_source_split_13570;

  corral_source_split_13570:
    assume {:verifier.code 0} true;
    $i241 := $p2i.ref.i64($p166);
    call {:si_unique_call 6248} {:cexpr "__cil_tmp170"} boogie_si_record_i64($i241);
    goto corral_source_split_13571;

  corral_source_split_13571:
    assume {:verifier.code 0} true;
    $i242 := $add.i64($i241, 68);
    call {:si_unique_call 6249} {:cexpr "__cil_tmp171"} boogie_si_record_i64($i242);
    goto corral_source_split_13572;

  corral_source_split_13572:
    assume {:verifier.code 0} true;
    $p243 := $i2p.i64.ref($i242);
    goto corral_source_split_13573;

  corral_source_split_13573:
    assume {:verifier.code 0} true;
    $i244 := $load.i32($M.0, $p243);
    call {:si_unique_call 6250} {:cexpr "__cil_tmp172"} boogie_si_record_i32($i244);
    goto corral_source_split_13574;

  corral_source_split_13574:
    assume {:verifier.code 0} true;
    $i245 := $mul.i32($i244, $i240);
    call {:si_unique_call 6251} {:cexpr "__cil_tmp173"} boogie_si_record_i32($i245);
    goto corral_source_split_13575;

  corral_source_split_13575:
    assume {:verifier.code 0} true;
    $i246 := $mul.i32($i245, 4);
    call {:si_unique_call 6252} {:cexpr "__cil_tmp174"} boogie_si_record_i32($i246);
    goto corral_source_split_13576;

  corral_source_split_13576:
    assume {:verifier.code 0} true;
    $i247 := $sext.i32.i64($i246);
    call {:si_unique_call 6253} {:cexpr "size"} boogie_si_record_i64($i247);
    goto corral_source_split_13577;

  corral_source_split_13577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6254} $i248 := vmw_sou_backing_alloc($p39, $p18, $i247);
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    call {:si_unique_call 6255} {:cexpr "ret"} boogie_si_record_i32($i248);
    goto corral_source_split_13578;

  corral_source_split_13578:
    assume {:verifier.code 0} true;
    $i249 := $ne.i32($i248, 0);
    goto corral_source_split_13579;

  corral_source_split_13579:
    assume {:verifier.code 0} true;
    $i250 := $zext.i1.i32($i249);
    call {:si_unique_call 6256} {:cexpr "__cil_tmp175"} boogie_si_record_i32($i250);
    goto corral_source_split_13580;

  corral_source_split_13580:
    assume {:verifier.code 0} true;
    $i251 := $ne.i32($i250, 0);
    goto corral_source_split_13581;

  corral_source_split_13581:
    assume {:verifier.code 0} true;
    $i252 := $xor.i1($i251, 1);
    goto corral_source_split_13582;

  corral_source_split_13582:
    assume {:verifier.code 0} true;
    $i253 := $zext.i1.i32($i252);
    call {:si_unique_call 6257} {:cexpr "__cil_tmp176"} boogie_si_record_i32($i253);
    goto corral_source_split_13583;

  corral_source_split_13583:
    assume {:verifier.code 0} true;
    $i254 := $ne.i32($i253, 0);
    goto corral_source_split_13584;

  corral_source_split_13584:
    assume {:verifier.code 0} true;
    $i255 := $xor.i1($i254, 1);
    goto corral_source_split_13585;

  corral_source_split_13585:
    assume {:verifier.code 0} true;
    $i256 := $zext.i1.i32($i255);
    call {:si_unique_call 6258} {:cexpr "__cil_tmp177"} boogie_si_record_i32($i256);
    goto corral_source_split_13586;

  corral_source_split_13586:
    assume {:verifier.code 0} true;
    $i257 := $sext.i32.i64($i256);
    call {:si_unique_call 6259} {:cexpr "__cil_tmp178"} boogie_si_record_i64($i257);
    goto corral_source_split_13587;

  corral_source_split_13587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6260} $i258 := ldv__builtin_expect($i257, 0);
    call {:si_unique_call 6261} {:cexpr "tmp___9"} boogie_si_record_i64($i258);
    goto corral_source_split_13588;

  corral_source_split_13588:
    assume {:verifier.code 0} true;
    $i259 := $ne.i64($i258, 0);
    goto corral_source_split_13589;

  corral_source_split_13589:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i260 := $p2i.ref.i64($p0);
    call {:si_unique_call 6262} {:cexpr "__cil_tmp179"} boogie_si_record_i64($i260);
    goto corral_source_split_13593;

  corral_source_split_13593:
    assume {:verifier.code 0} true;
    $i261 := $add.i64($i260, 40);
    call {:si_unique_call 6263} {:cexpr "__cil_tmp180"} boogie_si_record_i64($i261);
    goto corral_source_split_13594;

  corral_source_split_13594:
    assume {:verifier.code 0} true;
    $p262 := $i2p.i64.ref($i261);
    goto corral_source_split_13595;

  corral_source_split_13595:
    assume {:verifier.code 0} true;
    $i263 := $load.i32($M.0, $p262);
    call {:si_unique_call 6264} {:cexpr "__cil_tmp181"} boogie_si_record_i32($i263);
    goto corral_source_split_13596;

  corral_source_split_13596:
    assume {:verifier.code 0} true;
    $i264 := $p2i.ref.i64($p0);
    call {:si_unique_call 6265} {:cexpr "__cil_tmp182"} boogie_si_record_i64($i264);
    goto corral_source_split_13597;

  corral_source_split_13597:
    assume {:verifier.code 0} true;
    $i265 := $add.i64($i264, 44);
    call {:si_unique_call 6266} {:cexpr "__cil_tmp183"} boogie_si_record_i64($i265);
    goto corral_source_split_13598;

  corral_source_split_13598:
    assume {:verifier.code 0} true;
    $p266 := $i2p.i64.ref($i265);
    goto corral_source_split_13599;

  corral_source_split_13599:
    assume {:verifier.code 0} true;
    $i267 := $load.i32($M.0, $p266);
    call {:si_unique_call 6267} {:cexpr "__cil_tmp184"} boogie_si_record_i32($i267);
    goto corral_source_split_13600;

  corral_source_split_13600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6268} $i268 := vmw_sou_fifo_create($p39, $p18, $i263, $i267, $p166);
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    call {:si_unique_call 6269} {:cexpr "ret"} boogie_si_record_i32($i268);
    goto corral_source_split_13601;

  corral_source_split_13601:
    assume {:verifier.code 0} true;
    $i269 := $ne.i32($i268, 0);
    goto corral_source_split_13602;

  corral_source_split_13602:
    assume {:verifier.code 0} true;
    $i270 := $zext.i1.i32($i269);
    call {:si_unique_call 6270} {:cexpr "__cil_tmp185"} boogie_si_record_i32($i270);
    goto corral_source_split_13603;

  corral_source_split_13603:
    assume {:verifier.code 0} true;
    $i271 := $ne.i32($i270, 0);
    goto corral_source_split_13604;

  corral_source_split_13604:
    assume {:verifier.code 0} true;
    $i272 := $xor.i1($i271, 1);
    goto corral_source_split_13605;

  corral_source_split_13605:
    assume {:verifier.code 0} true;
    $i273 := $zext.i1.i32($i272);
    call {:si_unique_call 6271} {:cexpr "__cil_tmp186"} boogie_si_record_i32($i273);
    goto corral_source_split_13606;

  corral_source_split_13606:
    assume {:verifier.code 0} true;
    $i274 := $ne.i32($i273, 0);
    goto corral_source_split_13607;

  corral_source_split_13607:
    assume {:verifier.code 0} true;
    $i275 := $xor.i1($i274, 1);
    goto corral_source_split_13608;

  corral_source_split_13608:
    assume {:verifier.code 0} true;
    $i276 := $zext.i1.i32($i275);
    call {:si_unique_call 6272} {:cexpr "__cil_tmp187"} boogie_si_record_i32($i276);
    goto corral_source_split_13609;

  corral_source_split_13609:
    assume {:verifier.code 0} true;
    $i277 := $sext.i32.i64($i276);
    call {:si_unique_call 6273} {:cexpr "__cil_tmp188"} boogie_si_record_i64($i277);
    goto corral_source_split_13610;

  corral_source_split_13610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6274} $i278 := ldv__builtin_expect($i277, 0);
    call {:si_unique_call 6275} {:cexpr "tmp___10"} boogie_si_record_i64($i278);
    goto corral_source_split_13611;

  corral_source_split_13611:
    assume {:verifier.code 0} true;
    $i279 := $ne.i64($i278, 0);
    goto corral_source_split_13612;

  corral_source_split_13612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i279} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6288} vmw_sou_add_active($p39, $p18, $p35);
    goto corral_source_split_13647;

  corral_source_split_13647:
    assume {:verifier.code 0} true;
    $i303 := $p2i.ref.i64($p114);
    call {:si_unique_call 6289} {:cexpr "__cil_tmp204"} boogie_si_record_i64($i303);
    goto corral_source_split_13648;

  corral_source_split_13648:
    assume {:verifier.code 0} true;
    $i304 := $add.i64($i303, 1208);
    call {:si_unique_call 6290} {:cexpr "__cil_tmp205"} boogie_si_record_i64($i304);
    goto corral_source_split_13649;

  corral_source_split_13649:
    assume {:verifier.code 0} true;
    $p305 := $i2p.i64.ref($i304);
    goto corral_source_split_13650;

  corral_source_split_13650:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p305, $p117);
    goto corral_source_split_13651;

  corral_source_split_13651:
    assume {:verifier.code 0} true;
    $i306 := $p2i.ref.i64($p117);
    call {:si_unique_call 6291} {:cexpr "__cil_tmp206"} boogie_si_record_i64($i306);
    goto corral_source_split_13652;

  corral_source_split_13652:
    assume {:verifier.code 0} true;
    $i307 := $add.i64($i306, 48);
    call {:si_unique_call 6292} {:cexpr "__cil_tmp207"} boogie_si_record_i64($i307);
    goto corral_source_split_13653;

  corral_source_split_13653:
    assume {:verifier.code 0} true;
    $p308 := $i2p.i64.ref($i307);
    goto corral_source_split_13654;

  corral_source_split_13654:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p308, $p11);
    goto corral_source_split_13655;

  corral_source_split_13655:
    assume {:verifier.code 0} true;
    $i309 := $p2i.ref.i64($p11);
    call {:si_unique_call 6293} {:cexpr "__cil_tmp208"} boogie_si_record_i64($i309);
    goto corral_source_split_13656;

  corral_source_split_13656:
    assume {:verifier.code 0} true;
    $i310 := $add.i64($i309, 48);
    call {:si_unique_call 6294} {:cexpr "__cil_tmp209"} boogie_si_record_i64($i310);
    goto corral_source_split_13657;

  corral_source_split_13657:
    assume {:verifier.code 0} true;
    $p311 := $i2p.i64.ref($i310);
    goto corral_source_split_13658;

  corral_source_split_13658:
    assume {:verifier.code 0} true;
    $p312 := $bitcast.ref.ref($p311);
    goto corral_source_split_13659;

  corral_source_split_13659:
    assume {:verifier.code 0} true;
    $p313 := $bitcast.ref.ref($p166);
    goto corral_source_split_13660;

  corral_source_split_13660:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_50 := $M.0;
    cmdloc_dummy_var_51 := $M.0;
    call {:si_unique_call 6295} cmdloc_dummy_var_52 := $memcpy.i8(cmdloc_dummy_var_50, cmdloc_dummy_var_51, $p312, $p313, 216, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_52;
    goto corral_source_split_13661;

  corral_source_split_13661:
    assume {:verifier.code 0} true;
    $i314 := $p2i.ref.i64($p11);
    call {:si_unique_call 6296} {:cexpr "__cil_tmp210"} boogie_si_record_i64($i314);
    goto corral_source_split_13662;

  corral_source_split_13662:
    assume {:verifier.code 0} true;
    $i315 := $add.i64($i314, 32);
    call {:si_unique_call 6297} {:cexpr "__cil_tmp211"} boogie_si_record_i64($i315);
    goto corral_source_split_13663;

  corral_source_split_13663:
    assume {:verifier.code 0} true;
    $p316 := $i2p.i64.ref($i315);
    goto corral_source_split_13664;

  corral_source_split_13664:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p316, $p170);
    goto corral_source_split_13665;

  corral_source_split_13665:
    assume {:verifier.code 0} true;
    $i317 := $p2i.ref.i64($p11);
    call {:si_unique_call 6298} {:cexpr "__cil_tmp212"} boogie_si_record_i64($i317);
    goto corral_source_split_13666;

  corral_source_split_13666:
    assume {:verifier.code 0} true;
    $i318 := $add.i64($i317, 480);
    call {:si_unique_call 6299} {:cexpr "__cil_tmp213"} boogie_si_record_i64($i318);
    goto corral_source_split_13667;

  corral_source_split_13667:
    assume {:verifier.code 0} true;
    $i319 := $p2i.ref.i64($p0);
    call {:si_unique_call 6300} {:cexpr "__cil_tmp214"} boogie_si_record_i64($i319);
    goto corral_source_split_13668;

  corral_source_split_13668:
    assume {:verifier.code 0} true;
    $i320 := $add.i64($i319, 40);
    call {:si_unique_call 6301} {:cexpr "__cil_tmp215"} boogie_si_record_i64($i320);
    goto corral_source_split_13669;

  corral_source_split_13669:
    assume {:verifier.code 0} true;
    $p321 := $i2p.i64.ref($i320);
    goto corral_source_split_13670;

  corral_source_split_13670:
    assume {:verifier.code 0} true;
    $i322 := $load.i32($M.0, $p321);
    call {:si_unique_call 6302} {:cexpr "__cil_tmp216"} boogie_si_record_i32($i322);
    goto corral_source_split_13671;

  corral_source_split_13671:
    assume {:verifier.code 0} true;
    $p323 := $i2p.i64.ref($i318);
    goto corral_source_split_13672;

  corral_source_split_13672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p323, $i322);
    goto corral_source_split_13673;

  corral_source_split_13673:
    assume {:verifier.code 0} true;
    $i324 := $p2i.ref.i64($p11);
    call {:si_unique_call 6303} {:cexpr "__cil_tmp217"} boogie_si_record_i64($i324);
    goto corral_source_split_13674;

  corral_source_split_13674:
    assume {:verifier.code 0} true;
    $i325 := $add.i64($i324, 484);
    call {:si_unique_call 6304} {:cexpr "__cil_tmp218"} boogie_si_record_i64($i325);
    goto corral_source_split_13675;

  corral_source_split_13675:
    assume {:verifier.code 0} true;
    $i326 := $p2i.ref.i64($p0);
    call {:si_unique_call 6305} {:cexpr "__cil_tmp219"} boogie_si_record_i64($i326);
    goto corral_source_split_13676;

  corral_source_split_13676:
    assume {:verifier.code 0} true;
    $i327 := $add.i64($i326, 44);
    call {:si_unique_call 6306} {:cexpr "__cil_tmp220"} boogie_si_record_i64($i327);
    goto corral_source_split_13677;

  corral_source_split_13677:
    assume {:verifier.code 0} true;
    $p328 := $i2p.i64.ref($i327);
    goto corral_source_split_13678;

  corral_source_split_13678:
    assume {:verifier.code 0} true;
    $i329 := $load.i32($M.0, $p328);
    call {:si_unique_call 6307} {:cexpr "__cil_tmp221"} boogie_si_record_i32($i329);
    goto corral_source_split_13679;

  corral_source_split_13679:
    assume {:verifier.code 0} true;
    $p330 := $i2p.i64.ref($i325);
    goto corral_source_split_13680;

  corral_source_split_13680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p330, $i329);
    goto corral_source_split_13681;

  corral_source_split_13681:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb74:
    assume $i279 == 1;
    goto corral_source_split_13614;

  corral_source_split_13614:
    assume {:verifier.code 0} true;
    $i280 := $p2i.ref.i64($p18);
    call {:si_unique_call 6276} {:cexpr "__cil_tmp189"} boogie_si_record_i64($i280);
    goto corral_source_split_13615;

  corral_source_split_13615:
    assume {:verifier.code 0} true;
    $i281 := $add.i64($i280, 2088);
    call {:si_unique_call 6277} {:cexpr "__cil_tmp190"} boogie_si_record_i64($i281);
    goto corral_source_split_13616;

  corral_source_split_13616:
    assume {:verifier.code 0} true;
    $p282 := $i2p.i64.ref($i281);
    goto corral_source_split_13617;

  corral_source_split_13617:
    assume {:verifier.code 0} true;
    $i283 := $load.i8($M.0, $p282);
    goto corral_source_split_13618;

  corral_source_split_13618:
    assume {:verifier.code 0} true;
    $i284 := $trunc.i8.i1($i283);
    goto corral_source_split_13619;

  corral_source_split_13619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i284} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i285 := $p2i.ref.i64($p114);
    call {:si_unique_call 6278} {:cexpr "__cil_tmp191"} boogie_si_record_i64($i285);
    goto corral_source_split_13623;

  corral_source_split_13623:
    assume {:verifier.code 0} true;
    $i286 := $add.i64($i285, 1208);
    call {:si_unique_call 6279} {:cexpr "__cil_tmp192"} boogie_si_record_i64($i286);
    goto corral_source_split_13624;

  corral_source_split_13624:
    assume {:verifier.code 0} true;
    goto corral_source_split_13625;

  corral_source_split_13625:
    assume {:verifier.code 0} true;
    $p288 := $i2p.i64.ref($i286);
    goto corral_source_split_13626;

  corral_source_split_13626:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p288, $0.ref);
    goto corral_source_split_13627;

  corral_source_split_13627:
    assume {:verifier.code 0} true;
    $i289 := $p2i.ref.i64($p117);
    call {:si_unique_call 6280} {:cexpr "__cil_tmp194"} boogie_si_record_i64($i289);
    goto corral_source_split_13628;

  corral_source_split_13628:
    assume {:verifier.code 0} true;
    $i290 := $add.i64($i289, 48);
    call {:si_unique_call 6281} {:cexpr "__cil_tmp195"} boogie_si_record_i64($i290);
    goto corral_source_split_13629;

  corral_source_split_13629:
    assume {:verifier.code 0} true;
    goto corral_source_split_13630;

  corral_source_split_13630:
    assume {:verifier.code 0} true;
    $p292 := $i2p.i64.ref($i290);
    goto corral_source_split_13631;

  corral_source_split_13631:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p292, $0.ref);
    goto corral_source_split_13632;

  corral_source_split_13632:
    assume {:verifier.code 0} true;
    $i293 := $p2i.ref.i64($p11);
    call {:si_unique_call 6282} {:cexpr "__cil_tmp197"} boogie_si_record_i64($i293);
    goto corral_source_split_13633;

  corral_source_split_13633:
    assume {:verifier.code 0} true;
    $i294 := $add.i64($i293, 32);
    call {:si_unique_call 6283} {:cexpr "__cil_tmp198"} boogie_si_record_i64($i294);
    goto corral_source_split_13634;

  corral_source_split_13634:
    assume {:verifier.code 0} true;
    goto corral_source_split_13635;

  corral_source_split_13635:
    assume {:verifier.code 0} true;
    $p296 := $i2p.i64.ref($i294);
    goto corral_source_split_13636;

  corral_source_split_13636:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p296, $0.ref);
    goto corral_source_split_13637;

  corral_source_split_13637:
    assume {:verifier.code 0} true;
    $i297 := $p2i.ref.i64($p11);
    call {:si_unique_call 6284} {:cexpr "__cil_tmp200"} boogie_si_record_i64($i297);
    goto corral_source_split_13638;

  corral_source_split_13638:
    assume {:verifier.code 0} true;
    $i298 := $add.i64($i297, 480);
    call {:si_unique_call 6285} {:cexpr "__cil_tmp201"} boogie_si_record_i64($i298);
    goto corral_source_split_13639;

  corral_source_split_13639:
    assume {:verifier.code 0} true;
    $p299 := $i2p.i64.ref($i298);
    goto corral_source_split_13640;

  corral_source_split_13640:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p299, 0);
    goto corral_source_split_13641;

  corral_source_split_13641:
    assume {:verifier.code 0} true;
    $i300 := $p2i.ref.i64($p11);
    call {:si_unique_call 6286} {:cexpr "__cil_tmp202"} boogie_si_record_i64($i300);
    goto corral_source_split_13642;

  corral_source_split_13642:
    assume {:verifier.code 0} true;
    $i301 := $add.i64($i300, 484);
    call {:si_unique_call 6287} {:cexpr "__cil_tmp203"} boogie_si_record_i64($i301);
    goto corral_source_split_13643;

  corral_source_split_13643:
    assume {:verifier.code 0} true;
    $p302 := $i2p.i64.ref($i301);
    goto corral_source_split_13644;

  corral_source_split_13644:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p302, 0);
    goto corral_source_split_13645;

  corral_source_split_13645:
    assume {:verifier.code 0} true;
    $i2 := $i268;
    goto $bb3;

  $bb76:
    assume $i284 == 1;
    goto corral_source_split_13621;

  corral_source_split_13621:
    assume {:verifier.code 0} true;
    $i2 := $i268;
    goto $bb3;

  SeqInstr_802:
    assume !assertsPassed;
    return;

  $bb70:
    assume $i259 == 1;
    goto corral_source_split_13591;

  corral_source_split_13591:
    assume {:verifier.code 0} true;
    $i2 := $i248;
    goto $bb3;

  SeqInstr_799:
    assume !assertsPassed;
    return;

  $bb68:
    assume $i236 == 1;
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb61:
    assume $i219 == 1;
    goto corral_source_split_13554;

  corral_source_split_13554:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6234} $i220 := vmw_sou_fifo_destroy($p39, $p18);
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    call {:si_unique_call 6235} {:cexpr "ret"} boogie_si_record_i32($i220);
    goto corral_source_split_13541;

  corral_source_split_13541:
    assume {:verifier.code 0} true;
    $i221 := $ne.i32($i220, 0);
    goto corral_source_split_13542;

  corral_source_split_13542:
    assume {:verifier.code 0} true;
    $i222 := $zext.i1.i32($i221);
    call {:si_unique_call 6236} {:cexpr "__cil_tmp160"} boogie_si_record_i32($i222);
    goto corral_source_split_13543;

  corral_source_split_13543:
    assume {:verifier.code 0} true;
    $i223 := $ne.i32($i222, 0);
    goto corral_source_split_13544;

  corral_source_split_13544:
    assume {:verifier.code 0} true;
    $i224 := $xor.i1($i223, 1);
    goto corral_source_split_13545;

  corral_source_split_13545:
    assume {:verifier.code 0} true;
    $i225 := $zext.i1.i32($i224);
    call {:si_unique_call 6237} {:cexpr "__cil_tmp161"} boogie_si_record_i32($i225);
    goto corral_source_split_13546;

  corral_source_split_13546:
    assume {:verifier.code 0} true;
    $i226 := $ne.i32($i225, 0);
    goto corral_source_split_13547;

  corral_source_split_13547:
    assume {:verifier.code 0} true;
    $i227 := $xor.i1($i226, 1);
    goto corral_source_split_13548;

  corral_source_split_13548:
    assume {:verifier.code 0} true;
    $i228 := $zext.i1.i32($i227);
    call {:si_unique_call 6238} {:cexpr "__cil_tmp162"} boogie_si_record_i32($i228);
    goto corral_source_split_13549;

  corral_source_split_13549:
    assume {:verifier.code 0} true;
    $i229 := $sext.i32.i64($i228);
    call {:si_unique_call 6239} {:cexpr "__cil_tmp163"} boogie_si_record_i64($i229);
    goto corral_source_split_13550;

  corral_source_split_13550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6240} $i230 := ldv__builtin_expect($i229, 0);
    call {:si_unique_call 6241} {:cexpr "tmp___8"} boogie_si_record_i64($i230);
    goto corral_source_split_13551;

  corral_source_split_13551:
    assume {:verifier.code 0} true;
    $i231 := $ne.i64($i230, 0);
    goto corral_source_split_13552;

  corral_source_split_13552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6242} vmw_sou_backing_free($p39, $p18);
    goto corral_source_split_13558;

  corral_source_split_13558:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb63:
    assume $i231 == 1;
    goto corral_source_split_13556;

  corral_source_split_13556:
    assume {:verifier.code 0} true;
    $i2 := $i220;
    goto $bb3;

  SeqInstr_796:
    assume !assertsPassed;
    return;

  $bb58:
    assume $i210 == 1;
    goto corral_source_split_13528;

  corral_source_split_13528:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_793:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i199 == 1;
    goto corral_source_split_13514;

  corral_source_split_13514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6220} vslice_dummy_var_250 := drm_err.ref.ref(.str.285, .str.275);
    goto corral_source_split_13515;

  corral_source_split_13515:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 22);
    goto $bb3;

  $bb52:
    assume $i184 == 1;
    goto corral_source_split_13495;

  corral_source_split_13495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6209} vslice_dummy_var_249 := drm_err.ref.ref(.str.285, .str.275);
    goto corral_source_split_13496;

  corral_source_split_13496:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 22);
    goto $bb3;

  $bb39:
    assume $i122 == 1;
    goto corral_source_split_13411;

  corral_source_split_13411:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb20:
    assume $i77 == 1;
    goto corral_source_split_13348;

  corral_source_split_13348:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p39);
    call {:si_unique_call 6148} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i78);
    goto corral_source_split_13349;

  corral_source_split_13349:
    assume {:verifier.code 0} true;
    $i79 := $add.i64($i78, 2616);
    call {:si_unique_call 6149} {:cexpr "__cil_tmp70"} boogie_si_record_i64($i79);
    goto corral_source_split_13350;

  corral_source_split_13350:
    assume {:verifier.code 0} true;
    $p80 := $i2p.i64.ref($i79);
    goto corral_source_split_13351;

  corral_source_split_13351:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_13352;

  corral_source_split_13352:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    call {:si_unique_call 6150} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i82);
    goto corral_source_split_13353;

  corral_source_split_13353:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, 8);
    call {:si_unique_call 6151} {:cexpr "__cil_tmp73"} boogie_si_record_i64($i83);
    goto corral_source_split_13354;

  corral_source_split_13354:
    assume {:verifier.code 0} true;
    $p84 := $i2p.i64.ref($i83);
    goto corral_source_split_13355;

  corral_source_split_13355:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_13356;

  corral_source_split_13356:
    assume {:verifier.code 0} true;
    $i86 := $ne.ref($p85, $0.ref);
    goto corral_source_split_13357;

  corral_source_split_13357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb22:
    assume $i86 == 1;
    goto corral_source_split_13359;

  corral_source_split_13359:
    assume {:verifier.code 0} true;
    $i87 := $ne.ref($p35, $0.ref);
    goto corral_source_split_13360;

  corral_source_split_13360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb24:
    assume $i87 == 1;
    goto corral_source_split_13362;

  corral_source_split_13362:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p39);
    call {:si_unique_call 6152} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i88);
    goto corral_source_split_13363;

  corral_source_split_13363:
    assume {:verifier.code 0} true;
    $i89 := $add.i64($i88, 2616);
    call {:si_unique_call 6153} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i89);
    goto corral_source_split_13364;

  corral_source_split_13364:
    assume {:verifier.code 0} true;
    $p90 := $i2p.i64.ref($i89);
    goto corral_source_split_13365;

  corral_source_split_13365:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_13366;

  corral_source_split_13366:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_13367;

  corral_source_split_13367:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    call {:si_unique_call 6154} {:cexpr "__cil_tmp77"} boogie_si_record_i32($i93);
    goto corral_source_split_13368;

  corral_source_split_13368:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 1);
    goto corral_source_split_13369;

  corral_source_split_13369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i94 == 1);
    goto corral_source_split_13378;

  corral_source_split_13378:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p35);
    call {:si_unique_call 6157} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i100);
    goto corral_source_split_13384;

  corral_source_split_13384:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p39);
    call {:si_unique_call 6158} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i101);
    goto corral_source_split_13385;

  corral_source_split_13385:
    assume {:verifier.code 0} true;
    $i102 := $add.i64($i101, 2616);
    call {:si_unique_call 6159} {:cexpr "__cil_tmp82"} boogie_si_record_i64($i102);
    goto corral_source_split_13386;

  corral_source_split_13386:
    assume {:verifier.code 0} true;
    $p103 := $i2p.i64.ref($i102);
    goto corral_source_split_13387;

  corral_source_split_13387:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_13388;

  corral_source_split_13388:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p104);
    call {:si_unique_call 6160} {:cexpr "__cil_tmp84"} boogie_si_record_i64($i105);
    goto corral_source_split_13389;

  corral_source_split_13389:
    assume {:verifier.code 0} true;
    $i106 := $add.i64($i105, 8);
    call {:si_unique_call 6161} {:cexpr "__cil_tmp85"} boogie_si_record_i64($i106);
    goto corral_source_split_13390;

  corral_source_split_13390:
    assume {:verifier.code 0} true;
    $p107 := $i2p.i64.ref($i106);
    goto corral_source_split_13391;

  corral_source_split_13391:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_13392;

  corral_source_split_13392:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p108);
    call {:si_unique_call 6162} {:cexpr "__cil_tmp87"} boogie_si_record_i64($i109);
    goto corral_source_split_13393;

  corral_source_split_13393:
    assume {:verifier.code 0} true;
    $i110 := $ne.i64($i109, $i100);
    goto corral_source_split_13394;

  corral_source_split_13394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i110 == 1;
    goto corral_source_split_13396;

  corral_source_split_13396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6163} vslice_dummy_var_248 := drm_err.ref.ref(.str.285, .str.274);
    goto corral_source_split_13397;

  corral_source_split_13397:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 22);
    goto $bb3;

  $bb26:
    assume $i94 == 1;
    goto corral_source_split_13371;

  corral_source_split_13371:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p18);
    call {:si_unique_call 6155} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i95);
    goto corral_source_split_13372;

  corral_source_split_13372:
    assume {:verifier.code 0} true;
    $i96 := $add.i64($i95, 2089);
    call {:si_unique_call 6156} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i96);
    goto corral_source_split_13373;

  corral_source_split_13373:
    assume {:verifier.code 0} true;
    $p97 := $i2p.i64.ref($i96);
    goto corral_source_split_13374;

  corral_source_split_13374:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_13375;

  corral_source_split_13375:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i8.i1($i98);
    goto corral_source_split_13376;

  corral_source_split_13376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i99 == 1);
    goto corral_source_split_13382;

  corral_source_split_13382:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i99 == 1;
    goto corral_source_split_13380;

  corral_source_split_13380:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb14:
    assume $i50 == 1;
    goto corral_source_split_13316;

  corral_source_split_13316:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p18);
    call {:si_unique_call 6135} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i51);
    goto corral_source_split_13317;

  corral_source_split_13317:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 616);
    call {:si_unique_call 6136} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i52);
    goto corral_source_split_13318;

  corral_source_split_13318:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_13319;

  corral_source_split_13319:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    call {:si_unique_call 6137} {:cexpr "__cil_tmp50"} boogie_si_record_i64($i54);
    goto corral_source_split_13320;

  corral_source_split_13320:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p0);
    call {:si_unique_call 6138} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i55);
    goto corral_source_split_13321;

  corral_source_split_13321:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 48);
    call {:si_unique_call 6139} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i56);
    goto corral_source_split_13322;

  corral_source_split_13322:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_13323;

  corral_source_split_13323:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_13324;

  corral_source_split_13324:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref(0, 8));
    goto corral_source_split_13325;

  corral_source_split_13325:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_13326;

  corral_source_split_13326:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    call {:si_unique_call 6140} {:cexpr "__cil_tmp56"} boogie_si_record_i64($i61);
    goto corral_source_split_13327;

  corral_source_split_13327:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, $i54);
    goto corral_source_split_13328;

  corral_source_split_13328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i62 == 1;
    goto corral_source_split_13330;

  corral_source_split_13330:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p0);
    call {:si_unique_call 6141} {:cexpr "__cil_tmp57"} boogie_si_record_i64($i63);
    goto corral_source_split_13331;

  corral_source_split_13331:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 48);
    call {:si_unique_call 6142} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i64);
    goto corral_source_split_13332;

  corral_source_split_13332:
    assume {:verifier.code 0} true;
    $p65 := $i2p.i64.ref($i64);
    goto corral_source_split_13333;

  corral_source_split_13333:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_13334;

  corral_source_split_13334:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(0, 8));
    goto corral_source_split_13335;

  corral_source_split_13335:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_13336;

  corral_source_split_13336:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p18);
    call {:si_unique_call 6143} {:cexpr "__cil_tmp63"} boogie_si_record_i64($i69);
    goto corral_source_split_13337;

  corral_source_split_13337:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, 616);
    call {:si_unique_call 6144} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i70);
    goto corral_source_split_13338;

  corral_source_split_13338:
    assume {:verifier.code 0} true;
    $p71 := $i2p.i64.ref($i70);
    goto corral_source_split_13339;

  corral_source_split_13339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6145} vslice_dummy_var_247 := drm_err.ref.ref.ref.ref(.str.285, .str.273, $p68, $p71);
    goto corral_source_split_13340;

  corral_source_split_13340:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 22);
    goto $bb3;

  $bb11:
    assume $i44 == 1;
    goto corral_source_split_13307;

  corral_source_split_13307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6131} vslice_dummy_var_246 := drm_err.ref.ref(.str.285, .str.272);
    goto corral_source_split_13308;

  corral_source_split_13308:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_13282;

  corral_source_split_13282:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p0);
    call {:si_unique_call 6124} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i24);
    goto corral_source_split_13283;

  corral_source_split_13283:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 16);
    call {:si_unique_call 6125} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i25);
    goto corral_source_split_13284;

  corral_source_split_13284:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_13285;

  corral_source_split_13285:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_13286;

  corral_source_split_13286:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_13287;

  corral_source_split_13287:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i32($p28);
    call {:si_unique_call 6126} {:cexpr "__cil_tmp35"} boogie_si_record_i32($i29);
    goto corral_source_split_13288;

  corral_source_split_13288:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p27);
    goto corral_source_split_13289;

  corral_source_split_13289:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i29);
    goto corral_source_split_13290;

  corral_source_split_13290:
    assume {:verifier.code 0} true;
    $i32 := $sub.i64(0, $i31);
    goto corral_source_split_13291;

  corral_source_split_13291:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p30, $mul.ref($i32, 1));
    goto corral_source_split_13292;

  corral_source_split_13292:
    assume {:verifier.code 0} true;
    goto corral_source_split_13293;

  corral_source_split_13293:
    assume {:verifier.code 0} true;
    $p35 := $p33;
    goto $bb10;
}



const vmw_du_page_flip: ref;

axiom vmw_du_page_flip == $sub.ref(0, 1014528);

procedure vmw_du_page_flip($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmw_kms_screen_object_flippable: ref;

axiom vmw_kms_screen_object_flippable == $sub.ref(0, 1015560);

procedure vmw_kms_screen_object_flippable($p0: ref, $p1: ref) returns ($r: i1);



const vmw_kms_screen_object_update_implicit_fb: ref;

axiom vmw_kms_screen_object_update_implicit_fb == $sub.ref(0, 1016592);

procedure vmw_kms_screen_object_update_implicit_fb($p0: ref, $p1: ref);



const vmw_sou_fifo_destroy: ref;

axiom vmw_sou_fifo_destroy == $sub.ref(0, 1017624);

procedure vmw_sou_fifo_destroy($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.2, $M.6, $M.1, assertsPassed, $M.3, $M.4, $CurrAddr, $M.13, $M.10, $M.16;



implementation vmw_sou_fifo_destroy($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i1;
  var $i59: i32;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $i64: i64;
  var $i65: i64;
  var $p66: ref;
  var $i20: i32;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var vslice_dummy_var_252: i32;
  var vslice_dummy_var_253: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13683;

  corral_source_split_13683:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    call {:si_unique_call 6308} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i2);
    goto corral_source_split_13684;

  corral_source_split_13684:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 2088);
    call {:si_unique_call 6309} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i3);
    goto corral_source_split_13685;

  corral_source_split_13685:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_13686;

  corral_source_split_13686:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_13687;

  corral_source_split_13687:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_13688;

  corral_source_split_13688:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 6310} {:cexpr "__cil_tmp12"} boogie_si_record_i8($i7);
    goto corral_source_split_13689;

  corral_source_split_13689:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_13690;

  corral_source_split_13690:
    assume {:verifier.code 0} true;
    $i9 := $xor.i1($i8, 1);
    goto corral_source_split_13691;

  corral_source_split_13691:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 6311} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i10);
    goto corral_source_split_13692;

  corral_source_split_13692:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_13693;

  corral_source_split_13693:
    assume {:verifier.code 0} true;
    $i12 := $xor.i1($i11, 1);
    goto corral_source_split_13694;

  corral_source_split_13694:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    call {:si_unique_call 6312} {:cexpr "__cil_tmp14"} boogie_si_record_i32($i13);
    goto corral_source_split_13695;

  corral_source_split_13695:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_13696;

  corral_source_split_13696:
    assume {:verifier.code 0} true;
    $i15 := $xor.i1($i14, 1);
    goto corral_source_split_13697;

  corral_source_split_13697:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    call {:si_unique_call 6313} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i16);
    goto corral_source_split_13698;

  corral_source_split_13698:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    call {:si_unique_call 6314} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i17);
    goto corral_source_split_13699;

  corral_source_split_13699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6315} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 6316} {:cexpr "tmp___7"} boogie_si_record_i64($i18);
    goto corral_source_split_13700;

  corral_source_split_13700:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_13701;

  corral_source_split_13701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32(8);
    call {:si_unique_call 6317} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i21);
    goto corral_source_split_13707;

  corral_source_split_13707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6318} $p22 := vmw_fifo_reserve($p0, $i21);
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    goto corral_source_split_13708;

  corral_source_split_13708:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_13709;

  corral_source_split_13709:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 6319} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i24);
    goto corral_source_split_13710;

  corral_source_split_13710:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p23);
    call {:si_unique_call 6320} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i25);
    goto corral_source_split_13711;

  corral_source_split_13711:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, $i24);
    goto corral_source_split_13712;

  corral_source_split_13712:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    call {:si_unique_call 6321} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i27);
    goto corral_source_split_13713;

  corral_source_split_13713:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_13714;

  corral_source_split_13714:
    assume {:verifier.code 0} true;
    $i29 := $xor.i1($i28, 1);
    goto corral_source_split_13715;

  corral_source_split_13715:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    call {:si_unique_call 6322} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i30);
    goto corral_source_split_13716;

  corral_source_split_13716:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_13717;

  corral_source_split_13717:
    assume {:verifier.code 0} true;
    $i32 := $xor.i1($i31, 1);
    goto corral_source_split_13718;

  corral_source_split_13718:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    call {:si_unique_call 6323} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i33);
    goto corral_source_split_13719;

  corral_source_split_13719:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    call {:si_unique_call 6324} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i34);
    goto corral_source_split_13720;

  corral_source_split_13720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6325} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 6326} {:cexpr "tmp___9"} boogie_si_record_i64($i35);
    goto corral_source_split_13721;

  corral_source_split_13721:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_13722;

  corral_source_split_13722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p23);
    goto corral_source_split_13727;

  corral_source_split_13727:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.0;
    call {:si_unique_call 6328} cmdloc_dummy_var_54 := $memset.i8(cmdloc_dummy_var_53, $p38, 0, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_54;
    goto corral_source_split_13728;

  corral_source_split_13728:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p23);
    goto corral_source_split_13729;

  corral_source_split_13729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 35);
    goto corral_source_split_13730;

  corral_source_split_13730:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p23);
    call {:si_unique_call 6329} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i40);
    goto corral_source_split_13731;

  corral_source_split_13731:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 4);
    call {:si_unique_call 6330} {:cexpr "__cil_tmp27"} boogie_si_record_i64($i41);
    goto corral_source_split_13732;

  corral_source_split_13732:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p1);
    call {:si_unique_call 6331} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i42);
    goto corral_source_split_13733;

  corral_source_split_13733:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, 2032);
    call {:si_unique_call 6332} {:cexpr "__cil_tmp30"} boogie_si_record_i64($i43);
    goto corral_source_split_13734;

  corral_source_split_13734:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i43);
    goto corral_source_split_13735;

  corral_source_split_13735:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_13736;

  corral_source_split_13736:
    assume {:verifier.code 0} true;
    $p46 := $i2p.i64.ref($i41);
    goto corral_source_split_13737;

  corral_source_split_13737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    goto corral_source_split_13738;

  corral_source_split_13738:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i64.i32(8);
    call {:si_unique_call 6333} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i47);
    goto corral_source_split_13739;

  corral_source_split_13739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6334} vmw_fifo_commit($p0, $i47);
    goto SeqInstr_808, SeqInstr_809;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  SeqInstr_810:
    goto corral_source_split_13740;

  corral_source_split_13740:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i8.i1(0);
    goto corral_source_split_13741;

  corral_source_split_13741:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i8.i1(1);
    goto corral_source_split_13742;

  corral_source_split_13742:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i8.i1(0);
    goto corral_source_split_13743;

  corral_source_split_13743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6335} $i51 := vmw_fallback_wait($p0, $i48, $i49, 0, $i50, 750);
    goto SeqInstr_811, SeqInstr_812;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  SeqInstr_813:
    call {:si_unique_call 6336} {:cexpr "ret"} boogie_si_record_i32($i51);
    goto corral_source_split_13744;

  corral_source_split_13744:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_13745;

  corral_source_split_13745:
    assume {:verifier.code 0} true;
    $i53 := $zext.i1.i32($i52);
    call {:si_unique_call 6337} {:cexpr "__cil_tmp36"} boogie_si_record_i32($i53);
    goto corral_source_split_13746;

  corral_source_split_13746:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_13747;

  corral_source_split_13747:
    assume {:verifier.code 0} true;
    $i55 := $xor.i1($i54, 1);
    goto corral_source_split_13748;

  corral_source_split_13748:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i32($i55);
    call {:si_unique_call 6338} {:cexpr "__cil_tmp37"} boogie_si_record_i32($i56);
    goto corral_source_split_13749;

  corral_source_split_13749:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_13750;

  corral_source_split_13750:
    assume {:verifier.code 0} true;
    $i58 := $xor.i1($i57, 1);
    goto corral_source_split_13751;

  corral_source_split_13751:
    assume {:verifier.code 0} true;
    $i59 := $zext.i1.i32($i58);
    call {:si_unique_call 6339} {:cexpr "__cil_tmp38"} boogie_si_record_i32($i59);
    goto corral_source_split_13752;

  corral_source_split_13752:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i59);
    call {:si_unique_call 6340} {:cexpr "__cil_tmp39"} boogie_si_record_i64($i60);
    goto corral_source_split_13753;

  corral_source_split_13753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6341} $i61 := ldv__builtin_expect($i60, 0);
    call {:si_unique_call 6342} {:cexpr "tmp___10"} boogie_si_record_i64($i61);
    goto corral_source_split_13754;

  corral_source_split_13754:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_13755;

  corral_source_split_13755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i62 == 1);
    goto corral_source_split_13760;

  corral_source_split_13760:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p1);
    call {:si_unique_call 6344} {:cexpr "__cil_tmp40"} boogie_si_record_i64($i64);
    goto corral_source_split_13761;

  corral_source_split_13761:
    assume {:verifier.code 0} true;
    $i65 := $add.i64($i64, 2088);
    call {:si_unique_call 6345} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i65);
    goto corral_source_split_13762;

  corral_source_split_13762:
    assume {:verifier.code 0} true;
    $p66 := $i2p.i64.ref($i65);
    goto corral_source_split_13763;

  corral_source_split_13763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, 0);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i20 := $i51;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13705;

  corral_source_split_13705:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb8:
    assume $i62 == 1;
    goto corral_source_split_13757;

  corral_source_split_13757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6343} vslice_dummy_var_253 := drm_err.ref.ref(.str.286, .str.287);
    goto corral_source_split_13758;

  corral_source_split_13758:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_811:
    assume !assertsPassed;
    return;

  SeqInstr_808:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i36 == 1;
    goto corral_source_split_13724;

  corral_source_split_13724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6327} vslice_dummy_var_252 := drm_err.ref.ref(.str.286, .str.12);
    goto corral_source_split_13725;

  corral_source_split_13725:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_805:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_13703;

  corral_source_split_13703:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb3;
}



const vmw_sou_del_active: ref;

axiom vmw_sou_del_active == $sub.ref(0, 1018656);

procedure vmw_sou_del_active($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vmw_sou_del_active($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i8;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i64;
  var $i19: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13765;

  corral_source_split_13765:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    call {:si_unique_call 6346} {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
    goto corral_source_split_13766;

  corral_source_split_13766:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 2616);
    call {:si_unique_call 6347} {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
    goto corral_source_split_13767;

  corral_source_split_13767:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_13768;

  corral_source_split_13768:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_13769;

  corral_source_split_13769:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p1);
    call {:si_unique_call 6348} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i6);
    goto corral_source_split_13770;

  corral_source_split_13770:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 2089);
    call {:si_unique_call 6349} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i7);
    goto corral_source_split_13771;

  corral_source_split_13771:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_13772;

  corral_source_split_13772:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_13773;

  corral_source_split_13773:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_13774;

  corral_source_split_13774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_13776;

  corral_source_split_13776:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p5);
    goto corral_source_split_13777;

  corral_source_split_13777:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 6350} {:cexpr "__cil_tmp8"} boogie_si_record_i32($i12);
    goto corral_source_split_13778;

  corral_source_split_13778:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32($i12, 1);
    goto corral_source_split_13779;

  corral_source_split_13779:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p5);
    goto corral_source_split_13780;

  corral_source_split_13780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_13781;

  corral_source_split_13781:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p5);
    goto corral_source_split_13782;

  corral_source_split_13782:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    call {:si_unique_call 6351} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i16);
    goto corral_source_split_13783;

  corral_source_split_13783:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_13784;

  corral_source_split_13784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    call {:si_unique_call 6354} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i22);
    goto corral_source_split_13793;

  corral_source_split_13793:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 2089);
    call {:si_unique_call 6355} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i23);
    goto corral_source_split_13794;

  corral_source_split_13794:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i23);
    goto corral_source_split_13795;

  corral_source_split_13795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 0);
    goto corral_source_split_13796;

  corral_source_split_13796:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_13786;

  corral_source_split_13786:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p5);
    call {:si_unique_call 6352} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i18);
    goto corral_source_split_13787;

  corral_source_split_13787:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 8);
    call {:si_unique_call 6353} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i19);
    goto corral_source_split_13788;

  corral_source_split_13788:
    assume {:verifier.code 0} true;
    goto corral_source_split_13789;

  corral_source_split_13789:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i19);
    goto corral_source_split_13790;

  corral_source_split_13790:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $0.ref);
    goto corral_source_split_13791;

  corral_source_split_13791:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const vmw_sou_backing_free: ref;

axiom vmw_sou_backing_free == $sub.ref(0, 1019688);

procedure vmw_sou_backing_free($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmw_sou_backing_free($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i25: i64;
  var $i26: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 6356} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_13798;

  corral_source_split_13798:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 6357} {:cexpr "__cil_tmp6"} boogie_si_record_i64($i3);
    goto corral_source_split_13799;

  corral_source_split_13799:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    call {:si_unique_call 6358} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i4);
    goto corral_source_split_13800;

  corral_source_split_13800:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 2080);
    call {:si_unique_call 6359} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i5);
    goto corral_source_split_13801;

  corral_source_split_13801:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_13802;

  corral_source_split_13802:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_13803;

  corral_source_split_13803:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    call {:si_unique_call 6360} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i8);
    goto corral_source_split_13804;

  corral_source_split_13804:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, $i3);
    goto corral_source_split_13805;

  corral_source_split_13805:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 6361} {:cexpr "__cil_tmp11"} boogie_si_record_i32($i10);
    goto corral_source_split_13806;

  corral_source_split_13806:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_13807;

  corral_source_split_13807:
    assume {:verifier.code 0} true;
    $i12 := $xor.i1($i11, 1);
    goto corral_source_split_13808;

  corral_source_split_13808:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    call {:si_unique_call 6362} {:cexpr "__cil_tmp12"} boogie_si_record_i32($i13);
    goto corral_source_split_13809;

  corral_source_split_13809:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_13810;

  corral_source_split_13810:
    assume {:verifier.code 0} true;
    $i15 := $xor.i1($i14, 1);
    goto corral_source_split_13811;

  corral_source_split_13811:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    call {:si_unique_call 6363} {:cexpr "__cil_tmp13"} boogie_si_record_i32($i16);
    goto corral_source_split_13812;

  corral_source_split_13812:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    call {:si_unique_call 6364} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i17);
    goto corral_source_split_13813;

  corral_source_split_13813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6365} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 6366} {:cexpr "tmp___7"} boogie_si_record_i64($i18);
    goto corral_source_split_13814;

  corral_source_split_13814:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_13815;

  corral_source_split_13815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p1);
    call {:si_unique_call 6367} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i20);
    goto corral_source_split_13819;

  corral_source_split_13819:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 2080);
    call {:si_unique_call 6368} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i21);
    goto corral_source_split_13820;

  corral_source_split_13820:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_13821;

  corral_source_split_13821:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_13822;

  corral_source_split_13822:
    assume {:verifier.code 0} true;
    goto corral_source_split_13823;

  corral_source_split_13823:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p23);
    goto corral_source_split_13824;

  corral_source_split_13824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6369} ttm_bo_unref($p2);
    goto corral_source_split_13825;

  corral_source_split_13825:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p1);
    call {:si_unique_call 6370} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i25);
    goto corral_source_split_13826;

  corral_source_split_13826:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 2080);
    call {:si_unique_call 6371} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i26);
    goto corral_source_split_13827;

  corral_source_split_13827:
    assume {:verifier.code 0} true;
    goto corral_source_split_13828;

  corral_source_split_13828:
    assume {:verifier.code 0} true;
    $p28 := $i2p.i64.ref($i26);
    goto corral_source_split_13829;

  corral_source_split_13829:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $0.ref);
    goto corral_source_split_13830;

  corral_source_split_13830:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p1);
    call {:si_unique_call 6372} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i29);
    goto corral_source_split_13831;

  corral_source_split_13831:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 2072);
    call {:si_unique_call 6373} {:cexpr "__cil_tmp23"} boogie_si_record_i64($i30);
    goto corral_source_split_13832;

  corral_source_split_13832:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i30);
    goto corral_source_split_13833;

  corral_source_split_13833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p31, 0);
    goto corral_source_split_13834;

  corral_source_split_13834:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_13817;

  corral_source_split_13817:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmw_sou_backing_alloc: ref;

axiom vmw_sou_backing_alloc == $sub.ref(0, 1020720);

procedure vmw_sou_backing_alloc($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed, $M.16, $CurrAddr, $M.11, $M.12, $M.2, $M.6, $M.10, $M.3, $M.4, $M.13;



implementation vmw_sou_backing_alloc($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i1;
  var $i42: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i1;
  var $i51: i32;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $i55: i64;
  var $i56: i64;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $i8: i32;
  var vslice_dummy_var_254: i32;
  var vslice_dummy_var_255: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6374} {:cexpr "vmw_sou_backing_alloc:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_13836;

  corral_source_split_13836:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    call {:si_unique_call 6375} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i3);
    goto corral_source_split_13837;

  corral_source_split_13837:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 2072);
    call {:si_unique_call 6376} {:cexpr "__cil_tmp9"} boogie_si_record_i64($i4);
    goto corral_source_split_13838;

  corral_source_split_13838:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_13839;

  corral_source_split_13839:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    call {:si_unique_call 6377} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i6);
    goto corral_source_split_13840;

  corral_source_split_13840:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, $i2);
    goto corral_source_split_13841;

  corral_source_split_13841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    call {:si_unique_call 6378} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i9);
    goto corral_source_split_13847;

  corral_source_split_13847:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 2080);
    call {:si_unique_call 6379} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i10);
    goto corral_source_split_13848;

  corral_source_split_13848:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_13849;

  corral_source_split_13849:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_13850;

  corral_source_split_13850:
    assume {:verifier.code 0} true;
    $i13 := $ne.ref($p12, $0.ref);
    goto corral_source_split_13851;

  corral_source_split_13851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6381} $p14 := kzalloc(416, 208);
    goto corral_source_split_13856;

  corral_source_split_13856:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p1);
    call {:si_unique_call 6382} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i15);
    goto corral_source_split_13857;

  corral_source_split_13857:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 2080);
    call {:si_unique_call 6383} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i16);
    goto corral_source_split_13858;

  corral_source_split_13858:
    assume {:verifier.code 0} true;
    goto corral_source_split_13859;

  corral_source_split_13859:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i16);
    goto corral_source_split_13860;

  corral_source_split_13860:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p14);
    goto corral_source_split_13861;

  corral_source_split_13861:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 6384} {:cexpr "__cil_tmp16"} boogie_si_record_i64($i19);
    goto corral_source_split_13862;

  corral_source_split_13862:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p1);
    call {:si_unique_call 6385} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i20);
    goto corral_source_split_13863;

  corral_source_split_13863:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 2080);
    call {:si_unique_call 6386} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i21);
    goto corral_source_split_13864;

  corral_source_split_13864:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_13865;

  corral_source_split_13865:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_13866;

  corral_source_split_13866:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    call {:si_unique_call 6387} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i24);
    goto corral_source_split_13867;

  corral_source_split_13867:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, $i19);
    goto corral_source_split_13868;

  corral_source_split_13868:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 6388} {:cexpr "__cil_tmp21"} boogie_si_record_i32($i26);
    goto corral_source_split_13869;

  corral_source_split_13869:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_13870;

  corral_source_split_13870:
    assume {:verifier.code 0} true;
    $i28 := $xor.i1($i27, 1);
    goto corral_source_split_13871;

  corral_source_split_13871:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    call {:si_unique_call 6389} {:cexpr "__cil_tmp22"} boogie_si_record_i32($i29);
    goto corral_source_split_13872;

  corral_source_split_13872:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_13873;

  corral_source_split_13873:
    assume {:verifier.code 0} true;
    $i31 := $xor.i1($i30, 1);
    goto corral_source_split_13874;

  corral_source_split_13874:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    call {:si_unique_call 6390} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i32);
    goto corral_source_split_13875;

  corral_source_split_13875:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    call {:si_unique_call 6391} {:cexpr "__cil_tmp24"} boogie_si_record_i64($i33);
    goto corral_source_split_13876;

  corral_source_split_13876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6392} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 6393} {:cexpr "tmp___8"} boogie_si_record_i64($i34);
    goto corral_source_split_13877;

  corral_source_split_13877:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_13878;

  corral_source_split_13878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6394} vslice_dummy_var_254 := vmw_overlay_pause_all($p0);
    goto SeqInstr_814, SeqInstr_815;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  SeqInstr_816:
    goto corral_source_split_13882;

  corral_source_split_13882:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p1);
    call {:si_unique_call 6395} {:cexpr "__cil_tmp25"} boogie_si_record_i64($i37);
    goto corral_source_split_13883;

  corral_source_split_13883:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 2080);
    call {:si_unique_call 6396} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i38);
    goto corral_source_split_13884;

  corral_source_split_13884:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i38);
    goto corral_source_split_13885;

  corral_source_split_13885:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_13886;

  corral_source_split_13886:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1(0);
    goto corral_source_split_13887;

  corral_source_split_13887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6397} $i42 := vmw_dmabuf_init($p0, $p40, $i2, vmw_vram_ne_placement, $i41, vmw_dmabuf_bo_free);
    call {:si_unique_call 6398} {:cexpr "ret"} boogie_si_record_i32($i42);
    goto corral_source_split_13888;

  corral_source_split_13888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6399} vslice_dummy_var_255 := vmw_overlay_resume_all($p0);
    goto SeqInstr_817, SeqInstr_818;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  SeqInstr_819:
    goto corral_source_split_13889;

  corral_source_split_13889:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i42, 0);
    goto corral_source_split_13890;

  corral_source_split_13890:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i32($i44);
    call {:si_unique_call 6400} {:cexpr "__cil_tmp29"} boogie_si_record_i32($i45);
    goto corral_source_split_13891;

  corral_source_split_13891:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_13892;

  corral_source_split_13892:
    assume {:verifier.code 0} true;
    $i47 := $xor.i1($i46, 1);
    goto corral_source_split_13893;

  corral_source_split_13893:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i32($i47);
    call {:si_unique_call 6401} {:cexpr "__cil_tmp30"} boogie_si_record_i32($i48);
    goto corral_source_split_13894;

  corral_source_split_13894:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_13895;

  corral_source_split_13895:
    assume {:verifier.code 0} true;
    $i50 := $xor.i1($i49, 1);
    goto corral_source_split_13896;

  corral_source_split_13896:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i32($i50);
    call {:si_unique_call 6402} {:cexpr "__cil_tmp31"} boogie_si_record_i32($i51);
    goto corral_source_split_13897;

  corral_source_split_13897:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    call {:si_unique_call 6403} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i52);
    goto corral_source_split_13898;

  corral_source_split_13898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6404} $i53 := ldv__builtin_expect($i52, 0);
    call {:si_unique_call 6405} {:cexpr "tmp___9"} boogie_si_record_i64($i53);
    goto corral_source_split_13899;

  corral_source_split_13899:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_13900;

  corral_source_split_13900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i54 == 1);
    goto corral_source_split_13909;

  corral_source_split_13909:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p1);
    call {:si_unique_call 6408} {:cexpr "__cil_tmp36"} boogie_si_record_i64($i59);
    goto corral_source_split_13910;

  corral_source_split_13910:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, 2072);
    call {:si_unique_call 6409} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i60);
    goto corral_source_split_13911;

  corral_source_split_13911:
    assume {:verifier.code 0} true;
    $p61 := $i2p.i64.ref($i60);
    goto corral_source_split_13912;

  corral_source_split_13912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p61, $i2);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i8 := $i42;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13845;

  corral_source_split_13845:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb11:
    assume $i54 == 1;
    goto corral_source_split_13902;

  corral_source_split_13902:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p1);
    call {:si_unique_call 6406} {:cexpr "__cil_tmp33"} boogie_si_record_i64($i55);
    goto corral_source_split_13903;

  corral_source_split_13903:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 2080);
    call {:si_unique_call 6407} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i56);
    goto corral_source_split_13904;

  corral_source_split_13904:
    assume {:verifier.code 0} true;
    goto corral_source_split_13905;

  corral_source_split_13905:
    assume {:verifier.code 0} true;
    $p58 := $i2p.i64.ref($i56);
    goto corral_source_split_13906;

  corral_source_split_13906:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, $0.ref);
    goto corral_source_split_13907;

  corral_source_split_13907:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_817:
    assume !assertsPassed;
    return;

  SeqInstr_814:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i35 == 1;
    goto corral_source_split_13880;

  corral_source_split_13880:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_13853;

  corral_source_split_13853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6380} vmw_sou_backing_free($p0, $p1);
    goto corral_source_split_13854;

  corral_source_split_13854:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_13843;

  corral_source_split_13843:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const vmw_sou_fifo_create: ref;

axiom vmw_sou_fifo_create == $sub.ref(0, 1021752);

procedure vmw_sou_fifo_create($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.1, $M.2, assertsPassed, $M.3, $M.4, $CurrAddr, $M.6, $M.11, $M.12, $M.13, $M.16;



implementation vmw_sou_fifo_create($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i64;
  var $i58: i64;
  var $i59: i32;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $i76: i64;
  var $i77: i64;
  var $p78: ref;
  var $i79: i8;
  var $i80: i1;
  var $i81: i64;
  var $i82: i64;
  var $p83: ref;
  var $i84: i64;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $i88: i64;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $i95: i64;
  var $i96: i64;
  var $i97: i64;
  var $i98: i64;
  var $i99: i64;
  var $p100: ref;
  var $i101: i32;
  var $p102: ref;
  var $i103: i64;
  var $i104: i64;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $i109: i64;
  var $p110: ref;
  var $i111: i64;
  var $i112: i64;
  var $i113: i64;
  var $i114: i64;
  var $i115: i64;
  var $p116: ref;
  var $i117: i32;
  var $i118: i32;
  var $p119: ref;
  var $i120: i32;
  var $i121: i64;
  var $i122: i64;
  var $p123: ref;
  var $i38: i32;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var vslice_dummy_var_256: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6410} {:cexpr "vmw_sou_fifo_create:arg:x"} boogie_si_record_i32($i2);
    call {:si_unique_call 6411} {:cexpr "vmw_sou_fifo_create:arg:y"} boogie_si_record_i32($i3);
    goto corral_source_split_13914;

  corral_source_split_13914:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    call {:si_unique_call 6412} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i5);
    goto corral_source_split_13916;

  corral_source_split_13916:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 2080);
    call {:si_unique_call 6413} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i6);
    goto corral_source_split_13917;

  corral_source_split_13917:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_13918;

  corral_source_split_13918:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_13919;

  corral_source_split_13919:
    assume {:verifier.code 0} true;
    $i9 := $ne.ref($p8, $0.ref);
    goto corral_source_split_13920;

  corral_source_split_13920:
    assume {:verifier.code 0} true;
    $i10 := $xor.i1($i9, 1);
    goto corral_source_split_13921;

  corral_source_split_13921:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 6414} {:cexpr "__cil_tmp15"} boogie_si_record_i32($i11);
    goto corral_source_split_13922;

  corral_source_split_13922:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_13923;

  corral_source_split_13923:
    assume {:verifier.code 0} true;
    $i13 := $xor.i1($i12, 1);
    goto corral_source_split_13924;

  corral_source_split_13924:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    call {:si_unique_call 6415} {:cexpr "__cil_tmp16"} boogie_si_record_i32($i14);
    goto corral_source_split_13925;

  corral_source_split_13925:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_13926;

  corral_source_split_13926:
    assume {:verifier.code 0} true;
    $i16 := $xor.i1($i15, 1);
    goto corral_source_split_13927;

  corral_source_split_13927:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    call {:si_unique_call 6416} {:cexpr "__cil_tmp17"} boogie_si_record_i32($i17);
    goto corral_source_split_13928;

  corral_source_split_13928:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    call {:si_unique_call 6417} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i18);
    goto corral_source_split_13929;

  corral_source_split_13929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6418} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 6419} {:cexpr "tmp___7"} boogie_si_record_i64($i19);
    goto corral_source_split_13930;

  corral_source_split_13930:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_13931;

  corral_source_split_13931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32(48);
    call {:si_unique_call 6421} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i21);
    goto corral_source_split_13937;

  corral_source_split_13937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6422} $p22 := vmw_fifo_reserve($p0, $i21);
    goto SeqInstr_820, SeqInstr_821;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  SeqInstr_822:
    goto corral_source_split_13938;

  corral_source_split_13938:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_13939;

  corral_source_split_13939:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 6423} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i24);
    goto corral_source_split_13940;

  corral_source_split_13940:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p23);
    call {:si_unique_call 6424} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i25);
    goto corral_source_split_13941;

  corral_source_split_13941:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, $i24);
    goto corral_source_split_13942;

  corral_source_split_13942:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    call {:si_unique_call 6425} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i27);
    goto corral_source_split_13943;

  corral_source_split_13943:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_13944;

  corral_source_split_13944:
    assume {:verifier.code 0} true;
    $i29 := $xor.i1($i28, 1);
    goto corral_source_split_13945;

  corral_source_split_13945:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    call {:si_unique_call 6426} {:cexpr "__cil_tmp24"} boogie_si_record_i32($i30);
    goto corral_source_split_13946;

  corral_source_split_13946:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_13947;

  corral_source_split_13947:
    assume {:verifier.code 0} true;
    $i32 := $xor.i1($i31, 1);
    goto corral_source_split_13948;

  corral_source_split_13948:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    call {:si_unique_call 6427} {:cexpr "__cil_tmp25"} boogie_si_record_i32($i33);
    goto corral_source_split_13949;

  corral_source_split_13949:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    call {:si_unique_call 6428} {:cexpr "__cil_tmp26"} boogie_si_record_i64($i34);
    goto corral_source_split_13950;

  corral_source_split_13950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6429} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 6430} {:cexpr "tmp___9"} boogie_si_record_i64($i35);
    goto corral_source_split_13951;

  corral_source_split_13951:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_13952;

  corral_source_split_13952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p23);
    goto corral_source_split_13959;

  corral_source_split_13959:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_55 := $M.0;
    call {:si_unique_call 6432} cmdloc_dummy_var_56 := $memset.i8(cmdloc_dummy_var_55, $p39, 0, 48, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_56;
    goto corral_source_split_13960;

  corral_source_split_13960:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p23);
    goto corral_source_split_13961;

  corral_source_split_13961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, 34);
    goto corral_source_split_13962;

  corral_source_split_13962:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p23);
    call {:si_unique_call 6433} {:cexpr "__cil_tmp28"} boogie_si_record_i64($i41);
    goto corral_source_split_13963;

  corral_source_split_13963:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 4);
    call {:si_unique_call 6434} {:cexpr "__cil_tmp29"} boogie_si_record_i64($i42);
    goto corral_source_split_13964;

  corral_source_split_13964:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i42);
    goto corral_source_split_13965;

  corral_source_split_13965:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 44);
    goto corral_source_split_13966;

  corral_source_split_13966:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p23);
    call {:si_unique_call 6435} {:cexpr "__cil_tmp31"} boogie_si_record_i64($i44);
    goto corral_source_split_13967;

  corral_source_split_13967:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 8);
    call {:si_unique_call 6436} {:cexpr "__cil_tmp32"} boogie_si_record_i64($i45);
    goto corral_source_split_13968;

  corral_source_split_13968:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p1);
    call {:si_unique_call 6437} {:cexpr "__cil_tmp34"} boogie_si_record_i64($i46);
    goto corral_source_split_13969;

  corral_source_split_13969:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 2032);
    call {:si_unique_call 6438} {:cexpr "__cil_tmp35"} boogie_si_record_i64($i47);
    goto corral_source_split_13970;

  corral_source_split_13970:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i47);
    goto corral_source_split_13971;

  corral_source_split_13971:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_13972;

  corral_source_split_13972:
    assume {:verifier.code 0} true;
    $p50 := $i2p.i64.ref($i45);
    goto corral_source_split_13973;

  corral_source_split_13973:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, $i49);
    goto corral_source_split_13974;

  corral_source_split_13974:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p1);
    call {:si_unique_call 6439} {:cexpr "__cil_tmp37"} boogie_si_record_i64($i51);
    goto corral_source_split_13975;

  corral_source_split_13975:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 2032);
    call {:si_unique_call 6440} {:cexpr "__cil_tmp38"} boogie_si_record_i64($i52);
    goto corral_source_split_13976;

  corral_source_split_13976:
    assume {:verifier.code 0} true;
    $p53 := $i2p.i64.ref($i52);
    goto corral_source_split_13977;

  corral_source_split_13977:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    call {:si_unique_call 6441} {:cexpr "__cil_tmp39"} boogie_si_record_i32($i54);
    goto corral_source_split_13978;

  corral_source_split_13978:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_13979;

  corral_source_split_13979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_13983;

  corral_source_split_13983:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p23);
    call {:si_unique_call 6442} {:cexpr "__cil_tmp41"} boogie_si_record_i64($i57);
    goto corral_source_split_13984;

  corral_source_split_13984:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 12);
    call {:si_unique_call 6443} {:cexpr "__cil_tmp42"} boogie_si_record_i64($i58);
    goto corral_source_split_13985;

  corral_source_split_13985:
    assume {:verifier.code 0} true;
    $i59 := $or.i32(1, $i56);
    call {:si_unique_call 6444} {:cexpr "__cil_tmp43"} boogie_si_record_i32($i59);
    goto corral_source_split_13986;

  corral_source_split_13986:
    assume {:verifier.code 0} true;
    $p60 := $i2p.i64.ref($i58);
    goto corral_source_split_13987;

  corral_source_split_13987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_13988;

  corral_source_split_13988:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p23);
    call {:si_unique_call 6445} {:cexpr "__cil_tmp45"} boogie_si_record_i64($i61);
    goto corral_source_split_13989;

  corral_source_split_13989:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, 16);
    call {:si_unique_call 6446} {:cexpr "__cil_tmp46"} boogie_si_record_i64($i62);
    goto corral_source_split_13990;

  corral_source_split_13990:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p4);
    call {:si_unique_call 6447} {:cexpr "__cil_tmp47"} boogie_si_record_i64($i63);
    goto corral_source_split_13991;

  corral_source_split_13991:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 68);
    call {:si_unique_call 6448} {:cexpr "__cil_tmp48"} boogie_si_record_i64($i64);
    goto corral_source_split_13992;

  corral_source_split_13992:
    assume {:verifier.code 0} true;
    $p65 := $i2p.i64.ref($i64);
    goto corral_source_split_13993;

  corral_source_split_13993:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    call {:si_unique_call 6449} {:cexpr "__cil_tmp49"} boogie_si_record_i32($i66);
    goto corral_source_split_13994;

  corral_source_split_13994:
    assume {:verifier.code 0} true;
    $p67 := $i2p.i64.ref($i62);
    goto corral_source_split_13995;

  corral_source_split_13995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i66);
    goto corral_source_split_13996;

  corral_source_split_13996:
    assume {:verifier.code 0} true;
    $i68 := $add.i64(4, 16);
    call {:si_unique_call 6450} {:cexpr "__cil_tmp51"} boogie_si_record_i64($i68);
    goto corral_source_split_13997;

  corral_source_split_13997:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p23);
    call {:si_unique_call 6451} {:cexpr "__cil_tmp52"} boogie_si_record_i64($i69);
    goto corral_source_split_13998;

  corral_source_split_13998:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, $i68);
    call {:si_unique_call 6452} {:cexpr "__cil_tmp53"} boogie_si_record_i64($i70);
    goto corral_source_split_13999;

  corral_source_split_13999:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p4);
    call {:si_unique_call 6453} {:cexpr "__cil_tmp54"} boogie_si_record_i64($i71);
    goto corral_source_split_14000;

  corral_source_split_14000:
    assume {:verifier.code 0} true;
    $i72 := $add.i64($i71, 88);
    call {:si_unique_call 6454} {:cexpr "__cil_tmp55"} boogie_si_record_i64($i72);
    goto corral_source_split_14001;

  corral_source_split_14001:
    assume {:verifier.code 0} true;
    $p73 := $i2p.i64.ref($i72);
    goto corral_source_split_14002;

  corral_source_split_14002:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    call {:si_unique_call 6455} {:cexpr "__cil_tmp56"} boogie_si_record_i32($i74);
    goto corral_source_split_14003;

  corral_source_split_14003:
    assume {:verifier.code 0} true;
    $p75 := $i2p.i64.ref($i70);
    goto corral_source_split_14004;

  corral_source_split_14004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_14005;

  corral_source_split_14005:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p1);
    call {:si_unique_call 6456} {:cexpr "__cil_tmp58"} boogie_si_record_i64($i76);
    goto corral_source_split_14006;

  corral_source_split_14006:
    assume {:verifier.code 0} true;
    $i77 := $add.i64($i76, 2064);
    call {:si_unique_call 6457} {:cexpr "__cil_tmp59"} boogie_si_record_i64($i77);
    goto corral_source_split_14007;

  corral_source_split_14007:
    assume {:verifier.code 0} true;
    $p78 := $i2p.i64.ref($i77);
    goto corral_source_split_14008;

  corral_source_split_14008:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_14009;

  corral_source_split_14009:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i8.i1($i79);
    goto corral_source_split_14010;

  corral_source_split_14010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i80 == 1);
    goto corral_source_split_14023;

  corral_source_split_14023:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p23);
    call {:si_unique_call 6463} {:cexpr "__cil_tmp68"} boogie_si_record_i64($i88);
    goto corral_source_split_14024;

  corral_source_split_14024:
    assume {:verifier.code 0} true;
    $i89 := $add.i64($i88, 24);
    call {:si_unique_call 6464} {:cexpr "__cil_tmp69"} boogie_si_record_i64($i89);
    goto corral_source_split_14025;

  corral_source_split_14025:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p1);
    call {:si_unique_call 6465} {:cexpr "__cil_tmp71"} boogie_si_record_i64($i90);
    goto corral_source_split_14026;

  corral_source_split_14026:
    assume {:verifier.code 0} true;
    $i91 := $add.i64($i90, 2056);
    call {:si_unique_call 6466} {:cexpr "__cil_tmp72"} boogie_si_record_i64($i91);
    goto corral_source_split_14027;

  corral_source_split_14027:
    assume {:verifier.code 0} true;
    $p92 := $i2p.i64.ref($i91);
    goto corral_source_split_14028;

  corral_source_split_14028:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_14029;

  corral_source_split_14029:
    assume {:verifier.code 0} true;
    $p94 := $i2p.i64.ref($i89);
    goto corral_source_split_14030;

  corral_source_split_14030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i93);
    goto corral_source_split_14031;

  corral_source_split_14031:
    assume {:verifier.code 0} true;
    $i95 := $add.i64(4, 24);
    call {:si_unique_call 6467} {:cexpr "__cil_tmp74"} boogie_si_record_i64($i95);
    goto corral_source_split_14032;

  corral_source_split_14032:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p23);
    call {:si_unique_call 6468} {:cexpr "__cil_tmp75"} boogie_si_record_i64($i96);
    goto corral_source_split_14033;

  corral_source_split_14033:
    assume {:verifier.code 0} true;
    $i97 := $add.i64($i96, $i95);
    call {:si_unique_call 6469} {:cexpr "__cil_tmp76"} boogie_si_record_i64($i97);
    goto corral_source_split_14034;

  corral_source_split_14034:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p1);
    call {:si_unique_call 6470} {:cexpr "__cil_tmp78"} boogie_si_record_i64($i98);
    goto corral_source_split_14035;

  corral_source_split_14035:
    assume {:verifier.code 0} true;
    $i99 := $add.i64($i98, 2060);
    call {:si_unique_call 6471} {:cexpr "__cil_tmp79"} boogie_si_record_i64($i99);
    goto corral_source_split_14036;

  corral_source_split_14036:
    assume {:verifier.code 0} true;
    $p100 := $i2p.i64.ref($i99);
    goto corral_source_split_14037;

  corral_source_split_14037:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_14038;

  corral_source_split_14038:
    assume {:verifier.code 0} true;
    $p102 := $i2p.i64.ref($i97);
    goto corral_source_split_14039;

  corral_source_split_14039:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, $i101);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i103 := $p2i.ref.i64($p1);
    call {:si_unique_call 6472} {:cexpr "__cil_tmp80"} boogie_si_record_i64($i103);
    goto corral_source_split_14041;

  corral_source_split_14041:
    assume {:verifier.code 0} true;
    $i104 := $add.i64($i103, 2080);
    call {:si_unique_call 6473} {:cexpr "__cil_tmp81"} boogie_si_record_i64($i104);
    goto corral_source_split_14042;

  corral_source_split_14042:
    assume {:verifier.code 0} true;
    $p105 := $i2p.i64.ref($i104);
    goto corral_source_split_14043;

  corral_source_split_14043:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_14044;

  corral_source_split_14044:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_14045;

  corral_source_split_14045:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p23);
    call {:si_unique_call 6474} {:cexpr "__cil_tmp86"} boogie_si_record_i64($i108);
    goto corral_source_split_14046;

  corral_source_split_14046:
    assume {:verifier.code 0} true;
    $i109 := $add.i64($i108, 32);
    call {:si_unique_call 6475} {:cexpr "__cil_tmp87"} boogie_si_record_i64($i109);
    goto corral_source_split_14047;

  corral_source_split_14047:
    assume {:verifier.code 0} true;
    $p110 := $i2p.i64.ref($i109);
    goto corral_source_split_14048;

  corral_source_split_14048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6476} vmw_bo_get_guest_ptr($p107, $p110);
    goto corral_source_split_14049;

  corral_source_split_14049:
    assume {:verifier.code 0} true;
    $i111 := $add.i64(4, 36);
    call {:si_unique_call 6477} {:cexpr "__cil_tmp90"} boogie_si_record_i64($i111);
    goto corral_source_split_14050;

  corral_source_split_14050:
    assume {:verifier.code 0} true;
    $i112 := $p2i.ref.i64($p23);
    call {:si_unique_call 6478} {:cexpr "__cil_tmp91"} boogie_si_record_i64($i112);
    goto corral_source_split_14051;

  corral_source_split_14051:
    assume {:verifier.code 0} true;
    $i113 := $add.i64($i112, $i111);
    call {:si_unique_call 6479} {:cexpr "__cil_tmp92"} boogie_si_record_i64($i113);
    goto corral_source_split_14052;

  corral_source_split_14052:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p4);
    call {:si_unique_call 6480} {:cexpr "__cil_tmp93"} boogie_si_record_i64($i114);
    goto corral_source_split_14053;

  corral_source_split_14053:
    assume {:verifier.code 0} true;
    $i115 := $add.i64($i114, 68);
    call {:si_unique_call 6481} {:cexpr "__cil_tmp94"} boogie_si_record_i64($i115);
    goto corral_source_split_14054;

  corral_source_split_14054:
    assume {:verifier.code 0} true;
    $p116 := $i2p.i64.ref($i115);
    goto corral_source_split_14055;

  corral_source_split_14055:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, $p116);
    call {:si_unique_call 6482} {:cexpr "__cil_tmp95"} boogie_si_record_i32($i117);
    goto corral_source_split_14056;

  corral_source_split_14056:
    assume {:verifier.code 0} true;
    $i118 := $mul.i32($i117, 4);
    call {:si_unique_call 6483} {:cexpr "__cil_tmp96"} boogie_si_record_i32($i118);
    goto corral_source_split_14057;

  corral_source_split_14057:
    assume {:verifier.code 0} true;
    $p119 := $i2p.i64.ref($i113);
    goto corral_source_split_14058;

  corral_source_split_14058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p119, $i118);
    goto corral_source_split_14059;

  corral_source_split_14059:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i64.i32(48);
    call {:si_unique_call 6484} {:cexpr "__cil_tmp97"} boogie_si_record_i32($i120);
    goto corral_source_split_14060;

  corral_source_split_14060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6485} vmw_fifo_commit($p0, $i120);
    goto SeqInstr_823, SeqInstr_824;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  SeqInstr_825:
    goto corral_source_split_14061;

  corral_source_split_14061:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p1);
    call {:si_unique_call 6486} {:cexpr "__cil_tmp98"} boogie_si_record_i64($i121);
    goto corral_source_split_14062;

  corral_source_split_14062:
    assume {:verifier.code 0} true;
    $i122 := $add.i64($i121, 2088);
    call {:si_unique_call 6487} {:cexpr "__cil_tmp99"} boogie_si_record_i64($i122);
    goto corral_source_split_14063;

  corral_source_split_14063:
    assume {:verifier.code 0} true;
    $p123 := $i2p.i64.ref($i122);
    goto corral_source_split_14064;

  corral_source_split_14064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p123, 1);
    goto corral_source_split_14065;

  corral_source_split_14065:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_13957;

  corral_source_split_13957:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  SeqInstr_823:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i80 == 1;
    goto corral_source_split_14012;

  corral_source_split_14012:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p23);
    call {:si_unique_call 6458} {:cexpr "__cil_tmp61"} boogie_si_record_i64($i81);
    goto corral_source_split_14013;

  corral_source_split_14013:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i81, 24);
    call {:si_unique_call 6459} {:cexpr "__cil_tmp62"} boogie_si_record_i64($i82);
    goto corral_source_split_14014;

  corral_source_split_14014:
    assume {:verifier.code 0} true;
    $p83 := $i2p.i64.ref($i82);
    goto corral_source_split_14015;

  corral_source_split_14015:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, $i2);
    goto corral_source_split_14016;

  corral_source_split_14016:
    assume {:verifier.code 0} true;
    $i84 := $add.i64(4, 24);
    call {:si_unique_call 6460} {:cexpr "__cil_tmp64"} boogie_si_record_i64($i84);
    goto corral_source_split_14017;

  corral_source_split_14017:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p23);
    call {:si_unique_call 6461} {:cexpr "__cil_tmp65"} boogie_si_record_i64($i85);
    goto corral_source_split_14018;

  corral_source_split_14018:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, $i84);
    call {:si_unique_call 6462} {:cexpr "__cil_tmp66"} boogie_si_record_i64($i86);
    goto corral_source_split_14019;

  corral_source_split_14019:
    assume {:verifier.code 0} true;
    $p87 := $i2p.i64.ref($i86);
    goto corral_source_split_14020;

  corral_source_split_14020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, $i3);
    goto corral_source_split_14021;

  corral_source_split_14021:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i55 == 1;
    goto corral_source_split_13981;

  corral_source_split_13981:
    assume {:verifier.code 0} true;
    $i56 := 2;
    goto $bb19;

  $bb13:
    assume $i36 == 1;
    goto corral_source_split_13954;

  corral_source_split_13954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6431} vslice_dummy_var_256 := drm_err.ref.ref(.str.288, .str.12);
    goto corral_source_split_13955;

  corral_source_split_13955:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 12);
    goto $bb15;

  SeqInstr_820:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i20 == 1;
    goto corral_source_split_13933;

  corral_source_split_13933:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call {:si_unique_call 6420} devirtbounce(0, .str.123, 118, 12);
    goto corral_source_split_13935;

  corral_source_split_13935:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call vmw_sou_fifo_create_loop_$bb7();
    goto $bb7_last;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb8_dummy;

  $bb8_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const vmw_sou_add_active: ref;

axiom vmw_sou_add_active == $sub.ref(0, 1022784);

procedure vmw_sou_add_active($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vmw_sou_add_active($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i8;
  var $i24: i1;
  var $i25: i8;
  var $i26: i1;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i8;
  var $i31: i1;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14067;

  corral_source_split_14067:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    call {:si_unique_call 6488} {:cexpr "__cil_tmp7"} boogie_si_record_i64($i3);
    goto corral_source_split_14068;

  corral_source_split_14068:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 2616);
    call {:si_unique_call 6489} {:cexpr "__cil_tmp8"} boogie_si_record_i64($i4);
    goto corral_source_split_14069;

  corral_source_split_14069:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_14070;

  corral_source_split_14070:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_14071;

  corral_source_split_14071:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_14073;

  corral_source_split_14073:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 6490} {:cexpr "__cil_tmp9"} boogie_si_record_i32($i8);
    goto corral_source_split_14074;

  corral_source_split_14074:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_14075;

  corral_source_split_14075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    goto corral_source_split_14077;

  corral_source_split_14077:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p6);
    call {:si_unique_call 6491} {:cexpr "__cil_tmp10"} boogie_si_record_i64($i10);
    goto corral_source_split_14078;

  corral_source_split_14078:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 8);
    call {:si_unique_call 6492} {:cexpr "__cil_tmp11"} boogie_si_record_i64($i11);
    goto corral_source_split_14079;

  corral_source_split_14079:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_14080;

  corral_source_split_14080:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_14081;

  corral_source_split_14081:
    assume {:verifier.code 0} true;
    $i14 := $ne.ref($p13, $0.ref);
    goto corral_source_split_14082;

  corral_source_split_14082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_14086;

  corral_source_split_14086:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_14088;

  corral_source_split_14088:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    call {:si_unique_call 6493} {:cexpr "__cil_tmp12"} boogie_si_record_i64($i17);
    goto corral_source_split_14089;

  corral_source_split_14089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6494} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 6495} {:cexpr "tmp___8"} boogie_si_record_i64($i18);
    goto corral_source_split_14090;

  corral_source_split_14090:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_14091;

  corral_source_split_14091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p1);
    call {:si_unique_call 6497} {:cexpr "__cil_tmp13"} boogie_si_record_i64($i20);
    goto corral_source_split_14097;

  corral_source_split_14097:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 2089);
    call {:si_unique_call 6498} {:cexpr "__cil_tmp14"} boogie_si_record_i64($i21);
    goto corral_source_split_14098;

  corral_source_split_14098:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i21);
    goto corral_source_split_14099;

  corral_source_split_14099:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_14100;

  corral_source_split_14100:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_14101;

  corral_source_split_14101:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i8($i24);
    call {:si_unique_call 6499} {:cexpr "__cil_tmp15"} boogie_si_record_i8($i25);
    goto corral_source_split_14102;

  corral_source_split_14102:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_14103;

  corral_source_split_14103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i26 == 1);
    goto corral_source_split_14105;

  corral_source_split_14105:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p1);
    call {:si_unique_call 6500} {:cexpr "__cil_tmp17"} boogie_si_record_i64($i27);
    goto corral_source_split_14106;

  corral_source_split_14106:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 2064);
    call {:si_unique_call 6501} {:cexpr "__cil_tmp18"} boogie_si_record_i64($i28);
    goto corral_source_split_14107;

  corral_source_split_14107:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_14108;

  corral_source_split_14108:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_14109;

  corral_source_split_14109:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i30);
    goto corral_source_split_14110;

  corral_source_split_14110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i31 == 1;
    goto corral_source_split_14112;

  corral_source_split_14112:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p6);
    call {:si_unique_call 6502} {:cexpr "__cil_tmp19"} boogie_si_record_i64($i32);
    goto corral_source_split_14113;

  corral_source_split_14113:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 8);
    call {:si_unique_call 6503} {:cexpr "__cil_tmp20"} boogie_si_record_i64($i33);
    goto corral_source_split_14114;

  corral_source_split_14114:
    assume {:verifier.code 0} true;
    $p34 := $i2p.i64.ref($i33);
    goto corral_source_split_14115;

  corral_source_split_14115:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p2);
    goto corral_source_split_14116;

  corral_source_split_14116:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p1);
    call {:si_unique_call 6504} {:cexpr "__cil_tmp21"} boogie_si_record_i64($i35);
    goto corral_source_split_14117;

  corral_source_split_14117:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, 2089);
    call {:si_unique_call 6505} {:cexpr "__cil_tmp22"} boogie_si_record_i64($i36);
    goto corral_source_split_14118;

  corral_source_split_14118:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i36);
    goto corral_source_split_14119;

  corral_source_split_14119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, 1);
    goto corral_source_split_14120;

  corral_source_split_14120:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p6);
    goto corral_source_split_14121;

  corral_source_split_14121:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    call {:si_unique_call 6506} {:cexpr "__cil_tmp23"} boogie_si_record_i32($i39);
    goto corral_source_split_14122;

  corral_source_split_14122:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 1);
    goto corral_source_split_14123;

  corral_source_split_14123:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p6);
    goto corral_source_split_14124;

  corral_source_split_14124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i40);
    goto corral_source_split_14125;

  corral_source_split_14125:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb19:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_14093;

  corral_source_split_14093:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    call {:si_unique_call 6496} devirtbounce(0, .str.123, 92, 12);
    goto corral_source_split_14095;

  corral_source_split_14095:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call vmw_sou_add_active_loop_$bb13();
    goto $bb13_last;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_14084;

  corral_source_split_14084:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb7;

  $bb3:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb8;

  $bb14_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto $bb14;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 1023816);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14127;

  corral_source_split_14127:
    assume {:verifier.code 0} true;
    $i0 := $M.1;
    goto corral_source_split_14128;

  corral_source_split_14128:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_14129;

  corral_source_split_14129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_14133;

  corral_source_split_14133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6507} ldv_blast_assert();
    goto SeqInstr_826, SeqInstr_827;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  SeqInstr_828:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_826:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_14131;

  corral_source_split_14131:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 1024848);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14135;

  corral_source_split_14135:
    assume {:verifier.code 0} true;
    return;
}



const vmwgfx_init: ref;

axiom vmwgfx_init == $sub.ref(0, 1025880);

procedure vmwgfx_init() returns ($r: i32);
  free requires assertsPassed;



implementation vmwgfx_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var vslice_dummy_var_257: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14137;

  corral_source_split_14137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6508} $i0 := drm_pci_init(driver, vmw_pci_driver);
    call {:si_unique_call 6509} {:cexpr "ret"} boogie_si_record_i32($i0);
    goto corral_source_split_14138;

  corral_source_split_14138:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_14139;

  corral_source_split_14139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_14141;

  corral_source_split_14141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6510} vslice_dummy_var_257 := drm_err.ref.ref(.str.187, .str.188);
    goto corral_source_split_14142;

  corral_source_split_14142:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const drm_pci_init: ref;

axiom drm_pci_init == $sub.ref(0, 1026912);

procedure drm_pci_init($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_pci_init($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14144;

  corral_source_split_14144:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6511} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 6512} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_14145;

  corral_source_split_14145:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vmwgfx_exit: ref;

axiom vmwgfx_exit == $sub.ref(0, 1027944);

procedure vmwgfx_exit();
  free requires assertsPassed;



implementation vmwgfx_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14147;

  corral_source_split_14147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6513} drm_pci_exit(driver, vmw_pci_driver);
    goto corral_source_split_14148;

  corral_source_split_14148:
    assume {:verifier.code 0} true;
    return;
}



const drm_pci_exit: ref;

axiom drm_pci_exit == $sub.ref(0, 1028976);

procedure drm_pci_exit($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation drm_pci_exit($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14150;

  corral_source_split_14150:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 1030008);

procedure main();
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.148, $M.149, $M.150, $M.151, $M.212, $M.213, $M.214, $M.215, $M.216, $M.24, $M.25, $CurrAddr, assertsPassed, $M.2, $M.6, $M.11, $M.12, $M.10, $M.16, $M.3, $M.4, $M.13;



implementation main()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i47: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i32: i32;
  var $i33: i32;
  var vslice_dummy_var_258: i32;
  var vslice_dummy_var_259: i32;
  var vslice_dummy_var_260: i32;
  var vslice_dummy_var_261: i64;
  var vslice_dummy_var_262: i32;
  var vslice_dummy_var_263: i32;
  var vslice_dummy_var_264: i32;
  var vslice_dummy_var_265: i32;
  var vslice_dummy_var_266: i32;

  $bb0:
    call {:si_unique_call 6514} $initialize();
    goto corral_source_split_14152;

  corral_source_split_14152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6515} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_14153;

  corral_source_split_14153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6516} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_14154;

  corral_source_split_14154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6517} ldv_initialize();
    goto corral_source_split_14155;

  corral_source_split_14155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6518} $i0 := vmwgfx_init();
    call {:si_unique_call 6519} {:cexpr "tmp___7"} boogie_si_record_i32($i0);
    goto corral_source_split_14156;

  corral_source_split_14156:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_14157;

  corral_source_split_14157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i2, $i3 := 0, 0;
    goto $bb5;

  $bb5:
    call $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i37, $i38, $i39, $i40, $i41, $i42, $i47, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i32, $i33, vslice_dummy_var_258, vslice_dummy_var_259, vslice_dummy_var_260, vslice_dummy_var_261, vslice_dummy_var_262, vslice_dummy_var_263, vslice_dummy_var_264, vslice_dummy_var_265, vslice_dummy_var_266 := main_loop_$bb5($i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i37, $i38, $i39, $i40, $i41, $i42, $i47, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i32, $i33, vslice_dummy_var_258, vslice_dummy_var_259, vslice_dummy_var_260, vslice_dummy_var_261, vslice_dummy_var_262, vslice_dummy_var_263, vslice_dummy_var_264, vslice_dummy_var_265, vslice_dummy_var_266);
    goto $bb5_last;

  corral_source_split_14163:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6521} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 6522} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 6523} {:cexpr "tmp___9"} boogie_si_record_i32($i4);
    goto corral_source_split_14165;

  corral_source_split_14165:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_14166;

  corral_source_split_14166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_14170;

  corral_source_split_14170:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 0);
    goto corral_source_split_14171;

  corral_source_split_14171:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 6524} {:cexpr "__cil_tmp18"} boogie_si_record_i32($i7);
    goto corral_source_split_14172;

  corral_source_split_14172:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_14173;

  corral_source_split_14173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i8 == 1);
    goto corral_source_split_14183;

  corral_source_split_14183:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6525} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 6526} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 6527} {:cexpr "tmp___8"} boogie_si_record_i32($i12);
    goto corral_source_split_14175;

  corral_source_split_14175:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_14176;

  corral_source_split_14176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i13 == 1);
    goto corral_source_split_14191;

  corral_source_split_14191:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i12, 1);
    goto corral_source_split_14192;

  corral_source_split_14192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i14 == 1);
    goto corral_source_split_14198;

  corral_source_split_14198:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 2);
    goto corral_source_split_14199;

  corral_source_split_14199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i15 == 1);
    goto corral_source_split_14205;

  corral_source_split_14205:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i12, 3);
    goto corral_source_split_14206;

  corral_source_split_14206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i16 == 1);
    goto corral_source_split_14212;

  corral_source_split_14212:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 4);
    goto corral_source_split_14213;

  corral_source_split_14213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i17 == 1);
    goto corral_source_split_14219;

  corral_source_split_14219:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i12, 5);
    goto corral_source_split_14220;

  corral_source_split_14220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i18 == 1);
    goto corral_source_split_14226;

  corral_source_split_14226:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i12, 6);
    goto corral_source_split_14227;

  corral_source_split_14227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i19 == 1);
    goto corral_source_split_14233;

  corral_source_split_14233:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i12, 7);
    goto corral_source_split_14234;

  corral_source_split_14234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i20 == 1);
    goto corral_source_split_14240;

  corral_source_split_14240:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i12, 8);
    goto corral_source_split_14241;

  corral_source_split_14241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i21 == 1);
    goto corral_source_split_14247;

  corral_source_split_14247:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i12, 9);
    goto corral_source_split_14248;

  corral_source_split_14248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i22 == 1);
    goto corral_source_split_14254;

  corral_source_split_14254:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i12, 10);
    goto corral_source_split_14255;

  corral_source_split_14255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i23 == 1);
    goto corral_source_split_14261;

  corral_source_split_14261:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i12, 11);
    goto corral_source_split_14262;

  corral_source_split_14262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i24 == 1);
    goto corral_source_split_14268;

  corral_source_split_14268:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i12, 12);
    goto corral_source_split_14269;

  corral_source_split_14269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i25 == 1);
    goto corral_source_split_14275;

  corral_source_split_14275:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i12, 13);
    goto corral_source_split_14276;

  corral_source_split_14276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i26 == 1);
    goto corral_source_split_14283;

  corral_source_split_14283:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i12, 14);
    goto corral_source_split_14284;

  corral_source_split_14284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i27 == 1);
    goto corral_source_split_14291;

  corral_source_split_14291:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i12, 15);
    goto corral_source_split_14292;

  corral_source_split_14292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i28 == 1);
    goto corral_source_split_14298;

  corral_source_split_14298:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i12, 16);
    goto corral_source_split_14299;

  corral_source_split_14299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i29 == 1);
    goto corral_source_split_14305;

  corral_source_split_14305:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i12, 17);
    goto corral_source_split_14306;

  corral_source_split_14306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i30 == 1);
    goto corral_source_split_14312;

  corral_source_split_14312:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i2, $i3;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i2, $i3 := $i32, $i33;
    goto $bb107_dummy;

  $bb68:
    assume $i30 == 1;
    goto corral_source_split_14310;

  corral_source_split_14310:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6544} vmw_remove($u11);
    goto corral_source_split_14314;

  corral_source_split_14314:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i2, $i3;
    goto $bb75;

  $bb65:
    assume $i29 == 1;
    goto corral_source_split_14303;

  corral_source_split_14303:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i3, 0);
    goto corral_source_split_14308;

  corral_source_split_14308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i55 := $i3;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_14340;

  corral_source_split_14340:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i2, $i55;
    goto $bb75;

  $bb83:
    assume $i50 == 1;
    goto corral_source_split_14330;

  corral_source_split_14330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6549} $i51 := vmw_probe($u11, $u12);
    goto corral_source_split_14331;

  corral_source_split_14331:
    assume {:verifier.code 0} true;
    $M.37 := $i51;
    call {:si_unique_call 6550} {:cexpr "res_vmw_probe_29"} boogie_si_record_i32($i51);
    goto corral_source_split_14332;

  corral_source_split_14332:
    assume {:verifier.code 0} true;
    $i52 := $M.37;
    goto corral_source_split_14333;

  corral_source_split_14333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6551} ldv_check_return_value($i52);
    goto corral_source_split_14334;

  corral_source_split_14334:
    assume {:verifier.code 0} true;
    $i53 := $M.37;
    goto corral_source_split_14335;

  corral_source_split_14335:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_14336;

  corral_source_split_14336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb88;

  $bb85:
    assume $i54 == 1;
    goto corral_source_split_14338;

  corral_source_split_14338:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6548} vmwgfx_exit();
    goto corral_source_split_14326;

  corral_source_split_14326:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6520} ldv_check_final_state();
    goto SeqInstr_829, SeqInstr_830;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  SeqInstr_831:
    goto corral_source_split_14161;

  corral_source_split_14161:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_829:
    assume !assertsPassed;
    return;

  $bb62:
    assume $i28 == 1;
    goto corral_source_split_14296;

  corral_source_split_14296:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6543} vmw_postclose($u7, $u8);
    goto corral_source_split_14301;

  corral_source_split_14301:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i2, $i3;
    goto $bb75;

  $bb59:
    assume $i27 == 1;
    goto corral_source_split_14289;

  corral_source_split_14289:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6542} vmw_preclose($u7, $u8);
    goto SeqInstr_853, SeqInstr_854;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  SeqInstr_855:
    goto corral_source_split_14294;

  corral_source_split_14294:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i2, $i3;
    goto $bb75;

  SeqInstr_853:
    assume !assertsPassed;
    return;

  $bb56:
    assume $i26 == 1;
    goto corral_source_split_14281;

  corral_source_split_14281:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i8.i1($u10);
    goto corral_source_split_14286;

  corral_source_split_14286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6541} vmw_master_drop($u7, $u8, $i49);
    goto SeqInstr_850, SeqInstr_851;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  SeqInstr_852:
    goto corral_source_split_14287;

  corral_source_split_14287:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i2, $i3;
    goto $bb75;

  SeqInstr_850:
    assume !assertsPassed;
    return;

  $bb53:
    assume $i25 == 1;
    goto corral_source_split_14273;

  corral_source_split_14273:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($u10);
    goto corral_source_split_14278;

  corral_source_split_14278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6540} vslice_dummy_var_266 := vmw_master_set($u7, $u8, $i47);
    goto SeqInstr_847, SeqInstr_848;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  SeqInstr_849:
    goto corral_source_split_14279;

  corral_source_split_14279:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i2, $i3;
    goto $bb75;

  SeqInstr_847:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i24 == 1;
    goto corral_source_split_14266;

  corral_source_split_14266:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6539} vmw_master_destroy($u7, $u9);
    goto corral_source_split_14271;

  corral_source_split_14271:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i2, $i3;
    goto $bb75;

  $bb47:
    assume $i23 == 1;
    goto corral_source_split_14259;

  corral_source_split_14259:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6538} vslice_dummy_var_265 := vmw_master_create($u7, $u9);
    goto corral_source_split_14264;

  corral_source_split_14264:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i2, $i3;
    goto $bb75;

  $bb44:
    assume $i22 == 1;
    goto corral_source_split_14252;

  corral_source_split_14252:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6537} vmw_lastclose($u7);
    goto SeqInstr_844, SeqInstr_845;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  SeqInstr_846:
    goto corral_source_split_14257;

  corral_source_split_14257:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i2, $i3;
    goto $bb75;

  SeqInstr_844:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i21 == 1;
    goto corral_source_split_14245;

  corral_source_split_14245:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6536} vslice_dummy_var_264 := vmw_firstopen($u7);
    goto corral_source_split_14250;

  corral_source_split_14250:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i2, $i3;
    goto $bb75;

  $bb38:
    assume $i20 == 1;
    goto corral_source_split_14238;

  corral_source_split_14238:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6535} vslice_dummy_var_263 := vmw_driver_unload($u7);
    goto SeqInstr_841, SeqInstr_842;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  SeqInstr_843:
    goto corral_source_split_14243;

  corral_source_split_14243:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i2, $i3;
    goto $bb75;

  SeqInstr_841:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i19 == 1;
    goto corral_source_split_14231;

  corral_source_split_14231:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6534} vslice_dummy_var_262 := vmw_driver_load($u7, $u3);
    goto SeqInstr_838, SeqInstr_839;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  SeqInstr_840:
    goto corral_source_split_14236;

  corral_source_split_14236:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i2, $i3;
    goto $bb75;

  SeqInstr_838:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i18 == 1;
    goto corral_source_split_14224;

  corral_source_split_14224:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i2, 0);
    goto corral_source_split_14229;

  corral_source_split_14229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i42 := $i2;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_14328;

  corral_source_split_14328:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i42, $i3;
    goto $bb75;

  $bb76:
    assume $i37 == 1;
    goto corral_source_split_14316;

  corral_source_split_14316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6545} $i38 := vmw_driver_open($u7, $u8);
    goto corral_source_split_14317;

  corral_source_split_14317:
    assume {:verifier.code 0} true;
    $M.36 := $i38;
    call {:si_unique_call 6546} {:cexpr "res_vmw_driver_open_12"} boogie_si_record_i32($i38);
    goto corral_source_split_14318;

  corral_source_split_14318:
    assume {:verifier.code 0} true;
    $i39 := $M.36;
    goto corral_source_split_14319;

  corral_source_split_14319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6547} ldv_check_return_value($i39);
    goto corral_source_split_14320;

  corral_source_split_14320:
    assume {:verifier.code 0} true;
    $i40 := $M.36;
    goto corral_source_split_14321;

  corral_source_split_14321:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_14322;

  corral_source_split_14322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb82;

  $bb78:
    assume $i41 == 1;
    goto corral_source_split_14324;

  corral_source_split_14324:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb29:
    assume $i17 == 1;
    goto corral_source_split_14217;

  corral_source_split_14217:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6533} vslice_dummy_var_261 := vmw_unlocked_ioctl($u6, $u2, $u3);
    goto corral_source_split_14222;

  corral_source_split_14222:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i2, $i3;
    goto $bb75;

  $bb26:
    assume $i16 == 1;
    goto corral_source_split_14210;

  corral_source_split_14210:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6532} vslice_dummy_var_260 := vmw_pm_resume($u5);
    goto corral_source_split_14215;

  corral_source_split_14215:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i2, $i3;
    goto $bb75;

  $bb23:
    assume $i15 == 1;
    goto corral_source_split_14203;

  corral_source_split_14203:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6531} vslice_dummy_var_259 := vmw_pm_suspend($u5);
    goto corral_source_split_14208;

  corral_source_split_14208:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i2, $i3;
    goto $bb75;

  $bb20:
    assume $i14 == 1;
    goto corral_source_split_14196;

  corral_source_split_14196:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6530} vmw_pm_complete($u5);
    goto SeqInstr_835, SeqInstr_836;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  SeqInstr_837:
    goto corral_source_split_14201;

  corral_source_split_14201:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i2, $i3;
    goto $bb75;

  SeqInstr_835:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_14189;

  corral_source_split_14189:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6529} vslice_dummy_var_258 := vmw_pm_prepare($u5);
    goto SeqInstr_832, SeqInstr_833;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  SeqInstr_834:
    goto corral_source_split_14194;

  corral_source_split_14194:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i2, $i3;
    goto $bb75;

  SeqInstr_832:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i8 == 1;
    goto corral_source_split_14178;

  corral_source_split_14178:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i3, 0);
    goto corral_source_split_14179;

  corral_source_split_14179:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 6528} {:cexpr "__cil_tmp19"} boogie_si_record_i32($i10);
    goto corral_source_split_14180;

  corral_source_split_14180:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_14181;

  corral_source_split_14181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    goto corral_source_split_14187;

  corral_source_split_14187:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_14185;

  corral_source_split_14185:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_14168;

  corral_source_split_14168:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_14159;

  corral_source_split_14159:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb107_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14163;
}



const ldv_check_return_value: ref;

axiom ldv_check_return_value == $sub.ref(0, 1031040);

procedure ldv_check_return_value($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6552} {:cexpr "ldv_check_return_value:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_14342;

  corral_source_split_14342:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 1032072);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6553} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_14344;

  corral_source_split_14344:
    assume {:verifier.code 1} true;
    goto corral_source_split_14345;

  corral_source_split_14345:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_14346;

  corral_source_split_14346:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 1033104);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 1034136);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 1035168);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14348;

  corral_source_split_14348:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_856, SeqInstr_857;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  SeqInstr_858:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_14349;

  corral_source_split_14349:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_856:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 1036200);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 1037232);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 1038264);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 1039296);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 1040328);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 1041360);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 1042392);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 1043424);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 1044456);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 1045488);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14351;

  corral_source_split_14351:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6554} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 6555} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 6556} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_14352;

  corral_source_split_14352:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_14353;

  corral_source_split_14353:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_14357;

  corral_source_split_14357:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_14358;

  corral_source_split_14358:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6557} __VERIFIER_assume($i4);
    goto corral_source_split_14359;

  corral_source_split_14359:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_14355;

  corral_source_split_14355:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 1046520);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 1047552);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 1048584);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 1049616);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14361;

  corral_source_split_14361:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6558} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 6559} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 6560} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_14362;

  corral_source_split_14362:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6561} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 6562} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6563} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_14363;

  corral_source_split_14363:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6564} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 6565} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 6566} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_14364;

  corral_source_split_14364:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_14365;

  corral_source_split_14365:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_14370;

  corral_source_split_14370:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_14371;

  corral_source_split_14371:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6567} __VERIFIER_assume($i7);
    goto corral_source_split_14372;

  corral_source_split_14372:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_14373;

  corral_source_split_14373:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_14379;

  corral_source_split_14379:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_14380;

  corral_source_split_14380:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6568} __VERIFIER_assume($i11);
    goto corral_source_split_14381;

  corral_source_split_14381:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_14377;

  corral_source_split_14377:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_14367;

  corral_source_split_14367:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_14368;

  corral_source_split_14368:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_14375;

  corral_source_split_14375:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 1050648);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 1051680);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14383;

  corral_source_split_14383:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6569} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 6570} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 6571} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_14384;

  corral_source_split_14384:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_14385;

  corral_source_split_14385:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_14389;

  corral_source_split_14389:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_14390;

  corral_source_split_14390:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6572} __VERIFIER_assume($i4);
    goto corral_source_split_14391;

  corral_source_split_14391:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_14387;

  corral_source_split_14387:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 1052712);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 1053744);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 1054776);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 1055808);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 1056840);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14393;

  corral_source_split_14393:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6573} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 6574} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 6575} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_14394;

  corral_source_split_14394:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6576} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 6577} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 6578} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_14395;

  corral_source_split_14395:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6579} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 6580} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 6581} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_14396;

  corral_source_split_14396:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_14397;

  corral_source_split_14397:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_14402;

  corral_source_split_14402:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_14403;

  corral_source_split_14403:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6582} __VERIFIER_assume($i7);
    goto corral_source_split_14404;

  corral_source_split_14404:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_14405;

  corral_source_split_14405:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_14411;

  corral_source_split_14411:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_14412;

  corral_source_split_14412:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6583} __VERIFIER_assume($i11);
    goto corral_source_split_14413;

  corral_source_split_14413:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_14409;

  corral_source_split_14409:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_14399;

  corral_source_split_14399:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_14400;

  corral_source_split_14400:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_14407;

  corral_source_split_14407:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 1057872);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 1058904);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 1059936);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 1060968);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 1062000);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 1063032);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 1064064);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 1065096);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 1066128);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14415;

  corral_source_split_14415:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6584} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 6585} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14416;

  corral_source_split_14416:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_14417;

  corral_source_split_14417:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 6586} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_14418;

  corral_source_split_14418:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_14419;

  corral_source_split_14419:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_14420;

  corral_source_split_14420:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_14421;

  corral_source_split_14421:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_14428;

  corral_source_split_14428:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_14429;

  corral_source_split_14429:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_14430;

  corral_source_split_14430:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_14431;

  corral_source_split_14431:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_14423;

  corral_source_split_14423:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_14424;

  corral_source_split_14424:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6587} __VERIFIER_assume($i10);
    goto corral_source_split_14425;

  corral_source_split_14425:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_14426;

  corral_source_split_14426:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 1067160);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14433;

  corral_source_split_14433:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6588} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 6589} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 6590} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_14434;

  corral_source_split_14434:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 1068192);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14436;

  corral_source_split_14436:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6591} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 6592} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 6593} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_14437;

  corral_source_split_14437:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 1069224);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14439;

  corral_source_split_14439:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6594} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 6595} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_14440;

  corral_source_split_14440:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 1070256);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 1071288);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 6596} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 6597} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 1072320);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 1073352);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14442;

  corral_source_split_14442:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_14443;

  corral_source_split_14443:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 1074384);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 1075416);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.148, $M.149, $M.150, $M.151, $M.212, $M.213, $M.214, $M.215, $M.216, $M.24, $M.25, $M.37, $M.36;



implementation __SMACK_static_init()
{

  $bb0:
    $M.1 := 1;
    call {:si_unique_call 6598} {:cexpr "ldv_mutex"} boogie_si_record_i32(1);
    call {:si_unique_call 6599} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
    $M.0 := $store.i64($M.0, vmw_defio, 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(vmw_defio, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmw_defio, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmw_defio, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmw_defio, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmw_defio, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmw_defio, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmw_defio, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vmw_defio, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vmw_defio, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vmw_defio, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vmw_defio, $mul.ref(0, 104)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vmw_defio, $mul.ref(0, 104)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_defio, $mul.ref(0, 104)), $mul.ref(96, 1)), vmw_deferred_io);
    $M.38 := $store.ref($M.38, vmw_screen_object_crtc_funcs, vmw_du_crtc_save);
    $M.39 := $store.ref($M.39, $add.ref($add.ref(vmw_screen_object_crtc_funcs, $mul.ref(0, 72)), $mul.ref(8, 1)), vmw_du_crtc_restore);
    $M.40 := $store.ref($M.40, $add.ref($add.ref(vmw_screen_object_crtc_funcs, $mul.ref(0, 72)), $mul.ref(16, 1)), $0.ref);
    $M.41 := $store.ref($M.41, $add.ref($add.ref(vmw_screen_object_crtc_funcs, $mul.ref(0, 72)), $mul.ref(24, 1)), vmw_du_crtc_cursor_set);
    $M.42 := $store.ref($M.42, $add.ref($add.ref(vmw_screen_object_crtc_funcs, $mul.ref(0, 72)), $mul.ref(32, 1)), vmw_du_crtc_cursor_move);
    $M.43 := $store.ref($M.43, $add.ref($add.ref(vmw_screen_object_crtc_funcs, $mul.ref(0, 72)), $mul.ref(40, 1)), vmw_du_crtc_gamma_set);
    $M.44 := $store.ref($M.44, $add.ref($add.ref(vmw_screen_object_crtc_funcs, $mul.ref(0, 72)), $mul.ref(48, 1)), vmw_sou_crtc_destroy);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(vmw_screen_object_crtc_funcs, $mul.ref(0, 72)), $mul.ref(56, 1)), vmw_sou_crtc_set_config);
    $M.46 := $store.ref($M.46, $add.ref($add.ref(vmw_screen_object_crtc_funcs, $mul.ref(0, 72)), $mul.ref(64, 1)), vmw_du_page_flip);
    $M.47 := $store.ref($M.47, vmw_screen_object_encoder_funcs, $0.ref);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(vmw_screen_object_encoder_funcs, $mul.ref(0, 16)), $mul.ref(8, 1)), vmw_sou_encoder_destroy);
    $M.49 := $store.ref($M.49, vmw_legacy_connector_funcs___0, vmw_du_connector_dpms);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vmw_legacy_connector_funcs___0, $mul.ref(0, 72)), $mul.ref(8, 1)), vmw_du_connector_save);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(vmw_legacy_connector_funcs___0, $mul.ref(0, 72)), $mul.ref(16, 1)), vmw_du_connector_restore);
    $M.52 := $store.ref($M.52, $add.ref($add.ref(vmw_legacy_connector_funcs___0, $mul.ref(0, 72)), $mul.ref(24, 1)), $0.ref);
    $M.53 := $store.ref($M.53, $add.ref($add.ref(vmw_legacy_connector_funcs___0, $mul.ref(0, 72)), $mul.ref(32, 1)), vmw_du_connector_detect);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(vmw_legacy_connector_funcs___0, $mul.ref(0, 72)), $mul.ref(40, 1)), vmw_du_connector_fill_modes);
    $M.55 := $store.ref($M.55, $add.ref($add.ref(vmw_legacy_connector_funcs___0, $mul.ref(0, 72)), $mul.ref(48, 1)), vmw_du_connector_set_property);
    $M.56 := $store.ref($M.56, $add.ref($add.ref(vmw_legacy_connector_funcs___0, $mul.ref(0, 72)), $mul.ref(56, 1)), vmw_sou_connector_destroy);
    $M.57 := $store.ref($M.57, $add.ref($add.ref(vmw_legacy_connector_funcs___0, $mul.ref(0, 72)), $mul.ref(64, 1)), $0.ref);
    $M.38 := $store.ref($M.38, vmw_legacy_crtc_funcs, vmw_du_crtc_save);
    $M.39 := $store.ref($M.39, $add.ref($add.ref(vmw_legacy_crtc_funcs, $mul.ref(0, 72)), $mul.ref(8, 1)), vmw_du_crtc_restore);
    $M.40 := $store.ref($M.40, $add.ref($add.ref(vmw_legacy_crtc_funcs, $mul.ref(0, 72)), $mul.ref(16, 1)), $0.ref);
    $M.41 := $store.ref($M.41, $add.ref($add.ref(vmw_legacy_crtc_funcs, $mul.ref(0, 72)), $mul.ref(24, 1)), vmw_du_crtc_cursor_set);
    $M.42 := $store.ref($M.42, $add.ref($add.ref(vmw_legacy_crtc_funcs, $mul.ref(0, 72)), $mul.ref(32, 1)), vmw_du_crtc_cursor_move);
    $M.43 := $store.ref($M.43, $add.ref($add.ref(vmw_legacy_crtc_funcs, $mul.ref(0, 72)), $mul.ref(40, 1)), vmw_du_crtc_gamma_set);
    $M.44 := $store.ref($M.44, $add.ref($add.ref(vmw_legacy_crtc_funcs, $mul.ref(0, 72)), $mul.ref(48, 1)), vmw_ldu_crtc_destroy);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(vmw_legacy_crtc_funcs, $mul.ref(0, 72)), $mul.ref(56, 1)), vmw_ldu_crtc_set_config);
    $M.46 := $store.ref($M.46, $add.ref($add.ref(vmw_legacy_crtc_funcs, $mul.ref(0, 72)), $mul.ref(64, 1)), $0.ref);
    $M.47 := $store.ref($M.47, vmw_legacy_encoder_funcs, $0.ref);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(vmw_legacy_encoder_funcs, $mul.ref(0, 16)), $mul.ref(8, 1)), vmw_ldu_encoder_destroy);
    $M.49 := $store.ref($M.49, vmw_legacy_connector_funcs, vmw_du_connector_dpms);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vmw_legacy_connector_funcs, $mul.ref(0, 72)), $mul.ref(8, 1)), vmw_du_connector_save);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(vmw_legacy_connector_funcs, $mul.ref(0, 72)), $mul.ref(16, 1)), vmw_du_connector_restore);
    $M.52 := $store.ref($M.52, $add.ref($add.ref(vmw_legacy_connector_funcs, $mul.ref(0, 72)), $mul.ref(24, 1)), $0.ref);
    $M.53 := $store.ref($M.53, $add.ref($add.ref(vmw_legacy_connector_funcs, $mul.ref(0, 72)), $mul.ref(32, 1)), vmw_du_connector_detect);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(vmw_legacy_connector_funcs, $mul.ref(0, 72)), $mul.ref(40, 1)), vmw_du_connector_fill_modes);
    $M.55 := $store.ref($M.55, $add.ref($add.ref(vmw_legacy_connector_funcs, $mul.ref(0, 72)), $mul.ref(48, 1)), vmw_du_connector_set_property);
    $M.56 := $store.ref($M.56, $add.ref($add.ref(vmw_legacy_connector_funcs, $mul.ref(0, 72)), $mul.ref(56, 1)), vmw_ldu_connector_destroy);
    $M.57 := $store.ref($M.57, $add.ref($add.ref(vmw_legacy_connector_funcs, $mul.ref(0, 72)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, vmw_ttm_func, vmw_ttm_bind);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_ttm_func, $mul.ref(0, 24)), $mul.ref(8, 1)), vmw_ttm_unbind);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_ttm_func, $mul.ref(0, 24)), $mul.ref(16, 1)), vmw_ttm_destroy);
    $M.0 := $store.i32($M.0, gmr_vram_placement_flags, 65544);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(gmr_vram_placement_flags, $mul.ref(0, 8)), $mul.ref(1, 4)), 65540);
    $M.0 := $store.i32($M.0, evictable_placement_flags, 65537);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(evictable_placement_flags, $mul.ref(0, 12)), $mul.ref(1, 4)), 65540);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(evictable_placement_flags, $mul.ref(0, 12)), $mul.ref(2, 4)), 65544);
    $M.0 := $store.i32($M.0, vram_ne_placement_flags, 2162692);
    call {:si_unique_call 6600} {:cexpr "vram_ne_placement_flags"} boogie_si_record_i32(2162692);
    $M.0 := $store.i32($M.0, sys_placement_flags, 65537);
    call {:si_unique_call 6601} {:cexpr "sys_placement_flags"} boogie_si_record_i32(65537);
    $M.0 := $store.i32($M.0, gmr_ne_placement_flags, 2162696);
    call {:si_unique_call 6602} {:cexpr "gmr_ne_placement_flags"} boogie_si_record_i32(2162696);
    $M.0 := $store.i32($M.0, vram_gmr_ne_placement_flags, 2162692);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vram_gmr_ne_placement_flags, $mul.ref(0, 8)), $mul.ref(1, 4)), 2162696);
    $M.0 := $store.i32($M.0, gmr_placement_flags, 65544);
    call {:si_unique_call 6603} {:cexpr "gmr_placement_flags"} boogie_si_record_i32(65544);
    $M.0 := $store.i32($M.0, vram_gmr_placement_flags, 65540);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vram_gmr_placement_flags, $mul.ref(0, 8)), $mul.ref(1, 4)), 65544);
    $M.0 := $store.i32($M.0, vram_placement_flags, 65540);
    call {:si_unique_call 6604} {:cexpr "vram_placement_flags"} boogie_si_record_i32(65540);
    $M.58 := $store.i8($M.58, vmw_sf_bpp, 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(1, 2)), $mul.ref(0, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(1, 2)), $mul.ref(1, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(2, 2)), $mul.ref(0, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(2, 2)), $mul.ref(1, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(3, 2)), $mul.ref(0, 1)), 16);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(3, 2)), $mul.ref(1, 1)), 16);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(4, 2)), $mul.ref(0, 1)), 16);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(4, 2)), $mul.ref(1, 1)), 16);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(5, 2)), $mul.ref(0, 1)), 16);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(5, 2)), $mul.ref(1, 1)), 16);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(6, 2)), $mul.ref(0, 1)), 16);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(6, 2)), $mul.ref(1, 1)), 16);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(7, 2)), $mul.ref(0, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(7, 2)), $mul.ref(1, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(8, 2)), $mul.ref(0, 1)), 16);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(8, 2)), $mul.ref(1, 1)), 16);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(9, 2)), $mul.ref(0, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(9, 2)), $mul.ref(1, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(10, 2)), $mul.ref(0, 1)), 16);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(10, 2)), $mul.ref(1, 1)), 16);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(11, 2)), $mul.ref(0, 1)), 8);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(11, 2)), $mul.ref(1, 1)), 8);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(12, 2)), $mul.ref(0, 1)), 8);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(12, 2)), $mul.ref(1, 1)), 8);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(13, 2)), $mul.ref(0, 1)), 16);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(13, 2)), $mul.ref(1, 1)), 16);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(14, 2)), $mul.ref(0, 1)), 16);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(14, 2)), $mul.ref(1, 1)), 16);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(15, 2)), $mul.ref(0, 1)), 4);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(15, 2)), $mul.ref(1, 1)), 16);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(16, 2)), $mul.ref(0, 1)), 8);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(16, 2)), $mul.ref(1, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(17, 2)), $mul.ref(0, 1)), 8);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(17, 2)), $mul.ref(1, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(18, 2)), $mul.ref(0, 1)), 8);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(18, 2)), $mul.ref(1, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(19, 2)), $mul.ref(0, 1)), 8);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(19, 2)), $mul.ref(1, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(20, 2)), $mul.ref(0, 1)), 16);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(20, 2)), $mul.ref(1, 1)), 16);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(21, 2)), $mul.ref(0, 1)), 16);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(21, 2)), $mul.ref(1, 1)), 16);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(22, 2)), $mul.ref(0, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(22, 2)), $mul.ref(1, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(23, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(23, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(24, 2)), $mul.ref(0, 1)), 16);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(24, 2)), $mul.ref(1, 1)), 16);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(25, 2)), $mul.ref(0, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(25, 2)), $mul.ref(1, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(26, 2)), $mul.ref(0, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(26, 2)), $mul.ref(1, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(27, 2)), $mul.ref(0, 1)), 16);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(27, 2)), $mul.ref(1, 1)), 16);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(28, 2)), $mul.ref(0, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(28, 2)), $mul.ref(1, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(29, 2)), $mul.ref(0, 1)), 16);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(29, 2)), $mul.ref(1, 1)), 16);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(30, 2)), $mul.ref(0, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(30, 2)), $mul.ref(1, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(31, 2)), $mul.ref(0, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(31, 2)), $mul.ref(1, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(32, 2)), $mul.ref(0, 1)), 8);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(32, 2)), $mul.ref(1, 1)), 8);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(33, 2)), $mul.ref(0, 1)), 16);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(33, 2)), $mul.ref(1, 1)), 16);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(34, 2)), $mul.ref(0, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(34, 2)), $mul.ref(1, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(35, 2)), $mul.ref(0, 1)), 16);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(35, 2)), $mul.ref(1, 1)), 16);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(36, 2)), $mul.ref(0, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(36, 2)), $mul.ref(1, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(37, 2)), $mul.ref(0, 1)), 8);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(37, 2)), $mul.ref(1, 1)), 8);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(38, 2)), $mul.ref(0, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(38, 2)), $mul.ref(1, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(39, 2)), $mul.ref(0, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(39, 2)), $mul.ref(1, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(40, 2)), $mul.ref(0, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(40, 2)), $mul.ref(1, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(41, 2)), $mul.ref(0, 1)), 64);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(41, 2)), $mul.ref(1, 1)), 64);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(42, 2)), $mul.ref(0, 1)), 12);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(42, 2)), $mul.ref(1, 1)), 12);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(43, 2)), $mul.ref(0, 1)), 12);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(43, 2)), $mul.ref(1, 1)), 12);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(44, 2)), $mul.ref(0, 1)), 12);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(44, 2)), $mul.ref(1, 1)), 8);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(45, 2)), $mul.ref(0, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(45, 2)), $mul.ref(1, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(46, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(46, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(47, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(47, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(48, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(48, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(49, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(49, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(50, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(50, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(51, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(51, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(52, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(52, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(53, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(53, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(54, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(54, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(55, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(55, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(56, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(56, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(57, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(57, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(58, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(58, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(59, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(59, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(60, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(60, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(61, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(61, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(62, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(62, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(63, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(63, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(64, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(64, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(65, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(65, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(66, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(66, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(67, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(67, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(68, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(68, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(69, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(69, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(70, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(70, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(71, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(71, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(72, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(72, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(73, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(73, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(74, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(74, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(75, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(75, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(76, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(76, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(77, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(77, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(78, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(78, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(79, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(79, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(80, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(80, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(81, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(81, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(82, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(82, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(83, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(83, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(84, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(84, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(85, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(85, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(86, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(86, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(87, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(87, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(88, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(88, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(89, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(89, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(90, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(90, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(91, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(91, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(92, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(92, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(93, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(93, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(94, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(94, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(95, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(95, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(96, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(96, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(97, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(97, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(98, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(98, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(99, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(99, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(100, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(100, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(101, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(101, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(102, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(102, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(103, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(103, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(104, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(104, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(105, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(105, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(106, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(106, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(107, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(107, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(108, 2)), $mul.ref(0, 1)), 4);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(108, 2)), $mul.ref(1, 1)), 16);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(109, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(109, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(110, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(110, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(111, 2)), $mul.ref(0, 1)), 8);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(111, 2)), $mul.ref(1, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(112, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(112, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(113, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(113, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(114, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(114, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(115, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(115, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(116, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(116, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(117, 2)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(117, 2)), $mul.ref(1, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(118, 2)), $mul.ref(0, 1)), 16);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(118, 2)), $mul.ref(1, 1)), 16);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(119, 2)), $mul.ref(0, 1)), 24);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(119, 2)), $mul.ref(1, 1)), 24);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(120, 2)), $mul.ref(0, 1)), 32);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vmw_sf_bpp, $mul.ref(0, 242)), $mul.ref(120, 2)), $mul.ref(1, 1)), 32);
    $M.0 := $store.ref($M.0, vmw_fb_ops, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(40, 1)), vmw_fb_check_var);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(48, 1)), vmw_fb_set_par);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(56, 1)), vmw_fb_setcolreg);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(72, 1)), vmw_fb_blank);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(80, 1)), vmw_fb_pan_display);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(88, 1)), vmw_fb_fillrect);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(96, 1)), vmw_fb_copyarea);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(104, 1)), vmw_fb_imageblit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_fb_ops, $mul.ref(0, 192)), $mul.ref(184, 1)), $0.ref);
    $M.83 := $store.i32($M.83, vmw_pci_id_list, 5549);
    $M.84 := $store.i32($M.84, $add.ref($add.ref($add.ref(vmw_pci_id_list, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 1029);
    $M.85 := $store.i32($M.85, $add.ref($add.ref($add.ref(vmw_pci_id_list, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.86 := $store.i32($M.86, $add.ref($add.ref($add.ref(vmw_pci_id_list, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref(vmw_pci_id_list, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.88 := $store.i32($M.88, $add.ref($add.ref($add.ref(vmw_pci_id_list, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(vmw_pci_id_list, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.83 := $store.i32($M.83, $add.ref($add.ref($add.ref(vmw_pci_id_list, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.84 := $store.i32($M.84, $add.ref($add.ref($add.ref(vmw_pci_id_list, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.85 := $store.i32($M.85, $add.ref($add.ref($add.ref(vmw_pci_id_list, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i32($M.86, $add.ref($add.ref($add.ref(vmw_pci_id_list, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref(vmw_pci_id_list, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.88 := $store.i32($M.88, $add.ref($add.ref($add.ref(vmw_pci_id_list, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref(vmw_pci_id_list, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.148 := $store.i32($M.148, vmw_ioctls, 0);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(0, 24)), $mul.ref(4, 1)), 17);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(0, 24)), $mul.ref(8, 1)), vmw_getparam_ioctl);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(0, 24)), $mul.ref(16, 1)), $sub.i32(0, 1072667584));
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(1, 24)), $mul.ref(0, 1)), 1);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(1, 24)), $mul.ref(4, 1)), 17);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(1, 24)), $mul.ref(8, 1)), vmw_dmabuf_alloc_ioctl);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(1, 24)), $mul.ref(16, 1)), $sub.i32(0, 1072143295));
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(2, 24)), $mul.ref(0, 1)), 2);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(2, 24)), $mul.ref(4, 1)), 17);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(2, 24)), $mul.ref(8, 1)), vmw_dmabuf_unref_ioctl);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(2, 24)), $mul.ref(16, 1)), 1074291778);
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(3, 24)), $mul.ref(0, 1)), 3);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(3, 24)), $mul.ref(4, 1)), 26);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(3, 24)), $mul.ref(8, 1)), vmw_kms_cursor_bypass_ioctl);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(3, 24)), $mul.ref(16, 1)), 1075340355);
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(4, 24)), $mul.ref(0, 1)), 4);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(4, 24)), $mul.ref(4, 1)), 26);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(4, 24)), $mul.ref(8, 1)), vmw_overlay_ioctl);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(4, 24)), $mul.ref(16, 1)), 1079534660);
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(5, 24)), $mul.ref(0, 1)), 5);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(5, 24)), $mul.ref(4, 1)), 26);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(5, 24)), $mul.ref(8, 1)), vmw_stream_claim_ioctl);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(5, 24)), $mul.ref(16, 1)), $sub.i32(0, 2146933691));
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(6, 24)), $mul.ref(0, 1)), 6);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(6, 24)), $mul.ref(4, 1)), 26);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(6, 24)), $mul.ref(8, 1)), vmw_stream_unref_ioctl);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(6, 24)), $mul.ref(16, 1)), 1074291782);
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(7, 24)), $mul.ref(0, 1)), 7);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(7, 24)), $mul.ref(4, 1)), 17);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(7, 24)), $mul.ref(8, 1)), vmw_context_define_ioctl);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(7, 24)), $mul.ref(16, 1)), $sub.i32(0, 2146933689));
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(8, 24)), $mul.ref(0, 1)), 8);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(8, 24)), $mul.ref(4, 1)), 17);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(8, 24)), $mul.ref(8, 1)), vmw_context_destroy_ioctl);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(8, 24)), $mul.ref(16, 1)), 1074291784);
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(9, 24)), $mul.ref(0, 1)), 9);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(9, 24)), $mul.ref(4, 1)), 17);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(9, 24)), $mul.ref(8, 1)), vmw_surface_define_ioctl);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(9, 24)), $mul.ref(16, 1)), $sub.i32(0, 1070570423));
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(10, 24)), $mul.ref(0, 1)), 10);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(10, 24)), $mul.ref(4, 1)), 17);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(10, 24)), $mul.ref(8, 1)), vmw_surface_destroy_ioctl);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(10, 24)), $mul.ref(16, 1)), 1074291786);
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(11, 24)), $mul.ref(0, 1)), 11);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(11, 24)), $mul.ref(4, 1)), 17);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(11, 24)), $mul.ref(8, 1)), vmw_surface_reference_ioctl);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(11, 24)), $mul.ref(16, 1)), $sub.i32(0, 1070570421));
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(12, 24)), $mul.ref(0, 1)), 12);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(12, 24)), $mul.ref(4, 1)), 17);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(12, 24)), $mul.ref(8, 1)), vmw_execbuf_ioctl);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(12, 24)), $mul.ref(16, 1)), 1075864652);
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(13, 24)), $mul.ref(0, 1)), 13);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(13, 24)), $mul.ref(4, 1)), 17);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(13, 24)), $mul.ref(8, 1)), vmw_get_cap_3d_ioctl);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(13, 24)), $mul.ref(16, 1)), 1074816077);
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(14, 24)), $mul.ref(0, 1)), 14);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(14, 24)), $mul.ref(4, 1)), 17);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(14, 24)), $mul.ref(8, 1)), vmw_fence_obj_wait_ioctl);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(14, 24)), $mul.ref(16, 1)), $sub.i32(0, 1071094706));
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(15, 24)), $mul.ref(0, 1)), 15);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(15, 24)), $mul.ref(4, 1)), 17);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(15, 24)), $mul.ref(8, 1)), vmw_fence_obj_signaled_ioctl);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(15, 24)), $mul.ref(16, 1)), $sub.i32(0, 1072143281));
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(16, 24)), $mul.ref(0, 1)), 16);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(16, 24)), $mul.ref(4, 1)), 17);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(16, 24)), $mul.ref(8, 1)), vmw_fence_obj_unref_ioctl);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(16, 24)), $mul.ref(16, 1)), 1074291792);
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(17, 24)), $mul.ref(0, 1)), 17);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(17, 24)), $mul.ref(4, 1)), 17);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(17, 24)), $mul.ref(8, 1)), vmw_fence_event_ioctl);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(17, 24)), $mul.ref(16, 1)), 1075340369);
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(18, 24)), $mul.ref(0, 1)), 18);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(18, 24)), $mul.ref(4, 1)), 19);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(18, 24)), $mul.ref(8, 1)), vmw_present_ioctl);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(18, 24)), $mul.ref(16, 1)), 1075864658);
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(19, 24)), $mul.ref(0, 1)), 19);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(19, 24)), $mul.ref(4, 1)), 19);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(19, 24)), $mul.ref(8, 1)), vmw_present_readback_ioctl);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(19, 24)), $mul.ref(16, 1)), 1075340371);
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(20, 24)), $mul.ref(0, 1)), 20);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(20, 24)), $mul.ref(4, 1)), 18);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(20, 24)), $mul.ref(8, 1)), vmw_kms_update_layout_ioctl);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(vmw_ioctls, $mul.ref(0, 504)), $mul.ref(20, 24)), $mul.ref(16, 1)), 1074816084);
    $M.0 := $store.i8($M.0, __param_str_enable_fbdev, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_enable_fbdev, $mul.ref(0, 13)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_enable_fbdev, $mul.ref(0, 13)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_enable_fbdev, $mul.ref(0, 13)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_enable_fbdev, $mul.ref(0, 13)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_enable_fbdev, $mul.ref(0, 13)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_enable_fbdev, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_enable_fbdev, $mul.ref(0, 13)), $mul.ref(7, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_enable_fbdev, $mul.ref(0, 13)), $mul.ref(8, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_enable_fbdev, $mul.ref(0, 13)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_enable_fbdev, $mul.ref(0, 13)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_enable_fbdev, $mul.ref(0, 13)), $mul.ref(11, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__param_str_enable_fbdev, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.212 := $store.ref($M.212, vmw_framebuffer_surface_funcs, vmw_framebuffer_surface_destroy);
    $M.213 := $store.ref($M.213, $add.ref($add.ref(vmw_framebuffer_surface_funcs, $mul.ref(0, 24)), $mul.ref(8, 1)), vmw_framebuffer_create_handle);
    $M.214 := $store.ref($M.214, $add.ref($add.ref(vmw_framebuffer_surface_funcs, $mul.ref(0, 24)), $mul.ref(16, 1)), vmw_framebuffer_surface_dirty);
    $M.212 := $store.ref($M.212, vmw_framebuffer_dmabuf_funcs, vmw_framebuffer_dmabuf_destroy);
    $M.213 := $store.ref($M.213, $add.ref($add.ref(vmw_framebuffer_dmabuf_funcs, $mul.ref(0, 24)), $mul.ref(8, 1)), vmw_framebuffer_create_handle);
    $M.214 := $store.ref($M.214, $add.ref($add.ref(vmw_framebuffer_dmabuf_funcs, $mul.ref(0, 24)), $mul.ref(16, 1)), vmw_framebuffer_dmabuf_dirty);
    $M.215 := $store.ref($M.215, vmw_kms_connector_builtin, $0.ref);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(0, 1)), 54);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(1, 1)), 52);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(2, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(3, 1)), 120);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(4, 1)), 52);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(5, 1)), 56);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(6, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(7, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(8, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(9, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(10, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(11, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(12, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(13, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(14, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(15, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(16, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(17, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(18, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(19, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(20, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(21, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(22, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(23, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(24, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(25, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(26, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(27, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(28, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(29, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(30, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(31, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(56, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(60, 1)), 64);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(64, 1)), 25175);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(68, 1)), 640);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(72, 1)), 656);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(76, 1)), 752);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(80, 1)), 800);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(84, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(88, 1)), 480);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(92, 1)), 489);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(96, 1)), 492);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(100, 1)), 525);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(104, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(108, 1)), 10);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(112, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(116, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(120, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(124, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(128, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(132, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(136, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(140, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(144, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(148, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(152, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(156, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(160, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(164, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(168, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(172, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(176, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(180, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(184, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(188, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(192, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(200, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(204, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(0, 216)), $mul.ref(208, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(0, 1)), 56);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(1, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(2, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(3, 1)), 120);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(4, 1)), 54);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(5, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(6, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(7, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(8, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(9, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(10, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(11, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(12, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(13, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(14, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(15, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(16, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(17, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(18, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(19, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(20, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(21, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(22, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(23, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(24, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(25, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(26, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(27, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(28, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(29, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(30, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(24, 1)), $mul.ref(31, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(56, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(60, 1)), 64);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(64, 1)), 40000);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(68, 1)), 800);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(72, 1)), 840);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(76, 1)), 968);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(80, 1)), 1056);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(84, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(88, 1)), 600);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(92, 1)), 601);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(96, 1)), 605);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(100, 1)), 628);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(104, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(108, 1)), 5);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(112, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(116, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(120, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(124, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(128, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(132, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(136, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(140, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(144, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(148, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(152, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(156, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(160, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(164, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(168, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(172, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(176, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(180, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(184, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(188, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(192, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(200, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(204, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(1, 216)), $mul.ref(208, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(0, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(1, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(2, 1)), 50);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(3, 1)), 52);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(4, 1)), 120);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(5, 1)), 55);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(6, 1)), 54);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(7, 1)), 56);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(8, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(9, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(10, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(11, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(12, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(13, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(14, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(15, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(16, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(17, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(18, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(19, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(20, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(21, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(22, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(23, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(24, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(25, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(26, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(27, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(28, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(29, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(30, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(24, 1)), $mul.ref(31, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(56, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(60, 1)), 64);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(64, 1)), 65000);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(68, 1)), 1024);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(72, 1)), 1048);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(76, 1)), 1184);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(80, 1)), 1344);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(84, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(88, 1)), 768);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(92, 1)), 771);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(96, 1)), 777);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(100, 1)), 806);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(104, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(108, 1)), 10);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(112, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(116, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(120, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(124, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(128, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(132, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(136, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(140, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(144, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(148, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(152, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(156, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(160, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(164, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(168, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(172, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(176, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(180, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(184, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(188, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(192, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(200, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(204, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(2, 216)), $mul.ref(208, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(0, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(1, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(2, 1)), 53);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(3, 1)), 50);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(4, 1)), 120);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(5, 1)), 56);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(6, 1)), 54);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(7, 1)), 52);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(8, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(9, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(10, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(11, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(12, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(13, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(14, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(15, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(16, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(17, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(18, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(19, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(20, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(21, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(22, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(23, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(24, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(25, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(26, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(27, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(28, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(29, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(30, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(24, 1)), $mul.ref(31, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(56, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(60, 1)), 64);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(64, 1)), 108000);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(68, 1)), 1152);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(72, 1)), 1216);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(76, 1)), 1344);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(80, 1)), 1600);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(84, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(88, 1)), 864);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(92, 1)), 865);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(96, 1)), 868);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(100, 1)), 900);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(104, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(108, 1)), 5);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(112, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(116, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(120, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(124, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(128, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(132, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(136, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(140, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(144, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(148, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(152, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(156, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(160, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(164, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(168, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(172, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(176, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(180, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(184, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(188, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(192, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(200, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(204, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(3, 216)), $mul.ref(208, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(0, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(1, 1)), 50);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(2, 1)), 56);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(3, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(4, 1)), 120);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(5, 1)), 55);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(6, 1)), 54);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(7, 1)), 56);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(8, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(9, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(10, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(11, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(12, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(13, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(14, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(15, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(16, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(17, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(18, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(19, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(20, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(21, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(22, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(23, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(24, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(25, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(26, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(27, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(28, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(29, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(30, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(24, 1)), $mul.ref(31, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(56, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(60, 1)), 64);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(64, 1)), 79500);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(68, 1)), 1280);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(72, 1)), 1344);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(76, 1)), 1472);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(80, 1)), 1664);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(84, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(88, 1)), 768);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(92, 1)), 771);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(96, 1)), 778);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(100, 1)), 798);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(104, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(108, 1)), 6);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(112, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(116, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(120, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(124, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(128, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(132, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(136, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(140, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(144, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(148, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(152, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(156, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(160, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(164, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(168, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(172, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(176, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(180, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(184, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(188, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(192, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(200, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(204, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(4, 216)), $mul.ref(208, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(0, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(1, 1)), 50);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(2, 1)), 56);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(3, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(4, 1)), 120);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(5, 1)), 56);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(6, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(7, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(8, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(9, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(10, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(11, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(12, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(13, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(14, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(15, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(16, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(17, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(18, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(19, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(20, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(21, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(22, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(23, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(24, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(25, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(26, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(27, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(28, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(29, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(30, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(24, 1)), $mul.ref(31, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(56, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(60, 1)), 64);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(64, 1)), 83500);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(68, 1)), 1280);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(72, 1)), 1352);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(76, 1)), 1480);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(80, 1)), 1680);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(84, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(88, 1)), 800);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(92, 1)), 803);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(96, 1)), 809);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(100, 1)), 831);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(104, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(108, 1)), 9);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(112, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(116, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(120, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(124, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(128, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(132, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(136, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(140, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(144, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(148, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(152, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(156, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(160, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(164, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(168, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(172, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(176, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(180, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(184, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(188, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(192, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(200, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(204, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(5, 216)), $mul.ref(208, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(0, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(1, 1)), 50);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(2, 1)), 56);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(3, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(4, 1)), 120);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(5, 1)), 57);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(6, 1)), 54);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(7, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(8, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(9, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(10, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(11, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(12, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(13, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(14, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(15, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(16, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(17, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(18, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(19, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(20, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(21, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(22, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(23, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(24, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(25, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(26, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(27, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(28, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(29, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(30, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(24, 1)), $mul.ref(31, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(56, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(60, 1)), 64);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(64, 1)), 108000);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(68, 1)), 1280);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(72, 1)), 1376);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(76, 1)), 1488);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(80, 1)), 1800);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(84, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(88, 1)), 960);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(92, 1)), 961);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(96, 1)), 964);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(100, 1)), 1000);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(104, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(108, 1)), 5);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(112, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(116, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(120, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(124, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(128, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(132, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(136, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(140, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(144, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(148, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(152, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(156, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(160, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(164, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(168, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(172, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(176, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(180, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(184, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(188, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(192, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(200, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(204, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(6, 216)), $mul.ref(208, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(0, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(1, 1)), 50);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(2, 1)), 56);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(3, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(4, 1)), 120);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(5, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(6, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(7, 1)), 50);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(8, 1)), 52);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(9, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(10, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(11, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(12, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(13, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(14, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(15, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(16, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(17, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(18, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(19, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(20, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(21, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(22, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(23, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(24, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(25, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(26, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(27, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(28, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(29, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(30, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(24, 1)), $mul.ref(31, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(56, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(60, 1)), 64);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(64, 1)), 108000);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(68, 1)), 1280);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(72, 1)), 1328);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(76, 1)), 1440);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(80, 1)), 1688);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(84, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(88, 1)), 1024);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(92, 1)), 1025);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(96, 1)), 1028);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(100, 1)), 1066);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(104, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(108, 1)), 5);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(112, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(116, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(120, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(124, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(128, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(132, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(136, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(140, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(144, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(148, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(152, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(156, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(160, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(164, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(168, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(172, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(176, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(180, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(184, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(188, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(192, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(200, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(204, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(7, 216)), $mul.ref(208, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(0, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(1, 1)), 51);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(2, 1)), 54);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(3, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(4, 1)), 120);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(5, 1)), 55);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(6, 1)), 54);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(7, 1)), 56);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(8, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(9, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(10, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(11, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(12, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(13, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(14, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(15, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(16, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(17, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(18, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(19, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(20, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(21, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(22, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(23, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(24, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(25, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(26, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(27, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(28, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(29, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(30, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(24, 1)), $mul.ref(31, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(56, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(60, 1)), 64);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(64, 1)), 85500);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(68, 1)), 1360);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(72, 1)), 1424);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(76, 1)), 1536);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(80, 1)), 1792);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(84, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(88, 1)), 768);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(92, 1)), 771);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(96, 1)), 777);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(100, 1)), 795);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(104, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(108, 1)), 5);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(112, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(116, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(120, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(124, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(128, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(132, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(136, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(140, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(144, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(148, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(152, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(156, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(160, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(164, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(168, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(172, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(176, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(180, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(184, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(188, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(192, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(200, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(204, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(8, 216)), $mul.ref(208, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(0, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(1, 1)), 52);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(2, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(3, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(4, 1)), 120);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(5, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(6, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(7, 1)), 53);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(8, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(9, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(10, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(11, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(12, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(13, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(14, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(15, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(16, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(17, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(18, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(19, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(20, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(21, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(22, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(23, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(24, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(25, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(26, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(27, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(28, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(29, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(30, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(24, 1)), $mul.ref(31, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(56, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(60, 1)), 64);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(64, 1)), 121750);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(68, 1)), 1400);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(72, 1)), 1488);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(76, 1)), 1632);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(80, 1)), 1864);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(84, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(88, 1)), 1050);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(92, 1)), 1053);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(96, 1)), 1057);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(100, 1)), 1089);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(104, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(108, 1)), 6);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(112, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(116, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(120, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(124, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(128, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(132, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(136, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(140, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(144, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(148, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(152, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(156, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(160, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(164, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(168, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(172, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(176, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(180, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(184, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(188, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(192, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(200, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(204, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(9, 216)), $mul.ref(208, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(0, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(1, 1)), 52);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(2, 1)), 52);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(3, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(4, 1)), 120);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(5, 1)), 57);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(6, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(7, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(8, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(9, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(10, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(11, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(12, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(13, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(14, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(15, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(16, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(17, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(18, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(19, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(20, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(21, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(22, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(23, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(24, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(25, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(26, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(27, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(28, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(29, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(30, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(24, 1)), $mul.ref(31, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(56, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(60, 1)), 64);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(64, 1)), 106500);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(68, 1)), 1440);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(72, 1)), 1520);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(76, 1)), 1672);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(80, 1)), 1904);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(84, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(88, 1)), 900);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(92, 1)), 903);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(96, 1)), 909);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(100, 1)), 934);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(104, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(108, 1)), 6);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(112, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(116, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(120, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(124, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(128, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(132, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(136, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(140, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(144, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(148, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(152, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(156, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(160, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(164, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(168, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(172, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(176, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(180, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(184, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(188, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(192, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(200, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(204, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(10, 216)), $mul.ref(208, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(0, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(1, 1)), 54);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(2, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(3, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(4, 1)), 120);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(5, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(6, 1)), 50);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(7, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(8, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(9, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(10, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(11, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(12, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(13, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(14, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(15, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(16, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(17, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(18, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(19, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(20, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(21, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(22, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(23, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(24, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(25, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(26, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(27, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(28, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(29, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(30, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(24, 1)), $mul.ref(31, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(56, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(60, 1)), 64);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(64, 1)), 162000);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(68, 1)), 1600);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(72, 1)), 1664);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(76, 1)), 1856);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(80, 1)), 2160);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(84, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(88, 1)), 1200);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(92, 1)), 1201);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(96, 1)), 1204);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(100, 1)), 1250);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(104, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(108, 1)), 5);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(112, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(116, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(120, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(124, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(128, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(132, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(136, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(140, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(144, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(148, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(152, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(156, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(160, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(164, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(168, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(172, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(176, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(180, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(184, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(188, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(192, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(200, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(204, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(11, 216)), $mul.ref(208, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(0, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(1, 1)), 54);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(2, 1)), 56);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(3, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(4, 1)), 120);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(5, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(6, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(7, 1)), 53);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(8, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(9, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(10, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(11, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(12, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(13, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(14, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(15, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(16, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(17, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(18, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(19, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(20, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(21, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(22, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(23, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(24, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(25, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(26, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(27, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(28, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(29, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(30, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(24, 1)), $mul.ref(31, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(56, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(60, 1)), 64);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(64, 1)), 146250);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(68, 1)), 1680);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(72, 1)), 1784);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(76, 1)), 1960);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(80, 1)), 2240);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(84, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(88, 1)), 1050);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(92, 1)), 1053);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(96, 1)), 1059);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(100, 1)), 1089);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(104, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(108, 1)), 6);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(112, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(116, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(120, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(124, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(128, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(132, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(136, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(140, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(144, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(148, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(152, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(156, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(160, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(164, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(168, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(172, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(176, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(180, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(184, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(188, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(192, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(200, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(204, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(12, 216)), $mul.ref(208, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(0, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(1, 1)), 55);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(2, 1)), 57);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(3, 1)), 50);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(4, 1)), 120);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(5, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(6, 1)), 51);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(7, 1)), 52);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(8, 1)), 52);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(9, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(10, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(11, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(12, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(13, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(14, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(15, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(16, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(17, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(18, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(19, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(20, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(21, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(22, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(23, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(24, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(25, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(26, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(27, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(28, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(29, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(30, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(24, 1)), $mul.ref(31, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(56, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(60, 1)), 64);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(64, 1)), 204750);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(68, 1)), 1792);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(72, 1)), 1920);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(76, 1)), 2120);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(80, 1)), 2448);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(84, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(88, 1)), 1344);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(92, 1)), 1345);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(96, 1)), 1348);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(100, 1)), 1394);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(104, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(108, 1)), 6);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(112, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(116, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(120, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(124, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(128, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(132, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(136, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(140, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(144, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(148, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(152, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(156, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(160, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(164, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(168, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(172, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(176, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(180, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(184, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(188, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(192, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(200, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(204, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(13, 216)), $mul.ref(208, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(0, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(1, 1)), 56);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(2, 1)), 53);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(3, 1)), 54);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(4, 1)), 120);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(5, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(6, 1)), 51);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(7, 1)), 57);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(8, 1)), 50);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(9, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(10, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(11, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(12, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(13, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(14, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(15, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(16, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(17, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(18, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(19, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(20, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(21, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(22, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(23, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(24, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(25, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(26, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(27, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(28, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(29, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(30, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(24, 1)), $mul.ref(31, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(56, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(60, 1)), 64);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(64, 1)), 218250);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(68, 1)), 1856);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(72, 1)), 1952);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(76, 1)), 2176);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(80, 1)), 2528);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(84, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(88, 1)), 1392);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(92, 1)), 1393);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(96, 1)), 1396);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(100, 1)), 1439);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(104, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(108, 1)), 6);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(112, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(116, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(120, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(124, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(128, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(132, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(136, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(140, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(144, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(148, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(152, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(156, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(160, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(164, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(168, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(172, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(176, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(180, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(184, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(188, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(192, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(200, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(204, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(14, 216)), $mul.ref(208, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(0, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(1, 1)), 57);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(2, 1)), 50);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(3, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(4, 1)), 120);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(5, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(6, 1)), 50);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(7, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(8, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(9, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(10, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(11, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(12, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(13, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(14, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(15, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(16, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(17, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(18, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(19, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(20, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(21, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(22, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(23, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(24, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(25, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(26, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(27, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(28, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(29, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(30, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(24, 1)), $mul.ref(31, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(56, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(60, 1)), 64);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(64, 1)), 193250);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(68, 1)), 1920);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(72, 1)), 2056);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(76, 1)), 2256);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(80, 1)), 2592);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(84, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(88, 1)), 1200);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(92, 1)), 1203);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(96, 1)), 1209);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(100, 1)), 1245);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(104, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(108, 1)), 6);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(112, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(116, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(120, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(124, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(128, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(132, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(136, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(140, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(144, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(148, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(152, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(156, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(160, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(164, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(168, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(172, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(176, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(180, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(184, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(188, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(192, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(200, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(204, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(15, 216)), $mul.ref(208, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(0, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(1, 1)), 57);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(2, 1)), 50);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(3, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(4, 1)), 120);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(5, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(6, 1)), 52);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(7, 1)), 52);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(8, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(9, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(10, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(11, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(12, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(13, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(14, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(15, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(16, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(17, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(18, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(19, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(20, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(21, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(22, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(23, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(24, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(25, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(26, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(27, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(28, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(29, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(30, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(24, 1)), $mul.ref(31, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(56, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(60, 1)), 64);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(64, 1)), 234000);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(68, 1)), 1920);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(72, 1)), 2048);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(76, 1)), 2256);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(80, 1)), 2600);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(84, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(88, 1)), 1440);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(92, 1)), 1441);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(96, 1)), 1444);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(100, 1)), 1500);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(104, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(108, 1)), 6);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(112, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(116, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(120, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(124, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(128, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(132, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(136, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(140, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(144, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(148, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(152, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(156, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(160, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(164, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(168, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(172, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(176, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(180, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(184, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(188, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(192, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(200, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(204, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(16, 216)), $mul.ref(208, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(0, 1)), 50);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(1, 1)), 53);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(2, 1)), 54);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(3, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(4, 1)), 120);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(5, 1)), 49);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(6, 1)), 54);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(7, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(8, 1)), 48);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(9, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(10, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(11, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(12, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(13, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(14, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(15, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(16, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(17, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(18, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(19, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(20, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(21, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(22, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(23, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(24, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(25, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(26, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(27, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(28, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(29, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(30, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(24, 1)), $mul.ref(31, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(56, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(60, 1)), 64);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(64, 1)), 348500);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(68, 1)), 2560);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(72, 1)), 2752);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(76, 1)), 3032);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(80, 1)), 3504);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(84, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(88, 1)), 1600);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(92, 1)), 1603);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(96, 1)), 1609);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(100, 1)), 1658);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(104, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(108, 1)), 6);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(112, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(116, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(120, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(124, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(128, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(132, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(136, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(140, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(144, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(148, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(152, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(156, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(160, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(164, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(168, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(172, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(176, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(180, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(184, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(188, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(192, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(200, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(204, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(17, 216)), $mul.ref(208, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(1, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(2, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(3, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(4, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(5, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(6, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(7, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(8, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(9, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(10, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(11, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(12, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(13, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(14, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(15, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(16, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(17, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(18, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(19, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(20, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(21, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(22, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(23, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(24, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(25, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(26, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(27, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(28, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(29, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(30, 1)), 0);
    $M.215 := $store.i8($M.215, $add.ref($add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(24, 1)), $mul.ref(31, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(56, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(60, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(64, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(68, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(72, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(76, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(80, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(84, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(88, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(92, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(96, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(100, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(104, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(108, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(112, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(116, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(120, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(124, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(128, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(132, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(136, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(140, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(144, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(148, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(152, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(156, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(160, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(164, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(168, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(172, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(176, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(180, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(184, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(188, 1)), 0);
    $M.215 := $store.ref($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(192, 1)), $0.ref);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(200, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(204, 1)), 0);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(vmw_kms_connector_builtin, $mul.ref(0, 4104)), $mul.ref(18, 216)), $mul.ref(208, 1)), 0);
    $M.0 := $store.ref($M.0, vmw_kms_funcs, vmw_kms_fb_create);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_kms_funcs, $mul.ref(0, 16)), $mul.ref(8, 1)), $0.ref);
    $M.216 := $store.ref($M.216, vmw_cmd_funcs, vmw_cmd_invalid);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1, 8)), vmw_cmd_invalid);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(2, 8)), vmw_cmd_surface_copy_check);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(3, 8)), vmw_cmd_stretch_blt_check);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(4, 8)), vmw_cmd_dma);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(5, 8)), vmw_cmd_invalid);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(6, 8)), vmw_cmd_invalid);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(7, 8)), vmw_cmd_cid_check);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(8, 8)), vmw_cmd_cid_check);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(9, 8)), vmw_cmd_cid_check);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(10, 8)), vmw_cmd_set_render_target_check);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(11, 8)), vmw_cmd_tex_state);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(12, 8)), vmw_cmd_cid_check);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(13, 8)), vmw_cmd_cid_check);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(14, 8)), vmw_cmd_cid_check);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(15, 8)), vmw_cmd_cid_check);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(16, 8)), vmw_cmd_cid_check);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(17, 8)), vmw_cmd_cid_check);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(18, 8)), vmw_cmd_present_check);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(19, 8)), vmw_cmd_cid_check);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(20, 8)), vmw_cmd_cid_check);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(21, 8)), vmw_cmd_cid_check);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(22, 8)), vmw_cmd_cid_check);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(23, 8)), vmw_cmd_draw);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(24, 8)), vmw_cmd_cid_check);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(25, 8)), vmw_cmd_cid_check);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(26, 8)), vmw_cmd_end_query);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(27, 8)), vmw_cmd_wait_query);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(28, 8)), vmw_cmd_ok);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(29, 8)), vmw_cmd_blt_surf_screen_check);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(30, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(31, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(32, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(33, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(34, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(35, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(36, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(37, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(38, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(39, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(40, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(41, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(42, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(43, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(44, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(45, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(46, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(47, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(48, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(49, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(50, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(51, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(52, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(53, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(54, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(55, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(56, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(57, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(58, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(59, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(60, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(61, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(62, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(63, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(64, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(65, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(66, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(67, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(68, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(69, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(70, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(71, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(72, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(73, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(74, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(75, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(76, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(77, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(78, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(79, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(80, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(81, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(82, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(83, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(84, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(85, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(86, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(87, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(88, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(89, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(90, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(91, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(92, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(93, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(94, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(95, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(96, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(97, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(98, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(99, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(100, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(101, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(102, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(103, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(104, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(105, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(106, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(107, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(108, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(109, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(110, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(111, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(112, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(113, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(114, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(115, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(116, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(117, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(118, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(119, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(120, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(121, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(122, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(123, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(124, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(125, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(126, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(127, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(128, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(129, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(130, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(131, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(132, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(133, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(134, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(135, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(136, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(137, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(138, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(139, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(140, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(141, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(142, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(143, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(144, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(145, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(146, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(147, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(148, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(149, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(150, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(151, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(152, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(153, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(154, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(155, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(156, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(157, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(158, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(159, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(160, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(161, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(162, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(163, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(164, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(165, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(166, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(167, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(168, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(169, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(170, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(171, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(172, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(173, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(174, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(175, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(176, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(177, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(178, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(179, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(180, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(181, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(182, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(183, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(184, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(185, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(186, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(187, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(188, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(189, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(190, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(191, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(192, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(193, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(194, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(195, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(196, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(197, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(198, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(199, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(200, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(201, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(202, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(203, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(204, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(205, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(206, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(207, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(208, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(209, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(210, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(211, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(212, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(213, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(214, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(215, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(216, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(217, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(218, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(219, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(220, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(221, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(222, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(223, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(224, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(225, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(226, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(227, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(228, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(229, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(230, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(231, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(232, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(233, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(234, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(235, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(236, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(237, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(238, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(239, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(240, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(241, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(242, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(243, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(244, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(245, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(246, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(247, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(248, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(249, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(250, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(251, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(252, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(253, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(254, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(255, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(256, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(257, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(258, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(259, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(260, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(261, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(262, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(263, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(264, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(265, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(266, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(267, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(268, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(269, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(270, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(271, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(272, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(273, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(274, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(275, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(276, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(277, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(278, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(279, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(280, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(281, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(282, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(283, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(284, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(285, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(286, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(287, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(288, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(289, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(290, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(291, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(292, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(293, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(294, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(295, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(296, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(297, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(298, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(299, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(300, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(301, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(302, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(303, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(304, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(305, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(306, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(307, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(308, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(309, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(310, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(311, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(312, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(313, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(314, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(315, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(316, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(317, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(318, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(319, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(320, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(321, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(322, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(323, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(324, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(325, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(326, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(327, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(328, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(329, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(330, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(331, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(332, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(333, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(334, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(335, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(336, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(337, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(338, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(339, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(340, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(341, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(342, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(343, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(344, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(345, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(346, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(347, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(348, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(349, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(350, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(351, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(352, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(353, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(354, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(355, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(356, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(357, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(358, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(359, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(360, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(361, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(362, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(363, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(364, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(365, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(366, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(367, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(368, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(369, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(370, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(371, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(372, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(373, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(374, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(375, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(376, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(377, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(378, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(379, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(380, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(381, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(382, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(383, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(384, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(385, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(386, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(387, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(388, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(389, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(390, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(391, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(392, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(393, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(394, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(395, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(396, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(397, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(398, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(399, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(400, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(401, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(402, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(403, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(404, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(405, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(406, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(407, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(408, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(409, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(410, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(411, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(412, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(413, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(414, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(415, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(416, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(417, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(418, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(419, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(420, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(421, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(422, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(423, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(424, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(425, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(426, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(427, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(428, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(429, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(430, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(431, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(432, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(433, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(434, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(435, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(436, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(437, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(438, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(439, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(440, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(441, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(442, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(443, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(444, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(445, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(446, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(447, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(448, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(449, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(450, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(451, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(452, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(453, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(454, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(455, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(456, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(457, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(458, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(459, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(460, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(461, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(462, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(463, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(464, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(465, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(466, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(467, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(468, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(469, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(470, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(471, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(472, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(473, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(474, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(475, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(476, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(477, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(478, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(479, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(480, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(481, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(482, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(483, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(484, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(485, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(486, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(487, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(488, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(489, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(490, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(491, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(492, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(493, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(494, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(495, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(496, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(497, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(498, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(499, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(500, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(501, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(502, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(503, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(504, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(505, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(506, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(507, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(508, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(509, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(510, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(511, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(512, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(513, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(514, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(515, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(516, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(517, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(518, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(519, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(520, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(521, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(522, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(523, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(524, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(525, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(526, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(527, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(528, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(529, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(530, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(531, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(532, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(533, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(534, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(535, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(536, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(537, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(538, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(539, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(540, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(541, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(542, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(543, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(544, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(545, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(546, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(547, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(548, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(549, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(550, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(551, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(552, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(553, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(554, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(555, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(556, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(557, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(558, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(559, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(560, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(561, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(562, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(563, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(564, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(565, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(566, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(567, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(568, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(569, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(570, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(571, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(572, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(573, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(574, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(575, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(576, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(577, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(578, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(579, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(580, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(581, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(582, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(583, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(584, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(585, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(586, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(587, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(588, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(589, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(590, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(591, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(592, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(593, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(594, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(595, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(596, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(597, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(598, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(599, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(600, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(601, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(602, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(603, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(604, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(605, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(606, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(607, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(608, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(609, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(610, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(611, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(612, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(613, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(614, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(615, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(616, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(617, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(618, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(619, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(620, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(621, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(622, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(623, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(624, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(625, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(626, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(627, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(628, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(629, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(630, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(631, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(632, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(633, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(634, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(635, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(636, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(637, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(638, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(639, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(640, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(641, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(642, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(643, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(644, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(645, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(646, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(647, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(648, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(649, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(650, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(651, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(652, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(653, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(654, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(655, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(656, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(657, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(658, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(659, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(660, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(661, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(662, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(663, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(664, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(665, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(666, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(667, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(668, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(669, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(670, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(671, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(672, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(673, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(674, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(675, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(676, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(677, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(678, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(679, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(680, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(681, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(682, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(683, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(684, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(685, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(686, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(687, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(688, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(689, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(690, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(691, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(692, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(693, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(694, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(695, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(696, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(697, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(698, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(699, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(700, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(701, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(702, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(703, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(704, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(705, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(706, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(707, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(708, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(709, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(710, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(711, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(712, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(713, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(714, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(715, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(716, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(717, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(718, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(719, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(720, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(721, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(722, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(723, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(724, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(725, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(726, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(727, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(728, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(729, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(730, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(731, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(732, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(733, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(734, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(735, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(736, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(737, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(738, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(739, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(740, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(741, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(742, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(743, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(744, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(745, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(746, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(747, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(748, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(749, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(750, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(751, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(752, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(753, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(754, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(755, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(756, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(757, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(758, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(759, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(760, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(761, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(762, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(763, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(764, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(765, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(766, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(767, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(768, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(769, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(770, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(771, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(772, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(773, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(774, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(775, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(776, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(777, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(778, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(779, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(780, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(781, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(782, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(783, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(784, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(785, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(786, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(787, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(788, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(789, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(790, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(791, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(792, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(793, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(794, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(795, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(796, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(797, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(798, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(799, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(800, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(801, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(802, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(803, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(804, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(805, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(806, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(807, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(808, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(809, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(810, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(811, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(812, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(813, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(814, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(815, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(816, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(817, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(818, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(819, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(820, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(821, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(822, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(823, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(824, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(825, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(826, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(827, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(828, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(829, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(830, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(831, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(832, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(833, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(834, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(835, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(836, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(837, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(838, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(839, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(840, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(841, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(842, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(843, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(844, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(845, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(846, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(847, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(848, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(849, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(850, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(851, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(852, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(853, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(854, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(855, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(856, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(857, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(858, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(859, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(860, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(861, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(862, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(863, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(864, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(865, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(866, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(867, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(868, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(869, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(870, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(871, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(872, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(873, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(874, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(875, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(876, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(877, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(878, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(879, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(880, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(881, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(882, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(883, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(884, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(885, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(886, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(887, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(888, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(889, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(890, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(891, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(892, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(893, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(894, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(895, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(896, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(897, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(898, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(899, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(900, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(901, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(902, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(903, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(904, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(905, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(906, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(907, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(908, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(909, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(910, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(911, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(912, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(913, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(914, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(915, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(916, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(917, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(918, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(919, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(920, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(921, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(922, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(923, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(924, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(925, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(926, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(927, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(928, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(929, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(930, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(931, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(932, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(933, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(934, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(935, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(936, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(937, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(938, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(939, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(940, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(941, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(942, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(943, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(944, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(945, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(946, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(947, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(948, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(949, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(950, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(951, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(952, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(953, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(954, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(955, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(956, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(957, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(958, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(959, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(960, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(961, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(962, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(963, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(964, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(965, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(966, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(967, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(968, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(969, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(970, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(971, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(972, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(973, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(974, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(975, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(976, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(977, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(978, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(979, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(980, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(981, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(982, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(983, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(984, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(985, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(986, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(987, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(988, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(989, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(990, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(991, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(992, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(993, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(994, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(995, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(996, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(997, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(998, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(999, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1000, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1001, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1002, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1003, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1004, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1005, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1006, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1007, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1008, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1009, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1010, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1011, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1012, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1013, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1014, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1015, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1016, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1017, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1018, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1019, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1020, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1021, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1022, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1023, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1024, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1025, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1026, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1027, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1028, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1029, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1030, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1031, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1032, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1033, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1034, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1035, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1036, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1037, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1038, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1039, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1040, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1041, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1042, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1043, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1044, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1045, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1046, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1047, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1048, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1049, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1050, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1051, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1052, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1053, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1054, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1055, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1056, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1057, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1058, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1059, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1060, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1061, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1062, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1063, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1064, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1065, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1066, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1067, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1068, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1069, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1070, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1071, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1072, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1073, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1074, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1075, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1076, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1077, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1078, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1079, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1080, 8)), $0.ref);
    $M.216 := $store.ref($M.216, $add.ref($add.ref(vmw_cmd_funcs, $mul.ref(0, 8656)), $mul.ref(1081, 8)), $0.ref);
    $M.24 := 0;
    call {:si_unique_call 6605} {:cexpr "vmw_user_stream_size"} boogie_si_record_i64(0);
    call {:si_unique_call 6606} {:cexpr "vmw_user_surface_size"} boogie_si_record_i64(0);
    $M.25 := 0;
    call {:si_unique_call 6607} {:cexpr "vmw_user_context_size"} boogie_si_record_i64(0);
    $M.37 := 0;
    call {:si_unique_call 6608} {:cexpr "res_vmw_probe_29"} boogie_si_record_i32(0);
    $M.36 := 0;
    call {:si_unique_call 6609} {:cexpr "res_vmw_driver_open_12"} boogie_si_record_i32(0);
    $M.0 := $store.i32($M.0, enable_fbdev, 0);
    call {:si_unique_call 6610} {:cexpr "enable_fbdev"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, vmw_gmrid_manager_func, vmw_gmrid_man_init);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_gmrid_manager_func, $mul.ref(0, 40)), $mul.ref(8, 1)), vmw_gmrid_man_takedown);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_gmrid_manager_func, $mul.ref(0, 40)), $mul.ref(16, 1)), vmw_gmrid_man_get_node);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_gmrid_manager_func, $mul.ref(0, 40)), $mul.ref(24, 1)), vmw_gmrid_man_put_node);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_gmrid_manager_func, $mul.ref(0, 40)), $mul.ref(32, 1)), vmw_gmrid_man_debug);
    $M.0 := $store.ref($M.0, vmw_bo_driver, vmw_ttm_tt_create);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_bo_driver, $mul.ref(0, 144)), $mul.ref(8, 1)), ttm_pool_populate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_bo_driver, $mul.ref(0, 144)), $mul.ref(16, 1)), ttm_pool_unpopulate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_bo_driver, $mul.ref(0, 144)), $mul.ref(24, 1)), vmw_invalidate_caches);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_bo_driver, $mul.ref(0, 144)), $mul.ref(32, 1)), vmw_init_mem_type);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_bo_driver, $mul.ref(0, 144)), $mul.ref(40, 1)), vmw_evict_flags);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_bo_driver, $mul.ref(0, 144)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_bo_driver, $mul.ref(0, 144)), $mul.ref(56, 1)), vmw_verify_access);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_bo_driver, $mul.ref(0, 144)), $mul.ref(64, 1)), vmw_sync_obj_signaled);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_bo_driver, $mul.ref(0, 144)), $mul.ref(72, 1)), vmw_sync_obj_wait);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_bo_driver, $mul.ref(0, 144)), $mul.ref(80, 1)), vmw_sync_obj_flush);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_bo_driver, $mul.ref(0, 144)), $mul.ref(88, 1)), vmw_sync_obj_unref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_bo_driver, $mul.ref(0, 144)), $mul.ref(96, 1)), vmw_sync_obj_ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_bo_driver, $mul.ref(0, 144)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_bo_driver, $mul.ref(0, 144)), $mul.ref(112, 1)), vmw_ttm_fault_reserve_notify);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_bo_driver, $mul.ref(0, 144)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_bo_driver, $mul.ref(0, 144)), $mul.ref(128, 1)), vmw_ttm_io_mem_reserve);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_bo_driver, $mul.ref(0, 144)), $mul.ref(136, 1)), vmw_ttm_io_mem_free);
    $M.0 := $store.i32($M.0, vmw_srf_placement, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_srf_placement, $mul.ref(0, 40)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_srf_placement, $mul.ref(0, 40)), $mul.ref(8, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_srf_placement, $mul.ref(0, 40)), $mul.ref(16, 1)), gmr_placement_flags);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_srf_placement, $mul.ref(0, 40)), $mul.ref(24, 1)), 2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_srf_placement, $mul.ref(0, 40)), $mul.ref(32, 1)), gmr_vram_placement_flags);
    $M.0 := $store.i32($M.0, vmw_evictable_placement, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_evictable_placement, $mul.ref(0, 40)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_evictable_placement, $mul.ref(0, 40)), $mul.ref(8, 1)), 3);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_evictable_placement, $mul.ref(0, 40)), $mul.ref(16, 1)), evictable_placement_flags);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_evictable_placement, $mul.ref(0, 40)), $mul.ref(24, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_evictable_placement, $mul.ref(0, 40)), $mul.ref(32, 1)), sys_placement_flags);
    $M.0 := $store.i32($M.0, vmw_sys_placement, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_sys_placement, $mul.ref(0, 40)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_sys_placement, $mul.ref(0, 40)), $mul.ref(8, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_sys_placement, $mul.ref(0, 40)), $mul.ref(16, 1)), sys_placement_flags);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_sys_placement, $mul.ref(0, 40)), $mul.ref(24, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_sys_placement, $mul.ref(0, 40)), $mul.ref(32, 1)), sys_placement_flags);
    $M.0 := $store.i32($M.0, vmw_vram_ne_placement, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_vram_ne_placement, $mul.ref(0, 40)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_vram_ne_placement, $mul.ref(0, 40)), $mul.ref(8, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_vram_ne_placement, $mul.ref(0, 40)), $mul.ref(16, 1)), vram_ne_placement_flags);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_vram_ne_placement, $mul.ref(0, 40)), $mul.ref(24, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_vram_ne_placement, $mul.ref(0, 40)), $mul.ref(32, 1)), vram_ne_placement_flags);
    $M.0 := $store.i32($M.0, vmw_vram_sys_placement, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_vram_sys_placement, $mul.ref(0, 40)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_vram_sys_placement, $mul.ref(0, 40)), $mul.ref(8, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_vram_sys_placement, $mul.ref(0, 40)), $mul.ref(16, 1)), vram_placement_flags);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_vram_sys_placement, $mul.ref(0, 40)), $mul.ref(24, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_vram_sys_placement, $mul.ref(0, 40)), $mul.ref(32, 1)), sys_placement_flags);
    $M.0 := $store.i32($M.0, vmw_vram_gmr_ne_placement, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_vram_gmr_ne_placement, $mul.ref(0, 40)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_vram_gmr_ne_placement, $mul.ref(0, 40)), $mul.ref(8, 1)), 2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_vram_gmr_ne_placement, $mul.ref(0, 40)), $mul.ref(16, 1)), vram_gmr_ne_placement_flags);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_vram_gmr_ne_placement, $mul.ref(0, 40)), $mul.ref(24, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_vram_gmr_ne_placement, $mul.ref(0, 40)), $mul.ref(32, 1)), gmr_ne_placement_flags);
    $M.0 := $store.i32($M.0, vmw_vram_gmr_placement, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_vram_gmr_placement, $mul.ref(0, 40)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_vram_gmr_placement, $mul.ref(0, 40)), $mul.ref(8, 1)), 2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_vram_gmr_placement, $mul.ref(0, 40)), $mul.ref(16, 1)), vram_gmr_placement_flags);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_vram_gmr_placement, $mul.ref(0, 40)), $mul.ref(24, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_vram_gmr_placement, $mul.ref(0, 40)), $mul.ref(32, 1)), gmr_placement_flags);
    $M.0 := $store.i32($M.0, vmw_vram_placement, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_vram_placement, $mul.ref(0, 40)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_vram_placement, $mul.ref(0, 40)), $mul.ref(8, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_vram_placement, $mul.ref(0, 40)), $mul.ref(16, 1)), vram_placement_flags);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vmw_vram_placement, $mul.ref(0, 40)), $mul.ref(24, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vmw_vram_placement, $mul.ref(0, 40)), $mul.ref(32, 1)), vram_placement_flags);
    $M.0 := $store.i8($M.0, __mod_version1209, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_version1209, $mul.ref(0, 16)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_version1209, $mul.ref(0, 16)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_version1209, $mul.ref(0, 16)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_version1209, $mul.ref(0, 16)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_version1209, $mul.ref(0, 16)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_version1209, $mul.ref(0, 16)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_version1209, $mul.ref(0, 16)), $mul.ref(7, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_version1209, $mul.ref(0, 16)), $mul.ref(8, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_version1209, $mul.ref(0, 16)), $mul.ref(9, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_version1209, $mul.ref(0, 16)), $mul.ref(10, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_version1209, $mul.ref(0, 16)), $mul.ref(11, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_version1209, $mul.ref(0, 16)), $mul.ref(12, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_version1209, $mul.ref(0, 16)), $mul.ref(13, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_version1209, $mul.ref(0, 16)), $mul.ref(14, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_version1209, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, __mod_license1205, 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(7, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(8, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(9, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(10, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(19, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(21, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(22, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(23, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(24, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(25, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(26, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(27, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(28, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(29, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(30, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(31, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(32, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_license1205, $mul.ref(0, 34)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, __mod_description1204, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(11, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(12, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(19, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(20, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(22, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(23, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(24, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(25, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(26, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(27, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(28, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(29, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(30, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(31, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(32, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(33, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(34, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(35, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(36, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(37, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(38, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(39, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(40, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(41, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(42, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(43, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(44, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(45, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(46, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(47, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(48, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(49, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(50, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(51, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(52, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(53, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(54, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(55, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(56, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(57, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(58, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(59, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_description1204, $mul.ref(0, 61)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, __mod_author1203, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(3, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(6, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(7, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(8, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(9, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(14, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(17, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(20, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(21, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(22, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(23, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(24, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(25, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(26, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(27, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(28, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_author1203, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, __mod_enable_fbdevtype195, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(5, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(8, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(12, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(16, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(17, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(20, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(21, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(22, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(23, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(24, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdevtype195, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.ref($M.0, __param_enable_fbdev, __param_str_enable_fbdev);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(__param_enable_fbdev, $mul.ref(0, 32)), $mul.ref(8, 1)), param_ops_int);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(__param_enable_fbdev, $mul.ref(0, 32)), $mul.ref(16, 1)), 384);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(__param_enable_fbdev, $mul.ref(0, 32)), $mul.ref(18, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(__param_enable_fbdev, $mul.ref(0, 32)), $mul.ref(24, 1)), $mul.ref(0, 1)), enable_fbdev);
    $M.0 := $store.i8($M.0, __mod_enable_fbdev194, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(4, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(8, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(12, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(13, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(16, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(17, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(18, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(21, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(22, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(24, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(25, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(26, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(27, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(28, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(29, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(30, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(31, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(32, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(33, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(34, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(35, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(36, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(__mod_enable_fbdev194, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, .str.222, 0);
    $M.0 := $store.i8($M.0, .str.279, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.279, $mul.ref(0, 5)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.279, $mul.ref(0, 5)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.279, $mul.ref(0, 5)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.279, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.280, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(2, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(5, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(10, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(23, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(24, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.280, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.223, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.223, $mul.ref(0, 4)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.223, $mul.ref(0, 4)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.223, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.37, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(1, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(6, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(7, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(8, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.31, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 22)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 22)), $mul.ref(2, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 22)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 22)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 22)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 22)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 22)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 22)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 22)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 22)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 22)), $mul.ref(12, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 22)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 22)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 22)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 22)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 22)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 22)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 22)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.ref($M.0, llvm.used, __mod_enable_fbdev194);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(llvm.used, $mul.ref(0, 56)), $mul.ref(1, 8)), __param_enable_fbdev);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(llvm.used, $mul.ref(0, 56)), $mul.ref(2, 8)), __mod_enable_fbdevtype195);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(llvm.used, $mul.ref(0, 56)), $mul.ref(3, 8)), __mod_author1203);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(llvm.used, $mul.ref(0, 56)), $mul.ref(4, 8)), __mod_description1204);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(llvm.used, $mul.ref(0, 56)), $mul.ref(5, 8)), __mod_license1205);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(llvm.used, $mul.ref(0, 56)), $mul.ref(6, 8)), __mod_version1209);
    call {:si_unique_call 6611} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 1076448);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 1077480);

procedure devirtbounce.1(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 1078512);

procedure devirtbounce.2(funcPtr: ref, arg: i32, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: i32, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 1079544);

procedure devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr, $M.1, $M.2, assertsPassed, $M.11, $M.12, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(vmw_sync_obj_ref, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6612} $p2 := vmw_sync_obj_ref($p1);
    goto SeqInstr_859, SeqInstr_860;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  SeqInstr_861:
    $r := $p2;
    return;

  SeqInstr_859:
    assume !assertsPassed;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 1080576);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed, $M.6, $M.11, $M.12, $M.2, $CurrAddr, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i11 := $eq.ref(vmwgfx_pm_notifier, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i11 == 1);
    $i10 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i10 == 1);
    $i9 := $eq.ref(vmw_init_mem_type, $p0);
    assume true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 6613} $i3 := vmw_init_mem_type($p1, arg1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i10 == 1;
    call {:si_unique_call 6614} $i4 := __builtinx_object_size();
    $r := $i4;
    return;

  $bb4:
    assume $i11 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $i6 := $zext.i32.i64(arg1);
    $p7 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 6615} $i8 := vmwgfx_pm_notifier($p5, $i6, $p7);
    goto SeqInstr_862, SeqInstr_863;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  SeqInstr_864:
    $r := $i8;
    return;

  SeqInstr_862:
    assume !assertsPassed;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 1081608);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 1082640);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.6, $CurrAddr, $M.3, $M.4, $M.10, $M.13, $M.16;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i19 := $eq.ref(vmw_enable_vblank, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i19 == 1);
    $i18 := $eq.ref(vmw_get_vblank_counter, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i18 == 1);
    $i17 := $eq.ref(vmw_driver_load, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i17 == 1);
    $i16 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i16 == 1);
    $i15 := $eq.ref(vmw_gmrid_man_init, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i15 == 1);
    $i14 := $eq.ref(vmw_invalidate_caches, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume false;
    return;

  $bb2:
    assume $i14 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6616} $i2 := vmw_invalidate_caches($p1, arg1);
    $r := $i2;
    return;

  $bb3:
    assume $i15 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $i4 := $zext.i32.i64(arg1);
    call {:si_unique_call 6617} $i5 := vmw_gmrid_man_init($p3, $i4);
    $r := $i5;
    return;

  $bb4:
    assume $i16 == 1;
    call {:si_unique_call 6618} $i6 := __builtinx_object_size();
    $r := $i6;
    return;

  $bb5:
    assume $i17 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $i8 := $zext.i32.i64(arg1);
    call {:si_unique_call 6619} $i9 := vmw_driver_load($p7, $i8);
    goto SeqInstr_865, SeqInstr_866;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  SeqInstr_867:
    $r := $i9;
    return;

  SeqInstr_865:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i18 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6620} $i11 := vmw_get_vblank_counter($p10, arg1);
    $r := $i11;
    return;

  $bb7:
    assume $i19 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6621} $i13 := vmw_enable_vblank($p12, arg1);
    $r := $i13;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 1083672);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.6, $M.2, assertsPassed, $M.11, $M.12, $M.3, $M.4, $CurrAddr, $M.10, $M.16, $M.13;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i33 := $eq.ref(vmw_fb_imageblit, $p0);
    assume {:branchcond $i33} true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i33 == 1);
    $i32 := $eq.ref(vmw_fb_copyarea, $p0);
    assume {:branchcond $i32} true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i32 == 1);
    $i31 := $eq.ref(vmw_fb_fillrect, $p0);
    assume {:branchcond $i31} true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i31 == 1);
    $i30 := $eq.ref(vmw_master_destroy, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i30 == 1);
    $i29 := $eq.ref(vmw_postclose, $p0);
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i29 == 1);
    $i28 := $eq.ref(vmw_preclose, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i28 == 1);
    $i27 := $eq.ref(vmw_gmrid_man_debug, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i27 == 1);
    $i26 := $eq.ref(vmw_gmrid_man_put_node, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i26 == 1);
    $i25 := $eq.ref(vmw_ttm_io_mem_free, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i25 == 1);
    $i24 := $eq.ref(vmw_evict_flags, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i24 == 1);
    $i23 := $eq.ref(vmw_deferred_io, $p0);
    assume true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume false;
    return;

  $bb2:
    assume $i23 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 6622} vmw_deferred_io($p1, $p2);
    goto SeqInstr_868, SeqInstr_869;

  SeqInstr_869:
    assume assertsPassed;
    goto SeqInstr_870;

  SeqInstr_870:
    return;

  SeqInstr_868:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i24 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 6623} vmw_evict_flags($p3, $p4);
    return;

  $bb4:
    assume $i25 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 6624} vmw_ttm_io_mem_free($p5, $p6);
    return;

  $bb5:
    assume $i26 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 6625} vmw_gmrid_man_put_node($p7, $p8);
    return;

  $bb6:
    assume $i27 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 6626} vmw_gmrid_man_debug($p9, $p10);
    return;

  $bb7:
    assume $i28 == 1;
    $p11 := $bitcast.ref.ref(arg);
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 6627} vmw_preclose($p11, $p12);
    goto SeqInstr_871, SeqInstr_872;

  SeqInstr_872:
    assume assertsPassed;
    goto SeqInstr_873;

  SeqInstr_873:
    return;

  SeqInstr_871:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i29 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 6628} vmw_postclose($p13, $p14);
    return;

  $bb9:
    assume $i30 == 1;
    $p15 := $bitcast.ref.ref(arg);
    $p16 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 6629} vmw_master_destroy($p15, $p16);
    return;

  $bb10:
    assume $i31 == 1;
    $p17 := $bitcast.ref.ref(arg);
    $p18 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 6630} vmw_fb_fillrect($p17, $p18);
    return;

  $bb11:
    assume $i32 == 1;
    $p19 := $bitcast.ref.ref(arg);
    $p20 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 6631} vmw_fb_copyarea($p19, $p20);
    return;

  $bb12:
    assume $i33 == 1;
    $p21 := $bitcast.ref.ref(arg);
    $p22 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 6632} vmw_fb_imageblit($p21, $p22);
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 1084704);

procedure devirtbounce.8(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.6, assertsPassed, $M.2, $M.11, $M.12, $CurrAddr, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation devirtbounce.8(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i130 := $eq.ref(vmw_fence_obj_destroy_locked, $p0);
    assume {:branchcond $i130} true;
    goto $bb175, $bb173;

  $bb173:
    assume !($i130 == 1);
    $i129 := $eq.ref(vmw_framebuffer_surface_destroy, $p0);
    assume {:branchcond $i129} true;
    goto $bb174, $bb171;

  $bb171:
    assume !($i129 == 1);
    $i128 := $eq.ref(vmw_lastclose, $p0);
    assume {:branchcond $i128} true;
    goto $bb172, $bb169;

  $bb169:
    assume !($i128 == 1);
    $i127 := $eq.ref(vmw_sync_obj_unref, $p0);
    assume {:branchcond $i127} true;
    goto $bb170, $bb167;

  $bb167:
    assume !($i127 == 1);
    $i126 := $eq.ref(vmw_resource_release, $p0);
    assume {:branchcond $i126} true;
    goto $bb168, $bb165;

  $bb165:
    assume !($i126 == 1);
    $i125 := $eq.ref(vmw_user_fence_base_release, $p0);
    assume {:branchcond $i125} true;
    goto $bb166, $bb163;

  $bb163:
    assume !($i125 == 1);
    $i124 := $eq.ref(vmw_fence_work_func, $p0);
    assume {:branchcond $i124} true;
    goto $bb164, $bb161;

  $bb161:
    assume !($i124 == 1);
    $i123 := $eq.ref(vmw_event_fence_action_cleanup, $p0);
    assume {:branchcond $i123} true;
    goto $bb162, $bb159;

  $bb159:
    assume !($i123 == 1);
    $i122 := $eq.ref(vmw_user_surface_base_release, $p0);
    assume {:branchcond $i122} true;
    goto $bb160, $bb157;

  $bb157:
    assume !($i122 == 1);
    $i121 := $eq.ref(vmw_hw_surface_destroy, $p0);
    assume {:branchcond $i121} true;
    goto $bb158, $bb155;

  $bb155:
    assume !($i121 == 1);
    $i120 := $eq.ref(vmw_user_context_base_release, $p0);
    assume {:branchcond $i120} true;
    goto $bb156, $bb153;

  $bb153:
    assume !($i120 == 1);
    $i119 := $eq.ref(vmw_hw_context_destroy, $p0);
    assume {:branchcond $i119} true;
    goto $bb154, $bb151;

  $bb151:
    assume !($i119 == 1);
    $i118 := $eq.ref(vmw_user_stream_base_release, $p0);
    assume true;
    goto $bb152, $bb149;

  $bb149:
    assume !($i118 == 1);
    $i117 := $eq.ref(vmw_stream_destroy, $p0);
    assume true;
    goto $bb150, $bb147;

  $bb147:
    assume !($i117 == 1);
    $i116 := $eq.ref(vmw_pm_complete, $p0);
    assume {:branchcond $i116} true;
    goto $bb148, $bb145;

  $bb145:
    assume !($i116 == 1);
    $i115 := $eq.ref(vmw_ldu_connector_destroy, $p0);
    assume {:branchcond $i115} true;
    goto $bb146, $bb143;

  $bb143:
    assume !($i115 == 1);
    $i114 := $eq.ref(vmw_ldu_encoder_destroy, $p0);
    assume true;
    goto $bb144, $bb141;

  $bb141:
    assume !($i114 == 1);
    $i113 := $eq.ref(vmw_ldu_crtc_destroy, $p0);
    assume {:branchcond $i113} true;
    goto $bb142, $bb139;

  $bb139:
    assume !($i113 == 1);
    $i112 := $eq.ref(vmw_sou_connector_destroy, $p0);
    assume {:branchcond $i112} true;
    goto $bb140, $bb137;

  $bb137:
    assume !($i112 == 1);
    $i111 := $eq.ref(vmw_sou_encoder_destroy, $p0);
    assume {:branchcond $i111} true;
    goto $bb138, $bb135;

  $bb135:
    assume !($i111 == 1);
    $i110 := $eq.ref(vmw_sou_crtc_destroy, $p0);
    assume {:branchcond $i110} true;
    goto $bb136, $bb133;

  $bb133:
    assume !($i110 == 1);
    $i109 := $eq.ref(vmw_fence_obj_destroy_locked, $p0);
    assume {:branchcond $i109} true;
    goto $bb134, $bb131;

  $bb131:
    assume !($i109 == 1);
    $i108 := $eq.ref(vmw_framebuffer_surface_destroy, $p0);
    assume {:branchcond $i108} true;
    goto $bb132, $bb129;

  $bb129:
    assume !($i108 == 1);
    $i107 := $eq.ref(vmw_lastclose, $p0);
    assume {:branchcond $i107} true;
    goto $bb130, $bb127;

  $bb127:
    assume !($i107 == 1);
    $i106 := $eq.ref(vmw_sync_obj_unref, $p0);
    assume true;
    goto $bb128, $bb125;

  $bb125:
    assume !($i106 == 1);
    $i105 := $eq.ref(vmw_resource_release, $p0);
    assume true;
    goto $bb126, $bb123;

  $bb123:
    assume !($i105 == 1);
    $i104 := $eq.ref(vmw_user_fence_base_release, $p0);
    assume true;
    goto $bb124, $bb121;

  $bb121:
    assume !($i104 == 1);
    $i103 := $eq.ref(vmw_fence_work_func, $p0);
    assume {:branchcond $i103} true;
    goto $bb122, $bb119;

  $bb119:
    assume !($i103 == 1);
    $i102 := $eq.ref(vmw_event_fence_action_cleanup, $p0);
    assume true;
    goto $bb120, $bb117;

  $bb117:
    assume !($i102 == 1);
    $i101 := $eq.ref(vmw_user_surface_base_release, $p0);
    assume {:branchcond $i101} true;
    goto $bb118, $bb115;

  $bb115:
    assume !($i101 == 1);
    $i100 := $eq.ref(vmw_hw_surface_destroy, $p0);
    assume true;
    goto $bb116, $bb113;

  $bb113:
    assume !($i100 == 1);
    $i99 := $eq.ref(vmw_user_context_base_release, $p0);
    assume {:branchcond $i99} true;
    goto $bb114, $bb111;

  $bb111:
    assume !($i99 == 1);
    $i98 := $eq.ref(vmw_hw_context_destroy, $p0);
    assume true;
    goto $bb112, $bb109;

  $bb109:
    assume !($i98 == 1);
    $i97 := $eq.ref(vmw_user_stream_base_release, $p0);
    assume true;
    goto $bb110, $bb107;

  $bb107:
    assume !($i97 == 1);
    $i96 := $eq.ref(vmw_stream_destroy, $p0);
    assume {:branchcond $i96} true;
    goto $bb108, $bb105;

  $bb105:
    assume !($i96 == 1);
    $i95 := $eq.ref(vmw_pm_complete, $p0);
    assume true;
    goto $bb106, $bb103;

  $bb103:
    assume !($i95 == 1);
    $i94 := $eq.ref(vmw_ldu_connector_destroy, $p0);
    assume true;
    goto $bb104, $bb101;

  $bb101:
    assume !($i94 == 1);
    $i93 := $eq.ref(vmw_ldu_encoder_destroy, $p0);
    assume {:branchcond $i93} true;
    goto $bb102, $bb99;

  $bb99:
    assume !($i93 == 1);
    $i92 := $eq.ref(vmw_ldu_crtc_destroy, $p0);
    assume true;
    goto $bb100, $bb97;

  $bb97:
    assume !($i92 == 1);
    $i91 := $eq.ref(vmw_sou_connector_destroy, $p0);
    assume {:branchcond $i91} true;
    goto $bb98, $bb95;

  $bb95:
    assume !($i91 == 1);
    $i90 := $eq.ref(vmw_sou_encoder_destroy, $p0);
    assume true;
    goto $bb96, $bb93;

  $bb93:
    assume !($i90 == 1);
    $i89 := $eq.ref(vmw_sou_crtc_destroy, $p0);
    assume true;
    goto $bb94, $bb92;

  $bb92:
    assume !($i89 == 1);
    $i88 := $eq.ref(vmw_du_crtc_restore, $p0);
    assume {:branchcond $i88} true;
    goto $bb25, $bb91;

  $bb91:
    assume !($i88 == 1);
    $i87 := $eq.ref(vmw_du_crtc_save, $p0);
    assume {:branchcond $i87} true;
    goto $bb24, $bb90;

  $bb90:
    assume !($i87 == 1);
    $i86 := $eq.ref(vmw_du_connector_restore, $p0);
    assume {:branchcond $i86} true;
    goto $bb23, $bb89;

  $bb89:
    assume !($i86 == 1);
    $i85 := $eq.ref(vmw_du_connector_save, $p0);
    assume true;
    goto $bb22, $bb88;

  $bb88:
    assume !($i85 == 1);
    $i84 := $eq.ref(vmw_remove, $p0);
    assume true;
    goto $bb21, $bb87;

  $bb87:
    assume !($i84 == 1);
    $i83 := $eq.ref(vmw_user_dmabuf_release, $p0);
    assume {:branchcond $i83} true;
    goto $bb20, $bb86;

  $bb86:
    assume !($i83 == 1);
    $i82 := $eq.ref(vmw_user_dmabuf_destroy, $p0);
    assume {:branchcond $i82} true;
    goto $bb19, $bb85;

  $bb85:
    assume !($i82 == 1);
    $i81 := $eq.ref(vmw_user_stream_free, $p0);
    assume {:branchcond $i81} true;
    goto $bb18, $bb84;

  $bb84:
    assume !($i81 == 1);
    $i80 := $eq.ref(vmw_user_context_free, $p0);
    assume true;
    goto $bb17, $bb83;

  $bb83:
    assume !($i80 == 1);
    $i79 := $eq.ref(vmw_surface_remove_from_lists, $p0);
    assume true;
    goto $bb16, $bb82;

  $bb82:
    assume !($i79 == 1);
    $i78 := $eq.ref(vmw_event_fence_action_seq_passed, $p0);
    assume true;
    goto $bb15, $bb81;

  $bb81:
    assume !($i78 == 1);
    $i77 := $eq.ref(vmw_framebuffer_dmabuf_destroy, $p0);
    assume {:branchcond $i77} true;
    goto $bb14, $bb80;

  $bb80:
    assume !($i77 == 1);
    $i76 := $eq.ref(ttm_bo_global_release, $p0);
    assume true;
    goto $bb13, $bb79;

  $bb79:
    assume !($i76 == 1);
    $i75 := $eq.ref(vmw_ttm_mem_global_release, $p0);
    assume true;
    goto $bb12, $bb78;

  $bb78:
    assume !($i75 == 1);
    $i74 := $eq.ref(vmw_dmabuf_bo_free, $p0);
    assume true;
    goto $bb11, $bb77;

  $bb77:
    assume !($i74 == 1);
    $i73 := $eq.ref(vmw_user_surface_free, $p0);
    assume true;
    goto $bb10, $bb76;

  $bb76:
    assume !($i73 == 1);
    $i72 := $eq.ref(vmw_user_fence_destroy, $p0);
    assume {:branchcond $i72} true;
    goto $bb9, $bb75;

  $bb75:
    assume !($i72 == 1);
    $i71 := $eq.ref(vmw_fence_destroy, $p0);
    assume {:branchcond $i71} true;
    goto $bb8, $bb74;

  $bb74:
    assume !($i71 == 1);
    $i70 := $eq.ref(vmw_surface_res_free, $p0);
    assume true;
    goto $bb7, $bb73;

  $bb73:
    assume !($i70 == 1);
    $i69 := $eq.ref(vmw_irq_uninstall, $p0);
    assume true;
    goto $bb6, $bb72;

  $bb72:
    assume !($i69 == 1);
    $i68 := $eq.ref(vmw_irq_preinstall, $p0);
    assume {:branchcond $i68} true;
    goto $bb5, $bb71;

  $bb71:
    assume !($i68 == 1);
    $i67 := $eq.ref(vmw_ttm_destroy, $p0);
    assume {:branchcond $i67} true;
    goto $bb4, $bb70;

  $bb70:
    assume !($i67 == 1);
    $i66 := $eq.ref(ttm_pool_unpopulate, $p0);
    assume {:branchcond $i66} true;
    goto $bb3, $bb69;

  $bb69:
    assume !($i66 == 1);
    $i65 := $eq.ref(kfree, $p0);
    assume {:branchcond $i65} true;
    goto $bb2, $bb68;

  $bb68:
    assume !($i65 == 1);
    assume false;
    return;

  $bb2:
    assume $i65 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6633} kfree($p1);
    return;

  $bb3:
    assume $i66 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6634} ttm_pool_unpopulate($p2);
    return;

  $bb4:
    assume $i67 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6635} vmw_ttm_destroy($p3);
    return;

  $bb5:
    assume $i68 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6636} vmw_irq_preinstall($p4);
    return;

  $bb6:
    assume $i69 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6637} vmw_irq_uninstall($p5);
    goto SeqInstr_874, SeqInstr_875;

  SeqInstr_875:
    assume assertsPassed;
    goto SeqInstr_876;

  SeqInstr_876:
    return;

  SeqInstr_874:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i70 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6638} vmw_surface_res_free($p6);
    return;

  $bb8:
    assume $i71 == 1;
    call {:si_unique_call 6639} vmw_fence_destroy(arg);
    return;

  $bb9:
    assume $i72 == 1;
    call {:si_unique_call 6640} vmw_user_fence_destroy(arg);
    return;

  $bb10:
    assume $i73 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6641} vmw_user_surface_free($p7);
    return;

  $bb11:
    assume $i74 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6642} vmw_dmabuf_bo_free($p8);
    return;

  $bb12:
    assume $i75 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6643} vmw_ttm_mem_global_release($p9);
    return;

  $bb13:
    assume $i76 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6644} ttm_bo_global_release($p10);
    return;

  $bb14:
    assume $i77 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6645} vmw_framebuffer_dmabuf_destroy($p11);
    return;

  $bb15:
    assume $i78 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6646} vmw_event_fence_action_seq_passed($p12);
    return;

  $bb16:
    assume $i79 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6647} vmw_surface_remove_from_lists($p13);
    return;

  $bb17:
    assume $i80 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6648} vmw_user_context_free($p14);
    return;

  $bb18:
    assume $i81 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6649} vmw_user_stream_free($p15);
    return;

  $bb19:
    assume $i82 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6650} vmw_user_dmabuf_destroy($p16);
    return;

  $bb20:
    assume $i83 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6651} vmw_user_dmabuf_release($p17);
    return;

  $bb21:
    assume $i84 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6652} vmw_remove($p18);
    return;

  $bb22:
    assume $i85 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6653} vmw_du_connector_save($p19);
    return;

  $bb23:
    assume $i86 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6654} vmw_du_connector_restore($p20);
    return;

  $bb24:
    assume $i87 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6655} vmw_du_crtc_save($p21);
    return;

  $bb25:
    assume $i88 == 1;
    $p22 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6656} vmw_du_crtc_restore($p22);
    return;

  $bb94:
    assume $i89 == 1;
    goto $bb47;

  $bb47:
    $p44 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6678} vmw_sou_crtc_destroy($p44);
    goto SeqInstr_940, SeqInstr_941;

  SeqInstr_941:
    assume assertsPassed;
    goto SeqInstr_942;

  SeqInstr_942:
    return;

  SeqInstr_940:
    assume !assertsPassed;
    return;

  $bb96:
    assume $i90 == 1;
    goto $bb48;

  $bb48:
    $p45 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6679} vmw_sou_encoder_destroy($p45);
    goto SeqInstr_943, SeqInstr_944;

  SeqInstr_944:
    assume assertsPassed;
    goto SeqInstr_945;

  SeqInstr_945:
    return;

  SeqInstr_943:
    assume !assertsPassed;
    return;

  $bb98:
    assume $i91 == 1;
    goto $bb49;

  $bb49:
    $p46 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6680} vmw_sou_connector_destroy($p46);
    goto SeqInstr_946, SeqInstr_947;

  SeqInstr_947:
    assume assertsPassed;
    goto SeqInstr_948;

  SeqInstr_948:
    return;

  SeqInstr_946:
    assume !assertsPassed;
    return;

  $bb100:
    assume $i92 == 1;
    goto $bb50;

  $bb50:
    $p47 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6681} vmw_ldu_crtc_destroy($p47);
    goto SeqInstr_949, SeqInstr_950;

  SeqInstr_950:
    assume assertsPassed;
    goto SeqInstr_951;

  SeqInstr_951:
    return;

  SeqInstr_949:
    assume !assertsPassed;
    return;

  $bb102:
    assume $i93 == 1;
    goto $bb51;

  $bb51:
    $p48 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6682} vmw_ldu_encoder_destroy($p48);
    goto SeqInstr_952, SeqInstr_953;

  SeqInstr_953:
    assume assertsPassed;
    goto SeqInstr_954;

  SeqInstr_954:
    return;

  SeqInstr_952:
    assume !assertsPassed;
    return;

  $bb104:
    assume $i94 == 1;
    goto $bb52;

  $bb52:
    $p49 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6683} vmw_ldu_connector_destroy($p49);
    goto SeqInstr_955, SeqInstr_956;

  SeqInstr_956:
    assume assertsPassed;
    goto SeqInstr_957;

  SeqInstr_957:
    return;

  SeqInstr_955:
    assume !assertsPassed;
    return;

  $bb106:
    assume $i95 == 1;
    goto $bb53;

  $bb53:
    $p50 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6684} vmw_pm_complete($p50);
    goto SeqInstr_958, SeqInstr_959;

  SeqInstr_959:
    assume assertsPassed;
    goto SeqInstr_960;

  SeqInstr_960:
    return;

  SeqInstr_958:
    assume !assertsPassed;
    return;

  $bb108:
    assume $i96 == 1;
    goto $bb54;

  $bb54:
    $p51 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6685} vmw_stream_destroy($p51);
    goto SeqInstr_961, SeqInstr_962;

  SeqInstr_962:
    assume assertsPassed;
    goto SeqInstr_963;

  SeqInstr_963:
    return;

  SeqInstr_961:
    assume !assertsPassed;
    return;

  $bb110:
    assume $i97 == 1;
    goto $bb55;

  $bb55:
    $p52 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6686} vmw_user_stream_base_release($p52);
    goto SeqInstr_964, SeqInstr_965;

  SeqInstr_965:
    assume assertsPassed;
    goto SeqInstr_966;

  SeqInstr_966:
    return;

  SeqInstr_964:
    assume !assertsPassed;
    return;

  $bb112:
    assume $i98 == 1;
    goto $bb56;

  $bb56:
    $p53 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6687} vmw_hw_context_destroy($p53);
    goto SeqInstr_967, SeqInstr_968;

  SeqInstr_968:
    assume assertsPassed;
    goto SeqInstr_969;

  SeqInstr_969:
    return;

  SeqInstr_967:
    assume !assertsPassed;
    return;

  $bb114:
    assume $i99 == 1;
    goto $bb57;

  $bb57:
    $p54 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6688} vmw_user_context_base_release($p54);
    goto SeqInstr_970, SeqInstr_971;

  SeqInstr_971:
    assume assertsPassed;
    goto SeqInstr_972;

  SeqInstr_972:
    return;

  SeqInstr_970:
    assume !assertsPassed;
    return;

  $bb116:
    assume $i100 == 1;
    goto $bb58;

  $bb58:
    $p55 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6689} vmw_hw_surface_destroy($p55);
    goto SeqInstr_973, SeqInstr_974;

  SeqInstr_974:
    assume assertsPassed;
    goto SeqInstr_975;

  SeqInstr_975:
    return;

  SeqInstr_973:
    assume !assertsPassed;
    return;

  $bb118:
    assume $i101 == 1;
    goto $bb59;

  $bb59:
    $p56 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6690} vmw_user_surface_base_release($p56);
    goto SeqInstr_976, SeqInstr_977;

  SeqInstr_977:
    assume assertsPassed;
    goto SeqInstr_978;

  SeqInstr_978:
    return;

  SeqInstr_976:
    assume !assertsPassed;
    return;

  $bb120:
    assume $i102 == 1;
    goto $bb60;

  $bb60:
    $p57 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6691} vmw_event_fence_action_cleanup($p57);
    goto SeqInstr_979, SeqInstr_980;

  SeqInstr_980:
    assume assertsPassed;
    goto SeqInstr_981;

  SeqInstr_981:
    return;

  SeqInstr_979:
    assume !assertsPassed;
    return;

  $bb122:
    assume $i103 == 1;
    goto $bb61;

  $bb61:
    $p58 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6692} vmw_fence_work_func($p58);
    goto SeqInstr_982, SeqInstr_983;

  SeqInstr_983:
    assume assertsPassed;
    goto SeqInstr_984;

  SeqInstr_984:
    return;

  SeqInstr_982:
    assume !assertsPassed;
    return;

  $bb124:
    assume $i104 == 1;
    goto $bb62;

  $bb62:
    $p59 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6693} vmw_user_fence_base_release($p59);
    goto SeqInstr_985, SeqInstr_986;

  SeqInstr_986:
    assume assertsPassed;
    goto SeqInstr_987;

  SeqInstr_987:
    return;

  SeqInstr_985:
    assume !assertsPassed;
    return;

  $bb126:
    assume $i105 == 1;
    goto $bb63;

  $bb63:
    $p60 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6694} vmw_resource_release($p60);
    goto SeqInstr_988, SeqInstr_989;

  SeqInstr_989:
    assume assertsPassed;
    goto SeqInstr_990;

  SeqInstr_990:
    return;

  SeqInstr_988:
    assume !assertsPassed;
    return;

  $bb128:
    assume $i106 == 1;
    goto $bb64;

  $bb64:
    $p61 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6695} vmw_sync_obj_unref($p61);
    goto SeqInstr_991, SeqInstr_992;

  SeqInstr_992:
    assume assertsPassed;
    goto SeqInstr_993;

  SeqInstr_993:
    return;

  SeqInstr_991:
    assume !assertsPassed;
    return;

  $bb130:
    assume $i107 == 1;
    goto $bb65;

  $bb65:
    $p62 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6696} vmw_lastclose($p62);
    goto SeqInstr_994, SeqInstr_995;

  SeqInstr_995:
    assume assertsPassed;
    goto SeqInstr_996;

  SeqInstr_996:
    return;

  SeqInstr_994:
    assume !assertsPassed;
    return;

  $bb132:
    assume $i108 == 1;
    goto $bb66;

  $bb66:
    $p63 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6697} vmw_framebuffer_surface_destroy($p63);
    goto SeqInstr_997, SeqInstr_998;

  SeqInstr_998:
    assume assertsPassed;
    goto SeqInstr_999;

  SeqInstr_999:
    return;

  SeqInstr_997:
    assume !assertsPassed;
    return;

  $bb134:
    assume $i109 == 1;
    goto $bb67;

  $bb67:
    $p64 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6698} vmw_fence_obj_destroy_locked($p64);
    goto SeqInstr_1000, SeqInstr_1001;

  SeqInstr_1001:
    assume assertsPassed;
    goto SeqInstr_1002;

  SeqInstr_1002:
    return;

  SeqInstr_1000:
    assume !assertsPassed;
    return;

  $bb136:
    assume $i110 == 1;
    goto $bb47;

  $bb138:
    assume $i111 == 1;
    goto $bb48;

  $bb140:
    assume $i112 == 1;
    goto $bb49;

  $bb142:
    assume $i113 == 1;
    goto $bb50;

  $bb144:
    assume $i114 == 1;
    goto $bb51;

  $bb146:
    assume $i115 == 1;
    goto $bb52;

  $bb148:
    assume $i116 == 1;
    goto $bb53;

  $bb150:
    assume $i117 == 1;
    goto $bb54;

  $bb152:
    assume $i118 == 1;
    goto $bb55;

  $bb154:
    assume $i119 == 1;
    goto $bb56;

  $bb156:
    assume $i120 == 1;
    goto $bb57;

  $bb158:
    assume $i121 == 1;
    goto $bb58;

  $bb160:
    assume $i122 == 1;
    goto $bb59;

  $bb162:
    assume $i123 == 1;
    goto $bb60;

  $bb164:
    assume $i124 == 1;
    goto $bb61;

  $bb166:
    assume $i125 == 1;
    goto $bb62;

  $bb168:
    assume $i126 == 1;
    goto $bb63;

  $bb170:
    assume $i127 == 1;
    goto $bb64;

  $bb172:
    assume $i128 == 1;
    goto $bb65;

  $bb174:
    assume $i129 == 1;
    goto $bb66;

  $bb175:
    assume $i130 == 1;
    goto $bb67;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 1085736);

procedure devirtbounce.9(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.1, assertsPassed, $M.2, $M.11, $M.12, $CurrAddr, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation devirtbounce.9(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i88 := $eq.ref(vmw_sou_crtc_destroy, $p0);
    assume {:branchcond $i88} true;
    goto $bb46, $bb91;

  $bb91:
    assume !($i88 == 1);
    $i87 := $eq.ref(vmw_sou_encoder_destroy, $p0);
    assume {:branchcond $i87} true;
    goto $bb45, $bb90;

  $bb90:
    assume !($i87 == 1);
    $i86 := $eq.ref(vmw_sou_connector_destroy, $p0);
    assume {:branchcond $i86} true;
    goto $bb44, $bb89;

  $bb89:
    assume !($i86 == 1);
    $i85 := $eq.ref(vmw_ldu_crtc_destroy, $p0);
    assume true;
    goto $bb43, $bb88;

  $bb88:
    assume !($i85 == 1);
    $i84 := $eq.ref(vmw_du_crtc_restore, $p0);
    assume true;
    goto $bb42, $bb87;

  $bb87:
    assume !($i84 == 1);
    $i83 := $eq.ref(vmw_du_crtc_save, $p0);
    assume {:branchcond $i83} true;
    goto $bb41, $bb86;

  $bb86:
    assume !($i83 == 1);
    $i82 := $eq.ref(vmw_ldu_encoder_destroy, $p0);
    assume {:branchcond $i82} true;
    goto $bb40, $bb85;

  $bb85:
    assume !($i82 == 1);
    $i81 := $eq.ref(vmw_ldu_connector_destroy, $p0);
    assume {:branchcond $i81} true;
    goto $bb39, $bb84;

  $bb84:
    assume !($i81 == 1);
    $i80 := $eq.ref(vmw_du_connector_restore, $p0);
    assume true;
    goto $bb38, $bb83;

  $bb83:
    assume !($i80 == 1);
    $i79 := $eq.ref(vmw_du_connector_save, $p0);
    assume true;
    goto $bb37, $bb82;

  $bb82:
    assume !($i79 == 1);
    $i78 := $eq.ref(vmw_ttm_destroy, $p0);
    assume true;
    goto $bb36, $bb81;

  $bb81:
    assume !($i78 == 1);
    $i77 := $eq.ref(vmw_pm_complete, $p0);
    assume {:branchcond $i77} true;
    goto $bb35, $bb80;

  $bb80:
    assume !($i77 == 1);
    $i76 := $eq.ref(vmw_remove, $p0);
    assume true;
    goto $bb34, $bb79;

  $bb79:
    assume !($i76 == 1);
    $i75 := $eq.ref(vmw_user_dmabuf_release, $p0);
    assume true;
    goto $bb33, $bb78;

  $bb78:
    assume !($i75 == 1);
    $i74 := $eq.ref(vmw_user_dmabuf_destroy, $p0);
    assume true;
    goto $bb32, $bb77;

  $bb77:
    assume !($i74 == 1);
    $i73 := $eq.ref(vmw_stream_destroy, $p0);
    assume true;
    goto $bb31, $bb76;

  $bb76:
    assume !($i73 == 1);
    $i72 := $eq.ref(vmw_user_stream_base_release, $p0);
    assume {:branchcond $i72} true;
    goto $bb30, $bb75;

  $bb75:
    assume !($i72 == 1);
    $i71 := $eq.ref(vmw_user_stream_free, $p0);
    assume {:branchcond $i71} true;
    goto $bb29, $bb74;

  $bb74:
    assume !($i71 == 1);
    $i70 := $eq.ref(vmw_hw_context_destroy, $p0);
    assume true;
    goto $bb28, $bb73;

  $bb73:
    assume !($i70 == 1);
    $i69 := $eq.ref(vmw_user_context_base_release, $p0);
    assume true;
    goto $bb27, $bb72;

  $bb72:
    assume !($i69 == 1);
    $i68 := $eq.ref(vmw_user_context_free, $p0);
    assume {:branchcond $i68} true;
    goto $bb26, $bb71;

  $bb71:
    assume !($i68 == 1);
    $i67 := $eq.ref(vmw_hw_surface_destroy, $p0);
    assume {:branchcond $i67} true;
    goto $bb25, $bb70;

  $bb70:
    assume !($i67 == 1);
    $i66 := $eq.ref(vmw_surface_remove_from_lists, $p0);
    assume {:branchcond $i66} true;
    goto $bb24, $bb69;

  $bb69:
    assume !($i66 == 1);
    $i65 := $eq.ref(vmw_user_surface_base_release, $p0);
    assume {:branchcond $i65} true;
    goto $bb23, $bb68;

  $bb68:
    assume !($i65 == 1);
    $i64 := $eq.ref(vmw_event_fence_action_cleanup, $p0);
    assume true;
    goto $bb22, $bb67;

  $bb67:
    assume !($i64 == 1);
    $i63 := $eq.ref(vmw_event_fence_action_seq_passed, $p0);
    assume true;
    goto $bb21, $bb66;

  $bb66:
    assume !($i63 == 1);
    $i62 := $eq.ref(ttm_bo_global_release, $p0);
    assume true;
    goto $bb20, $bb65;

  $bb65:
    assume !($i62 == 1);
    $i61 := $eq.ref(vmw_ttm_mem_global_release, $p0);
    assume true;
    goto $bb19, $bb64;

  $bb64:
    assume !($i61 == 1);
    $i60 := $eq.ref(vmw_fence_work_func, $p0);
    assume true;
    goto $bb18, $bb63;

  $bb63:
    assume !($i60 == 1);
    $i59 := $eq.ref(vmw_dmabuf_bo_free, $p0);
    assume true;
    goto $bb17, $bb62;

  $bb62:
    assume !($i59 == 1);
    $i58 := $eq.ref(vmw_irq_uninstall, $p0);
    assume true;
    goto $bb16, $bb61;

  $bb61:
    assume !($i58 == 1);
    $i57 := $eq.ref(vmw_irq_preinstall, $p0);
    assume {:branchcond $i57} true;
    goto $bb15, $bb60;

  $bb60:
    assume !($i57 == 1);
    $i56 := $eq.ref(vmw_lastclose, $p0);
    assume true;
    goto $bb14, $bb59;

  $bb59:
    assume !($i56 == 1);
    $i55 := $eq.ref(vmw_framebuffer_surface_destroy, $p0);
    assume true;
    goto $bb13, $bb58;

  $bb58:
    assume !($i55 == 1);
    $i54 := $eq.ref(vmw_surface_res_free, $p0);
    assume true;
    goto $bb12, $bb57;

  $bb57:
    assume !($i54 == 1);
    $i53 := $eq.ref(vmw_framebuffer_dmabuf_destroy, $p0);
    assume true;
    goto $bb11, $bb56;

  $bb56:
    assume !($i53 == 1);
    $i52 := $eq.ref(vmw_user_surface_free, $p0);
    assume {:branchcond $i52} true;
    goto $bb10, $bb55;

  $bb55:
    assume !($i52 == 1);
    $i51 := $eq.ref(vmw_user_fence_base_release, $p0);
    assume true;
    goto $bb9, $bb54;

  $bb54:
    assume !($i51 == 1);
    $i50 := $eq.ref(vmw_user_fence_destroy, $p0);
    assume true;
    goto $bb8, $bb53;

  $bb53:
    assume !($i50 == 1);
    $i49 := $eq.ref(vmw_fence_destroy, $p0);
    assume true;
    goto $bb7, $bb52;

  $bb52:
    assume !($i49 == 1);
    $i48 := $eq.ref(vmw_resource_release, $p0);
    assume true;
    goto $bb6, $bb51;

  $bb51:
    assume !($i48 == 1);
    $i47 := $eq.ref(kfree, $p0);
    assume true;
    goto $bb5, $bb50;

  $bb50:
    assume !($i47 == 1);
    $i46 := $eq.ref(vmw_fence_obj_destroy_locked, $p0);
    assume true;
    goto $bb4, $bb49;

  $bb49:
    assume !($i46 == 1);
    $i45 := $eq.ref(vmw_sync_obj_unref, $p0);
    assume true;
    goto $bb3, $bb48;

  $bb48:
    assume !($i45 == 1);
    $i44 := $eq.ref(ttm_pool_unpopulate, $p0);
    assume {:branchcond $i44} true;
    goto $bb2, $bb47;

  $bb47:
    assume !($i44 == 1);
    assume false;
    return;

  $bb2:
    assume $i44 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6699} ttm_pool_unpopulate($p1);
    return;

  $bb3:
    assume $i45 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6700} vmw_sync_obj_unref($p2);
    goto SeqInstr_1003, SeqInstr_1004;

  SeqInstr_1004:
    assume assertsPassed;
    goto SeqInstr_1005;

  SeqInstr_1005:
    return;

  SeqInstr_1003:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i46 == 1;
    call {:si_unique_call 6701} vmw_fence_obj_destroy_locked(arg);
    goto SeqInstr_1006, SeqInstr_1007;

  SeqInstr_1007:
    assume assertsPassed;
    goto SeqInstr_1008;

  SeqInstr_1008:
    return;

  SeqInstr_1006:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i47 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6702} kfree($p3);
    return;

  $bb6:
    assume $i48 == 1;
    call {:si_unique_call 6703} vmw_resource_release(arg);
    goto SeqInstr_1009, SeqInstr_1010;

  SeqInstr_1010:
    assume assertsPassed;
    goto SeqInstr_1011;

  SeqInstr_1011:
    return;

  SeqInstr_1009:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i49 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6704} vmw_fence_destroy($p4);
    return;

  $bb8:
    assume $i50 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6705} vmw_user_fence_destroy($p5);
    return;

  $bb9:
    assume $i51 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6706} vmw_user_fence_base_release($p6);
    goto SeqInstr_1012, SeqInstr_1013;

  SeqInstr_1013:
    assume assertsPassed;
    goto SeqInstr_1014;

  SeqInstr_1014:
    return;

  SeqInstr_1012:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i52 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6707} vmw_user_surface_free($p7);
    return;

  $bb11:
    assume $i53 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6708} vmw_framebuffer_dmabuf_destroy($p8);
    return;

  $bb12:
    assume $i54 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6709} vmw_surface_res_free($p9);
    return;

  $bb13:
    assume $i55 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6710} vmw_framebuffer_surface_destroy($p10);
    goto SeqInstr_1015, SeqInstr_1016;

  SeqInstr_1016:
    assume assertsPassed;
    goto SeqInstr_1017;

  SeqInstr_1017:
    return;

  SeqInstr_1015:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i56 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6711} vmw_lastclose($p11);
    goto SeqInstr_1018, SeqInstr_1019;

  SeqInstr_1019:
    assume assertsPassed;
    goto SeqInstr_1020;

  SeqInstr_1020:
    return;

  SeqInstr_1018:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i57 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6712} vmw_irq_preinstall($p12);
    return;

  $bb16:
    assume $i58 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6713} vmw_irq_uninstall($p13);
    goto SeqInstr_1021, SeqInstr_1022;

  SeqInstr_1022:
    assume assertsPassed;
    goto SeqInstr_1023;

  SeqInstr_1023:
    return;

  SeqInstr_1021:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i59 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6714} vmw_dmabuf_bo_free($p14);
    return;

  $bb18:
    assume $i60 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6715} vmw_fence_work_func($p15);
    goto SeqInstr_1024, SeqInstr_1025;

  SeqInstr_1025:
    assume assertsPassed;
    goto SeqInstr_1026;

  SeqInstr_1026:
    return;

  SeqInstr_1024:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i61 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6716} vmw_ttm_mem_global_release($p16);
    return;

  $bb20:
    assume $i62 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6717} ttm_bo_global_release($p17);
    return;

  $bb21:
    assume $i63 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6718} vmw_event_fence_action_seq_passed($p18);
    return;

  $bb22:
    assume $i64 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6719} vmw_event_fence_action_cleanup($p19);
    goto SeqInstr_1027, SeqInstr_1028;

  SeqInstr_1028:
    assume assertsPassed;
    goto SeqInstr_1029;

  SeqInstr_1029:
    return;

  SeqInstr_1027:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i65 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6720} vmw_user_surface_base_release($p20);
    goto SeqInstr_1030, SeqInstr_1031;

  SeqInstr_1031:
    assume assertsPassed;
    goto SeqInstr_1032;

  SeqInstr_1032:
    return;

  SeqInstr_1030:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i66 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6721} vmw_surface_remove_from_lists($p21);
    return;

  $bb25:
    assume $i67 == 1;
    $p22 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6722} vmw_hw_surface_destroy($p22);
    goto SeqInstr_1033, SeqInstr_1034;

  SeqInstr_1034:
    assume assertsPassed;
    goto SeqInstr_1035;

  SeqInstr_1035:
    return;

  SeqInstr_1033:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i68 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6723} vmw_user_context_free($p23);
    return;

  $bb27:
    assume $i69 == 1;
    $p24 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6724} vmw_user_context_base_release($p24);
    goto SeqInstr_1036, SeqInstr_1037;

  SeqInstr_1037:
    assume assertsPassed;
    goto SeqInstr_1038;

  SeqInstr_1038:
    return;

  SeqInstr_1036:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i70 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6725} vmw_hw_context_destroy($p25);
    goto SeqInstr_1039, SeqInstr_1040;

  SeqInstr_1040:
    assume assertsPassed;
    goto SeqInstr_1041;

  SeqInstr_1041:
    return;

  SeqInstr_1039:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i71 == 1;
    $p26 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6726} vmw_user_stream_free($p26);
    return;

  $bb30:
    assume $i72 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6727} vmw_user_stream_base_release($p27);
    goto SeqInstr_1042, SeqInstr_1043;

  SeqInstr_1043:
    assume assertsPassed;
    goto SeqInstr_1044;

  SeqInstr_1044:
    return;

  SeqInstr_1042:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i73 == 1;
    $p28 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6728} vmw_stream_destroy($p28);
    goto SeqInstr_1045, SeqInstr_1046;

  SeqInstr_1046:
    assume assertsPassed;
    goto SeqInstr_1047;

  SeqInstr_1047:
    return;

  SeqInstr_1045:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i74 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6729} vmw_user_dmabuf_destroy($p29);
    return;

  $bb33:
    assume $i75 == 1;
    $p30 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6730} vmw_user_dmabuf_release($p30);
    return;

  $bb34:
    assume $i76 == 1;
    $p31 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6731} vmw_remove($p31);
    return;

  $bb35:
    assume $i77 == 1;
    $p32 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6732} vmw_pm_complete($p32);
    goto SeqInstr_1048, SeqInstr_1049;

  SeqInstr_1049:
    assume assertsPassed;
    goto SeqInstr_1050;

  SeqInstr_1050:
    return;

  SeqInstr_1048:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i78 == 1;
    $p33 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6733} vmw_ttm_destroy($p33);
    return;

  $bb37:
    assume $i79 == 1;
    $p34 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6734} vmw_du_connector_save($p34);
    return;

  $bb38:
    assume $i80 == 1;
    $p35 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6735} vmw_du_connector_restore($p35);
    return;

  $bb39:
    assume $i81 == 1;
    $p36 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6736} vmw_ldu_connector_destroy($p36);
    goto SeqInstr_1051, SeqInstr_1052;

  SeqInstr_1052:
    assume assertsPassed;
    goto SeqInstr_1053;

  SeqInstr_1053:
    return;

  SeqInstr_1051:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i82 == 1;
    $p37 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6737} vmw_ldu_encoder_destroy($p37);
    goto SeqInstr_1054, SeqInstr_1055;

  SeqInstr_1055:
    assume assertsPassed;
    goto SeqInstr_1056;

  SeqInstr_1056:
    return;

  SeqInstr_1054:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i83 == 1;
    $p38 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6738} vmw_du_crtc_save($p38);
    return;

  $bb42:
    assume $i84 == 1;
    $p39 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6739} vmw_du_crtc_restore($p39);
    return;

  $bb43:
    assume $i85 == 1;
    $p40 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6740} vmw_ldu_crtc_destroy($p40);
    goto SeqInstr_1057, SeqInstr_1058;

  SeqInstr_1058:
    assume assertsPassed;
    goto SeqInstr_1059;

  SeqInstr_1059:
    return;

  SeqInstr_1057:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i86 == 1;
    $p41 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6741} vmw_sou_connector_destroy($p41);
    goto SeqInstr_1060, SeqInstr_1061;

  SeqInstr_1061:
    assume assertsPassed;
    goto SeqInstr_1062;

  SeqInstr_1062:
    return;

  SeqInstr_1060:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i87 == 1;
    $p42 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6742} vmw_sou_encoder_destroy($p42);
    goto SeqInstr_1063, SeqInstr_1064;

  SeqInstr_1064:
    assume assertsPassed;
    goto SeqInstr_1065;

  SeqInstr_1065:
    return;

  SeqInstr_1063:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i88 == 1;
    $p43 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6743} vmw_sou_crtc_destroy($p43);
    goto SeqInstr_1066, SeqInstr_1067;

  SeqInstr_1067:
    assume assertsPassed;
    goto SeqInstr_1068;

  SeqInstr_1068:
    return;

  SeqInstr_1066:
    assume !assertsPassed;
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 1086768);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 1087800);

procedure devirtbounce.11(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.6, assertsPassed, $M.2, $M.11, $M.12, $CurrAddr, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation devirtbounce.11(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i129 := $eq.ref(vmw_fence_obj_destroy_locked, $p0);
    assume {:branchcond $i129} true;
    goto $bb175, $bb173;

  $bb173:
    assume !($i129 == 1);
    $i128 := $eq.ref(vmw_framebuffer_surface_destroy, $p0);
    assume {:branchcond $i128} true;
    goto $bb174, $bb171;

  $bb171:
    assume !($i128 == 1);
    $i127 := $eq.ref(vmw_lastclose, $p0);
    assume {:branchcond $i127} true;
    goto $bb172, $bb169;

  $bb169:
    assume !($i127 == 1);
    $i126 := $eq.ref(vmw_sync_obj_unref, $p0);
    assume {:branchcond $i126} true;
    goto $bb170, $bb167;

  $bb167:
    assume !($i126 == 1);
    $i125 := $eq.ref(vmw_resource_release, $p0);
    assume {:branchcond $i125} true;
    goto $bb168, $bb165;

  $bb165:
    assume !($i125 == 1);
    $i124 := $eq.ref(vmw_user_fence_base_release, $p0);
    assume {:branchcond $i124} true;
    goto $bb166, $bb163;

  $bb163:
    assume !($i124 == 1);
    $i123 := $eq.ref(vmw_fence_work_func, $p0);
    assume {:branchcond $i123} true;
    goto $bb164, $bb161;

  $bb161:
    assume !($i123 == 1);
    $i122 := $eq.ref(vmw_event_fence_action_cleanup, $p0);
    assume {:branchcond $i122} true;
    goto $bb162, $bb159;

  $bb159:
    assume !($i122 == 1);
    $i121 := $eq.ref(vmw_user_surface_base_release, $p0);
    assume {:branchcond $i121} true;
    goto $bb160, $bb157;

  $bb157:
    assume !($i121 == 1);
    $i120 := $eq.ref(vmw_hw_surface_destroy, $p0);
    assume {:branchcond $i120} true;
    goto $bb158, $bb155;

  $bb155:
    assume !($i120 == 1);
    $i119 := $eq.ref(vmw_user_context_base_release, $p0);
    assume {:branchcond $i119} true;
    goto $bb156, $bb153;

  $bb153:
    assume !($i119 == 1);
    $i118 := $eq.ref(vmw_hw_context_destroy, $p0);
    assume true;
    goto $bb154, $bb151;

  $bb151:
    assume !($i118 == 1);
    $i117 := $eq.ref(vmw_user_stream_base_release, $p0);
    assume true;
    goto $bb152, $bb149;

  $bb149:
    assume !($i117 == 1);
    $i116 := $eq.ref(vmw_stream_destroy, $p0);
    assume {:branchcond $i116} true;
    goto $bb150, $bb147;

  $bb147:
    assume !($i116 == 1);
    $i115 := $eq.ref(vmw_pm_complete, $p0);
    assume {:branchcond $i115} true;
    goto $bb148, $bb145;

  $bb145:
    assume !($i115 == 1);
    $i114 := $eq.ref(vmw_ldu_connector_destroy, $p0);
    assume true;
    goto $bb146, $bb143;

  $bb143:
    assume !($i114 == 1);
    $i113 := $eq.ref(vmw_ldu_encoder_destroy, $p0);
    assume {:branchcond $i113} true;
    goto $bb144, $bb141;

  $bb141:
    assume !($i113 == 1);
    $i112 := $eq.ref(vmw_ldu_crtc_destroy, $p0);
    assume {:branchcond $i112} true;
    goto $bb142, $bb139;

  $bb139:
    assume !($i112 == 1);
    $i111 := $eq.ref(vmw_sou_connector_destroy, $p0);
    assume {:branchcond $i111} true;
    goto $bb140, $bb137;

  $bb137:
    assume !($i111 == 1);
    $i110 := $eq.ref(vmw_sou_encoder_destroy, $p0);
    assume {:branchcond $i110} true;
    goto $bb138, $bb135;

  $bb135:
    assume !($i110 == 1);
    $i109 := $eq.ref(vmw_sou_crtc_destroy, $p0);
    assume {:branchcond $i109} true;
    goto $bb136, $bb133;

  $bb133:
    assume !($i109 == 1);
    $i108 := $eq.ref(vmw_fence_obj_destroy_locked, $p0);
    assume {:branchcond $i108} true;
    goto $bb134, $bb131;

  $bb131:
    assume !($i108 == 1);
    $i107 := $eq.ref(vmw_framebuffer_surface_destroy, $p0);
    assume {:branchcond $i107} true;
    goto $bb132, $bb129;

  $bb129:
    assume !($i107 == 1);
    $i106 := $eq.ref(vmw_lastclose, $p0);
    assume true;
    goto $bb130, $bb127;

  $bb127:
    assume !($i106 == 1);
    $i105 := $eq.ref(vmw_sync_obj_unref, $p0);
    assume true;
    goto $bb128, $bb125;

  $bb125:
    assume !($i105 == 1);
    $i104 := $eq.ref(vmw_resource_release, $p0);
    assume true;
    goto $bb126, $bb123;

  $bb123:
    assume !($i104 == 1);
    $i103 := $eq.ref(vmw_user_fence_base_release, $p0);
    assume {:branchcond $i103} true;
    goto $bb124, $bb121;

  $bb121:
    assume !($i103 == 1);
    $i102 := $eq.ref(vmw_fence_work_func, $p0);
    assume true;
    goto $bb122, $bb119;

  $bb119:
    assume !($i102 == 1);
    $i101 := $eq.ref(vmw_event_fence_action_cleanup, $p0);
    assume {:branchcond $i101} true;
    goto $bb120, $bb117;

  $bb117:
    assume !($i101 == 1);
    $i100 := $eq.ref(vmw_user_surface_base_release, $p0);
    assume true;
    goto $bb118, $bb115;

  $bb115:
    assume !($i100 == 1);
    $i99 := $eq.ref(vmw_hw_surface_destroy, $p0);
    assume {:branchcond $i99} true;
    goto $bb116, $bb113;

  $bb113:
    assume !($i99 == 1);
    $i98 := $eq.ref(vmw_user_context_base_release, $p0);
    assume true;
    goto $bb114, $bb111;

  $bb111:
    assume !($i98 == 1);
    $i97 := $eq.ref(vmw_hw_context_destroy, $p0);
    assume true;
    goto $bb112, $bb109;

  $bb109:
    assume !($i97 == 1);
    $i96 := $eq.ref(vmw_user_stream_base_release, $p0);
    assume {:branchcond $i96} true;
    goto $bb110, $bb107;

  $bb107:
    assume !($i96 == 1);
    $i95 := $eq.ref(vmw_stream_destroy, $p0);
    assume true;
    goto $bb108, $bb105;

  $bb105:
    assume !($i95 == 1);
    $i94 := $eq.ref(vmw_pm_complete, $p0);
    assume true;
    goto $bb106, $bb103;

  $bb103:
    assume !($i94 == 1);
    $i93 := $eq.ref(vmw_ldu_connector_destroy, $p0);
    assume {:branchcond $i93} true;
    goto $bb104, $bb101;

  $bb101:
    assume !($i93 == 1);
    $i92 := $eq.ref(vmw_ldu_encoder_destroy, $p0);
    assume true;
    goto $bb102, $bb99;

  $bb99:
    assume !($i92 == 1);
    $i91 := $eq.ref(vmw_ldu_crtc_destroy, $p0);
    assume {:branchcond $i91} true;
    goto $bb100, $bb97;

  $bb97:
    assume !($i91 == 1);
    $i90 := $eq.ref(vmw_sou_connector_destroy, $p0);
    assume true;
    goto $bb98, $bb95;

  $bb95:
    assume !($i90 == 1);
    $i89 := $eq.ref(vmw_sou_encoder_destroy, $p0);
    assume true;
    goto $bb96, $bb93;

  $bb93:
    assume !($i89 == 1);
    $i88 := $eq.ref(vmw_sou_crtc_destroy, $p0);
    assume {:branchcond $i88} true;
    goto $bb94, $bb92;

  $bb92:
    assume !($i88 == 1);
    $i87 := $eq.ref(vmw_du_crtc_restore, $p0);
    assume {:branchcond $i87} true;
    goto $bb25, $bb91;

  $bb91:
    assume !($i87 == 1);
    $i86 := $eq.ref(vmw_du_crtc_save, $p0);
    assume {:branchcond $i86} true;
    goto $bb24, $bb90;

  $bb90:
    assume !($i86 == 1);
    $i85 := $eq.ref(vmw_du_connector_restore, $p0);
    assume true;
    goto $bb23, $bb89;

  $bb89:
    assume !($i85 == 1);
    $i84 := $eq.ref(vmw_du_connector_save, $p0);
    assume true;
    goto $bb22, $bb88;

  $bb88:
    assume !($i84 == 1);
    $i83 := $eq.ref(vmw_remove, $p0);
    assume {:branchcond $i83} true;
    goto $bb21, $bb87;

  $bb87:
    assume !($i83 == 1);
    $i82 := $eq.ref(vmw_user_dmabuf_release, $p0);
    assume {:branchcond $i82} true;
    goto $bb20, $bb86;

  $bb86:
    assume !($i82 == 1);
    $i81 := $eq.ref(vmw_user_dmabuf_destroy, $p0);
    assume {:branchcond $i81} true;
    goto $bb19, $bb85;

  $bb85:
    assume !($i81 == 1);
    $i80 := $eq.ref(vmw_user_stream_free, $p0);
    assume true;
    goto $bb18, $bb84;

  $bb84:
    assume !($i80 == 1);
    $i79 := $eq.ref(vmw_user_context_free, $p0);
    assume true;
    goto $bb17, $bb83;

  $bb83:
    assume !($i79 == 1);
    $i78 := $eq.ref(vmw_surface_remove_from_lists, $p0);
    assume true;
    goto $bb16, $bb82;

  $bb82:
    assume !($i78 == 1);
    $i77 := $eq.ref(vmw_event_fence_action_seq_passed, $p0);
    assume {:branchcond $i77} true;
    goto $bb15, $bb81;

  $bb81:
    assume !($i77 == 1);
    $i76 := $eq.ref(vmw_framebuffer_dmabuf_destroy, $p0);
    assume true;
    goto $bb14, $bb80;

  $bb80:
    assume !($i76 == 1);
    $i75 := $eq.ref(ttm_bo_global_release, $p0);
    assume true;
    goto $bb13, $bb79;

  $bb79:
    assume !($i75 == 1);
    $i74 := $eq.ref(vmw_ttm_mem_global_release, $p0);
    assume true;
    goto $bb12, $bb78;

  $bb78:
    assume !($i74 == 1);
    $i73 := $eq.ref(vmw_dmabuf_bo_free, $p0);
    assume true;
    goto $bb11, $bb77;

  $bb77:
    assume !($i73 == 1);
    $i72 := $eq.ref(vmw_user_surface_free, $p0);
    assume {:branchcond $i72} true;
    goto $bb10, $bb76;

  $bb76:
    assume !($i72 == 1);
    $i71 := $eq.ref(vmw_user_fence_destroy, $p0);
    assume {:branchcond $i71} true;
    goto $bb9, $bb75;

  $bb75:
    assume !($i71 == 1);
    $i70 := $eq.ref(vmw_fence_destroy, $p0);
    assume true;
    goto $bb8, $bb74;

  $bb74:
    assume !($i70 == 1);
    $i69 := $eq.ref(vmw_surface_res_free, $p0);
    assume true;
    goto $bb7, $bb73;

  $bb73:
    assume !($i69 == 1);
    $i68 := $eq.ref(vmw_irq_uninstall, $p0);
    assume {:branchcond $i68} true;
    goto $bb6, $bb72;

  $bb72:
    assume !($i68 == 1);
    $i67 := $eq.ref(vmw_irq_preinstall, $p0);
    assume {:branchcond $i67} true;
    goto $bb5, $bb71;

  $bb71:
    assume !($i67 == 1);
    $i66 := $eq.ref(vmw_ttm_destroy, $p0);
    assume {:branchcond $i66} true;
    goto $bb4, $bb70;

  $bb70:
    assume !($i66 == 1);
    $i65 := $eq.ref(ttm_pool_unpopulate, $p0);
    assume {:branchcond $i65} true;
    goto $bb3, $bb69;

  $bb69:
    assume !($i65 == 1);
    $i64 := $eq.ref(kfree, $p0);
    assume true;
    goto $bb2, $bb68;

  $bb68:
    assume !($i64 == 1);
    assume false;
    return;

  $bb2:
    assume $i64 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6744} kfree($p1);
    return;

  $bb3:
    assume $i65 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6745} ttm_pool_unpopulate($p2);
    return;

  $bb4:
    assume $i66 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6746} vmw_ttm_destroy($p3);
    return;

  $bb5:
    assume $i67 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6747} vmw_irq_preinstall($p4);
    return;

  $bb6:
    assume $i68 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6748} vmw_irq_uninstall($p5);
    goto SeqInstr_1069, SeqInstr_1070;

  SeqInstr_1070:
    assume assertsPassed;
    goto SeqInstr_1071;

  SeqInstr_1071:
    return;

  SeqInstr_1069:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i69 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6749} vmw_surface_res_free($p6);
    return;

  $bb8:
    assume $i70 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6750} vmw_fence_destroy($p7);
    return;

  $bb9:
    assume $i71 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6751} vmw_user_fence_destroy($p8);
    return;

  $bb10:
    assume $i72 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6752} vmw_user_surface_free($p9);
    return;

  $bb11:
    assume $i73 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6753} vmw_dmabuf_bo_free($p10);
    return;

  $bb12:
    assume $i74 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6754} vmw_ttm_mem_global_release($p11);
    return;

  $bb13:
    assume $i75 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6755} ttm_bo_global_release($p12);
    return;

  $bb14:
    assume $i76 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6756} vmw_framebuffer_dmabuf_destroy($p13);
    return;

  $bb15:
    assume $i77 == 1;
    call {:si_unique_call 6757} vmw_event_fence_action_seq_passed(arg);
    return;

  $bb16:
    assume $i78 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6758} vmw_surface_remove_from_lists($p14);
    return;

  $bb17:
    assume $i79 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6759} vmw_user_context_free($p15);
    return;

  $bb18:
    assume $i80 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6760} vmw_user_stream_free($p16);
    return;

  $bb19:
    assume $i81 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6761} vmw_user_dmabuf_destroy($p17);
    return;

  $bb20:
    assume $i82 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6762} vmw_user_dmabuf_release($p18);
    return;

  $bb21:
    assume $i83 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6763} vmw_remove($p19);
    return;

  $bb22:
    assume $i84 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6764} vmw_du_connector_save($p20);
    return;

  $bb23:
    assume $i85 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6765} vmw_du_connector_restore($p21);
    return;

  $bb24:
    assume $i86 == 1;
    $p22 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6766} vmw_du_crtc_save($p22);
    return;

  $bb25:
    assume $i87 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6767} vmw_du_crtc_restore($p23);
    return;

  $bb94:
    assume $i88 == 1;
    goto $bb47;

  $bb47:
    $p44 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6789} vmw_sou_crtc_destroy($p44);
    goto SeqInstr_1135, SeqInstr_1136;

  SeqInstr_1136:
    assume assertsPassed;
    goto SeqInstr_1137;

  SeqInstr_1137:
    return;

  SeqInstr_1135:
    assume !assertsPassed;
    return;

  $bb96:
    assume $i89 == 1;
    goto $bb48;

  $bb48:
    $p45 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6790} vmw_sou_encoder_destroy($p45);
    goto SeqInstr_1138, SeqInstr_1139;

  SeqInstr_1139:
    assume assertsPassed;
    goto SeqInstr_1140;

  SeqInstr_1140:
    return;

  SeqInstr_1138:
    assume !assertsPassed;
    return;

  $bb98:
    assume $i90 == 1;
    goto $bb49;

  $bb49:
    $p46 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6791} vmw_sou_connector_destroy($p46);
    goto SeqInstr_1141, SeqInstr_1142;

  SeqInstr_1142:
    assume assertsPassed;
    goto SeqInstr_1143;

  SeqInstr_1143:
    return;

  SeqInstr_1141:
    assume !assertsPassed;
    return;

  $bb100:
    assume $i91 == 1;
    goto $bb50;

  $bb50:
    $p47 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6792} vmw_ldu_crtc_destroy($p47);
    goto SeqInstr_1144, SeqInstr_1145;

  SeqInstr_1145:
    assume assertsPassed;
    goto SeqInstr_1146;

  SeqInstr_1146:
    return;

  SeqInstr_1144:
    assume !assertsPassed;
    return;

  $bb102:
    assume $i92 == 1;
    goto $bb51;

  $bb51:
    $p48 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6793} vmw_ldu_encoder_destroy($p48);
    goto SeqInstr_1147, SeqInstr_1148;

  SeqInstr_1148:
    assume assertsPassed;
    goto SeqInstr_1149;

  SeqInstr_1149:
    return;

  SeqInstr_1147:
    assume !assertsPassed;
    return;

  $bb104:
    assume $i93 == 1;
    goto $bb52;

  $bb52:
    $p49 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6794} vmw_ldu_connector_destroy($p49);
    goto SeqInstr_1150, SeqInstr_1151;

  SeqInstr_1151:
    assume assertsPassed;
    goto SeqInstr_1152;

  SeqInstr_1152:
    return;

  SeqInstr_1150:
    assume !assertsPassed;
    return;

  $bb106:
    assume $i94 == 1;
    goto $bb53;

  $bb53:
    $p50 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6795} vmw_pm_complete($p50);
    goto SeqInstr_1153, SeqInstr_1154;

  SeqInstr_1154:
    assume assertsPassed;
    goto SeqInstr_1155;

  SeqInstr_1155:
    return;

  SeqInstr_1153:
    assume !assertsPassed;
    return;

  $bb108:
    assume $i95 == 1;
    goto $bb54;

  $bb54:
    $p51 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6796} vmw_stream_destroy($p51);
    goto SeqInstr_1156, SeqInstr_1157;

  SeqInstr_1157:
    assume assertsPassed;
    goto SeqInstr_1158;

  SeqInstr_1158:
    return;

  SeqInstr_1156:
    assume !assertsPassed;
    return;

  $bb110:
    assume $i96 == 1;
    goto $bb55;

  $bb55:
    $p52 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6797} vmw_user_stream_base_release($p52);
    goto SeqInstr_1159, SeqInstr_1160;

  SeqInstr_1160:
    assume assertsPassed;
    goto SeqInstr_1161;

  SeqInstr_1161:
    return;

  SeqInstr_1159:
    assume !assertsPassed;
    return;

  $bb112:
    assume $i97 == 1;
    goto $bb56;

  $bb56:
    $p53 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6798} vmw_hw_context_destroy($p53);
    goto SeqInstr_1162, SeqInstr_1163;

  SeqInstr_1163:
    assume assertsPassed;
    goto SeqInstr_1164;

  SeqInstr_1164:
    return;

  SeqInstr_1162:
    assume !assertsPassed;
    return;

  $bb114:
    assume $i98 == 1;
    goto $bb57;

  $bb57:
    $p54 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6799} vmw_user_context_base_release($p54);
    goto SeqInstr_1165, SeqInstr_1166;

  SeqInstr_1166:
    assume assertsPassed;
    goto SeqInstr_1167;

  SeqInstr_1167:
    return;

  SeqInstr_1165:
    assume !assertsPassed;
    return;

  $bb116:
    assume $i99 == 1;
    goto $bb58;

  $bb58:
    $p55 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6800} vmw_hw_surface_destroy($p55);
    goto SeqInstr_1168, SeqInstr_1169;

  SeqInstr_1169:
    assume assertsPassed;
    goto SeqInstr_1170;

  SeqInstr_1170:
    return;

  SeqInstr_1168:
    assume !assertsPassed;
    return;

  $bb118:
    assume $i100 == 1;
    goto $bb59;

  $bb59:
    $p56 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6801} vmw_user_surface_base_release($p56);
    goto SeqInstr_1171, SeqInstr_1172;

  SeqInstr_1172:
    assume assertsPassed;
    goto SeqInstr_1173;

  SeqInstr_1173:
    return;

  SeqInstr_1171:
    assume !assertsPassed;
    return;

  $bb120:
    assume $i101 == 1;
    goto $bb60;

  $bb60:
    call {:si_unique_call 6802} vmw_event_fence_action_cleanup(arg);
    goto SeqInstr_1174, SeqInstr_1175;

  SeqInstr_1175:
    assume assertsPassed;
    goto SeqInstr_1176;

  SeqInstr_1176:
    return;

  SeqInstr_1174:
    assume !assertsPassed;
    return;

  $bb122:
    assume $i102 == 1;
    goto $bb61;

  $bb61:
    $p57 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6803} vmw_fence_work_func($p57);
    goto SeqInstr_1177, SeqInstr_1178;

  SeqInstr_1178:
    assume assertsPassed;
    goto SeqInstr_1179;

  SeqInstr_1179:
    return;

  SeqInstr_1177:
    assume !assertsPassed;
    return;

  $bb124:
    assume $i103 == 1;
    goto $bb62;

  $bb62:
    $p58 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6804} vmw_user_fence_base_release($p58);
    goto SeqInstr_1180, SeqInstr_1181;

  SeqInstr_1181:
    assume assertsPassed;
    goto SeqInstr_1182;

  SeqInstr_1182:
    return;

  SeqInstr_1180:
    assume !assertsPassed;
    return;

  $bb126:
    assume $i104 == 1;
    goto $bb63;

  $bb63:
    $p59 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6805} vmw_resource_release($p59);
    goto SeqInstr_1183, SeqInstr_1184;

  SeqInstr_1184:
    assume assertsPassed;
    goto SeqInstr_1185;

  SeqInstr_1185:
    return;

  SeqInstr_1183:
    assume !assertsPassed;
    return;

  $bb128:
    assume $i105 == 1;
    goto $bb64;

  $bb64:
    $p60 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6806} vmw_sync_obj_unref($p60);
    goto SeqInstr_1186, SeqInstr_1187;

  SeqInstr_1187:
    assume assertsPassed;
    goto SeqInstr_1188;

  SeqInstr_1188:
    return;

  SeqInstr_1186:
    assume !assertsPassed;
    return;

  $bb130:
    assume $i106 == 1;
    goto $bb65;

  $bb65:
    $p61 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6807} vmw_lastclose($p61);
    goto SeqInstr_1189, SeqInstr_1190;

  SeqInstr_1190:
    assume assertsPassed;
    goto SeqInstr_1191;

  SeqInstr_1191:
    return;

  SeqInstr_1189:
    assume !assertsPassed;
    return;

  $bb132:
    assume $i107 == 1;
    goto $bb66;

  $bb66:
    $p62 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6808} vmw_framebuffer_surface_destroy($p62);
    goto SeqInstr_1192, SeqInstr_1193;

  SeqInstr_1193:
    assume assertsPassed;
    goto SeqInstr_1194;

  SeqInstr_1194:
    return;

  SeqInstr_1192:
    assume !assertsPassed;
    return;

  $bb134:
    assume $i108 == 1;
    goto $bb67;

  $bb67:
    $p63 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6809} vmw_fence_obj_destroy_locked($p63);
    goto SeqInstr_1195, SeqInstr_1196;

  SeqInstr_1196:
    assume assertsPassed;
    goto SeqInstr_1197;

  SeqInstr_1197:
    return;

  SeqInstr_1195:
    assume !assertsPassed;
    return;

  $bb136:
    assume $i109 == 1;
    goto $bb47;

  $bb138:
    assume $i110 == 1;
    goto $bb48;

  $bb140:
    assume $i111 == 1;
    goto $bb49;

  $bb142:
    assume $i112 == 1;
    goto $bb50;

  $bb144:
    assume $i113 == 1;
    goto $bb51;

  $bb146:
    assume $i114 == 1;
    goto $bb52;

  $bb148:
    assume $i115 == 1;
    goto $bb53;

  $bb150:
    assume $i116 == 1;
    goto $bb54;

  $bb152:
    assume $i117 == 1;
    goto $bb55;

  $bb154:
    assume $i118 == 1;
    goto $bb56;

  $bb156:
    assume $i119 == 1;
    goto $bb57;

  $bb158:
    assume $i120 == 1;
    goto $bb58;

  $bb160:
    assume $i121 == 1;
    goto $bb59;

  $bb162:
    assume $i122 == 1;
    goto $bb60;

  $bb164:
    assume $i123 == 1;
    goto $bb61;

  $bb166:
    assume $i124 == 1;
    goto $bb62;

  $bb168:
    assume $i125 == 1;
    goto $bb63;

  $bb170:
    assume $i126 == 1;
    goto $bb64;

  $bb172:
    assume $i127 == 1;
    goto $bb65;

  $bb174:
    assume $i128 == 1;
    goto $bb66;

  $bb175:
    assume $i129 == 1;
    goto $bb67;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 1088832);

procedure devirtbounce.12(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.6, assertsPassed, $M.2, $M.11, $M.12, $CurrAddr, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation devirtbounce.12(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i121 := $eq.ref(vmw_fence_obj_destroy_locked, $p0);
    assume {:branchcond $i121} true;
    goto $bb175, $bb173;

  $bb173:
    assume !($i121 == 1);
    $i120 := $eq.ref(vmw_framebuffer_surface_destroy, $p0);
    assume {:branchcond $i120} true;
    goto $bb174, $bb171;

  $bb171:
    assume !($i120 == 1);
    $i119 := $eq.ref(vmw_lastclose, $p0);
    assume {:branchcond $i119} true;
    goto $bb172, $bb169;

  $bb169:
    assume !($i119 == 1);
    $i118 := $eq.ref(vmw_sync_obj_unref, $p0);
    assume true;
    goto $bb170, $bb167;

  $bb167:
    assume !($i118 == 1);
    $i117 := $eq.ref(vmw_resource_release, $p0);
    assume true;
    goto $bb168, $bb165;

  $bb165:
    assume !($i117 == 1);
    $i116 := $eq.ref(vmw_user_fence_base_release, $p0);
    assume {:branchcond $i116} true;
    goto $bb166, $bb163;

  $bb163:
    assume !($i116 == 1);
    $i115 := $eq.ref(vmw_fence_work_func, $p0);
    assume {:branchcond $i115} true;
    goto $bb164, $bb161;

  $bb161:
    assume !($i115 == 1);
    $i114 := $eq.ref(vmw_event_fence_action_cleanup, $p0);
    assume true;
    goto $bb162, $bb159;

  $bb159:
    assume !($i114 == 1);
    $i113 := $eq.ref(vmw_user_surface_base_release, $p0);
    assume {:branchcond $i113} true;
    goto $bb160, $bb157;

  $bb157:
    assume !($i113 == 1);
    $i112 := $eq.ref(vmw_hw_surface_destroy, $p0);
    assume {:branchcond $i112} true;
    goto $bb158, $bb155;

  $bb155:
    assume !($i112 == 1);
    $i111 := $eq.ref(vmw_user_context_base_release, $p0);
    assume {:branchcond $i111} true;
    goto $bb156, $bb153;

  $bb153:
    assume !($i111 == 1);
    $i110 := $eq.ref(vmw_hw_context_destroy, $p0);
    assume {:branchcond $i110} true;
    goto $bb154, $bb151;

  $bb151:
    assume !($i110 == 1);
    $i109 := $eq.ref(vmw_user_stream_base_release, $p0);
    assume {:branchcond $i109} true;
    goto $bb152, $bb149;

  $bb149:
    assume !($i109 == 1);
    $i108 := $eq.ref(vmw_stream_destroy, $p0);
    assume {:branchcond $i108} true;
    goto $bb150, $bb147;

  $bb147:
    assume !($i108 == 1);
    $i107 := $eq.ref(vmw_pm_complete, $p0);
    assume {:branchcond $i107} true;
    goto $bb148, $bb145;

  $bb145:
    assume !($i107 == 1);
    $i106 := $eq.ref(vmw_ldu_connector_destroy, $p0);
    assume true;
    goto $bb146, $bb143;

  $bb143:
    assume !($i106 == 1);
    $i105 := $eq.ref(vmw_ldu_encoder_destroy, $p0);
    assume true;
    goto $bb144, $bb141;

  $bb141:
    assume !($i105 == 1);
    $i104 := $eq.ref(vmw_ldu_crtc_destroy, $p0);
    assume true;
    goto $bb142, $bb139;

  $bb139:
    assume !($i104 == 1);
    $i103 := $eq.ref(vmw_sou_connector_destroy, $p0);
    assume {:branchcond $i103} true;
    goto $bb140, $bb137;

  $bb137:
    assume !($i103 == 1);
    $i102 := $eq.ref(vmw_sou_encoder_destroy, $p0);
    assume true;
    goto $bb138, $bb135;

  $bb135:
    assume !($i102 == 1);
    $i101 := $eq.ref(vmw_sou_crtc_destroy, $p0);
    assume {:branchcond $i101} true;
    goto $bb136, $bb133;

  $bb133:
    assume !($i101 == 1);
    $i100 := $eq.ref(vmw_fence_obj_destroy_locked, $p0);
    assume true;
    goto $bb134, $bb131;

  $bb131:
    assume !($i100 == 1);
    $i99 := $eq.ref(vmw_framebuffer_surface_destroy, $p0);
    assume {:branchcond $i99} true;
    goto $bb132, $bb129;

  $bb129:
    assume !($i99 == 1);
    $i98 := $eq.ref(vmw_lastclose, $p0);
    assume true;
    goto $bb130, $bb127;

  $bb127:
    assume !($i98 == 1);
    $i97 := $eq.ref(vmw_sync_obj_unref, $p0);
    assume true;
    goto $bb128, $bb125;

  $bb125:
    assume !($i97 == 1);
    $i96 := $eq.ref(vmw_resource_release, $p0);
    assume {:branchcond $i96} true;
    goto $bb126, $bb123;

  $bb123:
    assume !($i96 == 1);
    $i95 := $eq.ref(vmw_user_fence_base_release, $p0);
    assume true;
    goto $bb124, $bb121;

  $bb121:
    assume !($i95 == 1);
    $i94 := $eq.ref(vmw_fence_work_func, $p0);
    assume true;
    goto $bb122, $bb119;

  $bb119:
    assume !($i94 == 1);
    $i93 := $eq.ref(vmw_event_fence_action_cleanup, $p0);
    assume {:branchcond $i93} true;
    goto $bb120, $bb117;

  $bb117:
    assume !($i93 == 1);
    $i92 := $eq.ref(vmw_user_surface_base_release, $p0);
    assume true;
    goto $bb118, $bb115;

  $bb115:
    assume !($i92 == 1);
    $i91 := $eq.ref(vmw_hw_surface_destroy, $p0);
    assume {:branchcond $i91} true;
    goto $bb116, $bb113;

  $bb113:
    assume !($i91 == 1);
    $i90 := $eq.ref(vmw_user_context_base_release, $p0);
    assume true;
    goto $bb114, $bb111;

  $bb111:
    assume !($i90 == 1);
    $i89 := $eq.ref(vmw_hw_context_destroy, $p0);
    assume true;
    goto $bb112, $bb109;

  $bb109:
    assume !($i89 == 1);
    $i88 := $eq.ref(vmw_user_stream_base_release, $p0);
    assume {:branchcond $i88} true;
    goto $bb110, $bb107;

  $bb107:
    assume !($i88 == 1);
    $i87 := $eq.ref(vmw_stream_destroy, $p0);
    assume {:branchcond $i87} true;
    goto $bb108, $bb105;

  $bb105:
    assume !($i87 == 1);
    $i86 := $eq.ref(vmw_pm_complete, $p0);
    assume {:branchcond $i86} true;
    goto $bb106, $bb103;

  $bb103:
    assume !($i86 == 1);
    $i85 := $eq.ref(vmw_ldu_connector_destroy, $p0);
    assume true;
    goto $bb104, $bb101;

  $bb101:
    assume !($i85 == 1);
    $i84 := $eq.ref(vmw_ldu_encoder_destroy, $p0);
    assume true;
    goto $bb102, $bb99;

  $bb99:
    assume !($i84 == 1);
    $i83 := $eq.ref(vmw_ldu_crtc_destroy, $p0);
    assume {:branchcond $i83} true;
    goto $bb100, $bb97;

  $bb97:
    assume !($i83 == 1);
    $i82 := $eq.ref(vmw_sou_connector_destroy, $p0);
    assume {:branchcond $i82} true;
    goto $bb98, $bb95;

  $bb95:
    assume !($i82 == 1);
    $i81 := $eq.ref(vmw_sou_encoder_destroy, $p0);
    assume {:branchcond $i81} true;
    goto $bb96, $bb93;

  $bb93:
    assume !($i81 == 1);
    $i80 := $eq.ref(vmw_sou_crtc_destroy, $p0);
    assume true;
    goto $bb94, $bb92;

  $bb92:
    assume !($i80 == 1);
    $i79 := $eq.ref(vmw_du_crtc_restore, $p0);
    assume true;
    goto $bb25, $bb91;

  $bb91:
    assume !($i79 == 1);
    $i78 := $eq.ref(vmw_du_crtc_save, $p0);
    assume true;
    goto $bb24, $bb90;

  $bb90:
    assume !($i78 == 1);
    $i77 := $eq.ref(vmw_du_connector_restore, $p0);
    assume {:branchcond $i77} true;
    goto $bb23, $bb89;

  $bb89:
    assume !($i77 == 1);
    $i76 := $eq.ref(vmw_du_connector_save, $p0);
    assume true;
    goto $bb22, $bb88;

  $bb88:
    assume !($i76 == 1);
    $i75 := $eq.ref(vmw_remove, $p0);
    assume true;
    goto $bb21, $bb87;

  $bb87:
    assume !($i75 == 1);
    $i74 := $eq.ref(vmw_user_dmabuf_release, $p0);
    assume true;
    goto $bb20, $bb86;

  $bb86:
    assume !($i74 == 1);
    $i73 := $eq.ref(vmw_user_dmabuf_destroy, $p0);
    assume true;
    goto $bb19, $bb85;

  $bb85:
    assume !($i73 == 1);
    $i72 := $eq.ref(vmw_user_stream_free, $p0);
    assume {:branchcond $i72} true;
    goto $bb18, $bb84;

  $bb84:
    assume !($i72 == 1);
    $i71 := $eq.ref(vmw_user_context_free, $p0);
    assume {:branchcond $i71} true;
    goto $bb17, $bb83;

  $bb83:
    assume !($i71 == 1);
    $i70 := $eq.ref(vmw_surface_remove_from_lists, $p0);
    assume true;
    goto $bb16, $bb82;

  $bb82:
    assume !($i70 == 1);
    $i69 := $eq.ref(vmw_event_fence_action_seq_passed, $p0);
    assume true;
    goto $bb15, $bb81;

  $bb81:
    assume !($i69 == 1);
    $i68 := $eq.ref(vmw_framebuffer_dmabuf_destroy, $p0);
    assume {:branchcond $i68} true;
    goto $bb14, $bb80;

  $bb80:
    assume !($i68 == 1);
    $i67 := $eq.ref(ttm_bo_global_release, $p0);
    assume {:branchcond $i67} true;
    goto $bb13, $bb79;

  $bb79:
    assume !($i67 == 1);
    $i66 := $eq.ref(vmw_ttm_mem_global_release, $p0);
    assume {:branchcond $i66} true;
    goto $bb12, $bb78;

  $bb78:
    assume !($i66 == 1);
    $i65 := $eq.ref(vmw_dmabuf_bo_free, $p0);
    assume {:branchcond $i65} true;
    goto $bb11, $bb77;

  $bb77:
    assume !($i65 == 1);
    $i64 := $eq.ref(vmw_user_surface_free, $p0);
    assume true;
    goto $bb10, $bb76;

  $bb76:
    assume !($i64 == 1);
    $i63 := $eq.ref(vmw_user_fence_destroy, $p0);
    assume true;
    goto $bb9, $bb75;

  $bb75:
    assume !($i63 == 1);
    $i62 := $eq.ref(vmw_fence_destroy, $p0);
    assume true;
    goto $bb8, $bb74;

  $bb74:
    assume !($i62 == 1);
    $i61 := $eq.ref(vmw_surface_res_free, $p0);
    assume true;
    goto $bb7, $bb73;

  $bb73:
    assume !($i61 == 1);
    $i60 := $eq.ref(vmw_irq_uninstall, $p0);
    assume true;
    goto $bb6, $bb72;

  $bb72:
    assume !($i60 == 1);
    $i59 := $eq.ref(vmw_irq_preinstall, $p0);
    assume true;
    goto $bb5, $bb71;

  $bb71:
    assume !($i59 == 1);
    $i58 := $eq.ref(vmw_ttm_destroy, $p0);
    assume true;
    goto $bb4, $bb70;

  $bb70:
    assume !($i58 == 1);
    $i57 := $eq.ref(ttm_pool_unpopulate, $p0);
    assume {:branchcond $i57} true;
    goto $bb3, $bb69;

  $bb69:
    assume !($i57 == 1);
    $i56 := $eq.ref(kfree, $p0);
    assume true;
    goto $bb2, $bb68;

  $bb68:
    assume !($i56 == 1);
    assume false;
    return;

  $bb2:
    assume $i56 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6810} kfree($p1);
    return;

  $bb3:
    assume $i57 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6811} ttm_pool_unpopulate($p2);
    return;

  $bb4:
    assume $i58 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6812} vmw_ttm_destroy($p3);
    return;

  $bb5:
    assume $i59 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6813} vmw_irq_preinstall($p4);
    return;

  $bb6:
    assume $i60 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6814} vmw_irq_uninstall($p5);
    goto SeqInstr_1198, SeqInstr_1199;

  SeqInstr_1199:
    assume assertsPassed;
    goto SeqInstr_1200;

  SeqInstr_1200:
    return;

  SeqInstr_1198:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i61 == 1;
    call {:si_unique_call 6815} vmw_surface_res_free(arg);
    return;

  $bb8:
    assume $i62 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6816} vmw_fence_destroy($p6);
    return;

  $bb9:
    assume $i63 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6817} vmw_user_fence_destroy($p7);
    return;

  $bb10:
    assume $i64 == 1;
    call {:si_unique_call 6818} vmw_user_surface_free(arg);
    return;

  $bb11:
    assume $i65 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6819} vmw_dmabuf_bo_free($p8);
    return;

  $bb12:
    assume $i66 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6820} vmw_ttm_mem_global_release($p9);
    return;

  $bb13:
    assume $i67 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6821} ttm_bo_global_release($p10);
    return;

  $bb14:
    assume $i68 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6822} vmw_framebuffer_dmabuf_destroy($p11);
    return;

  $bb15:
    assume $i69 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6823} vmw_event_fence_action_seq_passed($p12);
    return;

  $bb16:
    assume $i70 == 1;
    call {:si_unique_call 6824} vmw_surface_remove_from_lists(arg);
    return;

  $bb17:
    assume $i71 == 1;
    call {:si_unique_call 6825} vmw_user_context_free(arg);
    return;

  $bb18:
    assume $i72 == 1;
    call {:si_unique_call 6826} vmw_user_stream_free(arg);
    return;

  $bb19:
    assume $i73 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6827} vmw_user_dmabuf_destroy($p13);
    return;

  $bb20:
    assume $i74 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6828} vmw_user_dmabuf_release($p14);
    return;

  $bb21:
    assume $i75 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6829} vmw_remove($p15);
    return;

  $bb22:
    assume $i76 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6830} vmw_du_connector_save($p16);
    return;

  $bb23:
    assume $i77 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6831} vmw_du_connector_restore($p17);
    return;

  $bb24:
    assume $i78 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6832} vmw_du_crtc_save($p18);
    return;

  $bb25:
    assume $i79 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6833} vmw_du_crtc_restore($p19);
    return;

  $bb94:
    assume $i80 == 1;
    goto $bb47;

  $bb47:
    $p38 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6855} vmw_sou_crtc_destroy($p38);
    goto SeqInstr_1264, SeqInstr_1265;

  SeqInstr_1265:
    assume assertsPassed;
    goto SeqInstr_1266;

  SeqInstr_1266:
    return;

  SeqInstr_1264:
    assume !assertsPassed;
    return;

  $bb96:
    assume $i81 == 1;
    goto $bb48;

  $bb48:
    $p39 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6856} vmw_sou_encoder_destroy($p39);
    goto SeqInstr_1267, SeqInstr_1268;

  SeqInstr_1268:
    assume assertsPassed;
    goto SeqInstr_1269;

  SeqInstr_1269:
    return;

  SeqInstr_1267:
    assume !assertsPassed;
    return;

  $bb98:
    assume $i82 == 1;
    goto $bb49;

  $bb49:
    $p40 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6857} vmw_sou_connector_destroy($p40);
    goto SeqInstr_1270, SeqInstr_1271;

  SeqInstr_1271:
    assume assertsPassed;
    goto SeqInstr_1272;

  SeqInstr_1272:
    return;

  SeqInstr_1270:
    assume !assertsPassed;
    return;

  $bb100:
    assume $i83 == 1;
    goto $bb50;

  $bb50:
    $p41 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6858} vmw_ldu_crtc_destroy($p41);
    goto SeqInstr_1273, SeqInstr_1274;

  SeqInstr_1274:
    assume assertsPassed;
    goto SeqInstr_1275;

  SeqInstr_1275:
    return;

  SeqInstr_1273:
    assume !assertsPassed;
    return;

  $bb102:
    assume $i84 == 1;
    goto $bb51;

  $bb51:
    $p42 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6859} vmw_ldu_encoder_destroy($p42);
    goto SeqInstr_1276, SeqInstr_1277;

  SeqInstr_1277:
    assume assertsPassed;
    goto SeqInstr_1278;

  SeqInstr_1278:
    return;

  SeqInstr_1276:
    assume !assertsPassed;
    return;

  $bb104:
    assume $i85 == 1;
    goto $bb52;

  $bb52:
    $p43 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6860} vmw_ldu_connector_destroy($p43);
    goto SeqInstr_1279, SeqInstr_1280;

  SeqInstr_1280:
    assume assertsPassed;
    goto SeqInstr_1281;

  SeqInstr_1281:
    return;

  SeqInstr_1279:
    assume !assertsPassed;
    return;

  $bb106:
    assume $i86 == 1;
    goto $bb53;

  $bb53:
    $p44 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6861} vmw_pm_complete($p44);
    goto SeqInstr_1282, SeqInstr_1283;

  SeqInstr_1283:
    assume assertsPassed;
    goto SeqInstr_1284;

  SeqInstr_1284:
    return;

  SeqInstr_1282:
    assume !assertsPassed;
    return;

  $bb108:
    assume $i87 == 1;
    goto $bb54;

  $bb54:
    call {:si_unique_call 6862} vmw_stream_destroy(arg);
    goto SeqInstr_1285, SeqInstr_1286;

  SeqInstr_1286:
    assume assertsPassed;
    goto SeqInstr_1287;

  SeqInstr_1287:
    return;

  SeqInstr_1285:
    assume !assertsPassed;
    return;

  $bb110:
    assume $i88 == 1;
    goto $bb55;

  $bb55:
    $p45 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6863} vmw_user_stream_base_release($p45);
    goto SeqInstr_1288, SeqInstr_1289;

  SeqInstr_1289:
    assume assertsPassed;
    goto SeqInstr_1290;

  SeqInstr_1290:
    return;

  SeqInstr_1288:
    assume !assertsPassed;
    return;

  $bb112:
    assume $i89 == 1;
    goto $bb56;

  $bb56:
    call {:si_unique_call 6864} vmw_hw_context_destroy(arg);
    goto SeqInstr_1291, SeqInstr_1292;

  SeqInstr_1292:
    assume assertsPassed;
    goto SeqInstr_1293;

  SeqInstr_1293:
    return;

  SeqInstr_1291:
    assume !assertsPassed;
    return;

  $bb114:
    assume $i90 == 1;
    goto $bb57;

  $bb57:
    $p46 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6865} vmw_user_context_base_release($p46);
    goto SeqInstr_1294, SeqInstr_1295;

  SeqInstr_1295:
    assume assertsPassed;
    goto SeqInstr_1296;

  SeqInstr_1296:
    return;

  SeqInstr_1294:
    assume !assertsPassed;
    return;

  $bb116:
    assume $i91 == 1;
    goto $bb58;

  $bb58:
    call {:si_unique_call 6866} vmw_hw_surface_destroy(arg);
    goto SeqInstr_1297, SeqInstr_1298;

  SeqInstr_1298:
    assume assertsPassed;
    goto SeqInstr_1299;

  SeqInstr_1299:
    return;

  SeqInstr_1297:
    assume !assertsPassed;
    return;

  $bb118:
    assume $i92 == 1;
    goto $bb59;

  $bb59:
    $p47 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6867} vmw_user_surface_base_release($p47);
    goto SeqInstr_1300, SeqInstr_1301;

  SeqInstr_1301:
    assume assertsPassed;
    goto SeqInstr_1302;

  SeqInstr_1302:
    return;

  SeqInstr_1300:
    assume !assertsPassed;
    return;

  $bb120:
    assume $i93 == 1;
    goto $bb60;

  $bb60:
    $p48 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6868} vmw_event_fence_action_cleanup($p48);
    goto SeqInstr_1303, SeqInstr_1304;

  SeqInstr_1304:
    assume assertsPassed;
    goto SeqInstr_1305;

  SeqInstr_1305:
    return;

  SeqInstr_1303:
    assume !assertsPassed;
    return;

  $bb122:
    assume $i94 == 1;
    goto $bb61;

  $bb61:
    $p49 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6869} vmw_fence_work_func($p49);
    goto SeqInstr_1306, SeqInstr_1307;

  SeqInstr_1307:
    assume assertsPassed;
    goto SeqInstr_1308;

  SeqInstr_1308:
    return;

  SeqInstr_1306:
    assume !assertsPassed;
    return;

  $bb124:
    assume $i95 == 1;
    goto $bb62;

  $bb62:
    $p50 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6870} vmw_user_fence_base_release($p50);
    goto SeqInstr_1309, SeqInstr_1310;

  SeqInstr_1310:
    assume assertsPassed;
    goto SeqInstr_1311;

  SeqInstr_1311:
    return;

  SeqInstr_1309:
    assume !assertsPassed;
    return;

  $bb126:
    assume $i96 == 1;
    goto $bb63;

  $bb63:
    $p51 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6871} vmw_resource_release($p51);
    goto SeqInstr_1312, SeqInstr_1313;

  SeqInstr_1313:
    assume assertsPassed;
    goto SeqInstr_1314;

  SeqInstr_1314:
    return;

  SeqInstr_1312:
    assume !assertsPassed;
    return;

  $bb128:
    assume $i97 == 1;
    goto $bb64;

  $bb64:
    $p52 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6872} vmw_sync_obj_unref($p52);
    goto SeqInstr_1315, SeqInstr_1316;

  SeqInstr_1316:
    assume assertsPassed;
    goto SeqInstr_1317;

  SeqInstr_1317:
    return;

  SeqInstr_1315:
    assume !assertsPassed;
    return;

  $bb130:
    assume $i98 == 1;
    goto $bb65;

  $bb65:
    $p53 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6873} vmw_lastclose($p53);
    goto SeqInstr_1318, SeqInstr_1319;

  SeqInstr_1319:
    assume assertsPassed;
    goto SeqInstr_1320;

  SeqInstr_1320:
    return;

  SeqInstr_1318:
    assume !assertsPassed;
    return;

  $bb132:
    assume $i99 == 1;
    goto $bb66;

  $bb66:
    $p54 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6874} vmw_framebuffer_surface_destroy($p54);
    goto SeqInstr_1321, SeqInstr_1322;

  SeqInstr_1322:
    assume assertsPassed;
    goto SeqInstr_1323;

  SeqInstr_1323:
    return;

  SeqInstr_1321:
    assume !assertsPassed;
    return;

  $bb134:
    assume $i100 == 1;
    goto $bb67;

  $bb67:
    $p55 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6875} vmw_fence_obj_destroy_locked($p55);
    goto SeqInstr_1324, SeqInstr_1325;

  SeqInstr_1325:
    assume assertsPassed;
    goto SeqInstr_1326;

  SeqInstr_1326:
    return;

  SeqInstr_1324:
    assume !assertsPassed;
    return;

  $bb136:
    assume $i101 == 1;
    goto $bb47;

  $bb138:
    assume $i102 == 1;
    goto $bb48;

  $bb140:
    assume $i103 == 1;
    goto $bb49;

  $bb142:
    assume $i104 == 1;
    goto $bb50;

  $bb144:
    assume $i105 == 1;
    goto $bb51;

  $bb146:
    assume $i106 == 1;
    goto $bb52;

  $bb148:
    assume $i107 == 1;
    goto $bb53;

  $bb150:
    assume $i108 == 1;
    goto $bb54;

  $bb152:
    assume $i109 == 1;
    goto $bb55;

  $bb154:
    assume $i110 == 1;
    goto $bb56;

  $bb156:
    assume $i111 == 1;
    goto $bb57;

  $bb158:
    assume $i112 == 1;
    goto $bb58;

  $bb160:
    assume $i113 == 1;
    goto $bb59;

  $bb162:
    assume $i114 == 1;
    goto $bb60;

  $bb164:
    assume $i115 == 1;
    goto $bb61;

  $bb166:
    assume $i116 == 1;
    goto $bb62;

  $bb168:
    assume $i117 == 1;
    goto $bb63;

  $bb170:
    assume $i118 == 1;
    goto $bb64;

  $bb172:
    assume $i119 == 1;
    goto $bb65;

  $bb174:
    assume $i120 == 1;
    goto $bb66;

  $bb175:
    assume $i121 == 1;
    goto $bb67;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 1089864);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.1, $M.6, assertsPassed, $M.0, $CurrAddr, $M.13, $M.2, $M.11, $M.12, $M.3, $M.4, $M.10, $M.16;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i1)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(vmw_seqno_passed, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(vmw_fifo_idle, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 6876} $i1 := vmw_fifo_idle(arg, arg1);
    goto SeqInstr_1327, SeqInstr_1328;

  SeqInstr_1328:
    assume assertsPassed;
    goto SeqInstr_1329;

  SeqInstr_1329:
    $r := $i1;
    return;

  SeqInstr_1327:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 6877} $i2 := vmw_seqno_passed(arg, arg1);
    goto SeqInstr_1330, SeqInstr_1331;

  SeqInstr_1331:
    assume assertsPassed;
    goto SeqInstr_1332;

  SeqInstr_1332:
    $r := $i2;
    return;

  SeqInstr_1330:
    assume !assertsPassed;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 1090896);

procedure devirtbounce.14(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 6878} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 1091928);

procedure devirtbounce.15(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32);



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 1092960);

procedure devirtbounce.16(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.11, $M.12, $M.2, $M.6, $M.10, assertsPassed, $M.16, $M.3, $M.4, $CurrAddr, $M.13;



implementation devirtbounce.16(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i65 := $eq.ref(vmw_driver_unload, $p0);
    assume {:branchcond $i65} true;
    goto $bb59, $bb57;

  $bb57:
    assume !($i65 == 1);
    $i64 := $eq.ref(vmw_framebuffer_dmabuf_pin, $p0);
    assume true;
    goto $bb58, $bb55;

  $bb55:
    assume !($i64 == 1);
    $i63 := $eq.ref(vmw_framebuffer_dmabuf_unpin, $p0);
    assume true;
    goto $bb56, $bb53;

  $bb53:
    assume !($i63 == 1);
    $i62 := $eq.ref(vmw_pm_prepare, $p0);
    assume true;
    goto $bb54, $bb51;

  $bb51:
    assume !($i62 == 1);
    $i61 := $eq.ref(vmw_ldu_crtc_set_config, $p0);
    assume true;
    goto $bb52, $bb49;

  $bb49:
    assume !($i61 == 1);
    $i60 := $eq.ref(vmw_sou_crtc_set_config, $p0);
    assume true;
    goto $bb50, $bb47;

  $bb47:
    assume !($i60 == 1);
    $i59 := $eq.ref(vmw_driver_unload, $p0);
    assume true;
    goto $bb48, $bb45;

  $bb45:
    assume !($i59 == 1);
    $i58 := $eq.ref(vmw_framebuffer_dmabuf_pin, $p0);
    assume true;
    goto $bb46, $bb43;

  $bb43:
    assume !($i58 == 1);
    $i57 := $eq.ref(vmw_framebuffer_dmabuf_unpin, $p0);
    assume {:branchcond $i57} true;
    goto $bb44, $bb41;

  $bb41:
    assume !($i57 == 1);
    $i56 := $eq.ref(vmw_pm_prepare, $p0);
    assume true;
    goto $bb42, $bb39;

  $bb39:
    assume !($i56 == 1);
    $i55 := $eq.ref(vmw_ldu_crtc_set_config, $p0);
    assume true;
    goto $bb40, $bb37;

  $bb37:
    assume !($i55 == 1);
    $i54 := $eq.ref(vmw_sou_crtc_set_config, $p0);
    assume true;
    goto $bb38, $bb36;

  $bb36:
    assume !($i54 == 1);
    $i53 := $eq.ref(vmw_pm_resume, $p0);
    assume true;
    goto $bb12, $bb35;

  $bb35:
    assume !($i53 == 1);
    $i52 := $eq.ref(vmw_pm_suspend, $p0);
    assume {:branchcond $i52} true;
    goto $bb11, $bb34;

  $bb34:
    assume !($i52 == 1);
    $i51 := $eq.ref(ttm_bo_global_init, $p0);
    assume true;
    goto $bb10, $bb33;

  $bb33:
    assume !($i51 == 1);
    $i50 := $eq.ref(vmw_ttm_mem_global_init, $p0);
    assume true;
    goto $bb9, $bb32;

  $bb32:
    assume !($i50 == 1);
    $i49 := $eq.ref(vmw_gmrid_man_takedown, $p0);
    assume true;
    goto $bb8, $bb31;

  $bb31:
    assume !($i49 == 1);
    $i48 := $eq.ref(vmw_ttm_fault_reserve_notify, $p0);
    assume true;
    goto $bb7, $bb30;

  $bb30:
    assume !($i48 == 1);
    $i47 := $eq.ref(vmw_fb_set_par, $p0);
    assume true;
    goto $bb6, $bb29;

  $bb29:
    assume !($i47 == 1);
    $i46 := $eq.ref(vmw_irq_postinstall, $p0);
    assume true;
    goto $bb5, $bb28;

  $bb28:
    assume !($i46 == 1);
    $i45 := $eq.ref(vmw_firstopen, $p0);
    assume true;
    goto $bb4, $bb27;

  $bb27:
    assume !($i45 == 1);
    $i44 := $eq.ref(vmw_ttm_unbind, $p0);
    assume {:branchcond $i44} true;
    goto $bb3, $bb26;

  $bb26:
    assume !($i44 == 1);
    $i43 := $eq.ref(ttm_pool_populate, $p0);
    assume {:branchcond $i43} true;
    goto $bb2, $bb25;

  $bb25:
    assume !($i43 == 1);
    assume false;
    return;

  $bb2:
    assume $i43 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6879} $i2 := ttm_pool_populate($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i44 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6880} $i4 := vmw_ttm_unbind($p3);
    goto SeqInstr_1333, SeqInstr_1334;

  SeqInstr_1334:
    assume assertsPassed;
    goto SeqInstr_1335;

  SeqInstr_1335:
    $r := $i4;
    return;

  SeqInstr_1333:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i45 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6881} $i6 := vmw_firstopen($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i46 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6882} $i8 := vmw_irq_postinstall($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i47 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6883} $i10 := vmw_fb_set_par($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i48 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6884} $i12 := vmw_ttm_fault_reserve_notify($p11);
    $r := $i12;
    return;

  $bb8:
    assume $i49 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6885} $i14 := vmw_gmrid_man_takedown($p13);
    $r := $i14;
    return;

  $bb9:
    assume $i50 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6886} $i16 := vmw_ttm_mem_global_init($p15);
    $r := $i16;
    return;

  $bb10:
    assume $i51 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6887} $i18 := ttm_bo_global_init($p17);
    $r := $i18;
    return;

  $bb11:
    assume $i52 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6888} $i20 := vmw_pm_suspend($p19);
    $r := $i20;
    return;

  $bb12:
    assume $i53 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6889} $i22 := vmw_pm_resume($p21);
    $r := $i22;
    return;

  $bb38:
    assume $i54 == 1;
    goto $bb19;

  $bb19:
    call {:si_unique_call 6896} $i33 := vmw_sou_crtc_set_config(arg);
    goto SeqInstr_1354, SeqInstr_1355;

  SeqInstr_1355:
    assume assertsPassed;
    goto SeqInstr_1356;

  SeqInstr_1356:
    $r := $i33;
    return;

  SeqInstr_1354:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i55 == 1;
    goto $bb20;

  $bb20:
    call {:si_unique_call 6897} $i34 := vmw_ldu_crtc_set_config(arg);
    goto SeqInstr_1357, SeqInstr_1358;

  SeqInstr_1358:
    assume assertsPassed;
    goto SeqInstr_1359;

  SeqInstr_1359:
    $r := $i34;
    return;

  SeqInstr_1357:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i56 == 1;
    goto $bb21;

  $bb21:
    $p35 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6898} $i36 := vmw_pm_prepare($p35);
    goto SeqInstr_1360, SeqInstr_1361;

  SeqInstr_1361:
    assume assertsPassed;
    goto SeqInstr_1362;

  SeqInstr_1362:
    $r := $i36;
    return;

  SeqInstr_1360:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i57 == 1;
    goto $bb22;

  $bb22:
    $p37 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6899} $i38 := vmw_framebuffer_dmabuf_unpin($p37);
    goto SeqInstr_1363, SeqInstr_1364;

  SeqInstr_1364:
    assume assertsPassed;
    goto SeqInstr_1365;

  SeqInstr_1365:
    $r := $i38;
    return;

  SeqInstr_1363:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i58 == 1;
    goto $bb23;

  $bb23:
    $p39 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6900} $i40 := vmw_framebuffer_dmabuf_pin($p39);
    goto SeqInstr_1366, SeqInstr_1367;

  SeqInstr_1367:
    assume assertsPassed;
    goto SeqInstr_1368;

  SeqInstr_1368:
    $r := $i40;
    return;

  SeqInstr_1366:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i59 == 1;
    goto $bb24;

  $bb24:
    $p41 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6901} $i42 := vmw_driver_unload($p41);
    goto SeqInstr_1369, SeqInstr_1370;

  SeqInstr_1370:
    assume assertsPassed;
    goto SeqInstr_1371;

  SeqInstr_1371:
    $r := $i42;
    return;

  SeqInstr_1369:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i60 == 1;
    goto $bb19;

  $bb52:
    assume $i61 == 1;
    goto $bb20;

  $bb54:
    assume $i62 == 1;
    goto $bb21;

  $bb56:
    assume $i63 == 1;
    goto $bb22;

  $bb58:
    assume $i64 == 1;
    goto $bb23;

  $bb59:
    assume $i65 == 1;
    goto $bb24;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 1093992);

procedure devirtbounce.17(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.6, assertsPassed, $M.2, $M.11, $M.12, $CurrAddr, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation devirtbounce.17(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i132 := $eq.ref(vmw_fence_obj_destroy_locked, $p0);
    assume true;
    goto $bb175, $bb173;

  $bb173:
    assume !($i132 == 1);
    $i131 := $eq.ref(vmw_framebuffer_surface_destroy, $p0);
    assume true;
    goto $bb174, $bb171;

  $bb171:
    assume !($i131 == 1);
    $i130 := $eq.ref(vmw_lastclose, $p0);
    assume {:branchcond $i130} true;
    goto $bb172, $bb169;

  $bb169:
    assume !($i130 == 1);
    $i129 := $eq.ref(vmw_sync_obj_unref, $p0);
    assume {:branchcond $i129} true;
    goto $bb170, $bb167;

  $bb167:
    assume !($i129 == 1);
    $i128 := $eq.ref(vmw_resource_release, $p0);
    assume {:branchcond $i128} true;
    goto $bb168, $bb165;

  $bb165:
    assume !($i128 == 1);
    $i127 := $eq.ref(vmw_user_fence_base_release, $p0);
    assume {:branchcond $i127} true;
    goto $bb166, $bb163;

  $bb163:
    assume !($i127 == 1);
    $i126 := $eq.ref(vmw_fence_work_func, $p0);
    assume {:branchcond $i126} true;
    goto $bb164, $bb161;

  $bb161:
    assume !($i126 == 1);
    $i125 := $eq.ref(vmw_event_fence_action_cleanup, $p0);
    assume {:branchcond $i125} true;
    goto $bb162, $bb159;

  $bb159:
    assume !($i125 == 1);
    $i124 := $eq.ref(vmw_user_surface_base_release, $p0);
    assume {:branchcond $i124} true;
    goto $bb160, $bb157;

  $bb157:
    assume !($i124 == 1);
    $i123 := $eq.ref(vmw_hw_surface_destroy, $p0);
    assume {:branchcond $i123} true;
    goto $bb158, $bb155;

  $bb155:
    assume !($i123 == 1);
    $i122 := $eq.ref(vmw_user_context_base_release, $p0);
    assume {:branchcond $i122} true;
    goto $bb156, $bb153;

  $bb153:
    assume !($i122 == 1);
    $i121 := $eq.ref(vmw_hw_context_destroy, $p0);
    assume {:branchcond $i121} true;
    goto $bb154, $bb151;

  $bb151:
    assume !($i121 == 1);
    $i120 := $eq.ref(vmw_user_stream_base_release, $p0);
    assume {:branchcond $i120} true;
    goto $bb152, $bb149;

  $bb149:
    assume !($i120 == 1);
    $i119 := $eq.ref(vmw_stream_destroy, $p0);
    assume {:branchcond $i119} true;
    goto $bb150, $bb147;

  $bb147:
    assume !($i119 == 1);
    $i118 := $eq.ref(vmw_pm_complete, $p0);
    assume true;
    goto $bb148, $bb145;

  $bb145:
    assume !($i118 == 1);
    $i117 := $eq.ref(vmw_ldu_connector_destroy, $p0);
    assume true;
    goto $bb146, $bb143;

  $bb143:
    assume !($i117 == 1);
    $i116 := $eq.ref(vmw_ldu_encoder_destroy, $p0);
    assume {:branchcond $i116} true;
    goto $bb144, $bb141;

  $bb141:
    assume !($i116 == 1);
    $i115 := $eq.ref(vmw_ldu_crtc_destroy, $p0);
    assume {:branchcond $i115} true;
    goto $bb142, $bb139;

  $bb139:
    assume !($i115 == 1);
    $i114 := $eq.ref(vmw_sou_connector_destroy, $p0);
    assume true;
    goto $bb140, $bb137;

  $bb137:
    assume !($i114 == 1);
    $i113 := $eq.ref(vmw_sou_encoder_destroy, $p0);
    assume {:branchcond $i113} true;
    goto $bb138, $bb135;

  $bb135:
    assume !($i113 == 1);
    $i112 := $eq.ref(vmw_sou_crtc_destroy, $p0);
    assume {:branchcond $i112} true;
    goto $bb136, $bb133;

  $bb133:
    assume !($i112 == 1);
    $i111 := $eq.ref(vmw_fence_obj_destroy_locked, $p0);
    assume {:branchcond $i111} true;
    goto $bb134, $bb131;

  $bb131:
    assume !($i111 == 1);
    $i110 := $eq.ref(vmw_framebuffer_surface_destroy, $p0);
    assume {:branchcond $i110} true;
    goto $bb132, $bb129;

  $bb129:
    assume !($i110 == 1);
    $i109 := $eq.ref(vmw_lastclose, $p0);
    assume {:branchcond $i109} true;
    goto $bb130, $bb127;

  $bb127:
    assume !($i109 == 1);
    $i108 := $eq.ref(vmw_sync_obj_unref, $p0);
    assume {:branchcond $i108} true;
    goto $bb128, $bb125;

  $bb125:
    assume !($i108 == 1);
    $i107 := $eq.ref(vmw_resource_release, $p0);
    assume {:branchcond $i107} true;
    goto $bb126, $bb123;

  $bb123:
    assume !($i107 == 1);
    $i106 := $eq.ref(vmw_user_fence_base_release, $p0);
    assume true;
    goto $bb124, $bb121;

  $bb121:
    assume !($i106 == 1);
    $i105 := $eq.ref(vmw_fence_work_func, $p0);
    assume true;
    goto $bb122, $bb119;

  $bb119:
    assume !($i105 == 1);
    $i104 := $eq.ref(vmw_event_fence_action_cleanup, $p0);
    assume true;
    goto $bb120, $bb117;

  $bb117:
    assume !($i104 == 1);
    $i103 := $eq.ref(vmw_user_surface_base_release, $p0);
    assume {:branchcond $i103} true;
    goto $bb118, $bb115;

  $bb115:
    assume !($i103 == 1);
    $i102 := $eq.ref(vmw_hw_surface_destroy, $p0);
    assume true;
    goto $bb116, $bb113;

  $bb113:
    assume !($i102 == 1);
    $i101 := $eq.ref(vmw_user_context_base_release, $p0);
    assume {:branchcond $i101} true;
    goto $bb114, $bb111;

  $bb111:
    assume !($i101 == 1);
    $i100 := $eq.ref(vmw_hw_context_destroy, $p0);
    assume true;
    goto $bb112, $bb109;

  $bb109:
    assume !($i100 == 1);
    $i99 := $eq.ref(vmw_user_stream_base_release, $p0);
    assume {:branchcond $i99} true;
    goto $bb110, $bb107;

  $bb107:
    assume !($i99 == 1);
    $i98 := $eq.ref(vmw_stream_destroy, $p0);
    assume true;
    goto $bb108, $bb105;

  $bb105:
    assume !($i98 == 1);
    $i97 := $eq.ref(vmw_pm_complete, $p0);
    assume true;
    goto $bb106, $bb103;

  $bb103:
    assume !($i97 == 1);
    $i96 := $eq.ref(vmw_ldu_connector_destroy, $p0);
    assume {:branchcond $i96} true;
    goto $bb104, $bb101;

  $bb101:
    assume !($i96 == 1);
    $i95 := $eq.ref(vmw_ldu_encoder_destroy, $p0);
    assume true;
    goto $bb102, $bb99;

  $bb99:
    assume !($i95 == 1);
    $i94 := $eq.ref(vmw_ldu_crtc_destroy, $p0);
    assume true;
    goto $bb100, $bb97;

  $bb97:
    assume !($i94 == 1);
    $i93 := $eq.ref(vmw_sou_connector_destroy, $p0);
    assume {:branchcond $i93} true;
    goto $bb98, $bb95;

  $bb95:
    assume !($i93 == 1);
    $i92 := $eq.ref(vmw_sou_encoder_destroy, $p0);
    assume true;
    goto $bb96, $bb93;

  $bb93:
    assume !($i92 == 1);
    $i91 := $eq.ref(vmw_sou_crtc_destroy, $p0);
    assume {:branchcond $i91} true;
    goto $bb94, $bb92;

  $bb92:
    assume !($i91 == 1);
    $i90 := $eq.ref(vmw_du_crtc_restore, $p0);
    assume true;
    goto $bb25, $bb91;

  $bb91:
    assume !($i90 == 1);
    $i89 := $eq.ref(vmw_du_crtc_save, $p0);
    assume true;
    goto $bb24, $bb90;

  $bb90:
    assume !($i89 == 1);
    $i88 := $eq.ref(vmw_du_connector_restore, $p0);
    assume {:branchcond $i88} true;
    goto $bb23, $bb89;

  $bb89:
    assume !($i88 == 1);
    $i87 := $eq.ref(vmw_du_connector_save, $p0);
    assume {:branchcond $i87} true;
    goto $bb22, $bb88;

  $bb88:
    assume !($i87 == 1);
    $i86 := $eq.ref(vmw_remove, $p0);
    assume {:branchcond $i86} true;
    goto $bb21, $bb87;

  $bb87:
    assume !($i86 == 1);
    $i85 := $eq.ref(vmw_user_dmabuf_release, $p0);
    assume true;
    goto $bb20, $bb86;

  $bb86:
    assume !($i85 == 1);
    $i84 := $eq.ref(vmw_user_dmabuf_destroy, $p0);
    assume true;
    goto $bb19, $bb85;

  $bb85:
    assume !($i84 == 1);
    $i83 := $eq.ref(vmw_user_stream_free, $p0);
    assume {:branchcond $i83} true;
    goto $bb18, $bb84;

  $bb84:
    assume !($i83 == 1);
    $i82 := $eq.ref(vmw_user_context_free, $p0);
    assume {:branchcond $i82} true;
    goto $bb17, $bb83;

  $bb83:
    assume !($i82 == 1);
    $i81 := $eq.ref(vmw_surface_remove_from_lists, $p0);
    assume {:branchcond $i81} true;
    goto $bb16, $bb82;

  $bb82:
    assume !($i81 == 1);
    $i80 := $eq.ref(vmw_event_fence_action_seq_passed, $p0);
    assume true;
    goto $bb15, $bb81;

  $bb81:
    assume !($i80 == 1);
    $i79 := $eq.ref(vmw_framebuffer_dmabuf_destroy, $p0);
    assume true;
    goto $bb14, $bb80;

  $bb80:
    assume !($i79 == 1);
    $i78 := $eq.ref(ttm_bo_global_release, $p0);
    assume true;
    goto $bb13, $bb79;

  $bb79:
    assume !($i78 == 1);
    $i77 := $eq.ref(vmw_ttm_mem_global_release, $p0);
    assume {:branchcond $i77} true;
    goto $bb12, $bb78;

  $bb78:
    assume !($i77 == 1);
    $i76 := $eq.ref(vmw_dmabuf_bo_free, $p0);
    assume true;
    goto $bb11, $bb77;

  $bb77:
    assume !($i76 == 1);
    $i75 := $eq.ref(vmw_user_surface_free, $p0);
    assume true;
    goto $bb10, $bb76;

  $bb76:
    assume !($i75 == 1);
    $i74 := $eq.ref(vmw_user_fence_destroy, $p0);
    assume true;
    goto $bb9, $bb75;

  $bb75:
    assume !($i74 == 1);
    $i73 := $eq.ref(vmw_fence_destroy, $p0);
    assume true;
    goto $bb8, $bb74;

  $bb74:
    assume !($i73 == 1);
    $i72 := $eq.ref(vmw_surface_res_free, $p0);
    assume {:branchcond $i72} true;
    goto $bb7, $bb73;

  $bb73:
    assume !($i72 == 1);
    $i71 := $eq.ref(vmw_irq_uninstall, $p0);
    assume {:branchcond $i71} true;
    goto $bb6, $bb72;

  $bb72:
    assume !($i71 == 1);
    $i70 := $eq.ref(vmw_irq_preinstall, $p0);
    assume true;
    goto $bb5, $bb71;

  $bb71:
    assume !($i70 == 1);
    $i69 := $eq.ref(vmw_ttm_destroy, $p0);
    assume true;
    goto $bb4, $bb70;

  $bb70:
    assume !($i69 == 1);
    $i68 := $eq.ref(ttm_pool_unpopulate, $p0);
    assume {:branchcond $i68} true;
    goto $bb3, $bb69;

  $bb69:
    assume !($i68 == 1);
    $i67 := $eq.ref(kfree, $p0);
    assume {:branchcond $i67} true;
    goto $bb2, $bb68;

  $bb68:
    assume !($i67 == 1);
    assume false;
    return;

  $bb2:
    assume $i67 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6902} kfree($p1);
    return;

  $bb3:
    assume $i68 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6903} ttm_pool_unpopulate($p2);
    return;

  $bb4:
    assume $i69 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6904} vmw_ttm_destroy($p3);
    return;

  $bb5:
    assume $i70 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6905} vmw_irq_preinstall($p4);
    return;

  $bb6:
    assume $i71 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6906} vmw_irq_uninstall($p5);
    goto SeqInstr_1372, SeqInstr_1373;

  SeqInstr_1373:
    assume assertsPassed;
    goto SeqInstr_1374;

  SeqInstr_1374:
    return;

  SeqInstr_1372:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i72 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6907} vmw_surface_res_free($p6);
    return;

  $bb8:
    assume $i73 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6908} vmw_fence_destroy($p7);
    return;

  $bb9:
    assume $i74 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6909} vmw_user_fence_destroy($p8);
    return;

  $bb10:
    assume $i75 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6910} vmw_user_surface_free($p9);
    return;

  $bb11:
    assume $i76 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6911} vmw_dmabuf_bo_free($p10);
    return;

  $bb12:
    assume $i77 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6912} vmw_ttm_mem_global_release($p11);
    return;

  $bb13:
    assume $i78 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6913} ttm_bo_global_release($p12);
    return;

  $bb14:
    assume $i79 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6914} vmw_framebuffer_dmabuf_destroy($p13);
    return;

  $bb15:
    assume $i80 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6915} vmw_event_fence_action_seq_passed($p14);
    return;

  $bb16:
    assume $i81 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6916} vmw_surface_remove_from_lists($p15);
    return;

  $bb17:
    assume $i82 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6917} vmw_user_context_free($p16);
    return;

  $bb18:
    assume $i83 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6918} vmw_user_stream_free($p17);
    return;

  $bb19:
    assume $i84 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6919} vmw_user_dmabuf_destroy($p18);
    return;

  $bb20:
    assume $i85 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6920} vmw_user_dmabuf_release($p19);
    return;

  $bb21:
    assume $i86 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6921} vmw_remove($p20);
    return;

  $bb22:
    assume $i87 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6922} vmw_du_connector_save($p21);
    return;

  $bb23:
    assume $i88 == 1;
    $p22 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6923} vmw_du_connector_restore($p22);
    return;

  $bb24:
    assume $i89 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6924} vmw_du_crtc_save($p23);
    return;

  $bb25:
    assume $i90 == 1;
    $p24 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6925} vmw_du_crtc_restore($p24);
    return;

  $bb94:
    assume $i91 == 1;
    goto $bb47;

  $bb47:
    $p46 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6947} vmw_sou_crtc_destroy($p46);
    goto SeqInstr_1438, SeqInstr_1439;

  SeqInstr_1439:
    assume assertsPassed;
    goto SeqInstr_1440;

  SeqInstr_1440:
    return;

  SeqInstr_1438:
    assume !assertsPassed;
    return;

  $bb96:
    assume $i92 == 1;
    goto $bb48;

  $bb48:
    $p47 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6948} vmw_sou_encoder_destroy($p47);
    goto SeqInstr_1441, SeqInstr_1442;

  SeqInstr_1442:
    assume assertsPassed;
    goto SeqInstr_1443;

  SeqInstr_1443:
    return;

  SeqInstr_1441:
    assume !assertsPassed;
    return;

  $bb98:
    assume $i93 == 1;
    goto $bb49;

  $bb49:
    $p48 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6949} vmw_sou_connector_destroy($p48);
    goto SeqInstr_1444, SeqInstr_1445;

  SeqInstr_1445:
    assume assertsPassed;
    goto SeqInstr_1446;

  SeqInstr_1446:
    return;

  SeqInstr_1444:
    assume !assertsPassed;
    return;

  $bb100:
    assume $i94 == 1;
    goto $bb50;

  $bb50:
    $p49 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6950} vmw_ldu_crtc_destroy($p49);
    goto SeqInstr_1447, SeqInstr_1448;

  SeqInstr_1448:
    assume assertsPassed;
    goto SeqInstr_1449;

  SeqInstr_1449:
    return;

  SeqInstr_1447:
    assume !assertsPassed;
    return;

  $bb102:
    assume $i95 == 1;
    goto $bb51;

  $bb51:
    $p50 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6951} vmw_ldu_encoder_destroy($p50);
    goto SeqInstr_1450, SeqInstr_1451;

  SeqInstr_1451:
    assume assertsPassed;
    goto SeqInstr_1452;

  SeqInstr_1452:
    return;

  SeqInstr_1450:
    assume !assertsPassed;
    return;

  $bb104:
    assume $i96 == 1;
    goto $bb52;

  $bb52:
    $p51 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6952} vmw_ldu_connector_destroy($p51);
    goto SeqInstr_1453, SeqInstr_1454;

  SeqInstr_1454:
    assume assertsPassed;
    goto SeqInstr_1455;

  SeqInstr_1455:
    return;

  SeqInstr_1453:
    assume !assertsPassed;
    return;

  $bb106:
    assume $i97 == 1;
    goto $bb53;

  $bb53:
    $p52 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6953} vmw_pm_complete($p52);
    goto SeqInstr_1456, SeqInstr_1457;

  SeqInstr_1457:
    assume assertsPassed;
    goto SeqInstr_1458;

  SeqInstr_1458:
    return;

  SeqInstr_1456:
    assume !assertsPassed;
    return;

  $bb108:
    assume $i98 == 1;
    goto $bb54;

  $bb54:
    $p53 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6954} vmw_stream_destroy($p53);
    goto SeqInstr_1459, SeqInstr_1460;

  SeqInstr_1460:
    assume assertsPassed;
    goto SeqInstr_1461;

  SeqInstr_1461:
    return;

  SeqInstr_1459:
    assume !assertsPassed;
    return;

  $bb110:
    assume $i99 == 1;
    goto $bb55;

  $bb55:
    $p54 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6955} vmw_user_stream_base_release($p54);
    goto SeqInstr_1462, SeqInstr_1463;

  SeqInstr_1463:
    assume assertsPassed;
    goto SeqInstr_1464;

  SeqInstr_1464:
    return;

  SeqInstr_1462:
    assume !assertsPassed;
    return;

  $bb112:
    assume $i100 == 1;
    goto $bb56;

  $bb56:
    $p55 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6956} vmw_hw_context_destroy($p55);
    goto SeqInstr_1465, SeqInstr_1466;

  SeqInstr_1466:
    assume assertsPassed;
    goto SeqInstr_1467;

  SeqInstr_1467:
    return;

  SeqInstr_1465:
    assume !assertsPassed;
    return;

  $bb114:
    assume $i101 == 1;
    goto $bb57;

  $bb57:
    $p56 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6957} vmw_user_context_base_release($p56);
    goto SeqInstr_1468, SeqInstr_1469;

  SeqInstr_1469:
    assume assertsPassed;
    goto SeqInstr_1470;

  SeqInstr_1470:
    return;

  SeqInstr_1468:
    assume !assertsPassed;
    return;

  $bb116:
    assume $i102 == 1;
    goto $bb58;

  $bb58:
    $p57 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6958} vmw_hw_surface_destroy($p57);
    goto SeqInstr_1471, SeqInstr_1472;

  SeqInstr_1472:
    assume assertsPassed;
    goto SeqInstr_1473;

  SeqInstr_1473:
    return;

  SeqInstr_1471:
    assume !assertsPassed;
    return;

  $bb118:
    assume $i103 == 1;
    goto $bb59;

  $bb59:
    $p58 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6959} vmw_user_surface_base_release($p58);
    goto SeqInstr_1474, SeqInstr_1475;

  SeqInstr_1475:
    assume assertsPassed;
    goto SeqInstr_1476;

  SeqInstr_1476:
    return;

  SeqInstr_1474:
    assume !assertsPassed;
    return;

  $bb120:
    assume $i104 == 1;
    goto $bb60;

  $bb60:
    $p59 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6960} vmw_event_fence_action_cleanup($p59);
    goto SeqInstr_1477, SeqInstr_1478;

  SeqInstr_1478:
    assume assertsPassed;
    goto SeqInstr_1479;

  SeqInstr_1479:
    return;

  SeqInstr_1477:
    assume !assertsPassed;
    return;

  $bb122:
    assume $i105 == 1;
    goto $bb61;

  $bb61:
    $p60 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6961} vmw_fence_work_func($p60);
    goto SeqInstr_1480, SeqInstr_1481;

  SeqInstr_1481:
    assume assertsPassed;
    goto SeqInstr_1482;

  SeqInstr_1482:
    return;

  SeqInstr_1480:
    assume !assertsPassed;
    return;

  $bb124:
    assume $i106 == 1;
    goto $bb62;

  $bb62:
    $p61 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6962} vmw_user_fence_base_release($p61);
    goto SeqInstr_1483, SeqInstr_1484;

  SeqInstr_1484:
    assume assertsPassed;
    goto SeqInstr_1485;

  SeqInstr_1485:
    return;

  SeqInstr_1483:
    assume !assertsPassed;
    return;

  $bb126:
    assume $i107 == 1;
    goto $bb63;

  $bb63:
    $p62 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6963} vmw_resource_release($p62);
    goto SeqInstr_1486, SeqInstr_1487;

  SeqInstr_1487:
    assume assertsPassed;
    goto SeqInstr_1488;

  SeqInstr_1488:
    return;

  SeqInstr_1486:
    assume !assertsPassed;
    return;

  $bb128:
    assume $i108 == 1;
    goto $bb64;

  $bb64:
    $p63 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6964} vmw_sync_obj_unref($p63);
    goto SeqInstr_1489, SeqInstr_1490;

  SeqInstr_1490:
    assume assertsPassed;
    goto SeqInstr_1491;

  SeqInstr_1491:
    return;

  SeqInstr_1489:
    assume !assertsPassed;
    return;

  $bb130:
    assume $i109 == 1;
    goto $bb65;

  $bb65:
    $p64 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6965} vmw_lastclose($p64);
    goto SeqInstr_1492, SeqInstr_1493;

  SeqInstr_1493:
    assume assertsPassed;
    goto SeqInstr_1494;

  SeqInstr_1494:
    return;

  SeqInstr_1492:
    assume !assertsPassed;
    return;

  $bb132:
    assume $i110 == 1;
    goto $bb66;

  $bb66:
    $p65 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6966} vmw_framebuffer_surface_destroy($p65);
    goto SeqInstr_1495, SeqInstr_1496;

  SeqInstr_1496:
    assume assertsPassed;
    goto SeqInstr_1497;

  SeqInstr_1497:
    return;

  SeqInstr_1495:
    assume !assertsPassed;
    return;

  $bb134:
    assume $i111 == 1;
    goto $bb67;

  $bb67:
    $p66 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6967} vmw_fence_obj_destroy_locked($p66);
    goto SeqInstr_1498, SeqInstr_1499;

  SeqInstr_1499:
    assume assertsPassed;
    goto SeqInstr_1500;

  SeqInstr_1500:
    return;

  SeqInstr_1498:
    assume !assertsPassed;
    return;

  $bb136:
    assume $i112 == 1;
    goto $bb47;

  $bb138:
    assume $i113 == 1;
    goto $bb48;

  $bb140:
    assume $i114 == 1;
    goto $bb49;

  $bb142:
    assume $i115 == 1;
    goto $bb50;

  $bb144:
    assume $i116 == 1;
    goto $bb51;

  $bb146:
    assume $i117 == 1;
    goto $bb52;

  $bb148:
    assume $i118 == 1;
    goto $bb53;

  $bb150:
    assume $i119 == 1;
    goto $bb54;

  $bb152:
    assume $i120 == 1;
    goto $bb55;

  $bb154:
    assume $i121 == 1;
    goto $bb56;

  $bb156:
    assume $i122 == 1;
    goto $bb57;

  $bb158:
    assume $i123 == 1;
    goto $bb58;

  $bb160:
    assume $i124 == 1;
    goto $bb59;

  $bb162:
    assume $i125 == 1;
    goto $bb60;

  $bb164:
    assume $i126 == 1;
    goto $bb61;

  $bb166:
    assume $i127 == 1;
    goto $bb62;

  $bb168:
    assume $i128 == 1;
    goto $bb63;

  $bb170:
    assume $i129 == 1;
    goto $bb64;

  $bb172:
    assume $i130 == 1;
    goto $bb65;

  $bb174:
    assume $i131 == 1;
    goto $bb66;

  $bb175:
    assume $i132 == 1;
    goto $bb67;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 1095024);

procedure devirtbounce.18(funcPtr: ref, arg: ref) returns ($r: i64);



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 1096056);

procedure devirtbounce.19(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.11, $M.12, $M.2, $M.6, $M.10, assertsPassed, $M.16, $M.3, $M.4, $CurrAddr, $M.13;



implementation devirtbounce.19(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i65 := $eq.ref(vmw_driver_unload, $p0);
    assume {:branchcond $i65} true;
    goto $bb59, $bb57;

  $bb57:
    assume !($i65 == 1);
    $i64 := $eq.ref(vmw_framebuffer_dmabuf_pin, $p0);
    assume true;
    goto $bb58, $bb55;

  $bb55:
    assume !($i64 == 1);
    $i63 := $eq.ref(vmw_framebuffer_dmabuf_unpin, $p0);
    assume true;
    goto $bb56, $bb53;

  $bb53:
    assume !($i63 == 1);
    $i62 := $eq.ref(vmw_pm_prepare, $p0);
    assume true;
    goto $bb54, $bb51;

  $bb51:
    assume !($i62 == 1);
    $i61 := $eq.ref(vmw_ldu_crtc_set_config, $p0);
    assume true;
    goto $bb52, $bb49;

  $bb49:
    assume !($i61 == 1);
    $i60 := $eq.ref(vmw_sou_crtc_set_config, $p0);
    assume true;
    goto $bb50, $bb47;

  $bb47:
    assume !($i60 == 1);
    $i59 := $eq.ref(vmw_driver_unload, $p0);
    assume true;
    goto $bb48, $bb45;

  $bb45:
    assume !($i59 == 1);
    $i58 := $eq.ref(vmw_framebuffer_dmabuf_pin, $p0);
    assume true;
    goto $bb46, $bb43;

  $bb43:
    assume !($i58 == 1);
    $i57 := $eq.ref(vmw_framebuffer_dmabuf_unpin, $p0);
    assume {:branchcond $i57} true;
    goto $bb44, $bb41;

  $bb41:
    assume !($i57 == 1);
    $i56 := $eq.ref(vmw_pm_prepare, $p0);
    assume true;
    goto $bb42, $bb39;

  $bb39:
    assume !($i56 == 1);
    $i55 := $eq.ref(vmw_ldu_crtc_set_config, $p0);
    assume true;
    goto $bb40, $bb37;

  $bb37:
    assume !($i55 == 1);
    $i54 := $eq.ref(vmw_sou_crtc_set_config, $p0);
    assume true;
    goto $bb38, $bb36;

  $bb36:
    assume !($i54 == 1);
    $i53 := $eq.ref(vmw_pm_resume, $p0);
    assume true;
    goto $bb12, $bb35;

  $bb35:
    assume !($i53 == 1);
    $i52 := $eq.ref(vmw_pm_suspend, $p0);
    assume {:branchcond $i52} true;
    goto $bb11, $bb34;

  $bb34:
    assume !($i52 == 1);
    $i51 := $eq.ref(ttm_bo_global_init, $p0);
    assume true;
    goto $bb10, $bb33;

  $bb33:
    assume !($i51 == 1);
    $i50 := $eq.ref(vmw_ttm_mem_global_init, $p0);
    assume true;
    goto $bb9, $bb32;

  $bb32:
    assume !($i50 == 1);
    $i49 := $eq.ref(vmw_gmrid_man_takedown, $p0);
    assume true;
    goto $bb8, $bb31;

  $bb31:
    assume !($i49 == 1);
    $i48 := $eq.ref(vmw_ttm_fault_reserve_notify, $p0);
    assume true;
    goto $bb7, $bb30;

  $bb30:
    assume !($i48 == 1);
    $i47 := $eq.ref(vmw_fb_set_par, $p0);
    assume true;
    goto $bb6, $bb29;

  $bb29:
    assume !($i47 == 1);
    $i46 := $eq.ref(vmw_irq_postinstall, $p0);
    assume true;
    goto $bb5, $bb28;

  $bb28:
    assume !($i46 == 1);
    $i45 := $eq.ref(vmw_firstopen, $p0);
    assume true;
    goto $bb4, $bb27;

  $bb27:
    assume !($i45 == 1);
    $i44 := $eq.ref(vmw_ttm_unbind, $p0);
    assume {:branchcond $i44} true;
    goto $bb3, $bb26;

  $bb26:
    assume !($i44 == 1);
    $i43 := $eq.ref(ttm_pool_populate, $p0);
    assume {:branchcond $i43} true;
    goto $bb2, $bb25;

  $bb25:
    assume !($i43 == 1);
    assume false;
    return;

  $bb2:
    assume $i43 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6968} $i2 := ttm_pool_populate($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i44 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6969} $i4 := vmw_ttm_unbind($p3);
    goto SeqInstr_1501, SeqInstr_1502;

  SeqInstr_1502:
    assume assertsPassed;
    goto SeqInstr_1503;

  SeqInstr_1503:
    $r := $i4;
    return;

  SeqInstr_1501:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i45 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6970} $i6 := vmw_firstopen($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i46 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6971} $i8 := vmw_irq_postinstall($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i47 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6972} $i10 := vmw_fb_set_par($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i48 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6973} $i12 := vmw_ttm_fault_reserve_notify($p11);
    $r := $i12;
    return;

  $bb8:
    assume $i49 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6974} $i14 := vmw_gmrid_man_takedown($p13);
    $r := $i14;
    return;

  $bb9:
    assume $i50 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6975} $i16 := vmw_ttm_mem_global_init($p15);
    $r := $i16;
    return;

  $bb10:
    assume $i51 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6976} $i18 := ttm_bo_global_init($p17);
    $r := $i18;
    return;

  $bb11:
    assume $i52 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6977} $i20 := vmw_pm_suspend($p19);
    $r := $i20;
    return;

  $bb12:
    assume $i53 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6978} $i22 := vmw_pm_resume($p21);
    $r := $i22;
    return;

  $bb38:
    assume $i54 == 1;
    goto $bb19;

  $bb19:
    $p33 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6985} $i34 := vmw_sou_crtc_set_config($p33);
    goto SeqInstr_1522, SeqInstr_1523;

  SeqInstr_1523:
    assume assertsPassed;
    goto SeqInstr_1524;

  SeqInstr_1524:
    $r := $i34;
    return;

  SeqInstr_1522:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i55 == 1;
    goto $bb20;

  $bb20:
    $p35 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6986} $i36 := vmw_ldu_crtc_set_config($p35);
    goto SeqInstr_1525, SeqInstr_1526;

  SeqInstr_1526:
    assume assertsPassed;
    goto SeqInstr_1527;

  SeqInstr_1527:
    $r := $i36;
    return;

  SeqInstr_1525:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i56 == 1;
    goto $bb21;

  $bb21:
    $p37 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6987} $i38 := vmw_pm_prepare($p37);
    goto SeqInstr_1528, SeqInstr_1529;

  SeqInstr_1529:
    assume assertsPassed;
    goto SeqInstr_1530;

  SeqInstr_1530:
    $r := $i38;
    return;

  SeqInstr_1528:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i57 == 1;
    goto $bb22;

  $bb22:
    call {:si_unique_call 6988} $i39 := vmw_framebuffer_dmabuf_unpin(arg);
    goto SeqInstr_1531, SeqInstr_1532;

  SeqInstr_1532:
    assume assertsPassed;
    goto SeqInstr_1533;

  SeqInstr_1533:
    $r := $i39;
    return;

  SeqInstr_1531:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i58 == 1;
    goto $bb23;

  $bb23:
    call {:si_unique_call 6989} $i40 := vmw_framebuffer_dmabuf_pin(arg);
    goto SeqInstr_1534, SeqInstr_1535;

  SeqInstr_1535:
    assume assertsPassed;
    goto SeqInstr_1536;

  SeqInstr_1536:
    $r := $i40;
    return;

  SeqInstr_1534:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i59 == 1;
    goto $bb24;

  $bb24:
    $p41 := $bitcast.ref.ref(arg);
    call {:si_unique_call 6990} $i42 := vmw_driver_unload($p41);
    goto SeqInstr_1537, SeqInstr_1538;

  SeqInstr_1538:
    assume assertsPassed;
    goto SeqInstr_1539;

  SeqInstr_1539:
    $r := $i42;
    return;

  SeqInstr_1537:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i60 == 1;
    goto $bb19;

  $bb52:
    assume $i61 == 1;
    goto $bb20;

  $bb54:
    assume $i62 == 1;
    goto $bb21;

  $bb56:
    assume $i63 == 1;
    goto $bb22;

  $bb58:
    assume $i64 == 1;
    goto $bb23;

  $bb59:
    assume $i65 == 1;
    goto $bb24;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: ref;

const $u1: ref;

const $u10: i8;

const $u11: ref;

const $u12: ref;

const $u2: i32;

const $u3: i64;

const $u4: ref;

const $u5: ref;

const $u6: ref;

const $u7: ref;

const $u8: ref;

const $u9: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.148, $M.149, $M.150, $M.151, $M.212, $M.213, $M.214, $M.215, $M.216, $M.24, $M.25, $M.37, $M.36, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 6991} __SMACK_static_init();
    call {:si_unique_call 6992} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr();
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $M.1, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.148, $M.149, $M.150, $M.151, $M.212, $M.213, $M.214, $M.215, $M.216, $M.24, $M.25, $CurrAddr, $M.2, $M.6, $M.11, $M.12, $M.10, $M.16, $M.3, $M.4, $M.13;



implementation {:entrypoint} main_SeqInstr()
{

  start:
    assertsPassed := true;
    call main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation vmw_deferred_io_loop_$bb1(in_$i18: i64, in_$i19: i64, in_$i20: i64, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$i27: i64, in_$i28: i64, in_$i29: i64, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$i34: i64, in_$i35: i64, in_$i36: i1, in_$i37: i64, in_$i38: i1, in_$i39: i64, in_$i40: i64, in_$i41: i64, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i64, in_$p46: ref, in_$i47: i32, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$p51: ref) returns (out_$i19: i64, out_$i20: i64, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$i27: i64, out_$i28: i64, out_$i29: i64, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$i34: i64, out_$i35: i64, out_$i36: i1, out_$i37: i64, out_$i38: i1, out_$i39: i64, out_$i40: i64, out_$i41: i64, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i64, out_$p46: ref, out_$i47: i32, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$p51: ref)
{

  entry:
    out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51 := in_$i19, in_$i20, in_$p21, in_$i22, in_$i23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p42, in_$p43, in_$i44, in_$i45, in_$p46, in_$i47, in_$p48, in_$i49, in_$i50, in_$p51;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_20;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    out_$i19, out_$i20, out_$p21 := out_$i37, out_$i39, out_$p51;
    goto corral_source_split_63_dummy;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    goto corral_source_split_63;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p48, $mul.ref(out_$i50, 1));
    goto corral_source_split_62;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    out_$i50 := $sub.i64(0, out_$i49);
    goto corral_source_split_61;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i32.i64(out_$i47);
    goto corral_source_split_60;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p43);
    goto corral_source_split_59;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    out_$i47 := $p2i.ref.i32(out_$p46);
    call {:si_unique_call 18} {:cexpr "__cil_tmp67"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_58;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    out_$p46 := $i2p.i64.ref(out_$i45);
    goto corral_source_split_57;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i64(out_$i44, 32);
    call {:si_unique_call 17} {:cexpr "__cil_tmp65"} boogie_si_record_i64(out_$i45);
    goto corral_source_split_56;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 16} {:cexpr "__cil_tmp64"} boogie_si_record_i64(out_$i44);
    goto corral_source_split_55;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_54;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    out_$p42 := $i2p.i64.ref(out_$i41);
    goto corral_source_split_53;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i64(out_$i40, 32);
    call {:si_unique_call 15} {:cexpr "__cil_tmp61"} boogie_si_record_i64(out_$i41);
    goto corral_source_split_52;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p21);
    call {:si_unique_call 14} {:cexpr "__cil_tmp60"} boogie_si_record_i64(out_$i40);
    goto corral_source_split_51;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_50;

  $bb11:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := out_$i35;
    goto $bb12;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i20;
    goto $bb12;

  $bb10:
    assume out_$i38 == 1;
    goto corral_source_split_48;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    out_$i38 := $ugt.i64(out_$i20, out_$i35);
    goto corral_source_split_46;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_45;

  $bb8:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    out_$i37 := out_$i33;
    goto $bb9;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    out_$i37 := out_$i19;
    goto $bb9;

  $bb7:
    assume out_$i36 == 1;
    goto corral_source_split_43;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    out_$i36 := $ult.i64(out_$i19, out_$i33);
    goto corral_source_split_39;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    out_$i35 := $sub.i64(out_$i34, 1);
    call {:si_unique_call 13} {:cexpr "end"} boogie_si_record_i64(out_$i35);
    goto corral_source_split_38;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i64(out_$i33, 4096);
    call {:si_unique_call 12} {:cexpr "__cil_tmp43"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_37;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    out_$i33 := $shl.i64(out_$i32, 12);
    call {:si_unique_call 11} {:cexpr "start"} boogie_si_record_i64(out_$i33);
    goto corral_source_split_36;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.0, out_$p31);
    call {:si_unique_call 10} {:cexpr "__cil_tmp41"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_35;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    out_$p31 := $i2p.i64.ref(out_$i30);
    goto corral_source_split_34;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i64(out_$i29, 16);
    call {:si_unique_call 9} {:cexpr "__cil_tmp40"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_33;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p21);
    call {:si_unique_call 8} {:cexpr "__cil_tmp39"} boogie_si_record_i64(out_$i29);
    goto corral_source_split_32;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb3:
    assume out_$i26 == 1;
    goto corral_source_split_28;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    out_$i27, out_$i28 := out_$i19, out_$i20;
    assume true;
    goto $bb3;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, in_$i18);
    goto corral_source_split_26;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    call {:si_unique_call 7} {:cexpr "__cil_tmp38"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_25;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    out_$p24 := $i2p.i64.ref(out_$i23);
    goto corral_source_split_24;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i64(out_$i22, 32);
    call {:si_unique_call 6} {:cexpr "__cil_tmp36"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_23;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    call {:si_unique_call 5} {:cexpr "__cil_tmp35"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_22;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_63_dummy:
    call {:si_unique_call 1} out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51 := vmw_deferred_io_loop_$bb1(in_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51);
    return;

  exit:
    return;
}



procedure vmw_deferred_io_loop_$bb1(in_$i18: i64, in_$i19: i64, in_$i20: i64, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$i27: i64, in_$i28: i64, in_$i29: i64, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$i34: i64, in_$i35: i64, in_$i36: i1, in_$i37: i64, in_$i38: i1, in_$i39: i64, in_$i40: i64, in_$i41: i64, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i64, in_$p46: ref, in_$i47: i32, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$p51: ref) returns (out_$i19: i64, out_$i20: i64, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$i27: i64, out_$i28: i64, out_$i29: i64, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$i34: i64, out_$i35: i64, out_$i36: i1, out_$i37: i64, out_$i38: i1, out_$i39: i64, out_$i40: i64, out_$i41: i64, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i64, out_$p46: ref, out_$i47: i32, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$p51: ref);



implementation vmw_fb_dirty_flush_loop_$bb26(in_$p7: ref, in_$p17: ref, in_$p22: ref, in_$i46: i32, in_$i61: i32, in_$i92: i32, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i1, in_$i101: i64, in_$i102: i64, in_$p103: ref, in_$i104: i32, in_$i105: i32, in_$i106: i1, in_$i107: i64, in_$p108: ref, in_$i109: i32, in_$i110: i64, in_$p111: ref, in_$p112: ref, in_$i113: i32) returns (out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i1, out_$i101: i64, out_$i102: i64, out_$p103: ref, out_$i104: i32, out_$i105: i32, out_$i106: i1, out_$i107: i64, out_$p108: ref, out_$i109: i32, out_$i110: i64, out_$p111: ref, out_$p112: ref, out_$i113: i32)
{

  entry:
    out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$i113 := in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$p103, in_$i104, in_$i105, in_$i106, in_$i107, in_$p108, in_$i109, in_$i110, in_$p111, in_$p112, in_$i113;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_266;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    out_$i97 := out_$i113;
    goto corral_source_split_295_dummy;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    out_$i113 := $add.i32(out_$i97, 1);
    call {:si_unique_call 131} {:cexpr "k"} boogie_si_record_i32(out_$i113);
    goto corral_source_split_295;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} iowrite32(out_$i109, out_$p112);
    goto corral_source_split_294;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    out_$p112 := $bitcast.ref.ref(out_$p111);
    goto corral_source_split_293;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref(in_$p22, $mul.ref(out_$i110, 4));
    goto corral_source_split_292;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    out_$i110 := $sext.i32.i64(out_$i97);
    goto corral_source_split_291;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i32($M.0, out_$p108);
    call {:si_unique_call 129} {:cexpr "__cil_tmp123"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_290;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref(in_$p17, $mul.ref(out_$i107, 4));
    goto corral_source_split_289;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i107 := $sext.i32.i64(out_$i97);
    goto corral_source_split_288;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb30:
    assume out_$i106 == 1;
    goto corral_source_split_282;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    out_$i106 := $ult.i32(out_$i97, out_$i105);
    goto corral_source_split_278;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    out_$i105 := $udiv.i32(out_$i104, 4);
    call {:si_unique_call 127} {:cexpr "__cil_tmp120"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_277;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i32($M.0, out_$p103);
    call {:si_unique_call 126} {:cexpr "__cil_tmp119"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_276;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    out_$p103 := $i2p.i64.ref(out_$i102);
    goto corral_source_split_275;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    out_$i102 := $add.i64(out_$i101, 344);
    call {:si_unique_call 125} {:cexpr "__cil_tmp118"} boogie_si_record_i64(out_$i102);
    goto corral_source_split_274;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    out_$i101 := $p2i.ref.i64(in_$p7);
    call {:si_unique_call 124} {:cexpr "__cil_tmp117"} boogie_si_record_i64(out_$i101);
    goto corral_source_split_273;

  $bb28:
    assume out_$i100 == 1;
    goto corral_source_split_272;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    out_$i100 := $ult.i32(out_$i97, out_$i99);
    goto corral_source_split_270;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    out_$i99 := $add.i32(out_$i98, in_$i61);
    call {:si_unique_call 123} {:cexpr "__cil_tmp114"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_269;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i98 := $add.i32(in_$i92, in_$i46);
    call {:si_unique_call 122} {:cexpr "__cil_tmp113"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_268;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_295_dummy:
    call {:si_unique_call 1} out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$i113 := vmw_fb_dirty_flush_loop_$bb26(in_$p7, in_$p17, in_$p22, in_$i46, in_$i61, in_$i92, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$i113);
    return;

  exit:
    return;
}



procedure vmw_fb_dirty_flush_loop_$bb26(in_$p7: ref, in_$p17: ref, in_$p22: ref, in_$i46: i32, in_$i61: i32, in_$i92: i32, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i1, in_$i101: i64, in_$i102: i64, in_$p103: ref, in_$i104: i32, in_$i105: i32, in_$i106: i1, in_$i107: i64, in_$p108: ref, in_$i109: i32, in_$i110: i64, in_$p111: ref, in_$p112: ref, in_$i113: i32) returns (out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i1, out_$i101: i64, out_$i102: i64, out_$p103: ref, out_$i104: i32, out_$i105: i32, out_$i106: i1, out_$i107: i64, out_$p108: ref, out_$i109: i32, out_$i110: i64, out_$p111: ref, out_$p112: ref, out_$i113: i32);



implementation vmw_fb_dirty_flush_loop_$bb20(in_$p7: ref, in_$i12: i32, in_$p17: ref, in_$p22: ref, in_$i46: i32, in_$i61: i32, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i1, in_$i101: i64, in_$i102: i64, in_$p103: ref, in_$i104: i32, in_$i105: i32, in_$i106: i1, in_$i107: i64, in_$p108: ref, in_$i109: i32, in_$i110: i64, in_$p111: ref, in_$p112: ref, in_$i113: i32, in_$i114: i32) returns (out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i1, out_$i101: i64, out_$i102: i64, out_$p103: ref, out_$i104: i32, out_$i105: i32, out_$i106: i1, out_$i107: i64, out_$p108: ref, out_$i109: i32, out_$i110: i64, out_$p111: ref, out_$p112: ref, out_$i113: i32, out_$i114: i32)
{

  entry:
    out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114 := in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$p103, in_$i104, in_$i105, in_$i106, in_$i107, in_$p108, in_$i109, in_$i110, in_$p111, in_$p112, in_$i113, in_$i114;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_238;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    out_$i92 := out_$i114;
    goto corral_source_split_286_dummy;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i114 := $add.i32(out_$i92, in_$i12);
    call {:si_unique_call 128} {:cexpr "i"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_286;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume !(out_$i106 == 1);
    goto corral_source_split_284;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    out_$i106 := $ult.i32(out_$i97, out_$i105);
    goto corral_source_split_278;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    out_$i105 := $udiv.i32(out_$i104, 4);
    call {:si_unique_call 127} {:cexpr "__cil_tmp120"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_277;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i32($M.0, out_$p103);
    call {:si_unique_call 126} {:cexpr "__cil_tmp119"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_276;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    out_$p103 := $i2p.i64.ref(out_$i102);
    goto corral_source_split_275;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    out_$i102 := $add.i64(out_$i101, 344);
    call {:si_unique_call 125} {:cexpr "__cil_tmp118"} boogie_si_record_i64(out_$i102);
    goto corral_source_split_274;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    out_$i101 := $p2i.ref.i64(in_$p7);
    call {:si_unique_call 124} {:cexpr "__cil_tmp117"} boogie_si_record_i64(out_$i101);
    goto corral_source_split_273;

  $bb28:
    assume out_$i100 == 1;
    goto corral_source_split_272;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    out_$i100 := $ult.i32(out_$i97, out_$i99);
    goto corral_source_split_270;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    out_$i99 := $add.i32(out_$i98, in_$i61);
    call {:si_unique_call 123} {:cexpr "__cil_tmp114"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_269;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i98 := $add.i32(out_$i92, in_$i46);
    call {:si_unique_call 122} {:cexpr "__cil_tmp113"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_268;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb26:
    call out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$i113 := vmw_fb_dirty_flush_loop_$bb26(in_$p7, in_$p17, in_$p22, in_$i46, in_$i61, out_$i92, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$i113);
    goto $bb26_last;

  $bb26_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_266;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    out_$i97 := out_$i96;
    goto $bb26;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    out_$i97 := out_$i113;
    assume false;
    return;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    out_$i113 := $add.i32(out_$i97, 1);
    call {:si_unique_call 131} {:cexpr "k"} boogie_si_record_i32(out_$i113);
    goto corral_source_split_295;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} iowrite32(out_$i109, out_$p112);
    goto corral_source_split_294;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    out_$p112 := $bitcast.ref.ref(out_$p111);
    goto corral_source_split_293;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref(in_$p22, $mul.ref(out_$i110, 4));
    goto corral_source_split_292;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    out_$i110 := $sext.i32.i64(out_$i97);
    goto corral_source_split_291;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i32($M.0, out_$p108);
    call {:si_unique_call 129} {:cexpr "__cil_tmp123"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_290;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref(in_$p17, $mul.ref(out_$i107, 4));
    goto corral_source_split_289;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i107 := $sext.i32.i64(out_$i97);
    goto corral_source_split_288;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb30:
    assume out_$i106 == 1;
    goto corral_source_split_282;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i96 := $add.i32(out_$i92, in_$i46);
    call {:si_unique_call 112} {:cexpr "__cil_tmp111"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_248;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i95 == 1;
    goto corral_source_split_244;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    out_$i95 := $ult.i32(out_$i92, out_$i94);
    goto corral_source_split_242;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    out_$i94 := $udiv.i32(out_$i93, 4);
    call {:si_unique_call 111} {:cexpr "__cil_tmp108"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_241;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.0, in_$p91);
    call {:si_unique_call 110} {:cexpr "__cil_tmp107"} boogie_si_record_i32(out_$i93);
    goto corral_source_split_240;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb29:
    assume !(out_$i100 == 1);
    goto corral_source_split_280;

  corral_source_split_286_dummy:
    call {:si_unique_call 1} out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114 := vmw_fb_dirty_flush_loop_$bb20(in_$p7, in_$i12, in_$p17, in_$p22, in_$i46, in_$i61, in_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114);
    return;

  exit:
    return;
}



procedure vmw_fb_dirty_flush_loop_$bb20(in_$p7: ref, in_$i12: i32, in_$p17: ref, in_$p22: ref, in_$i46: i32, in_$i61: i32, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i1, in_$i101: i64, in_$i102: i64, in_$p103: ref, in_$i104: i32, in_$i105: i32, in_$i106: i1, in_$i107: i64, in_$p108: ref, in_$i109: i32, in_$i110: i64, in_$p111: ref, in_$p112: ref, in_$i113: i32, in_$i114: i32) returns (out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i1, out_$i101: i64, out_$i102: i64, out_$p103: ref, out_$i104: i32, out_$i105: i32, out_$i106: i1, out_$i107: i64, out_$p108: ref, out_$i109: i32, out_$i110: i64, out_$p111: ref, out_$p112: ref, out_$i113: i32, out_$i114: i32);



implementation vmw_fifo_reserve_loop_$bb29(in_$p0: ref, in_$i1: i32, in_$p8: ref, in_$i13: i32, in_$i19: i32, in_$i22: i32, in_$i25: i32, in_$p70: ref, in_$p71: ref, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i77: i32, in_$i78: i1, in_$i79: i1, in_$i80: i32, in_$i81: i32, in_$i76: i32, in_$i82: i64, in_$i83: i64, in_$i84: i1, in_$i87: i1, in_$i88: i8, in_$i89: i1, in_$i90: i1, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_$i94: i1, in_$i95: i1, in_$i96: i32, in_$i97: i1, in_$i98: i1, in_$i99: i32, in_$i100: i64, in_$i101: i64, in_$i102: i1, in_$i103: i8, in_$i85: i8, in_$i86: i8, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$i109: i1, in_$i110: i1, in_$i111: i32, in_$i112: i1, in_$i113: i1, in_$i114: i32, in_$i115: i64, in_$i116: i64, in_$i117: i1, in_$i119: i1, in_$i120: i32, in_$i121: i1, in_$i122: i32, in_$i123: i1, in_$i124: i1, in_$i125: i32, in_$i126: i1, in_$i127: i1, in_$i128: i32, in_$i129: i64, in_$i130: i64, in_$i131: i1, in_$i118: i8, in_$i104: i8, in_$i105: i8, in_$i132: i1, in_$i133: i1, in_$i134: i64, in_$i135: i1, in_$i147: i8, in_$i148: i1) returns (out_$p70: ref, out_$p71: ref, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i77: i32, out_$i78: i1, out_$i79: i1, out_$i80: i32, out_$i81: i32, out_$i76: i32, out_$i82: i64, out_$i83: i64, out_$i84: i1, out_$i87: i1, out_$i88: i8, out_$i89: i1, out_$i90: i1, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_$i94: i1, out_$i95: i1, out_$i96: i32, out_$i97: i1, out_$i98: i1, out_$i99: i32, out_$i100: i64, out_$i101: i64, out_$i102: i1, out_$i103: i8, out_$i85: i8, out_$i86: i8, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$i109: i1, out_$i110: i1, out_$i111: i32, out_$i112: i1, out_$i113: i1, out_$i114: i32, out_$i115: i64, out_$i116: i64, out_$i117: i1, out_$i119: i1, out_$i120: i32, out_$i121: i1, out_$i122: i32, out_$i123: i1, out_$i124: i1, out_$i125: i32, out_$i126: i1, out_$i127: i1, out_$i128: i32, out_$i129: i64, out_$i130: i64, out_$i131: i1, out_$i118: i8, out_$i104: i8, out_$i105: i8, out_$i132: i1, out_$i133: i1, out_$i134: i64, out_$i135: i1, out_$i147: i8, out_$i148: i1)
{

  entry:
    out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i76, out_$i82, out_$i83, out_$i84, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i85, out_$i86, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i118, out_$i104, out_$i105, out_$i132, out_$i133, out_$i134, out_$i135, out_$i147, out_$i148 := in_$p70, in_$p71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i76, in_$i82, in_$i83, in_$i84, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i85, in_$i86, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i118, in_$i104, in_$i105, in_$i132, in_$i133, in_$i134, in_$i135, in_$i147, in_$i148;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb76_dummy;

  $bb73:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    out_$i148 := $trunc.i8.i1(out_$i147);
    goto corral_source_split_533;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_532;

  $bb59:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    out_$i147 := out_$i104;
    goto $bb71;

  $bb70:
    assume {:verifier.code 0} true;
    out_$i147 := 1;
    goto $bb71;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb64:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    out_$i135 := $ule.i64(out_$i134, 4);
    goto corral_source_split_510;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    out_$i134 := $zext.i32.i64(in_$i1);
    call {:si_unique_call 222} {:cexpr "__cil_tmp82"} boogie_si_record_i64(out_$i134);
    goto corral_source_split_509;

  $bb61:
    assume !(out_$i133 == 1);
    goto corral_source_split_508;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    out_$i133 := $ne.i32(in_$i13, 0);
    goto corral_source_split_504;

  $bb58:
    assume out_$i132 == 1;
    goto corral_source_split_503;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    out_$i132 := $trunc.i8.i1(out_$i105);
    goto corral_source_split_482;

  $bb51:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_481;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i104, out_$i105 := 0, out_$i118;
    goto $bb51;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    out_$i104, out_$i105 := out_$i85, out_$i86;
    goto $bb51;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_462;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i85, out_$i86 := out_$i103, 0;
    goto $bb44;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    out_$i85, out_$i86 := 0, 1;
    goto $bb44;

  $bb42:
    assume out_$i84 == 1;
    goto corral_source_split_455;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i64(out_$i83, 0);
    goto corral_source_split_446;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} out_$i83 := ldv__builtin_expect(out_$i82, 1);
    call {:si_unique_call 203} {:cexpr "tmp___14"} boogie_si_record_i64(out_$i83);
    goto corral_source_split_445;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(out_$i76);
    call {:si_unique_call 201} {:cexpr "__cil_tmp66"} boogie_si_record_i64(out_$i82);
    goto corral_source_split_444;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_443;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i76 := out_$i81;
    goto $bb35;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    out_$i76 := 1;
    goto $bb35;

  $bb33:
    assume out_$i75 == 1;
    goto corral_source_split_437;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    out_$i75 := $ult.i32(out_$i74, in_$i19);
    goto corral_source_split_421;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i32(in_$i25, in_$i1);
    call {:si_unique_call 192} {:cexpr "__cil_tmp64"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_420;

  $bb31:
    assume out_$i73 == 1;
    goto corral_source_split_419;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    out_$i73 := $uge.i32(in_$i25, out_$i72);
    goto corral_source_split_417;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} out_$i72 := ioread32(out_$p71);
    call {:si_unique_call 191} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_416;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(out_$p70);
    goto corral_source_split_415;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref(in_$p8, $mul.ref(3, 4));
    goto corral_source_split_414;

  $bb37:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    out_$i81 := 0;
    goto $bb41;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    out_$i81 := out_$i80;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_453;

  $bb39:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    out_$i80 := 0;
    goto $bb40;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    out_$i80 := 1;
    goto $bb40;

  $bb38:
    assume out_$i79 == 1;
    goto corral_source_split_451;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    out_$i79 := $ugt.i32(out_$i72, in_$i22);
    goto corral_source_split_449;

  $bb36:
    assume out_$i78 == 1;
    goto corral_source_split_448;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i77, in_$i19);
    goto corral_source_split_441;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    out_$i77 := $add.i32(in_$i25, in_$i1);
    call {:si_unique_call 200} {:cexpr "__cil_tmp65"} boogie_si_record_i32(out_$i77);
    goto corral_source_split_440;

  $bb34:
    assume !(out_$i75 == 1);
    goto corral_source_split_439;

  $bb46:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    out_$i103 := 1;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i103 := 0;
    goto $bb50;

  $bb48:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i64(out_$i101, 0);
    goto corral_source_split_477;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} out_$i101 := ldv__builtin_expect(out_$i100, 0);
    call {:si_unique_call 213} {:cexpr "tmp___11"} boogie_si_record_i64(out_$i101);
    goto corral_source_split_476;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    out_$i100 := $sext.i32.i64(out_$i99);
    call {:si_unique_call 211} {:cexpr "__cil_tmp71"} boogie_si_record_i64(out_$i100);
    goto corral_source_split_475;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i1.i32(out_$i98);
    call {:si_unique_call 210} {:cexpr "__cil_tmp70"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_474;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    out_$i98 := $xor.i1(out_$i97, 1);
    goto corral_source_split_473;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i32(out_$i96, 0);
    goto corral_source_split_472;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i1.i32(out_$i95);
    call {:si_unique_call 209} {:cexpr "__cil_tmp69"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_471;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    out_$i95 := $xor.i1(out_$i94, 1);
    goto corral_source_split_470;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i32(out_$i93, 0);
    goto corral_source_split_469;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    out_$i93 := $zext.i1.i32(out_$i92);
    call {:si_unique_call 208} {:cexpr "__cil_tmp68"} boogie_si_record_i32(out_$i93);
    goto corral_source_split_468;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    out_$i92 := $ne.i32(out_$i91, 0);
    goto corral_source_split_467;

  SeqInstr_18:
    call {:si_unique_call 207} {:cexpr "ret"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_466;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} out_$i91 := vmw_fifo_wait(in_$p0, in_$i1, out_$i90, 750);
    goto SeqInstr_17;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    out_$i90 := $trunc.i8.i1(0);
    goto corral_source_split_465;

  $bb45:
    assume out_$i89 == 1;
    goto corral_source_split_464;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    out_$i89 := $trunc.i8.i1(out_$i88);
    goto corral_source_split_460;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i1.i8(out_$i87);
    call {:si_unique_call 205} {:cexpr "tmp___12"} boogie_si_record_i8(out_$i88);
    goto corral_source_split_459;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} out_$i87 := vmw_fifo_is_full(in_$p0, in_$i1);
    goto corral_source_split_458;

  $bb43:
    assume !(out_$i84 == 1);
    goto corral_source_split_457;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i118 := 0;
    goto $bb54;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    out_$i118 := 1;
    goto $bb54;

  $bb52:
    assume out_$i117 == 1;
    goto corral_source_split_484;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    out_$i117 := $ne.i64(out_$i116, 0);
    goto corral_source_split_435;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} out_$i116 := ldv__builtin_expect(out_$i115, 1);
    call {:si_unique_call 199} {:cexpr "tmp___16"} boogie_si_record_i64(out_$i116);
    goto corral_source_split_434;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    out_$i115 := $sext.i32.i64(out_$i114);
    call {:si_unique_call 197} {:cexpr "__cil_tmp76"} boogie_si_record_i64(out_$i115);
    goto corral_source_split_433;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    out_$i114 := $zext.i1.i32(out_$i113);
    call {:si_unique_call 196} {:cexpr "__cil_tmp75"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_432;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    out_$i113 := $xor.i1(out_$i112, 1);
    goto corral_source_split_431;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    out_$i112 := $ne.i32(out_$i111, 0);
    goto corral_source_split_430;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    out_$i111 := $zext.i1.i32(out_$i110);
    call {:si_unique_call 195} {:cexpr "__cil_tmp74"} boogie_si_record_i32(out_$i111);
    goto corral_source_split_429;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    out_$i110 := $xor.i1(out_$i109, 1);
    goto corral_source_split_428;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    out_$i109 := $ne.i32(out_$i108, 0);
    goto corral_source_split_427;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i1.i32(out_$i107);
    call {:si_unique_call 194} {:cexpr "__cil_tmp73"} boogie_si_record_i32(out_$i108);
    goto corral_source_split_426;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    out_$i107 := $ult.i32(out_$i106, out_$i72);
    goto corral_source_split_425;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    out_$i106 := $add.i32(in_$i25, in_$i1);
    call {:si_unique_call 193} {:cexpr "__cil_tmp72"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_424;

  $bb32:
    assume !(out_$i73 == 1);
    goto corral_source_split_423;

  $bb56:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i64(out_$i130, 0);
    goto corral_source_split_499;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} out_$i130 := ldv__builtin_expect(out_$i129, 0);
    call {:si_unique_call 221} {:cexpr "tmp___15"} boogie_si_record_i64(out_$i130);
    goto corral_source_split_498;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    out_$i129 := $sext.i32.i64(out_$i128);
    call {:si_unique_call 219} {:cexpr "__cil_tmp81"} boogie_si_record_i64(out_$i129);
    goto corral_source_split_497;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i1.i32(out_$i127);
    call {:si_unique_call 218} {:cexpr "__cil_tmp80"} boogie_si_record_i32(out_$i128);
    goto corral_source_split_496;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    out_$i127 := $xor.i1(out_$i126, 1);
    goto corral_source_split_495;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    out_$i126 := $ne.i32(out_$i125, 0);
    goto corral_source_split_494;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    out_$i125 := $zext.i1.i32(out_$i124);
    call {:si_unique_call 217} {:cexpr "__cil_tmp79"} boogie_si_record_i32(out_$i125);
    goto corral_source_split_493;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    out_$i124 := $xor.i1(out_$i123, 1);
    goto corral_source_split_492;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    out_$i123 := $ne.i32(out_$i122, 0);
    goto corral_source_split_491;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    out_$i122 := $zext.i1.i32(out_$i121);
    call {:si_unique_call 216} {:cexpr "__cil_tmp78"} boogie_si_record_i32(out_$i122);
    goto corral_source_split_490;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    out_$i121 := $ne.i32(out_$i120, 0);
    goto corral_source_split_489;

  SeqInstr_21:
    call {:si_unique_call 215} {:cexpr "ret"} boogie_si_record_i32(out_$i120);
    goto corral_source_split_488;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} out_$i120 := vmw_fifo_wait(in_$p0, in_$i1, out_$i119, 750);
    goto SeqInstr_20;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    out_$i119 := $trunc.i8.i1(0);
    goto corral_source_split_487;

  $bb53:
    assume !(out_$i117 == 1);
    goto corral_source_split_486;

  $bb76_dummy:
    call {:si_unique_call 1} out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i76, out_$i82, out_$i83, out_$i84, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i85, out_$i86, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i118, out_$i104, out_$i105, out_$i132, out_$i133, out_$i134, out_$i135, out_$i147, out_$i148 := vmw_fifo_reserve_loop_$bb29(in_$p0, in_$i1, in_$p8, in_$i13, in_$i19, in_$i22, in_$i25, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i76, out_$i82, out_$i83, out_$i84, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i85, out_$i86, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i118, out_$i104, out_$i105, out_$i132, out_$i133, out_$i134, out_$i135, out_$i147, out_$i148);
    return;

  exit:
    return;
}



procedure vmw_fifo_reserve_loop_$bb29(in_$p0: ref, in_$i1: i32, in_$p8: ref, in_$i13: i32, in_$i19: i32, in_$i22: i32, in_$i25: i32, in_$p70: ref, in_$p71: ref, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i77: i32, in_$i78: i1, in_$i79: i1, in_$i80: i32, in_$i81: i32, in_$i76: i32, in_$i82: i64, in_$i83: i64, in_$i84: i1, in_$i87: i1, in_$i88: i8, in_$i89: i1, in_$i90: i1, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_$i94: i1, in_$i95: i1, in_$i96: i32, in_$i97: i1, in_$i98: i1, in_$i99: i32, in_$i100: i64, in_$i101: i64, in_$i102: i1, in_$i103: i8, in_$i85: i8, in_$i86: i8, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$i109: i1, in_$i110: i1, in_$i111: i32, in_$i112: i1, in_$i113: i1, in_$i114: i32, in_$i115: i64, in_$i116: i64, in_$i117: i1, in_$i119: i1, in_$i120: i32, in_$i121: i1, in_$i122: i32, in_$i123: i1, in_$i124: i1, in_$i125: i32, in_$i126: i1, in_$i127: i1, in_$i128: i32, in_$i129: i64, in_$i130: i64, in_$i131: i1, in_$i118: i8, in_$i104: i8, in_$i105: i8, in_$i132: i1, in_$i133: i1, in_$i134: i64, in_$i135: i1, in_$i147: i8, in_$i148: i1) returns (out_$p70: ref, out_$p71: ref, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i77: i32, out_$i78: i1, out_$i79: i1, out_$i80: i32, out_$i81: i32, out_$i76: i32, out_$i82: i64, out_$i83: i64, out_$i84: i1, out_$i87: i1, out_$i88: i8, out_$i89: i1, out_$i90: i1, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_$i94: i1, out_$i95: i1, out_$i96: i32, out_$i97: i1, out_$i98: i1, out_$i99: i32, out_$i100: i64, out_$i101: i64, out_$i102: i1, out_$i103: i8, out_$i85: i8, out_$i86: i8, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$i109: i1, out_$i110: i1, out_$i111: i32, out_$i112: i1, out_$i113: i1, out_$i114: i32, out_$i115: i64, out_$i116: i64, out_$i117: i1, out_$i119: i1, out_$i120: i32, out_$i121: i1, out_$i122: i32, out_$i123: i1, out_$i124: i1, out_$i125: i32, out_$i126: i1, out_$i127: i1, out_$i128: i32, out_$i129: i64, out_$i130: i64, out_$i131: i1, out_$i118: i8, out_$i104: i8, out_$i105: i8, out_$i132: i1, out_$i133: i1, out_$i134: i64, out_$i135: i1, out_$i147: i8, out_$i148: i1);
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, assertsPassed, $CurrAddr, $M.6, $M.11, $M.12, $M.13, $M.10, $M.16;



implementation vmw_fifo_reserve_loop_$bb23()
{

  entry:
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb24_dummy;

  $bb24_dummy:
    call {:si_unique_call 1} vmw_fifo_reserve_loop_$bb23();
    return;

  exit:
    return;
}



procedure vmw_fifo_reserve_loop_$bb23();



implementation vmw_fifo_reserve_loop_$bb11()
{

  entry:
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb12_dummy;

  $bb12_dummy:
    call {:si_unique_call 1} vmw_fifo_reserve_loop_$bb11();
    return;

  exit:
    return;
}



procedure vmw_fifo_reserve_loop_$bb11();



implementation vmw_fifo_commit_loop_$bb19()
{

  entry:
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb20_dummy;

  $bb20_dummy:
    call {:si_unique_call 1} vmw_fifo_commit_loop_$bb19();
    return;

  exit:
    return;
}



procedure vmw_fifo_commit_loop_$bb19();



implementation vmw_fifo_commit_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb8_dummy;

  $bb8_dummy:
    call {:si_unique_call 1} vmw_fifo_commit_loop_$bb7();
    return;

  exit:
    return;
}



procedure vmw_fifo_commit_loop_$bb7();



implementation vmw_fifo_slow_copy_loop_$bb4(in_$p1: ref, in_$i3: i32, in_$i4: i32, in_$i22: i32, in_$i23: i32, in_$p24: ref, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i41: i1, in_$i42: i32, in_$i43: i64, in_$i44: i64, in_$i45: i1, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$i51: i32) returns (out_$i22: i32, out_$i23: i32, out_$p24: ref, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i41: i1, out_$i42: i32, out_$i43: i64, out_$i44: i64, out_$i45: i1, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$i51: i32)
{

  entry:
    out_$i22, out_$i23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51 := in_$i22, in_$i23, in_$p24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$p30, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_802;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    out_$i22, out_$i23, out_$p24 := out_$i51, out_$i46, out_$p26;
    goto corral_source_split_840_dummy;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i64.i32(out_$i50);
    call {:si_unique_call 370} {:cexpr "bytes"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    out_$i50 := $sub.i64(out_$i49, 4);
    call {:si_unique_call 369} {:cexpr "__cil_tmp34"} boogie_si_record_i64(out_$i50);
    goto corral_source_split_839;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i32.i64(out_$i22);
    call {:si_unique_call 368} {:cexpr "__cil_tmp33"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_838;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} iowrite32(out_$i46, out_$p48);
    call {:si_unique_call 367} devirtbounce.1(0);
    goto corral_source_split_837;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_836;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref(in_$p1, $mul.ref(2, 4));
    goto corral_source_split_835;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} devirtbounce.1(0);
    goto corral_source_split_834;

  $bb11:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    out_$i46 := out_$i34;
    goto $bb12;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    out_$i46 := in_$i4;
    goto $bb12;

  $bb10:
    assume out_$i45 == 1;
    call {:si_unique_call 364} {:cexpr "vmw_fifo_slow_copy:arg:next_cmd"} boogie_si_record_i32(in_$i4);
    goto corral_source_split_832;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, 0);
    goto corral_source_split_830;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} out_$i44 := ldv__builtin_expect(out_$i43, 0);
    call {:si_unique_call 363} {:cexpr "tmp___9"} boogie_si_record_i64(out_$i44);
    goto corral_source_split_829;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i42);
    call {:si_unique_call 361} {:cexpr "__cil_tmp30"} boogie_si_record_i64(out_$i43);
    goto corral_source_split_828;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i1.i32(out_$i41);
    call {:si_unique_call 360} {:cexpr "__cil_tmp29"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_827;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    out_$i41 := $xor.i1(out_$i40, 1);
    goto corral_source_split_826;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_825;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i1.i32(out_$i38);
    call {:si_unique_call 359} {:cexpr "__cil_tmp28"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_824;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    out_$i38 := $xor.i1(out_$i37, 1);
    goto corral_source_split_823;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_822;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i1.i32(out_$i35);
    call {:si_unique_call 358} {:cexpr "__cil_tmp27"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_821;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i34, in_$i3);
    goto corral_source_split_820;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    out_$i34 := $trunc.i64.i32(out_$i33);
    call {:si_unique_call 357} {:cexpr "next_cmd"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_819;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i64(out_$i32, 4);
    call {:si_unique_call 356} {:cexpr "__cil_tmp26"} boogie_si_record_i64(out_$i33);
    goto corral_source_split_818;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i32.i64(out_$i23);
    call {:si_unique_call 355} {:cexpr "__cil_tmp25"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_817;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} iowrite32(out_$i27, out_$p31);
    goto corral_source_split_816;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_815;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(in_$p1, $mul.ref(out_$i29, 4));
    goto corral_source_split_814;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i32.i64(out_$i28);
    goto corral_source_split_813;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    out_$i28 := $lshr.i32(out_$i23, 2);
    call {:si_unique_call 353} {:cexpr "__cil_tmp22"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_812;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p24);
    call {:si_unique_call 352} {:cexpr "__cil_tmp21"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_811;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p24, $mul.ref(1, 4));
    goto corral_source_split_810;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i25 == 1;
    goto corral_source_split_806;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i25 := $ugt.i32(out_$i22, 0);
    goto corral_source_split_804;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_840_dummy:
    call {:si_unique_call 1} out_$i22, out_$i23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51 := vmw_fifo_slow_copy_loop_$bb4(in_$p1, in_$i3, in_$i4, out_$i22, out_$i23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51);
    return;

  exit:
    return;
}



procedure vmw_fifo_slow_copy_loop_$bb4(in_$p1: ref, in_$i3: i32, in_$i4: i32, in_$i22: i32, in_$i23: i32, in_$p24: ref, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i41: i1, in_$i42: i32, in_$i43: i64, in_$i44: i64, in_$i45: i1, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$i51: i32) returns (out_$i22: i32, out_$i23: i32, out_$p24: ref, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i41: i1, out_$i42: i32, out_$i43: i64, out_$i44: i64, out_$i45: i1, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$i51: i32);



implementation vmw_fifo_wait_loop_$bb46(in_$p0: ref, in_$i1: i32, in_$p5: ref, in_$i128: i64, in_$i129: i64, in_$i130: i64, in_$p131: ref, in_$i132: i1, in_$i133: i8, in_$i134: i1, in_$i135: i64, in_$i137: i64, in_$i138: i1, in_$i139: i64) returns (out_$i128: i64, out_$i129: i64, out_$i130: i64, out_$p131: ref, out_$i132: i1, out_$i133: i8, out_$i134: i1, out_$i135: i64, out_$i137: i64, out_$i138: i1, out_$i139: i64)
{

  entry:
    out_$i128, out_$i129, out_$i130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i137, out_$i138, out_$i139 := in_$i128, in_$i129, in_$i130, in_$p131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i137, in_$i138, in_$i139;
    goto $bb46, exit;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_1138;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i128 := out_$i137;
    goto $bb54_dummy;

  $bb52:
    assume out_$i138 == 1;
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    out_$i139 := out_$i137;
    assume true;
    goto $bb52;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    out_$i138 := $ne.i64(out_$i137, 0);
    goto corral_source_split_1153;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} out_$i137 := schedule_timeout(out_$i128);
    call {:si_unique_call 518} {:cexpr "__ret___0"} boogie_si_record_i64(out_$i137);
    goto corral_source_split_1152;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume out_$i134 == 1;
    goto corral_source_split_1148;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    out_$i135 := out_$i128;
    assume true;
    goto $bb48;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    out_$i134 := $trunc.i8.i1(out_$i133);
    goto corral_source_split_1146;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    out_$i133 := $zext.i1.i8(out_$i132);
    call {:si_unique_call 516} {:cexpr "tmp___19"} boogie_si_record_i8(out_$i133);
    goto corral_source_split_1145;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} out_$i132 := vmw_fifo_is_full(in_$p0, in_$i1);
    goto corral_source_split_1144;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} prepare_to_wait(out_$p131, in_$p5, 2);
    goto corral_source_split_1143;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    out_$p131 := $i2p.i64.ref(out_$i130);
    goto corral_source_split_1142;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    out_$i130 := $add.i64(out_$i129, 2928);
    call {:si_unique_call 513} {:cexpr "__cil_tmp90"} boogie_si_record_i64(out_$i130);
    goto corral_source_split_1141;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i129 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 512} {:cexpr "__cil_tmp89"} boogie_si_record_i64(out_$i129);
    goto corral_source_split_1140;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb54_dummy:
    call {:si_unique_call 1} out_$i128, out_$i129, out_$i130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i137, out_$i138, out_$i139 := vmw_fifo_wait_loop_$bb46(in_$p0, in_$i1, in_$p5, out_$i128, out_$i129, out_$i130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i137, out_$i138, out_$i139);
    return;

  exit:
    return;
}



procedure vmw_fifo_wait_loop_$bb46(in_$p0: ref, in_$i1: i32, in_$p5: ref, in_$i128: i64, in_$i129: i64, in_$i130: i64, in_$p131: ref, in_$i132: i1, in_$i133: i8, in_$i134: i1, in_$i135: i64, in_$i137: i64, in_$i138: i1, in_$i139: i64) returns (out_$i128: i64, out_$i129: i64, out_$i130: i64, out_$p131: ref, out_$i132: i1, out_$i133: i8, out_$i134: i1, out_$i135: i64, out_$i137: i64, out_$i138: i1, out_$i139: i64);



implementation vmw_fifo_wait_loop_$bb26(in_$p0: ref, in_$i1: i32, in_$p4: ref, in_$i84: i64, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$i88: i1, in_$i89: i8, in_$i90: i1, in_$i91: i64, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$i96: i64, in_$i97: i1, in_$i98: i64) returns (out_$i84: i64, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$i88: i1, out_$i89: i8, out_$i90: i1, out_$i91: i64, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$i96: i64, out_$i97: i1, out_$i98: i64)
{

  entry:
    out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98 := in_$i84, in_$i85, in_$i86, in_$p87, in_$i88, in_$i89, in_$i90, in_$i91, in_$p93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1062;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i84 := out_$i96;
    goto $bb38_dummy;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    out_$i98 := out_$i96;
    assume true;
    goto $bb35;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i64(out_$i96, 0);
    goto corral_source_split_1090;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} out_$i96 := schedule_timeout(out_$i84);
    call {:si_unique_call 498} {:cexpr "__ret"} boogie_si_record_i64(out_$i96);
    goto corral_source_split_1089;

  $bb33:
    assume !(out_$i95 == 1);
    goto corral_source_split_1088;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    out_$i95 := $ne.i32(out_$i94, 0);
    goto corral_source_split_1078;

  SeqInstr_66:
    call {:si_unique_call 493} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_1077;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} out_$i94 := signal_pending(out_$p93);
    goto SeqInstr_65;

  SeqInstr_63:
    goto corral_source_split_1076;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  $bb30:
    call {:si_unique_call 491} out_$p93 := devirtbounce.3(0, current_task);
    goto SeqInstr_62;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i90 == 1;
    goto corral_source_split_1072;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    out_$i91 := out_$i84;
    assume true;
    goto $bb28;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    out_$i90 := $trunc.i8.i1(out_$i89);
    goto corral_source_split_1070;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i1.i8(out_$i88);
    call {:si_unique_call 490} {:cexpr "tmp___14"} boogie_si_record_i8(out_$i89);
    goto corral_source_split_1069;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} out_$i88 := vmw_fifo_is_full(in_$p0, in_$i1);
    goto corral_source_split_1068;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} prepare_to_wait(out_$p87, in_$p4, 1);
    goto corral_source_split_1067;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    out_$p87 := $i2p.i64.ref(out_$i86);
    goto corral_source_split_1066;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i64(out_$i85, 2928);
    call {:si_unique_call 487} {:cexpr "__cil_tmp76"} boogie_si_record_i64(out_$i86);
    goto corral_source_split_1065;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i85 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 486} {:cexpr "__cil_tmp75"} boogie_si_record_i64(out_$i85);
    goto corral_source_split_1064;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb38_dummy:
    call {:si_unique_call 1} out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98 := vmw_fifo_wait_loop_$bb26(in_$p0, in_$i1, in_$p4, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98);
    return;

  exit:
    return;
}



procedure vmw_fifo_wait_loop_$bb26(in_$p0: ref, in_$i1: i32, in_$p4: ref, in_$i84: i64, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$i88: i1, in_$i89: i8, in_$i90: i1, in_$i91: i64, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$i96: i64, in_$i97: i1, in_$i98: i64) returns (out_$i84: i64, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$i88: i1, out_$i89: i8, out_$i90: i1, out_$i91: i64, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$i96: i64, out_$i97: i1, out_$i98: i64);
  modifies $M.0, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.6, $CurrAddr, $M.3, $M.4, $M.10, $M.13, $M.16;



implementation vmw_fifo_wait_noirq_loop_$bb1(in_$p0: ref, in_$i1: i32, in_$p4: ref, in_$i7: i8, in_$i11: i64, in_$i34: i1, in_$i35: i32, in_$i36: i64, in_$i37: i64, in_$p38: ref, in_$i39: i1, in_$i40: i8, in_$i41: i1, in_$i43: i64, in_$i44: i64, in_$i45: i1, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_vslice_dummy_var_62: i64) returns (out_$i34: i1, out_$i35: i32, out_$i36: i64, out_$i37: i64, out_$p38: ref, out_$i39: i1, out_$i40: i8, out_$i41: i1, out_$i43: i64, out_$i44: i64, out_$i45: i1, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_vslice_dummy_var_62: i64)
{

  entry:
    out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i43, out_$i44, out_$i45, out_$i48, out_$p49, out_$i50, out_$i51, out_vslice_dummy_var_62 := in_$i34, in_$i35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$i41, in_$i43, in_$i44, in_$i45, in_$i48, in_$p49, in_$i50, in_$i51, in_vslice_dummy_var_62;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb18_dummy;

  $bb14:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i50, 0);
    goto corral_source_split_1304;

  SeqInstr_84:
    call {:si_unique_call 592} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_1303;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} out_$i50 := signal_pending(out_$p49);
    goto SeqInstr_83;

  SeqInstr_81:
    goto corral_source_split_1302;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  $bb13:
    assume out_$i48 == 1;
    call {:si_unique_call 590} out_$p49 := devirtbounce.3(0, current_task);
    goto SeqInstr_80;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    out_$i48 := $trunc.i8.i1(in_$i7);
    goto corral_source_split_1300;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} out_vslice_dummy_var_62 := schedule_timeout(1);
    goto corral_source_split_1299;

  $bb11:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    out_$i45 := $sge.i64(out_$i44, 0);
    goto corral_source_split_1283;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    out_$i44 := $sub.i64(out_$i43, in_$i11);
    call {:si_unique_call 580} {:cexpr "__cil_tmp32"} boogie_si_record_i64(out_$i44);
    goto corral_source_split_1282;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.0, jiffies);
    call {:si_unique_call 579} {:cexpr "__cil_tmp31"} boogie_si_record_i64(out_$i43);
    goto corral_source_split_1281;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i41 == 1;
    goto corral_source_split_1277;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    out_$i41 := $trunc.i8.i1(out_$i40);
    goto corral_source_split_1275;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i1.i8(out_$i39);
    call {:si_unique_call 578} {:cexpr "tmp___9"} boogie_si_record_i8(out_$i40);
    goto corral_source_split_1274;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} out_$i39 := vmw_fifo_is_full(in_$p0, in_$i1);
    goto corral_source_split_1273;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} prepare_to_wait(out_$p38, in_$p4, out_$i35);
    goto corral_source_split_1272;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    out_$p38 := $i2p.i64.ref(out_$i37);
    goto corral_source_split_1271;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i64(out_$i36, 2928);
    call {:si_unique_call 575} {:cexpr "__cil_tmp28"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_1270;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 574} {:cexpr "__cil_tmp27"} boogie_si_record_i64(out_$i36);
    goto corral_source_split_1269;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1268;

  $bb4:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := 2;
    goto $bb5;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    out_$i35 := 1;
    goto $bb5;

  $bb3:
    assume out_$i34 == 1;
    goto corral_source_split_1266;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i34 := $trunc.i8.i1(in_$i7);
    goto corral_source_split_1264;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i43, out_$i44, out_$i45, out_$i48, out_$p49, out_$i50, out_$i51, out_vslice_dummy_var_62 := vmw_fifo_wait_noirq_loop_$bb1(in_$p0, in_$i1, in_$p4, in_$i7, in_$i11, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i43, out_$i44, out_$i45, out_$i48, out_$p49, out_$i50, out_$i51, out_vslice_dummy_var_62);
    return;

  exit:
    return;
}



procedure vmw_fifo_wait_noirq_loop_$bb1(in_$p0: ref, in_$i1: i32, in_$p4: ref, in_$i7: i8, in_$i11: i64, in_$i34: i1, in_$i35: i32, in_$i36: i64, in_$i37: i64, in_$p38: ref, in_$i39: i1, in_$i40: i8, in_$i41: i1, in_$i43: i64, in_$i44: i64, in_$i45: i1, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_vslice_dummy_var_62: i64) returns (out_$i34: i1, out_$i35: i32, out_$i36: i64, out_$i37: i64, out_$p38: ref, out_$i39: i1, out_$i40: i8, out_$i41: i1, out_$i43: i64, out_$i44: i64, out_$i45: i1, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_vslice_dummy_var_62: i64);
  modifies $M.0, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.6, $CurrAddr, $M.3, $M.4, $M.10, $M.13, $M.16;



implementation vmw_fence_obj_unreference_loop_$bb14()
{

  entry:
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  $bb15_dummy:
    call {:si_unique_call 1} vmw_fence_obj_unreference_loop_$bb14();
    return;

  exit:
    return;
}



procedure vmw_fence_obj_unreference_loop_$bb14();



implementation vmw_fence_obj_wait_loop_$bb35(in_$p0: ref, in_$i1: i32, in_$p6: ref, in_$i94: i64, in_$i95: i64, in_$i96: i64, in_$p97: ref, in_$i98: i1, in_$i99: i8, in_$i100: i1, in_$i101: i64, in_$i103: i64, in_$i104: i1, in_$i105: i64) returns (out_$i94: i64, out_$i95: i64, out_$i96: i64, out_$p97: ref, out_$i98: i1, out_$i99: i8, out_$i100: i1, out_$i101: i64, out_$i103: i64, out_$i104: i1, out_$i105: i64)
{

  entry:
    out_$i94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i103, out_$i104, out_$i105 := in_$i94, in_$i95, in_$i96, in_$p97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i103, in_$i104, in_$i105;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_1887;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i94 := out_$i103;
    goto $bb43_dummy;

  $bb41:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    out_$i105 := out_$i103;
    assume true;
    goto $bb41;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$i104 := $ne.i64(out_$i103, 0);
    goto corral_source_split_1906;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} out_$i103 := schedule_timeout(out_$i94);
    call {:si_unique_call 841} {:cexpr "__ret___0"} boogie_si_record_i64(out_$i103);
    goto corral_source_split_1905;

  $bb38:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    out_$i101 := out_$i94;
    assume true;
    goto $bb38;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    out_$i100 := $trunc.i8.i1(out_$i99);
    goto corral_source_split_1895;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i1.i8(out_$i98);
    call {:si_unique_call 836} {:cexpr "tmp___16"} boogie_si_record_i8(out_$i99);
    goto corral_source_split_1894;

  SeqInstr_171:
    goto corral_source_split_1893;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} out_$i98 := vmw_fence_obj_signaled(in_$p0, in_$i1);
    goto SeqInstr_170;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} prepare_to_wait(out_$p97, in_$p6, 2);
    goto corral_source_split_1892;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    out_$p97 := $i2p.i64.ref(out_$i96);
    goto corral_source_split_1891;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    out_$i96 := $add.i64(out_$i95, 64);
    call {:si_unique_call 833} {:cexpr "__cil_tmp55"} boogie_si_record_i64(out_$i96);
    goto corral_source_split_1890;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i95 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 832} {:cexpr "__cil_tmp54"} boogie_si_record_i64(out_$i95);
    goto corral_source_split_1889;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb43_dummy:
    call {:si_unique_call 1} out_$i94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i103, out_$i104, out_$i105 := vmw_fence_obj_wait_loop_$bb35(in_$p0, in_$i1, in_$p6, out_$i94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i103, out_$i104, out_$i105);
    return;

  exit:
    return;
}



procedure vmw_fence_obj_wait_loop_$bb35(in_$p0: ref, in_$i1: i32, in_$p6: ref, in_$i94: i64, in_$i95: i64, in_$i96: i64, in_$p97: ref, in_$i98: i1, in_$i99: i8, in_$i100: i1, in_$i101: i64, in_$i103: i64, in_$i104: i1, in_$i105: i64) returns (out_$i94: i64, out_$i95: i64, out_$i96: i64, out_$p97: ref, out_$i98: i1, out_$i99: i8, out_$i100: i1, out_$i101: i64, out_$i103: i64, out_$i104: i1, out_$i105: i64);
  modifies $M.0, $CurrAddr, $M.1, $M.6, assertsPassed, $M.2, $M.11, $M.12, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation vmw_fence_obj_wait_loop_$bb15(in_$p0: ref, in_$i1: i32, in_$p5: ref, in_$i50: i64, in_$i51: i64, in_$i52: i64, in_$p53: ref, in_$i54: i1, in_$i55: i8, in_$i56: i1, in_$i57: i64, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i62: i64, in_$i63: i1, in_$i64: i64) returns (out_$i50: i64, out_$i51: i64, out_$i52: i64, out_$p53: ref, out_$i54: i1, out_$i55: i8, out_$i56: i1, out_$i57: i64, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i62: i64, out_$i63: i1, out_$i64: i64)
{

  entry:
    out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64 := in_$i50, in_$i51, in_$i52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1812;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i62;
    goto $bb27_dummy;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i62;
    assume true;
    goto $bb24;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i64(out_$i62, 0);
    goto corral_source_split_1838;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} out_$i62 := schedule_timeout(out_$i50);
    call {:si_unique_call 817} {:cexpr "__ret"} boogie_si_record_i64(out_$i62);
    goto corral_source_split_1837;

  $bb22:
    assume !(out_$i61 == 1);
    goto corral_source_split_1836;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i60, 0);
    goto corral_source_split_1832;

  SeqInstr_162:
    call {:si_unique_call 815} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_1831;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} out_$i60 := signal_pending(out_$p59);
    goto SeqInstr_161;

  SeqInstr_159:
    goto corral_source_split_1830;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  $bb20:
    call {:si_unique_call 813} out_$p59 := devirtbounce.3(0, current_task);
    goto SeqInstr_158;

  $bb18:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i50;
    assume true;
    goto $bb18;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    out_$i56 := $trunc.i8.i1(out_$i55);
    goto corral_source_split_1820;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i1.i8(out_$i54);
    call {:si_unique_call 809} {:cexpr "tmp___11"} boogie_si_record_i8(out_$i55);
    goto corral_source_split_1819;

  SeqInstr_156:
    goto corral_source_split_1818;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} out_$i54 := vmw_fence_obj_signaled(in_$p0, in_$i1);
    goto SeqInstr_155;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} prepare_to_wait(out_$p53, in_$p5, 1);
    goto corral_source_split_1817;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    out_$p53 := $i2p.i64.ref(out_$i52);
    goto corral_source_split_1816;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i64(out_$i51, 64);
    call {:si_unique_call 806} {:cexpr "__cil_tmp41"} boogie_si_record_i64(out_$i52);
    goto corral_source_split_1815;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 805} {:cexpr "__cil_tmp40"} boogie_si_record_i64(out_$i51);
    goto corral_source_split_1814;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64 := vmw_fence_obj_wait_loop_$bb15(in_$p0, in_$i1, in_$p5, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64);
    return;

  exit:
    return;
}



procedure vmw_fence_obj_wait_loop_$bb15(in_$p0: ref, in_$i1: i32, in_$p5: ref, in_$i50: i64, in_$i51: i64, in_$i52: i64, in_$p53: ref, in_$i54: i1, in_$i55: i8, in_$i56: i1, in_$i57: i64, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i62: i64, in_$i63: i1, in_$i64: i64) returns (out_$i50: i64, out_$i51: i64, out_$i52: i64, out_$p53: ref, out_$i54: i1, out_$i55: i8, out_$i56: i1, out_$i57: i64, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i62: i64, out_$i63: i1, out_$i64: i64);
  modifies $M.0, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.6, $CurrAddr, $M.3, $M.4, $M.10, $M.13, $M.16;



implementation vmw_fences_update_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$i13: i32, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i64, in_$p49: ref, in_$i50: i64, in_$i51: i64, in_$i52: i64, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$i56: i64, in_$i57: i64, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i64, in_$i63: i64, in_$p64: ref, in_$i65: i64, in_$i66: i64, in_$i67: i64, in_$i68: i64, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$p72: ref, in_$i73: i64, in_$i74: i64, in_$p75: ref, in_$i76: i64, in_$i77: i64, in_$p78: ref, in_$i79: i64, in_$i80: i64, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i64, in_$p85: ref, in_$i86: i32, in_$p87: ref, in_$i88: i64, in_$i89: i64, in_$p90: ref) returns (out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i64, out_$p49: ref, out_$i50: i64, out_$i51: i64, out_$i52: i64, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$i56: i64, out_$i57: i64, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i64, out_$i63: i64, out_$p64: ref, out_$i65: i64, out_$i66: i64, out_$i67: i64, out_$i68: i64, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$p72: ref, out_$i73: i64, out_$i74: i64, out_$p75: ref, out_$i76: i64, out_$i77: i64, out_$p78: ref, out_$i79: i64, out_$i80: i64, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i64, out_$p85: ref, out_$i86: i32, out_$p87: ref, out_$i88: i64, out_$i89: i64, out_$p90: ref)
{

  entry:
    out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90 := in_$p45, in_$p46, in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$p69, in_$i70, in_$i71, in_$p72, in_$i73, in_$i74, in_$p75, in_$i76, in_$i77, in_$p78, in_$i79, in_$i80, in_$p81, in_$p82, in_$i83, in_$i84, in_$p85, in_$i86, in_$p87, in_$i88, in_$i89, in_$p90;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2145;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    out_$p45, out_$p46 := out_$p46, out_$p90;
    goto corral_source_split_2215_dummy;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    goto corral_source_split_2215;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref(out_$p87, $mul.ref(out_$i89, 1));
    goto corral_source_split_2214;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    out_$i89 := $sub.i64(0, out_$i88);
    goto corral_source_split_2213;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i32.i64(out_$i86);
    goto corral_source_split_2212;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    out_$p87 := $bitcast.ref.ref(out_$p82);
    goto corral_source_split_2211;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    out_$i86 := $p2i.ref.i32(out_$p85);
    call {:si_unique_call 1007} {:cexpr "__cil_tmp84"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_2210;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    out_$p85 := $i2p.i64.ref(out_$i84);
    goto corral_source_split_2209;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    out_$i84 := $add.i64(out_$i83, 16);
    call {:si_unique_call 1006} {:cexpr "__cil_tmp82"} boogie_si_record_i64(out_$i84);
    goto corral_source_split_2208;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    out_$i83 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1005} {:cexpr "__cil_tmp81"} boogie_si_record_i64(out_$i83);
    goto corral_source_split_2207;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, out_$p81);
    goto corral_source_split_2206;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    out_$p81 := $i2p.i64.ref(out_$i80);
    goto corral_source_split_2205;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    out_$i80 := $add.i64(out_$i79, 16);
    call {:si_unique_call 1004} {:cexpr "__cil_tmp78"} boogie_si_record_i64(out_$i80);
    goto corral_source_split_2204;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i79 := $p2i.ref.i64(out_$p46);
    call {:si_unique_call 1003} {:cexpr "__cil_tmp77"} boogie_si_record_i64(out_$i79);
    goto corral_source_split_2203;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} __wake_up(out_$p78, 3, 0, $0.ref);
    goto corral_source_split_2199;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    out_$p78 := $i2p.i64.ref(out_$i77);
    goto corral_source_split_2198;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    out_$i77 := $add.i64(out_$i76, 64);
    call {:si_unique_call 1001} {:cexpr "__cil_tmp74"} boogie_si_record_i64(out_$i77);
    goto corral_source_split_2197;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    out_$i76 := $p2i.ref.i64(out_$p45);
    call {:si_unique_call 1000} {:cexpr "__cil_tmp73"} boogie_si_record_i64(out_$i76);
    goto corral_source_split_2196;

  SeqInstr_189:
    goto corral_source_split_2195;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} vmw_fences_perform_actions(in_$p0, in_$p1);
    goto SeqInstr_188;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} list_splice_init(out_$p75, in_$p1);
    goto corral_source_split_2194;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    out_$p75 := $i2p.i64.ref(out_$i74);
    goto corral_source_split_2193;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i64(out_$i73, 40);
    call {:si_unique_call 997} {:cexpr "__cil_tmp71"} boogie_si_record_i64(out_$i74);
    goto corral_source_split_2192;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    out_$i73 := $p2i.ref.i64(out_$p45);
    call {:si_unique_call 996} {:cexpr "__cil_tmp70"} boogie_si_record_i64(out_$i73);
    goto corral_source_split_2191;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} INIT_LIST_HEAD(in_$p1);
    goto corral_source_split_2190;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p72, out_$i71);
    goto corral_source_split_2189;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    out_$p72 := $i2p.i64.ref(out_$i66);
    goto corral_source_split_2188;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    out_$i71 := $or.i32(out_$i70, 1);
    goto corral_source_split_2187;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, out_$p69);
    call {:si_unique_call 994} {:cexpr "__cil_tmp69"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_2186;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    out_$p69 := $i2p.i64.ref(out_$i68);
    goto corral_source_split_2185;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i64(out_$i67, 32);
    call {:si_unique_call 993} {:cexpr "__cil_tmp68"} boogie_si_record_i64(out_$i68);
    goto corral_source_split_2184;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    out_$i67 := $p2i.ref.i64(out_$p45);
    call {:si_unique_call 992} {:cexpr "__cil_tmp67"} boogie_si_record_i64(out_$i67);
    goto corral_source_split_2183;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    out_$i66 := $add.i64(out_$i65, 32);
    call {:si_unique_call 991} {:cexpr "__cil_tmp66"} boogie_si_record_i64(out_$i66);
    goto corral_source_split_2182;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    out_$i65 := $p2i.ref.i64(out_$p45);
    call {:si_unique_call 990} {:cexpr "__cil_tmp65"} boogie_si_record_i64(out_$i65);
    goto corral_source_split_2181;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} list_del_init(out_$p64);
    goto corral_source_split_2180;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    out_$p64 := $i2p.i64.ref(out_$i63);
    goto corral_source_split_2179;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i64(out_$i62, 16);
    call {:si_unique_call 988} {:cexpr "__cil_tmp63"} boogie_si_record_i64(out_$i63);
    goto corral_source_split_2178;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(out_$p45);
    call {:si_unique_call 987} {:cexpr "__cil_tmp62"} boogie_si_record_i64(out_$i62);
    goto corral_source_split_2177;

  $bb14:
    assume out_$i61 == 1;
    goto corral_source_split_2176;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    out_$i61 := $ult.i32(out_$i60, 2147483648);
    goto corral_source_split_2166;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    out_$i60 := $sub.i32(in_$i13, out_$i59);
    call {:si_unique_call 980} {:cexpr "__cil_tmp61"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_2165;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, out_$p58);
    call {:si_unique_call 979} {:cexpr "__cil_tmp60"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_2164;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    out_$p58 := $i2p.i64.ref(out_$i57);
    goto corral_source_split_2163;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i64(out_$i56, 4);
    call {:si_unique_call 978} {:cexpr "__cil_tmp59"} boogie_si_record_i64(out_$i57);
    goto corral_source_split_2162;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p45);
    call {:si_unique_call 977} {:cexpr "__cil_tmp58"} boogie_si_record_i64(out_$i56);
    goto corral_source_split_2161;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i55 == 1;
    goto corral_source_split_2157;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, out_$i50);
    goto corral_source_split_2155;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    call {:si_unique_call 976} {:cexpr "__cil_tmp55"} boogie_si_record_i64(out_$i54);
    goto corral_source_split_2154;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    out_$p53 := $i2p.i64.ref(out_$i52);
    goto corral_source_split_2153;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i64(out_$i51, 16);
    call {:si_unique_call 975} {:cexpr "__cil_tmp53"} boogie_si_record_i64(out_$i52);
    goto corral_source_split_2152;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p45);
    call {:si_unique_call 974} {:cexpr "__cil_tmp52"} boogie_si_record_i64(out_$i51);
    goto corral_source_split_2151;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p49);
    call {:si_unique_call 973} {:cexpr "__cil_tmp51"} boogie_si_record_i64(out_$i50);
    goto corral_source_split_2150;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    out_$p49 := $i2p.i64.ref(out_$i48);
    goto corral_source_split_2149;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i64(out_$i47, 40);
    call {:si_unique_call 972} {:cexpr "__cil_tmp49"} boogie_si_record_i64(out_$i48);
    goto corral_source_split_2148;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i47 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 971} {:cexpr "__cil_tmp48"} boogie_si_record_i64(out_$i47);
    goto corral_source_split_2147;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2215_dummy:
    call {:si_unique_call 1} out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90 := vmw_fences_update_loop_$bb8(in_$p0, in_$p1, in_$i13, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90);
    return;

  exit:
    return;
}



procedure vmw_fences_update_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$i13: i32, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i64, in_$p49: ref, in_$i50: i64, in_$i51: i64, in_$i52: i64, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$i56: i64, in_$i57: i64, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i64, in_$i63: i64, in_$p64: ref, in_$i65: i64, in_$i66: i64, in_$i67: i64, in_$i68: i64, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$p72: ref, in_$i73: i64, in_$i74: i64, in_$p75: ref, in_$i76: i64, in_$i77: i64, in_$p78: ref, in_$i79: i64, in_$i80: i64, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i64, in_$p85: ref, in_$i86: i32, in_$p87: ref, in_$i88: i64, in_$i89: i64, in_$p90: ref) returns (out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i64, out_$p49: ref, out_$i50: i64, out_$i51: i64, out_$i52: i64, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$i56: i64, out_$i57: i64, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i64, out_$i63: i64, out_$p64: ref, out_$i65: i64, out_$i66: i64, out_$i67: i64, out_$i68: i64, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$p72: ref, out_$i73: i64, out_$i74: i64, out_$p75: ref, out_$i76: i64, out_$i77: i64, out_$p78: ref, out_$i79: i64, out_$i80: i64, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i64, out_$p85: ref, out_$i86: i32, out_$p87: ref, out_$i88: i64, out_$i89: i64, out_$p90: ref);
  modifies $M.0, $M.1, $M.6, assertsPassed, $M.2, $M.11, $M.12, $CurrAddr, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation vmw_fences_update_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p9: ref, in_$i13: i32, in_$i14: i64, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$i20: i64, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i64, in_$p25: ref, in_$i26: i32, in_$p27: ref, in_$i28: i64, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i64, in_$p38: ref, in_$i39: i32, in_$p40: ref, in_$i41: i64, in_$i42: i64, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i64, in_$p49: ref, in_$i50: i64, in_$i51: i64, in_$i52: i64, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$i56: i64, in_$i57: i64, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i64, in_$i63: i64, in_$p64: ref, in_$i65: i64, in_$i66: i64, in_$i67: i64, in_$i68: i64, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$p72: ref, in_$i73: i64, in_$i74: i64, in_$p75: ref, in_$i76: i64, in_$i77: i64, in_$p78: ref, in_$i79: i64, in_$i80: i64, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i64, in_$p85: ref, in_$i86: i32, in_$p87: ref, in_$i88: i64, in_$i89: i64, in_$p90: ref, in_$i92: i1, in_$i93: i8, in_$i94: i64, in_$i95: i64, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$i99: i64, in_$i100: i64, in_$p101: ref, in_$i103: i64, in_$i104: i64, in_$p105: ref, in_$i106: i1, in_$i107: i1, in_$i108: i32, in_$i109: i1, in_$i110: i1, in_$i111: i32, in_$i112: i64, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_vslice_dummy_var_67: i32) returns (out_$i13: i32, out_$i14: i64, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$i20: i64, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i64, out_$p25: ref, out_$i26: i32, out_$p27: ref, out_$i28: i64, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i64, out_$p38: ref, out_$i39: i32, out_$p40: ref, out_$i41: i64, out_$i42: i64, out_$p43: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i64, out_$p49: ref, out_$i50: i64, out_$i51: i64, out_$i52: i64, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$i56: i64, out_$i57: i64, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i64, out_$i63: i64, out_$p64: ref, out_$i65: i64, out_$i66: i64, out_$i67: i64, out_$i68: i64, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$p72: ref, out_$i73: i64, out_$i74: i64, out_$p75: ref, out_$i76: i64, out_$i77: i64, out_$p78: ref, out_$i79: i64, out_$i80: i64, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i64, out_$p85: ref, out_$i86: i32, out_$p87: ref, out_$i88: i64, out_$i89: i64, out_$p90: ref, out_$i92: i1, out_$i93: i8, out_$i94: i64, out_$i95: i64, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$i99: i64, out_$i100: i64, out_$p101: ref, out_$i103: i64, out_$i104: i64, out_$p105: ref, out_$i106: i1, out_$i107: i1, out_$i108: i32, out_$i109: i1, out_$i110: i1, out_$i111: i32, out_$i112: i64, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_vslice_dummy_var_67: i32)
{

  entry:
    out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$i118, out_vslice_dummy_var_67 := in_$i13, in_$i14, in_$i15, in_$p16, in_$p17, in_$i18, in_$i19, in_$i20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p25, in_$i26, in_$p27, in_$i28, in_$i29, in_$p30, in_$p31, in_$i32, in_$i33, in_$p34, in_$p35, in_$i36, in_$i37, in_$p38, in_$i39, in_$p40, in_$i41, in_$i42, in_$p43, in_$p45, in_$p46, in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$p69, in_$i70, in_$i71, in_$p72, in_$i73, in_$i74, in_$p75, in_$i76, in_$i77, in_$p78, in_$i79, in_$i80, in_$p81, in_$p82, in_$i83, in_$i84, in_$p85, in_$i86, in_$p87, in_$i88, in_$i89, in_$p90, in_$i92, in_$i93, in_$i94, in_$i95, in_$p96, in_$i97, in_$i98, in_$i99, in_$i100, in_$p101, in_$i103, in_$i104, in_$p105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$p115, in_$p116, in_$i117, in_$i118, in_vslice_dummy_var_67;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2110;

  $bb22:
    assume out_$i118 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := out_$i117;
    goto $bb22_dummy;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i117, out_$i13);
    goto corral_source_split_2242;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} out_$i117 := ioread32(out_$p116);
    call {:si_unique_call 1020} {:cexpr "new_seqno"} boogie_si_record_i32(out_$i117);
    goto corral_source_split_2241;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    out_$p116 := $bitcast.ref.ref(out_$p115);
    goto corral_source_split_2240;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref(in_$p9, $mul.ref(6, 4));
    goto corral_source_split_2239;

  $bb20:
    assume out_$i114 == 1;
    goto corral_source_split_2238;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    out_$i114 := $ne.i64(out_$i113, 0);
    goto corral_source_split_2236;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} out_$i113 := ldv__builtin_expect(out_$i112, 0);
    call {:si_unique_call 1018} {:cexpr "tmp___9"} boogie_si_record_i64(out_$i113);
    goto corral_source_split_2235;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    out_$i112 := $sext.i32.i64(out_$i111);
    call {:si_unique_call 1016} {:cexpr "__cil_tmp99"} boogie_si_record_i64(out_$i112);
    goto corral_source_split_2234;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    out_$i111 := $zext.i1.i32(out_$i110);
    call {:si_unique_call 1015} {:cexpr "__cil_tmp98"} boogie_si_record_i32(out_$i111);
    goto corral_source_split_2233;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    out_$i110 := $xor.i1(out_$i109, 1);
    goto corral_source_split_2232;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    out_$i109 := $ne.i32(out_$i108, 0);
    goto corral_source_split_2231;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i1.i32(out_$i107);
    call {:si_unique_call 1014} {:cexpr "__cil_tmp97"} boogie_si_record_i32(out_$i108);
    goto corral_source_split_2230;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    out_$i107 := $xor.i1(out_$i106, 1);
    goto corral_source_split_2229;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    out_$i106 := $trunc.i8.i1(out_$i93);
    goto corral_source_split_2228;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} spin_unlock_irqrestore(out_$p105, out_$i18);
    goto corral_source_split_2227;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    out_$p105 := $i2p.i64.ref(out_$i104);
    goto corral_source_split_2226;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    out_$i104 := $add.i64(out_$i103, 16);
    call {:si_unique_call 1012} {:cexpr "__cil_tmp95"} boogie_si_record_i64(out_$i104);
    goto corral_source_split_2225;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i103 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1011} {:cexpr "__cil_tmp94"} boogie_si_record_i64(out_$i103);
    goto corral_source_split_2224;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} out_vslice_dummy_var_67 := schedule_work(out_$p101);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume out_$i98 == 1;
    goto corral_source_split_2217;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i97, 0);
    goto corral_source_split_2174;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} out_$i97 := list_empty(out_$p96);
    call {:si_unique_call 986} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_2173;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    out_$p96 := $i2p.i64.ref(out_$i95);
    goto corral_source_split_2172;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    out_$i95 := $add.i64(out_$i94, 104);
    call {:si_unique_call 984} {:cexpr "__cil_tmp88"} boogie_si_record_i64(out_$i95);
    goto corral_source_split_2171;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    out_$i94 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 983} {:cexpr "__cil_tmp87"} boogie_si_record_i64(out_$i94);
    goto corral_source_split_2170;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    out_$i93 := $zext.i1.i8(out_$i92);
    call {:si_unique_call 982} {:cexpr "needs_rerun"} boogie_si_record_i8(out_$i93);
    goto corral_source_split_2169;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} out_$i92 := vmw_fence_goal_new_locked(in_$p0, out_$i13);
    goto corral_source_split_2168;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb15:
    assume !(out_$i61 == 1);
    goto corral_source_split_2201;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    out_$i61 := $ult.i32(out_$i60, 2147483648);
    goto corral_source_split_2166;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    out_$i60 := $sub.i32(out_$i13, out_$i59);
    call {:si_unique_call 980} {:cexpr "__cil_tmp61"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_2165;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, out_$p58);
    call {:si_unique_call 979} {:cexpr "__cil_tmp60"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_2164;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    out_$p58 := $i2p.i64.ref(out_$i57);
    goto corral_source_split_2163;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i64(out_$i56, 4);
    call {:si_unique_call 978} {:cexpr "__cil_tmp59"} boogie_si_record_i64(out_$i57);
    goto corral_source_split_2162;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p45);
    call {:si_unique_call 977} {:cexpr "__cil_tmp58"} boogie_si_record_i64(out_$i56);
    goto corral_source_split_2161;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i55 == 1;
    goto corral_source_split_2157;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, out_$i50);
    goto corral_source_split_2155;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    call {:si_unique_call 976} {:cexpr "__cil_tmp55"} boogie_si_record_i64(out_$i54);
    goto corral_source_split_2154;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    out_$p53 := $i2p.i64.ref(out_$i52);
    goto corral_source_split_2153;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i64(out_$i51, 16);
    call {:si_unique_call 975} {:cexpr "__cil_tmp53"} boogie_si_record_i64(out_$i52);
    goto corral_source_split_2152;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p45);
    call {:si_unique_call 974} {:cexpr "__cil_tmp52"} boogie_si_record_i64(out_$i51);
    goto corral_source_split_2151;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p49);
    call {:si_unique_call 973} {:cexpr "__cil_tmp51"} boogie_si_record_i64(out_$i50);
    goto corral_source_split_2150;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    out_$p49 := $i2p.i64.ref(out_$i48);
    goto corral_source_split_2149;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i64(out_$i47, 40);
    call {:si_unique_call 972} {:cexpr "__cil_tmp49"} boogie_si_record_i64(out_$i48);
    goto corral_source_split_2148;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i47 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 971} {:cexpr "__cil_tmp48"} boogie_si_record_i64(out_$i47);
    goto corral_source_split_2147;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb8:
    call out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90 := vmw_fences_update_loop_$bb8(in_$p0, in_$p1, out_$i13, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90);
    goto $bb8_last;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2145;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    out_$p45, out_$p46 := out_$p30, out_$p43;
    goto $bb8;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    out_$p45, out_$p46 := out_$p46, out_$p90;
    assume false;
    return;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    goto corral_source_split_2215;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref(out_$p87, $mul.ref(out_$i89, 1));
    goto corral_source_split_2214;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    out_$i89 := $sub.i64(0, out_$i88);
    goto corral_source_split_2213;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i32.i64(out_$i86);
    goto corral_source_split_2212;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    out_$p87 := $bitcast.ref.ref(out_$p82);
    goto corral_source_split_2211;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    out_$i86 := $p2i.ref.i32(out_$p85);
    call {:si_unique_call 1007} {:cexpr "__cil_tmp84"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_2210;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    out_$p85 := $i2p.i64.ref(out_$i84);
    goto corral_source_split_2209;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    out_$i84 := $add.i64(out_$i83, 16);
    call {:si_unique_call 1006} {:cexpr "__cil_tmp82"} boogie_si_record_i64(out_$i84);
    goto corral_source_split_2208;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    out_$i83 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1005} {:cexpr "__cil_tmp81"} boogie_si_record_i64(out_$i83);
    goto corral_source_split_2207;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, out_$p81);
    goto corral_source_split_2206;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    out_$p81 := $i2p.i64.ref(out_$i80);
    goto corral_source_split_2205;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    out_$i80 := $add.i64(out_$i79, 16);
    call {:si_unique_call 1004} {:cexpr "__cil_tmp78"} boogie_si_record_i64(out_$i80);
    goto corral_source_split_2204;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i79 := $p2i.ref.i64(out_$p46);
    call {:si_unique_call 1003} {:cexpr "__cil_tmp77"} boogie_si_record_i64(out_$i79);
    goto corral_source_split_2203;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} __wake_up(out_$p78, 3, 0, $0.ref);
    goto corral_source_split_2199;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    out_$p78 := $i2p.i64.ref(out_$i77);
    goto corral_source_split_2198;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    out_$i77 := $add.i64(out_$i76, 64);
    call {:si_unique_call 1001} {:cexpr "__cil_tmp74"} boogie_si_record_i64(out_$i77);
    goto corral_source_split_2197;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    out_$i76 := $p2i.ref.i64(out_$p45);
    call {:si_unique_call 1000} {:cexpr "__cil_tmp73"} boogie_si_record_i64(out_$i76);
    goto corral_source_split_2196;

  SeqInstr_189:
    goto corral_source_split_2195;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} vmw_fences_perform_actions(in_$p0, in_$p1);
    goto SeqInstr_188;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} list_splice_init(out_$p75, in_$p1);
    goto corral_source_split_2194;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    out_$p75 := $i2p.i64.ref(out_$i74);
    goto corral_source_split_2193;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i64(out_$i73, 40);
    call {:si_unique_call 997} {:cexpr "__cil_tmp71"} boogie_si_record_i64(out_$i74);
    goto corral_source_split_2192;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    out_$i73 := $p2i.ref.i64(out_$p45);
    call {:si_unique_call 996} {:cexpr "__cil_tmp70"} boogie_si_record_i64(out_$i73);
    goto corral_source_split_2191;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} INIT_LIST_HEAD(in_$p1);
    goto corral_source_split_2190;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p72, out_$i71);
    goto corral_source_split_2189;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    out_$p72 := $i2p.i64.ref(out_$i66);
    goto corral_source_split_2188;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    out_$i71 := $or.i32(out_$i70, 1);
    goto corral_source_split_2187;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, out_$p69);
    call {:si_unique_call 994} {:cexpr "__cil_tmp69"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_2186;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    out_$p69 := $i2p.i64.ref(out_$i68);
    goto corral_source_split_2185;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i64(out_$i67, 32);
    call {:si_unique_call 993} {:cexpr "__cil_tmp68"} boogie_si_record_i64(out_$i68);
    goto corral_source_split_2184;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    out_$i67 := $p2i.ref.i64(out_$p45);
    call {:si_unique_call 992} {:cexpr "__cil_tmp67"} boogie_si_record_i64(out_$i67);
    goto corral_source_split_2183;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    out_$i66 := $add.i64(out_$i65, 32);
    call {:si_unique_call 991} {:cexpr "__cil_tmp66"} boogie_si_record_i64(out_$i66);
    goto corral_source_split_2182;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    out_$i65 := $p2i.ref.i64(out_$p45);
    call {:si_unique_call 990} {:cexpr "__cil_tmp65"} boogie_si_record_i64(out_$i65);
    goto corral_source_split_2181;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} list_del_init(out_$p64);
    goto corral_source_split_2180;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    out_$p64 := $i2p.i64.ref(out_$i63);
    goto corral_source_split_2179;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i64(out_$i62, 16);
    call {:si_unique_call 988} {:cexpr "__cil_tmp63"} boogie_si_record_i64(out_$i63);
    goto corral_source_split_2178;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(out_$p45);
    call {:si_unique_call 987} {:cexpr "__cil_tmp62"} boogie_si_record_i64(out_$i62);
    goto corral_source_split_2177;

  $bb14:
    assume out_$i61 == 1;
    goto corral_source_split_2176;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    goto corral_source_split_2143;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref(out_$p40, $mul.ref(out_$i42, 1));
    goto corral_source_split_2142;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    out_$i42 := $sub.i64(0, out_$i41);
    goto corral_source_split_2141;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i32.i64(out_$i39);
    goto corral_source_split_2140;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p35);
    goto corral_source_split_2139;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i32(out_$p38);
    call {:si_unique_call 970} {:cexpr "__cil_tmp45"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_2138;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    out_$p38 := $i2p.i64.ref(out_$i37);
    goto corral_source_split_2137;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i64(out_$i36, 16);
    call {:si_unique_call 969} {:cexpr "__cil_tmp43"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_2136;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 968} {:cexpr "__cil_tmp42"} boogie_si_record_i64(out_$i36);
    goto corral_source_split_2135;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_2134;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    out_$p34 := $i2p.i64.ref(out_$i33);
    goto corral_source_split_2133;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i64(out_$i32, 16);
    call {:si_unique_call 967} {:cexpr "__cil_tmp39"} boogie_si_record_i64(out_$i33);
    goto corral_source_split_2132;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(out_$p31);
    call {:si_unique_call 966} {:cexpr "__cil_tmp38"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_2131;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_2130;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(out_$p27, $mul.ref(out_$i29, 1));
    goto corral_source_split_2129;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    out_$i29 := $sub.i64(0, out_$i28);
    goto corral_source_split_2128;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i32.i64(out_$i26);
    goto corral_source_split_2127;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_2126;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i32(out_$p25);
    call {:si_unique_call 965} {:cexpr "__cil_tmp35"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_2125;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    out_$p25 := $i2p.i64.ref(out_$i24);
    goto corral_source_split_2124;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i64(out_$i23, 16);
    call {:si_unique_call 964} {:cexpr "__cil_tmp33"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_2123;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 963} {:cexpr "__cil_tmp32"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_2122;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_2121;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    out_$p21 := $i2p.i64.ref(out_$i20);
    goto corral_source_split_2120;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i64(out_$i19, 40);
    call {:si_unique_call 962} {:cexpr "__cil_tmp29"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_2119;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 961} {:cexpr "__cil_tmp28"} boogie_si_record_i64(out_$i19);
    goto corral_source_split_2118;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} out_$i18 := _raw_spin_lock_irqsave(out_$p17);
    call {:si_unique_call 960} {:cexpr "flags"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_2116;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} out_$p17 := spinlock_check(out_$p16);
    goto corral_source_split_2115;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    out_$p16 := $i2p.i64.ref(out_$i15);
    goto corral_source_split_2114;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i64(out_$i14, 16);
    call {:si_unique_call 957} {:cexpr "__cil_tmp26"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_2113;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 956} {:cexpr "__cil_tmp25"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_2112;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb11:
    assume !(out_$i55 == 1);
    goto corral_source_split_2159;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    out_$p101 := $i2p.i64.ref(out_$i100);
    goto corral_source_split_2222;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    out_$i100 := $add.i64(out_$i99, 56);
    call {:si_unique_call 1009} {:cexpr "__cil_tmp92"} boogie_si_record_i64(out_$i100);
    goto corral_source_split_2221;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    out_$i99 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1008} {:cexpr "__cil_tmp91"} boogie_si_record_i64(out_$i99);
    goto corral_source_split_2220;

  $bb18:
    assume !(out_$i98 == 1);
    goto corral_source_split_2219;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$i118, out_vslice_dummy_var_67 := vmw_fences_update_loop_$bb1(in_$p0, in_$p1, in_$p9, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$i118, out_vslice_dummy_var_67);
    return;

  exit:
    return;
}



procedure vmw_fences_update_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p9: ref, in_$i13: i32, in_$i14: i64, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$i20: i64, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i64, in_$p25: ref, in_$i26: i32, in_$p27: ref, in_$i28: i64, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i64, in_$p38: ref, in_$i39: i32, in_$p40: ref, in_$i41: i64, in_$i42: i64, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i64, in_$p49: ref, in_$i50: i64, in_$i51: i64, in_$i52: i64, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$i56: i64, in_$i57: i64, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i64, in_$i63: i64, in_$p64: ref, in_$i65: i64, in_$i66: i64, in_$i67: i64, in_$i68: i64, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$p72: ref, in_$i73: i64, in_$i74: i64, in_$p75: ref, in_$i76: i64, in_$i77: i64, in_$p78: ref, in_$i79: i64, in_$i80: i64, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i64, in_$p85: ref, in_$i86: i32, in_$p87: ref, in_$i88: i64, in_$i89: i64, in_$p90: ref, in_$i92: i1, in_$i93: i8, in_$i94: i64, in_$i95: i64, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$i99: i64, in_$i100: i64, in_$p101: ref, in_$i103: i64, in_$i104: i64, in_$p105: ref, in_$i106: i1, in_$i107: i1, in_$i108: i32, in_$i109: i1, in_$i110: i1, in_$i111: i32, in_$i112: i64, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_vslice_dummy_var_67: i32) returns (out_$i13: i32, out_$i14: i64, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$i20: i64, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i64, out_$p25: ref, out_$i26: i32, out_$p27: ref, out_$i28: i64, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i64, out_$p38: ref, out_$i39: i32, out_$p40: ref, out_$i41: i64, out_$i42: i64, out_$p43: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i64, out_$p49: ref, out_$i50: i64, out_$i51: i64, out_$i52: i64, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$i56: i64, out_$i57: i64, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i64, out_$i63: i64, out_$p64: ref, out_$i65: i64, out_$i66: i64, out_$i67: i64, out_$i68: i64, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$p72: ref, out_$i73: i64, out_$i74: i64, out_$p75: ref, out_$i76: i64, out_$i77: i64, out_$p78: ref, out_$i79: i64, out_$i80: i64, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i64, out_$p85: ref, out_$i86: i32, out_$p87: ref, out_$i88: i64, out_$i89: i64, out_$p90: ref, out_$i92: i1, out_$i93: i8, out_$i94: i64, out_$i95: i64, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$i99: i64, out_$i100: i64, out_$p101: ref, out_$i103: i64, out_$i104: i64, out_$p105: ref, out_$i106: i1, out_$i107: i1, out_$i108: i32, out_$i109: i1, out_$i110: i1, out_$i111: i32, out_$i112: i64, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_vslice_dummy_var_67: i32);
  modifies $M.0, $M.1, $M.6, assertsPassed, $M.2, $M.11, $M.12, $CurrAddr, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation vmw_fences_perform_actions_loop_$bb1(in_$p0: ref, in_$i20: i64, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$i31: i64, in_$i32: i64, in_$i33: i64, in_$i34: i64, in_$i35: i64, in_$i36: i64, in_$i37: i64, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$i41: i64, in_$i42: i64, in_$i43: i64, in_$i44: i64, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$i51: i64, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$i56: i64, in_$i57: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$p68: ref, in_$i69: i64, in_$i70: i64, in_$p71: ref) returns (out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$i31: i64, out_$i32: i64, out_$i33: i64, out_$i34: i64, out_$i35: i64, out_$i36: i64, out_$i37: i64, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$i41: i64, out_$i42: i64, out_$i43: i64, out_$i44: i64, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$i51: i64, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$i56: i64, out_$i57: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$p68: ref, out_$i69: i64, out_$i70: i64, out_$p71: ref)
{

  entry:
    out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71 := in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p58, in_$p59, in_$p60, in_$i61, in_$i62, in_$p63, in_$p64, in_$p65, in_$p66, in_$i67, in_$p68, in_$i69, in_$i70, in_$p71;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2276;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    out_$p21, out_$p22 := out_$p22, out_$p71;
    goto corral_source_split_2338_dummy;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    goto corral_source_split_2338;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref(out_$p68, $mul.ref(out_$i70, 1));
    goto corral_source_split_2337;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    out_$i70 := $sub.i64(0, out_$i69);
    goto corral_source_split_2336;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i32.i64(out_$i67);
    goto corral_source_split_2335;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    out_$p68 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_2334;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    out_$i67 := $p2i.ref.i32(out_$p66);
    call {:si_unique_call 1054} {:cexpr "__cil_tmp55"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_2333;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_2332;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_2331;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    out_$p64 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_2330;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} list_add_tail(out_$p60, out_$p63);
    goto corral_source_split_2329;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    out_$p63 := $i2p.i64.ref(out_$i62);
    goto corral_source_split_2328;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i64(out_$i61, 104);
    call {:si_unique_call 1052} {:cexpr "__cil_tmp50"} boogie_si_record_i64(out_$i62);
    goto corral_source_split_2327;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    out_$i61 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1051} {:cexpr "__cil_tmp49"} boogie_si_record_i64(out_$i61);
    goto corral_source_split_2326;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_2325;

  $bb8:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_192:
    goto corral_source_split_2323;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    call {:si_unique_call 1050} devirtbounce.11(out_$p59, out_$p21);
    goto SeqInstr_191;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    out_$p58 := $i2p.i64.ref(out_$i57);
    goto corral_source_split_2322;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i64(out_$i56, 24);
    call {:si_unique_call 1049} {:cexpr "__cil_tmp46"} boogie_si_record_i64(out_$i57);
    goto corral_source_split_2321;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p21);
    call {:si_unique_call 1048} {:cexpr "__cil_tmp45"} boogie_si_record_i64(out_$i56);
    goto corral_source_split_2320;

  $bb7:
    assume out_$i55 == 1;
    goto corral_source_split_2319;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, out_$i49);
    goto corral_source_split_2317;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    call {:si_unique_call 1047} {:cexpr "__cil_tmp44"} boogie_si_record_i64(out_$i54);
    goto corral_source_split_2316;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_2315;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    out_$p52 := $i2p.i64.ref(out_$i51);
    goto corral_source_split_2314;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i64(out_$i50, 24);
    call {:si_unique_call 1046} {:cexpr "__cil_tmp42"} boogie_si_record_i64(out_$i51);
    goto corral_source_split_2313;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p21);
    call {:si_unique_call 1045} {:cexpr "__cil_tmp41"} boogie_si_record_i64(out_$i50);
    goto corral_source_split_2312;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1044} {:cexpr "__cil_tmp40"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_2311;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p48, out_$i47);
    goto corral_source_split_2310;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    out_$p48 := $i2p.i64.ref(out_$i35);
    goto corral_source_split_2309;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    out_$i47 := $sub.i32(out_$i46, 1);
    goto corral_source_split_2308;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, out_$p45);
    call {:si_unique_call 1043} {:cexpr "__cil_tmp38"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_2307;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    out_$p45 := $i2p.i64.ref(out_$i44);
    goto corral_source_split_2306;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i64(out_$i43, out_$i42);
    call {:si_unique_call 1042} {:cexpr "__cil_tmp37"} boogie_si_record_i64(out_$i44);
    goto corral_source_split_2305;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1041} {:cexpr "__cil_tmp36"} boogie_si_record_i64(out_$i43);
    goto corral_source_split_2304;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i64(120, out_$i41);
    call {:si_unique_call 1040} {:cexpr "__cil_tmp35"} boogie_si_record_i64(out_$i42);
    goto corral_source_split_2303;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    out_$i41 := $mul.i64(out_$i40, 4);
    call {:si_unique_call 1039} {:cexpr "__cil_tmp34"} boogie_si_record_i64(out_$i41);
    goto corral_source_split_2302;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i32.i64(out_$i39);
    goto corral_source_split_2301;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    call {:si_unique_call 1038} {:cexpr "__cil_tmp33"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_2300;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    out_$p38 := $i2p.i64.ref(out_$i37);
    goto corral_source_split_2299;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i64(out_$i36, 16);
    call {:si_unique_call 1037} {:cexpr "__cil_tmp32"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_2298;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p21);
    call {:si_unique_call 1036} {:cexpr "__cil_tmp31"} boogie_si_record_i64(out_$i36);
    goto corral_source_split_2297;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i64(out_$i34, out_$i33);
    call {:si_unique_call 1035} {:cexpr "__cil_tmp30"} boogie_si_record_i64(out_$i35);
    goto corral_source_split_2296;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1034} {:cexpr "__cil_tmp29"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_2295;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i64(120, out_$i32);
    call {:si_unique_call 1033} {:cexpr "__cil_tmp28"} boogie_si_record_i64(out_$i33);
    goto corral_source_split_2294;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    out_$i32 := $mul.i64(out_$i31, 4);
    call {:si_unique_call 1032} {:cexpr "__cil_tmp27"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_2293;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i32.i64(out_$i30);
    goto corral_source_split_2292;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    call {:si_unique_call 1031} {:cexpr "__cil_tmp26"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_2291;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    out_$p29 := $i2p.i64.ref(out_$i28);
    goto corral_source_split_2290;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i64(out_$i27, 16);
    call {:si_unique_call 1030} {:cexpr "__cil_tmp25"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_2289;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p21);
    call {:si_unique_call 1029} {:cexpr "__cil_tmp24"} boogie_si_record_i64(out_$i27);
    goto corral_source_split_2288;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} list_del_init(out_$p26);
    goto corral_source_split_2287;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_2286;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb3:
    assume out_$i25 == 1;
    goto corral_source_split_2282;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, in_$i20);
    goto corral_source_split_2280;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    call {:si_unique_call 1027} {:cexpr "__cil_tmp22"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_2279;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_2278;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_2338_dummy:
    call {:si_unique_call 1} out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71 := vmw_fences_perform_actions_loop_$bb1(in_$p0, in_$i20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71);
    return;

  exit:
    return;
}



procedure vmw_fences_perform_actions_loop_$bb1(in_$p0: ref, in_$i20: i64, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$i31: i64, in_$i32: i64, in_$i33: i64, in_$i34: i64, in_$i35: i64, in_$i36: i64, in_$i37: i64, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$i41: i64, in_$i42: i64, in_$i43: i64, in_$i44: i64, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$i51: i64, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$i56: i64, in_$i57: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$p68: ref, in_$i69: i64, in_$i70: i64, in_$p71: ref) returns (out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$i31: i64, out_$i32: i64, out_$i33: i64, out_$i34: i64, out_$i35: i64, out_$i36: i64, out_$i37: i64, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$i41: i64, out_$i42: i64, out_$i43: i64, out_$i44: i64, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$i51: i64, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$i56: i64, out_$i57: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$p68: ref, out_$i69: i64, out_$i70: i64, out_$p71: ref);
  modifies $M.1, $M.0, $M.6, assertsPassed, $M.2, $M.11, $M.12, $CurrAddr, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation vmw_fence_goal_new_locked_loop_$bb8(in_$p0: ref, in_$p60: ref, in_$i61: i64, in_$i62: i64, in_$p63: ref, in_$i64: i64, in_$i65: i64, in_$i66: i64, in_$p67: ref, in_$i68: i64, in_$i69: i1, in_$i70: i64, in_$i71: i64, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i64, in_$p91: ref, in_$i92: i32, in_$p93: ref, in_$i94: i64, in_$i95: i64, in_$p96: ref) returns (out_$p60: ref, out_$i61: i64, out_$i62: i64, out_$p63: ref, out_$i64: i64, out_$i65: i64, out_$i66: i64, out_$p67: ref, out_$i68: i64, out_$i69: i1, out_$i70: i64, out_$i71: i64, out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i64, out_$p91: ref, out_$i92: i32, out_$p93: ref, out_$i94: i64, out_$i95: i64, out_$p96: ref)
{

  entry:
    out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96 := in_$p60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$p72, in_$i73, in_$i74, in_$p75, in_$i85, in_$i86, in_$p87, in_$p88, in_$i89, in_$i90, in_$p91, in_$i92, in_$p93, in_$i94, in_$i95, in_$p96;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2408;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    out_$p60 := out_$p96;
    goto corral_source_split_2457_dummy;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    goto corral_source_split_2457;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref(out_$p93, $mul.ref(out_$i95, 1));
    goto corral_source_split_2456;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    out_$i95 := $sub.i64(0, out_$i94);
    goto corral_source_split_2455;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    out_$i94 := $zext.i32.i64(out_$i92);
    goto corral_source_split_2454;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    out_$p93 := $bitcast.ref.ref(out_$p88);
    goto corral_source_split_2453;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    out_$i92 := $p2i.ref.i32(out_$p91);
    call {:si_unique_call 1105} {:cexpr "__cil_tmp70"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_2452;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    out_$p91 := $i2p.i64.ref(out_$i90);
    goto corral_source_split_2451;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    out_$i90 := $add.i64(out_$i89, 16);
    call {:si_unique_call 1104} {:cexpr "__cil_tmp68"} boogie_si_record_i64(out_$i90);
    goto corral_source_split_2450;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    out_$i89 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 1103} {:cexpr "__cil_tmp67"} boogie_si_record_i64(out_$i89);
    goto corral_source_split_2449;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_2448;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    out_$p87 := $i2p.i64.ref(out_$i86);
    goto corral_source_split_2447;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i64(out_$i85, 16);
    call {:si_unique_call 1102} {:cexpr "__cil_tmp64"} boogie_si_record_i64(out_$i86);
    goto corral_source_split_2446;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i85 := $p2i.ref.i64(out_$p60);
    call {:si_unique_call 1101} {:cexpr "__cil_tmp63"} boogie_si_record_i64(out_$i85);
    goto corral_source_split_2445;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i74 == 1;
    goto corral_source_split_2430;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    out_$p75 := out_$p60;
    assume true;
    goto $bb14;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i32(out_$i73, 0);
    goto corral_source_split_2428;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} out_$i73 := list_empty(out_$p72);
    call {:si_unique_call 1094} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_2427;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    out_$p72 := $i2p.i64.ref(out_$i71);
    goto corral_source_split_2426;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i64(out_$i70, 40);
    call {:si_unique_call 1092} {:cexpr "__cil_tmp53"} boogie_si_record_i64(out_$i71);
    goto corral_source_split_2425;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i70 := $p2i.ref.i64(out_$p60);
    call {:si_unique_call 1091} {:cexpr "__cil_tmp52"} boogie_si_record_i64(out_$i70);
    goto corral_source_split_2424;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i69 == 1;
    goto corral_source_split_2420;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i64(out_$i68, out_$i64);
    goto corral_source_split_2418;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    out_$i68 := $p2i.ref.i64(out_$p67);
    call {:si_unique_call 1090} {:cexpr "__cil_tmp51"} boogie_si_record_i64(out_$i68);
    goto corral_source_split_2417;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    out_$p67 := $i2p.i64.ref(out_$i66);
    goto corral_source_split_2416;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    out_$i66 := $add.i64(out_$i65, 16);
    call {:si_unique_call 1089} {:cexpr "__cil_tmp49"} boogie_si_record_i64(out_$i66);
    goto corral_source_split_2415;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    out_$i65 := $p2i.ref.i64(out_$p60);
    call {:si_unique_call 1088} {:cexpr "__cil_tmp48"} boogie_si_record_i64(out_$i65);
    goto corral_source_split_2414;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    out_$i64 := $p2i.ref.i64(out_$p63);
    call {:si_unique_call 1087} {:cexpr "__cil_tmp47"} boogie_si_record_i64(out_$i64);
    goto corral_source_split_2413;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    out_$p63 := $i2p.i64.ref(out_$i62);
    goto corral_source_split_2412;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i64(out_$i61, 40);
    call {:si_unique_call 1086} {:cexpr "__cil_tmp45"} boogie_si_record_i64(out_$i62);
    goto corral_source_split_2411;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i61 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1085} {:cexpr "__cil_tmp44"} boogie_si_record_i64(out_$i61);
    goto corral_source_split_2410;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2457_dummy:
    call {:si_unique_call 1} out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96 := vmw_fence_goal_new_locked_loop_$bb8(in_$p0, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96);
    return;

  exit:
    return;
}



procedure vmw_fence_goal_new_locked_loop_$bb8(in_$p0: ref, in_$p60: ref, in_$i61: i64, in_$i62: i64, in_$p63: ref, in_$i64: i64, in_$i65: i64, in_$i66: i64, in_$p67: ref, in_$i68: i64, in_$i69: i1, in_$i70: i64, in_$i71: i64, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i64, in_$p91: ref, in_$i92: i32, in_$p93: ref, in_$i94: i64, in_$i95: i64, in_$p96: ref) returns (out_$p60: ref, out_$i61: i64, out_$i62: i64, out_$p63: ref, out_$i64: i64, out_$i65: i64, out_$i66: i64, out_$p67: ref, out_$i68: i64, out_$i69: i1, out_$i70: i64, out_$i71: i64, out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i64, out_$p91: ref, out_$i92: i32, out_$p93: ref, out_$i94: i64, out_$i95: i64, out_$p96: ref);



implementation vmw_execbuf_fence_commands_loop_$bb13()
{

  entry:
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb14_dummy:
    call {:si_unique_call 1} vmw_execbuf_fence_commands_loop_$bb13();
    return;

  exit:
    return;
}



procedure vmw_execbuf_fence_commands_loop_$bb13();



implementation vmw_fifo_send_fence_loop_$bb5(in_$p1: ref, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i1) returns (out_$i33: i32, out_$i34: i32, out_$i35: i1)
{

  entry:
    out_$i33, out_$i34, out_$i35 := in_$i33, in_$i34, in_$i35;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb9_dummy;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume out_$i35 == 1;
    goto corral_source_split_2992;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i34, 0);
    goto corral_source_split_2990;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, in_$p1);
    call {:si_unique_call 1337} {:cexpr "__cil_tmp32"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_2989;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, in_$p1, out_$i33);
    goto corral_source_split_2988;

  SeqInstr_228:
    call {:si_unique_call 1336} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_2987;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} out_$i33 := atomic_add_return(1, in_$p32);
    goto SeqInstr_227;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i33, out_$i34, out_$i35 := vmw_fifo_send_fence_loop_$bb5(in_$p1, in_$p32, out_$i33, out_$i34, out_$i35);
    return;

  exit:
    return;
}



procedure vmw_fifo_send_fence_loop_$bb5(in_$p1: ref, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i1) returns (out_$i33: i32, out_$i34: i32, out_$i35: i1);
  modifies $M.0, $M.1, assertsPassed, $M.6, $M.11, $M.12, $M.2, $CurrAddr, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_fallback_wait_loop_$bb7(in_$p0: ref, in_$i3: i32, in_$p6: ref, in_$i9: i8, in_$i11: i8, in_$i18: i64, in_$p41: ref, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i64, in_$i54: i64, in_$p55: ref, in_$i56: i1, in_$i57: i8, in_$i58: i1, in_$i60: i64, in_$i61: i64, in_$i62: i1, in_$i64: i1, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$i66: i32, in_$i76: i1, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_vslice_dummy_var_76: i64) returns (out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i64, out_$i54: i64, out_$p55: ref, out_$i56: i1, out_$i57: i8, out_$i58: i1, out_$i60: i64, out_$i61: i64, out_$i62: i1, out_$i64: i1, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$i66: i32, out_$i76: i1, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_vslice_dummy_var_76: i64)
{

  entry:
    out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i60, out_$i61, out_$i62, out_$i64, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$i73, out_$p74, out_$p75, out_$i66, out_$i76, out_$p77, out_$i78, out_$i79, out_vslice_dummy_var_76 := in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$p55, in_$i56, in_$i57, in_$i58, in_$i60, in_$i61, in_$i62, in_$i64, in_$i67, in_$i68, in_$i69, in_$p70, in_$p71, in_$p72, in_$i73, in_$p74, in_$p75, in_$i66, in_$i76, in_$p77, in_$i78, in_$i79, in_vslice_dummy_var_76;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3277;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i66;
    goto $bb39_dummy;

  $bb35:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_3340;

  SeqInstr_264:
    call {:si_unique_call 1504} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_3339;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} out_$i78 := signal_pending(out_$p77);
    goto SeqInstr_263;

  SeqInstr_261:
    goto corral_source_split_3338;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  $bb34:
    assume out_$i76 == 1;
    call {:si_unique_call 1502} out_$p77 := devirtbounce.3(0, current_task);
    goto SeqInstr_260;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    out_$i76 := $trunc.i8.i1(in_$i11);
    goto corral_source_split_3318;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3317;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i67;
    goto $bb21;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i50;
    goto $bb21;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} out_vslice_dummy_var_76 := schedule_timeout(1);
    goto corral_source_split_3310;

  $bb19:
    assume out_$i64 == 1;
    goto corral_source_split_3309;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i64 := $trunc.i8.i1(in_$i9);
    goto corral_source_split_3307;

  $bb17:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    out_$i62 := $sge.i64(out_$i61, 0);
    goto corral_source_split_3302;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    out_$i61 := $sub.i64(out_$i60, in_$i18);
    call {:si_unique_call 1494} {:cexpr "__cil_tmp51"} boogie_si_record_i64(out_$i61);
    goto corral_source_split_3301;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i64($M.0, jiffies);
    call {:si_unique_call 1493} {:cexpr "__cil_tmp50"} boogie_si_record_i64(out_$i60);
    goto corral_source_split_3300;

  $bb13:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    out_$i58 := $trunc.i8.i1(out_$i57);
    goto corral_source_split_3289;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i1.i8(out_$i56);
    call {:si_unique_call 1489} {:cexpr "tmp___10"} boogie_si_record_i8(out_$i57);
    goto corral_source_split_3288;

  SeqInstr_252:
    goto corral_source_split_3287;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} prepare_to_wait(out_$p55, in_$p6, out_$i52);
    call {:si_unique_call 1488} out_$i56 := devirtbounce.13(in_$p41, in_$p0, in_$i3);
    goto SeqInstr_251;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    out_$p55 := $i2p.i64.ref(out_$i54);
    goto corral_source_split_3286;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i64(out_$i53, 2888);
    call {:si_unique_call 1486} {:cexpr "__cil_tmp47"} boogie_si_record_i64(out_$i54);
    goto corral_source_split_3285;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1485} {:cexpr "__cil_tmp46"} boogie_si_record_i64(out_$i53);
    goto corral_source_split_3284;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3283;

  $bb10:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    out_$i52 := 2;
    goto $bb11;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    out_$i52 := 1;
    goto $bb11;

  $bb9:
    assume out_$i51 == 1;
    goto corral_source_split_3281;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i8.i1(in_$i11);
    goto corral_source_split_3279;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb23:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p75, 2);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p74, 1);
    goto corral_source_split_3333;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    out_$p74 := $bitcast.ref.ref(out_$p72);
    goto corral_source_split_3332;

  $bb29:
    assume out_$i73 == 1;
    goto corral_source_split_3331;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    out_$i73 := $trunc.i8.i1(in_$i11);
    goto corral_source_split_3329;

  SeqInstr_258:
    goto corral_source_split_3328;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  $bb28:
    call {:si_unique_call 1501} out_$p72 := devirtbounce.3(0, current_task);
    goto SeqInstr_257;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} schedule();
    goto corral_source_split_3326;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p71, 0);
    goto corral_source_split_3324;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(out_$p70);
    goto corral_source_split_3323;

  SeqInstr_255:
    goto corral_source_split_3322;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  $bb25:
    call {:si_unique_call 1499} out_$p70 := devirtbounce.3(0, current_task);
    goto SeqInstr_254;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i69 == 1;
    goto corral_source_split_3320;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 0);
    goto corral_source_split_3315;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    out_$i68 := $and.i32(out_$i67, 15);
    call {:si_unique_call 1498} {:cexpr "__cil_tmp52"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_3314;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i50, 1);
    call {:si_unique_call 1497} {:cexpr "count"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_3313;

  $bb20:
    assume !(out_$i64 == 1);
    goto corral_source_split_3312;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    out_$p75 := $bitcast.ref.ref(out_$p72);
    goto corral_source_split_3336;

  $bb30:
    assume !(out_$i73 == 1);
    goto corral_source_split_3335;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i60, out_$i61, out_$i62, out_$i64, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$i73, out_$p74, out_$p75, out_$i66, out_$i76, out_$p77, out_$i78, out_$i79, out_vslice_dummy_var_76 := vmw_fallback_wait_loop_$bb7(in_$p0, in_$i3, in_$p6, in_$i9, in_$i11, in_$i18, in_$p41, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i60, out_$i61, out_$i62, out_$i64, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$i73, out_$p74, out_$p75, out_$i66, out_$i76, out_$p77, out_$i78, out_$i79, out_vslice_dummy_var_76);
    return;

  exit:
    return;
}



procedure vmw_fallback_wait_loop_$bb7(in_$p0: ref, in_$i3: i32, in_$p6: ref, in_$i9: i8, in_$i11: i8, in_$i18: i64, in_$p41: ref, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i64, in_$i54: i64, in_$p55: ref, in_$i56: i1, in_$i57: i8, in_$i58: i1, in_$i60: i64, in_$i61: i64, in_$i62: i1, in_$i64: i1, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$i66: i32, in_$i76: i1, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_vslice_dummy_var_76: i64) returns (out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i64, out_$i54: i64, out_$p55: ref, out_$i56: i1, out_$i57: i8, out_$i58: i1, out_$i60: i64, out_$i61: i64, out_$i62: i1, out_$i64: i1, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$i66: i32, out_$i76: i1, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_vslice_dummy_var_76: i64);
  modifies $M.0, $M.1, assertsPassed, $M.2, $M.11, $M.12, $M.6, $CurrAddr, $M.3, $M.4, $M.10, $M.13, $M.16;



implementation vmw_marker_pull_loop_$bb5(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$p4: ref, in_$i47: i64, in_$p48: ref, in_$p49: ref, in_$i50: i8, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$i54: i8, in_$i55: i64, in_$i56: i64, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i62: i64, in_$i63: i64, in_$p64: ref, in_$i65: i64, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$i69: i64, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$p81: ref, in_$i82: i64, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$i61: i8, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$i95: i32, in_$p96: ref, in_$i97: i64, in_$i98: i64, in_$p99: ref, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8, in_cmdloc_dummy_var_14: [ref]i8) returns (out_$p48: ref, out_$p49: ref, out_$i50: i8, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$i54: i8, out_$i55: i64, out_$i56: i64, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i62: i64, out_$i63: i64, out_$p64: ref, out_$i65: i64, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$i69: i64, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$p81: ref, out_$i82: i64, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$i61: i8, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$i95: i32, out_$p96: ref, out_$i97: i64, out_$i98: i64, out_$p99: ref, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8, out_cmdloc_dummy_var_14: [ref]i8)
{

  entry:
    out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i62, out_$i63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$p73, out_$p74, out_$i75, out_$p76, out_$p77, out_$p78, out_$p79, out_$i80, out_$p81, out_$i82, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p91, out_$i61, out_$p92, out_$p93, out_$p94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p99, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14 := in_$p48, in_$p49, in_$i50, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$i60, in_$i62, in_$i63, in_$p64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i69, in_$p70, in_$p71, in_$i72, in_$p73, in_$p74, in_$i75, in_$p76, in_$p77, in_$p78, in_$p79, in_$i80, in_$p81, in_$i82, in_$p83, in_$p84, in_$i85, in_$i86, in_$p87, in_$p88, in_$p89, in_$p90, in_$p91, in_$i61, in_$p92, in_$p93, in_$p94, in_$i95, in_$p96, in_$i97, in_$i98, in_$p99, in_cmdloc_dummy_var_9, in_cmdloc_dummy_var_10, in_cmdloc_dummy_var_11, in_cmdloc_dummy_var_12, in_cmdloc_dummy_var_13, in_cmdloc_dummy_var_14;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3547;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    out_$p48, out_$p49, out_$i50 := out_$p99, out_$p48, out_$i61;
    goto corral_source_split_3575_dummy;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    goto corral_source_split_3575;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref(out_$p96, $mul.ref(out_$i98, 1));
    goto corral_source_split_3574;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    out_$i98 := $sub.i64(0, out_$i97);
    goto corral_source_split_3573;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    out_$i97 := $zext.i32.i64(out_$i95);
    goto corral_source_split_3572;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    out_$p96 := $bitcast.ref.ref(out_$p93);
    goto corral_source_split_3571;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    out_$i95 := $p2i.ref.i32(out_$p94);
    call {:si_unique_call 1603} {:cexpr "__cil_tmp60"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_3570;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    out_$p94 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_3569;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.0, out_$p92);
    goto corral_source_split_3568;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    out_$p92 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_3567;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3566;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    out_$i61 := 1;
    goto $bb13;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i50;
    goto $bb13;

  $bb11:
    assume out_$i60 == 1;
    goto corral_source_split_3564;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    out_$i60 := $ugt.i32(out_$i59, 1073741824);
    goto corral_source_split_3562;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    out_$i59 := $sub.i32(in_$i1, out_$i58);
    call {:si_unique_call 1602} {:cexpr "__cil_tmp44"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_3561;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, out_$p57);
    call {:si_unique_call 1601} {:cexpr "__cil_tmp43"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_3560;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    out_$p57 := $i2p.i64.ref(out_$i56);
    goto corral_source_split_3559;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i64(out_$i55, 16);
    call {:si_unique_call 1600} {:cexpr "__cil_tmp42"} boogie_si_record_i64(out_$i56);
    goto corral_source_split_3558;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p49);
    call {:si_unique_call 1599} {:cexpr "__cil_tmp41"} boogie_si_record_i64(out_$i55);
    goto corral_source_split_3557;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume out_$i53 == 1;
    goto corral_source_split_3553;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i50;
    assume true;
    goto $bb7;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i64(out_$i52, in_$i47);
    goto corral_source_split_3551;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    out_$i52 := $p2i.ref.i64(out_$p51);
    call {:si_unique_call 1598} {:cexpr "__cil_tmp38"} boogie_si_record_i64(out_$i52);
    goto corral_source_split_3550;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_3549;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} kfree(out_$p91);
    goto corral_source_split_3612;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    out_$p91 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_3611;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} list_del(out_$p90);
    goto corral_source_split_3610;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    out_$p90 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_3609;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_12 := $M.0;
    out_cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 1616} out_cmdloc_dummy_var_14 := $memcpy.i8(out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_$p88, out_$p89, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_14;
    goto corral_source_split_3608;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    out_$p89 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_3607;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    out_$p88 := $bitcast.ref.ref(out_$p87);
    goto corral_source_split_3606;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    out_$p87 := $i2p.i64.ref(out_$i86);
    goto corral_source_split_3605;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i64(out_$i85, 32);
    call {:si_unique_call 1615} {:cexpr "__cil_tmp53"} boogie_si_record_i64(out_$i86);
    goto corral_source_split_3604;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    out_$i85 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1614} {:cexpr "__cil_tmp52"} boogie_si_record_i64(out_$i85);
    goto corral_source_split_3603;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_9 := $M.0;
    out_cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 1613} out_cmdloc_dummy_var_11 := $memcpy.i8(out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_$p83, out_$p84, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_11;
    goto corral_source_split_3602;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    out_$p84 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_3601;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    out_$p83 := $bitcast.ref.ref(out_$p76);
    goto corral_source_split_3600;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p81, out_$i82);
    goto corral_source_split_3599;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    out_$i82 := $extractvalue(out_$p77, 1);
    goto corral_source_split_3598;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p78, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3597;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p79, out_$i80);
    goto corral_source_split_3596;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    out_$i80 := $extractvalue(out_$p77, 0);
    goto corral_source_split_3595;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p78, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3594;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_3593;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} out_$p77 := timespec_sub(out_$i65, out_$i67, out_$i72, out_$i75);
    goto corral_source_split_3592;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    out_$p76 := $i2p.i64.ref(out_$i63);
    goto corral_source_split_3591;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i64($M.0, out_$p74);
    call {:si_unique_call 1611} {:cexpr "__cil_tmp73"} boogie_si_record_i64(out_$i75);
    goto corral_source_split_3590;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p73, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3589;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    out_$p73 := $i2p.i64.ref(out_$i69);
    goto corral_source_split_3588;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i64($M.0, out_$p71);
    call {:si_unique_call 1610} {:cexpr "__cil_tmp72"} boogie_si_record_i64(out_$i72);
    goto corral_source_split_3587;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p70, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3586;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    out_$p70 := $i2p.i64.ref(out_$i69);
    goto corral_source_split_3585;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i64(out_$i68, 24);
    call {:si_unique_call 1609} {:cexpr "__cil_tmp50"} boogie_si_record_i64(out_$i69);
    goto corral_source_split_3584;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    out_$i68 := $p2i.ref.i64(out_$p49);
    call {:si_unique_call 1608} {:cexpr "__cil_tmp49"} boogie_si_record_i64(out_$i68);
    goto corral_source_split_3583;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i64($M.0, out_$p66);
    call {:si_unique_call 1607} {:cexpr "__cil_tmp71"} boogie_si_record_i64(out_$i67);
    goto corral_source_split_3582;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3581;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i64($M.0, out_$p64);
    call {:si_unique_call 1606} {:cexpr "__cil_tmp70"} boogie_si_record_i64(out_$i65);
    goto corral_source_split_3580;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3579;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i64(out_$i62, 16);
    call {:si_unique_call 1605} {:cexpr "__cil_tmp46"} boogie_si_record_i64(out_$i63);
    goto corral_source_split_3578;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 1604} {:cexpr "__cil_tmp45"} boogie_si_record_i64(out_$i62);
    goto corral_source_split_3577;

  $bb12:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3575_dummy:
    call {:si_unique_call 1} out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i62, out_$i63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$p73, out_$p74, out_$i75, out_$p76, out_$p77, out_$p78, out_$p79, out_$i80, out_$p81, out_$i82, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p91, out_$i61, out_$p92, out_$p93, out_$p94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p99, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14 := vmw_marker_pull_loop_$bb5(in_$p0, in_$i1, in_$p2, in_$p4, in_$i47, out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i62, out_$i63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$p73, out_$p74, out_$i75, out_$p76, out_$p77, out_$p78, out_$p79, out_$i80, out_$p81, out_$i82, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p91, out_$i61, out_$p92, out_$p93, out_$p94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p99, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14);
    return;

  exit:
    return;
}



procedure vmw_marker_pull_loop_$bb5(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$p4: ref, in_$i47: i64, in_$p48: ref, in_$p49: ref, in_$i50: i8, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$i54: i8, in_$i55: i64, in_$i56: i64, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i62: i64, in_$i63: i64, in_$p64: ref, in_$i65: i64, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$i69: i64, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$p81: ref, in_$i82: i64, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$i61: i8, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$i95: i32, in_$p96: ref, in_$i97: i64, in_$i98: i64, in_$p99: ref, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8, in_cmdloc_dummy_var_14: [ref]i8) returns (out_$p48: ref, out_$p49: ref, out_$i50: i8, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$i54: i8, out_$i55: i64, out_$i56: i64, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i62: i64, out_$i63: i64, out_$p64: ref, out_$i65: i64, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$i69: i64, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$p81: ref, out_$i82: i64, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$i61: i8, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$i95: i32, out_$p96: ref, out_$i97: i64, out_$i98: i64, out_$p99: ref, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8, out_cmdloc_dummy_var_14: [ref]i8);
  modifies $M.0, $M.13, $CurrAddr;



implementation vmw_framebuffer_dmabuf_pin_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb8_dummy;

  $bb8_dummy:
    call {:si_unique_call 1} vmw_framebuffer_dmabuf_pin_loop_$bb7();
    return;

  exit:
    return;
}



procedure vmw_framebuffer_dmabuf_pin_loop_$bb7();



implementation vmw_execbuf_release_pinned_bo_loop_$bb11(in_$p3: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32) returns (out_$i52: i32, out_$i53: i1, out_$i54: i32)
{

  entry:
    out_$i52, out_$i53, out_$i54 := in_$i52, in_$i53, in_$i54;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume out_$i53 == 1;
    goto corral_source_split_4287;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i52;
    assume true;
    goto $bb13;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, $sub.i32(0, 512));
    goto corral_source_split_4285;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} out_$i52 := ttm_eu_reserve_buffers(in_$p3);
    call {:si_unique_call 1925} {:cexpr "ret"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_4284;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i52, out_$i53, out_$i54 := vmw_execbuf_release_pinned_bo_loop_$bb11(in_$p3, out_$i52, out_$i53, out_$i54);
    return;

  exit:
    return;
}



procedure vmw_execbuf_release_pinned_bo_loop_$bb11(in_$p3: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32) returns (out_$i52: i32, out_$i53: i1, out_$i54: i32);



implementation vmw_bo_pin_loop_$bb49()
{

  entry:
    goto $bb49, exit;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb50_dummy;

  $bb50_dummy:
    call {:si_unique_call 1} vmw_bo_pin_loop_$bb49();
    return;

  exit:
    return;
}



procedure vmw_bo_pin_loop_$bb49();



implementation vmw_bo_pin_loop_$bb28()
{

  entry:
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb29_dummy;

  $bb29_dummy:
    call {:si_unique_call 1} vmw_bo_pin_loop_$bb28();
    return;

  exit:
    return;
}



procedure vmw_bo_pin_loop_$bb28();



implementation vmw_bo_pin_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb11_dummy:
    call {:si_unique_call 1} vmw_bo_pin_loop_$bb10();
    return;

  exit:
    return;
}



procedure vmw_bo_pin_loop_$bb10();



implementation {:SIextraRecBound 2} vmw_overlay_pause_all_loop_$bb5(in_$p0: ref, in_$p4: ref, in_$i7: i32, in_$i8: i1, in_$i9: i64, in_$i10: i64, in_$i11: i64, in_$i12: i64, in_$i13: i64, in_$i14: i64, in_$p15: ref, in_$i16: i8, in_$i17: i1, in_$i19: i1, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i1, in_$i26: i32, in_$i27: i1, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i34: i1, in_$i35: i32, in_$i36: i64, in_$i37: i64, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$i43: i1, in_$i44: i32, in_$i45: i64, in_$i47: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i64) returns (out_$i7: i32, out_$i8: i1, out_$i9: i64, out_$i10: i64, out_$i11: i64, out_$i12: i64, out_$i13: i64, out_$i14: i64, out_$p15: ref, out_$i16: i8, out_$i17: i1, out_$i19: i1, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i1, out_$i26: i32, out_$i27: i1, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i34: i1, out_$i35: i32, out_$i36: i64, out_$i37: i64, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$i43: i1, out_$i44: i32, out_$i45: i64, out_$i47: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i64)
{

  entry:
    out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i47, out_vslice_dummy_var_86, out_vslice_dummy_var_87 := in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i47, in_vslice_dummy_var_86, in_vslice_dummy_var_87;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4584;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    out_$i7 := out_$i47;
    goto corral_source_split_4640_dummy;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i7, 1);
    call {:si_unique_call 2080} {:cexpr "i"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_4640;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} out_vslice_dummy_var_87 := ldv__builtin_expect(out_$i45, 0);
    goto corral_source_split_4639;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i32.i64(out_$i44);
    call {:si_unique_call 2078} {:cexpr "__cil_tmp26"} boogie_si_record_i64(out_$i45);
    goto corral_source_split_4638;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i1.i32(out_$i43);
    call {:si_unique_call 2077} {:cexpr "__cil_tmp25"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_4637;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    out_$i43 := $xor.i1(out_$i42, 1);
    goto corral_source_split_4636;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_4635;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i1.i32(out_$i40);
    call {:si_unique_call 2076} {:cexpr "__cil_tmp24"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_4634;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    out_$i40 := $xor.i1(out_$i39, 1);
    goto corral_source_split_4633;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i29, 0);
    goto corral_source_split_4632;

  $bb15:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} warn_slowpath_null(.str.98, 444);
    goto corral_source_split_4630;

  $bb14:
    assume out_$i38 == 1;
    goto corral_source_split_4629;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, 0);
    goto corral_source_split_4627;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} out_$i37 := ldv__builtin_expect(out_$i36, 0);
    call {:si_unique_call 2074} {:cexpr "tmp___7"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_4626;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i32.i64(out_$i35);
    call {:si_unique_call 2072} {:cexpr "__cil_tmp22"} boogie_si_record_i64(out_$i36);
    goto corral_source_split_4625;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i1.i32(out_$i34);
    call {:si_unique_call 2071} {:cexpr "__cil_tmp21"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_4624;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    out_$i34 := $xor.i1(out_$i33, 1);
    goto corral_source_split_4623;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_4622;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i1.i32(out_$i31);
    call {:si_unique_call 2070} {:cexpr "__cil_tmp20"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_4621;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    out_$i31 := $xor.i1(out_$i30, 1);
    goto corral_source_split_4620;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_4619;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i1.i32(out_$i28);
    call {:si_unique_call 2069} {:cexpr "__ret_warn_on"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_4618;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    out_$i28 := $xor.i1(out_$i27, 1);
    goto corral_source_split_4617;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_4616;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i1.i32(out_$i25);
    call {:si_unique_call 2068} {:cexpr "__cil_tmp19"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_4615;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    out_$i25 := $xor.i1(out_$i24, 1);
    goto corral_source_split_4614;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_4613;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i1.i32(out_$i22);
    call {:si_unique_call 2067} {:cexpr "__cil_tmp18"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_4612;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_4611;

  SeqInstr_348:
    call {:si_unique_call 2066} {:cexpr "ret"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_4610;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} out_$i21 := vmw_overlay_stop(in_$p0, out_$i7, out_$i19, out_$i20);
    goto SeqInstr_347;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i8.i1(0);
    goto corral_source_split_4609;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i8.i1(1);
    goto corral_source_split_4608;

  $bb12:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} out_vslice_dummy_var_86 := printk.ref.ref.i32(.str.101, .str.102, out_$i7);
    goto corral_source_split_4606;

  $bb11:
    assume out_$i17 == 1;
    goto corral_source_split_4605;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    out_$i17 := $trunc.i8.i1(out_$i16);
    goto corral_source_split_4600;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i8($M.0, out_$p15);
    goto corral_source_split_4599;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    out_$p15 := $i2p.i64.ref(out_$i14);
    goto corral_source_split_4598;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i64(out_$i13, out_$i12);
    call {:si_unique_call 2062} {:cexpr "__cil_tmp14"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_4597;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(in_$p4);
    call {:si_unique_call 2061} {:cexpr "__cil_tmp13"} boogie_si_record_i64(out_$i13);
    goto corral_source_split_4596;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i64(72, out_$i11);
    call {:si_unique_call 2060} {:cexpr "__cil_tmp12"} boogie_si_record_i64(out_$i12);
    goto corral_source_split_4595;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i64(out_$i10, 9);
    call {:si_unique_call 2059} {:cexpr "__cil_tmp11"} boogie_si_record_i64(out_$i11);
    goto corral_source_split_4594;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    out_$i10 := $mul.i64(out_$i9, 104);
    call {:si_unique_call 2058} {:cexpr "__cil_tmp10"} boogie_si_record_i64(out_$i10);
    goto corral_source_split_4593;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4592;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_4588;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i7, 1);
    goto corral_source_split_4586;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_4640_dummy:
    call {:si_unique_call 1} out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i47, out_vslice_dummy_var_86, out_vslice_dummy_var_87 := vmw_overlay_pause_all_loop_$bb5(in_$p0, in_$p4, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i47, out_vslice_dummy_var_86, out_vslice_dummy_var_87);
    return;

  exit:
    return;
}



procedure vmw_overlay_pause_all_loop_$bb5(in_$p0: ref, in_$p4: ref, in_$i7: i32, in_$i8: i1, in_$i9: i64, in_$i10: i64, in_$i11: i64, in_$i12: i64, in_$i13: i64, in_$i14: i64, in_$p15: ref, in_$i16: i8, in_$i17: i1, in_$i19: i1, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i1, in_$i26: i32, in_$i27: i1, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i34: i1, in_$i35: i32, in_$i36: i64, in_$i37: i64, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$i43: i1, in_$i44: i32, in_$i45: i64, in_$i47: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i64) returns (out_$i7: i32, out_$i8: i1, out_$i9: i64, out_$i10: i64, out_$i11: i64, out_$i12: i64, out_$i13: i64, out_$i14: i64, out_$p15: ref, out_$i16: i8, out_$i17: i1, out_$i19: i1, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i1, out_$i26: i32, out_$i27: i1, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i34: i1, out_$i35: i32, out_$i36: i64, out_$i37: i64, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$i43: i1, out_$i44: i32, out_$i45: i64, out_$i47: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i64);
  modifies $M.0, $M.11, $M.12, $M.2, $M.6, $M.1, $CurrAddr, assertsPassed, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation {:SIextraRecBound 2} vmw_overlay_resume_all_loop_$bb5(in_$p0: ref, in_$p4: ref, in_$i7: i32, in_$i8: i1, in_$i9: i64, in_$i10: i64, in_$i11: i64, in_$i12: i64, in_$i13: i64, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$p17: ref, in_$i18: i8, in_$i19: i1, in_$i20: i8, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$p26: ref, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i31: i32, in_vslice_dummy_var_90: i32) returns (out_$i7: i32, out_$i8: i1, out_$i9: i64, out_$i10: i64, out_$i11: i64, out_$i12: i64, out_$i13: i64, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$p17: ref, out_$i18: i8, out_$i19: i1, out_$i20: i8, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$p26: ref, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i31: i32, out_vslice_dummy_var_90: i32)
{

  entry:
    out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i31, out_vslice_dummy_var_90 := in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$p14, in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i31, in_vslice_dummy_var_90;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4798;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    out_$i7 := out_$i31;
    goto corral_source_split_4825_dummy;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i7, 1);
    call {:si_unique_call 2150} {:cexpr "i"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_4825;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2155} out_vslice_dummy_var_90 := printk.ref.ref.i32(.str.99, .str.100, out_$i7);
    goto corral_source_split_4837;

  $bb15:
    assume out_$i29 == 1;
    goto corral_source_split_4836;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_4834;

  SeqInstr_360:
    call {:si_unique_call 2154} {:cexpr "ret"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_4833;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} out_$i28 := vmw_overlay_update_stream(in_$p0, out_$p23, out_$p26, out_$i27);
    goto SeqInstr_359;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    out_$i27 := $trunc.i8.i1(0);
    goto corral_source_split_4832;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    out_$p26 := $i2p.i64.ref(out_$i25);
    goto corral_source_split_4831;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i64(out_$i24, 12);
    call {:si_unique_call 2152} {:cexpr "__cil_tmp18"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_4830;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p14);
    call {:si_unique_call 2151} {:cexpr "__cil_tmp17"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_4829;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_4828;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_4827;

  $bb11:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    out_$i21 := $trunc.i8.i1(out_$i20);
    goto corral_source_split_4818;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i1.i8(out_$i19);
    call {:si_unique_call 2148} {:cexpr "__cil_tmp15"} boogie_si_record_i8(out_$i20);
    goto corral_source_split_4817;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i8.i1(out_$i18);
    goto corral_source_split_4816;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i8($M.0, out_$p17);
    goto corral_source_split_4815;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    out_$p17 := $i2p.i64.ref(out_$i16);
    goto corral_source_split_4814;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i64(out_$i15, 9);
    call {:si_unique_call 2147} {:cexpr "__cil_tmp14"} boogie_si_record_i64(out_$i16);
    goto corral_source_split_4813;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    call {:si_unique_call 2146} {:cexpr "__cil_tmp13"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_4812;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    out_$p14 := $i2p.i64.ref(out_$i13);
    goto corral_source_split_4811;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i64(out_$i12, out_$i11);
    call {:si_unique_call 2145} {:cexpr "__cil_tmp12"} boogie_si_record_i64(out_$i13);
    goto corral_source_split_4810;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(in_$p4);
    call {:si_unique_call 2144} {:cexpr "__cil_tmp11"} boogie_si_record_i64(out_$i12);
    goto corral_source_split_4809;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i64(72, out_$i10);
    call {:si_unique_call 2143} {:cexpr "__cil_tmp10"} boogie_si_record_i64(out_$i11);
    goto corral_source_split_4808;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    out_$i10 := $mul.i64(out_$i9, 104);
    call {:si_unique_call 2142} {:cexpr "__cil_tmp9"} boogie_si_record_i64(out_$i10);
    goto corral_source_split_4807;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4806;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_4802;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i7, 1);
    goto corral_source_split_4800;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume !(out_$i21 == 1);
    goto corral_source_split_4823;

  corral_source_split_4825_dummy:
    call {:si_unique_call 1} out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i31, out_vslice_dummy_var_90 := vmw_overlay_resume_all_loop_$bb5(in_$p0, in_$p4, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i31, out_vslice_dummy_var_90);
    return;

  exit:
    return;
}



procedure vmw_overlay_resume_all_loop_$bb5(in_$p0: ref, in_$p4: ref, in_$i7: i32, in_$i8: i1, in_$i9: i64, in_$i10: i64, in_$i11: i64, in_$i12: i64, in_$i13: i64, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$p17: ref, in_$i18: i8, in_$i19: i1, in_$i20: i8, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$p26: ref, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i31: i32, in_vslice_dummy_var_90: i32) returns (out_$i7: i32, out_$i8: i1, out_$i9: i64, out_$i10: i64, out_$i11: i64, out_$i12: i64, out_$i13: i64, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$p17: ref, out_$i18: i8, out_$i19: i1, out_$i20: i8, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$p26: ref, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i31: i32, out_vslice_dummy_var_90: i32);
  modifies $M.16, $M.0, $M.10, $M.6, $M.11, $M.12, $M.2, $M.1, $CurrAddr, assertsPassed, $M.3, $M.4, $M.13;



implementation vmw_overlay_update_stream_loop_$bb28()
{

  entry:
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb29_dummy;

  $bb29_dummy:
    call {:si_unique_call 1} vmw_overlay_update_stream_loop_$bb28();
    return;

  exit:
    return;
}



procedure vmw_overlay_update_stream_loop_$bb28();



implementation vmw_overlay_update_stream_loop_$bb49()
{

  entry:
    goto $bb49, exit;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb50_dummy;

  $bb50_dummy:
    call {:si_unique_call 1} vmw_overlay_update_stream_loop_$bb49();
    return;

  exit:
    return;
}



procedure vmw_overlay_update_stream_loop_$bb49();



implementation vmw_overlay_stop_loop_$bb21()
{

  entry:
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  $bb22_dummy:
    call {:si_unique_call 1} vmw_overlay_stop_loop_$bb21();
    return;

  exit:
    return;
}



procedure vmw_overlay_stop_loop_$bb21();



implementation {:SIextraRecBound 20} vmw_overlay_send_put_loop_$bb11(in_$i14: i32, in_$p24: ref, in_$i41: i32, in_$i42: i1, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$i46: i32) returns (out_$i41: i32, out_$i42: i1, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$i46: i32)
{

  entry:
    out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46 := in_$i41, in_$i42, in_$i43, in_$p44, in_$p45, in_$i46;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5113;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i46;
    goto corral_source_split_5125_dummy;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i41, 1);
    call {:si_unique_call 2253} {:cexpr "i"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_5125;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p45, out_$i41);
    goto corral_source_split_5124;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_5123;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref(in_$p24, $mul.ref(out_$i43, 8));
    goto corral_source_split_5122;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i41);
    goto corral_source_split_5121;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume out_$i42 == 1;
    goto corral_source_split_5117;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i41, in_$i14);
    goto corral_source_split_5115;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_5125_dummy:
    call {:si_unique_call 1} out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46 := vmw_overlay_send_put_loop_$bb11(in_$i14, in_$p24, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46);
    return;

  exit:
    return;
}



procedure vmw_overlay_send_put_loop_$bb11(in_$i14: i32, in_$p24: ref, in_$i41: i32, in_$i42: i1, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$i46: i32) returns (out_$i41: i32, out_$i42: i1, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$i46: i32);
  modifies $M.0;



implementation vmw_overlay_send_stop_loop_$bb19()
{

  entry:
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb20_dummy;

  $bb20_dummy:
    call {:si_unique_call 1} vmw_overlay_send_stop_loop_$bb19();
    return;

  exit:
    return;
}



procedure vmw_overlay_send_stop_loop_$bb19();



implementation vmw_overlay_send_stop_loop_$bb1(in_$p0: ref, in_$i3: i8, in_$p4: ref, in_$p5: ref, in_$i6: i1, in_$p7: ref, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i32, in_$i12: i1, in_$i13: i1, in_$i14: i32, in_$i16: i1, in_$i17: i32, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i1, in_$i23: i32, in_$i24: i64, in_$i25: i64, in_$i26: i1) returns (out_$p4: ref, out_$p5: ref, out_$i6: i1, out_$p7: ref, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i32, out_$i12: i1, out_$i13: i1, out_$i14: i32, out_$i16: i1, out_$i17: i32, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i1, out_$i23: i32, out_$i24: i64, out_$i25: i64, out_$i26: i1)
{

  entry:
    out_$p4, out_$p5, out_$i6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26 := in_$p4, in_$p5, in_$i6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb25_dummy;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb16:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, 0);
    goto corral_source_split_5550;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2436} out_$i25 := ldv__builtin_expect(out_$i24, 0);
    call {:si_unique_call 2437} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_5549;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(out_$i23);
    call {:si_unique_call 2435} {:cexpr "__cil_tmp15"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_5548;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i1.i32(out_$i22);
    call {:si_unique_call 2434} {:cexpr "__cil_tmp14"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_5547;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    out_$i22 := $xor.i1(out_$i21, 1);
    goto corral_source_split_5546;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i20, 0);
    goto corral_source_split_5545;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i1.i32(out_$i19);
    call {:si_unique_call 2433} {:cexpr "__cil_tmp13"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_5544;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    out_$i19 := $xor.i1(out_$i18, 1);
    goto corral_source_split_5543;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, 0);
    goto corral_source_split_5542;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i1.i32(out_$i16);
    call {:si_unique_call 2432} {:cexpr "__cil_tmp12"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_5541;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i11, 0);
    goto corral_source_split_5540;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume !(out_$i13 == 1);
    goto corral_source_split_5536;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i11;
    assume true;
    goto $bb10;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i11, $sub.i32(0, 512));
    goto corral_source_split_5530;

  $bb7:
    assume out_$i12 == 1;
    goto corral_source_split_5529;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    out_$i12 := $trunc.i8.i1(in_$i3);
    goto corral_source_split_5527;

  SeqInstr_414:
    call {:si_unique_call 2431} {:cexpr "ret"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_5526;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2430} out_$i11 := vmw_fallback_wait(in_$p0, out_$i8, out_$i9, 0, out_$i10, 750);
    goto SeqInstr_413;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    out_$i10 := $trunc.i8.i1(in_$i3);
    goto corral_source_split_5525;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    out_$i9 := $trunc.i8.i1(1);
    goto corral_source_split_5524;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i8 := $trunc.i8.i1(0);
    goto corral_source_split_5523;

  $bb4:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    out_$p7 := out_$p4;
    assume true;
    goto $bb4;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    out_$i6 := $ne.ref(out_$p5, $0.ref);
    goto corral_source_split_5489;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    out_$p5 := $bitcast.ref.ref(out_$p4);
    goto corral_source_split_5488;

  SeqInstr_408:
    goto corral_source_split_5487;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2410} out_$p4 := vmw_fifo_reserve(in_$p0, 48);
    goto SeqInstr_407;

  $bb8:
    assume !(out_$i12 == 1);
    goto corral_source_split_5532;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p4, out_$p5, out_$i6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26 := vmw_overlay_send_stop_loop_$bb1(in_$p0, in_$i3, out_$p4, out_$p5, out_$i6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26);
    return;

  exit:
    return;
}



procedure vmw_overlay_send_stop_loop_$bb1(in_$p0: ref, in_$i3: i8, in_$p4: ref, in_$p5: ref, in_$i6: i1, in_$p7: ref, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i32, in_$i12: i1, in_$i13: i1, in_$i14: i32, in_$i16: i1, in_$i17: i32, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i1, in_$i23: i32, in_$i24: i64, in_$i25: i64, in_$i26: i1) returns (out_$p4: ref, out_$p5: ref, out_$i6: i1, out_$p7: ref, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i32, out_$i12: i1, out_$i13: i1, out_$i14: i32, out_$i16: i1, out_$i17: i32, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i1, out_$i23: i32, out_$i24: i64, out_$i25: i64, out_$i26: i1);
  modifies $M.11, $M.12, $M.2, $M.0, $M.6, $M.1, $CurrAddr, assertsPassed, $M.13, $M.3, $M.4, $M.10, $M.16;



implementation vmw_lastclose_loop_$bb5(in_$p1: ref, in_$i50: i64, in_$p51: ref, in_$i52: i64, in_$i53: i64, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$i57: i64, in_$i58: i64, in_$p59: ref, in_$i60: i64, in_$i61: i64, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$i65: i64, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$i72: i1, in_$i73: i32, in_$i74: i1, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$i78: i1, in_$i79: i32, in_$i80: i1, in_$i81: i1, in_$i82: i32, in_$i83: i64, in_$i84: i64, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i32, in_$i89: i1, in_$i90: i1, in_$i91: i32, in_$i92: i64, in_$i94: i64, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i64, in_$p100: ref, in_$i101: i32, in_$p102: ref, in_$i103: i64, in_$i104: i64, in_$p105: ref, in_vslice_dummy_var_122: i64) returns (out_$p51: ref, out_$i52: i64, out_$i53: i64, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$i57: i64, out_$i58: i64, out_$p59: ref, out_$i60: i64, out_$i61: i64, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$i65: i64, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$i72: i1, out_$i73: i32, out_$i74: i1, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$i78: i1, out_$i79: i32, out_$i80: i1, out_$i81: i1, out_$i82: i32, out_$i83: i64, out_$i84: i64, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i32, out_$i89: i1, out_$i90: i1, out_$i91: i32, out_$i92: i64, out_$i94: i64, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i64, out_$p100: ref, out_$i101: i32, out_$p102: ref, out_$i103: i64, out_$i104: i64, out_$p105: ref, out_vslice_dummy_var_122: i64)
{

  entry:
    out_$p51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$i101, out_$p102, out_$i103, out_$i104, out_$p105, out_vslice_dummy_var_122 := in_$p51, in_$i52, in_$i53, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$p59, in_$i60, in_$i61, in_$p62, in_$p63, in_$i64, in_$i65, in_$p66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i94, in_$i95, in_$p96, in_$p97, in_$i98, in_$i99, in_$p100, in_$i101, in_$p102, in_$i103, in_$i104, in_$p105, in_vslice_dummy_var_122;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_6666;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    out_$p51 := out_$p105;
    goto corral_source_split_6731_dummy;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    goto corral_source_split_6731;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref(out_$p102, $mul.ref(out_$i104, 1));
    goto corral_source_split_6730;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    out_$i104 := $sub.i64(0, out_$i103);
    goto corral_source_split_6729;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i32.i64(out_$i101);
    goto corral_source_split_6728;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    out_$p102 := $bitcast.ref.ref(out_$p97);
    goto corral_source_split_6727;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    out_$i101 := $p2i.ref.i32(out_$p100);
    call {:si_unique_call 3040} {:cexpr "__cil_tmp69"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_6726;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    out_$p100 := $i2p.i64.ref(out_$i99);
    goto corral_source_split_6725;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    out_$i99 := $add.i64(out_$i98, 8);
    call {:si_unique_call 3039} {:cexpr "__cil_tmp67"} boogie_si_record_i64(out_$i99);
    goto corral_source_split_6724;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    out_$i98 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 3038} {:cexpr "__cil_tmp66"} boogie_si_record_i64(out_$i98);
    goto corral_source_split_6723;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.0, out_$p96);
    goto corral_source_split_6722;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    out_$p96 := $i2p.i64.ref(out_$i95);
    goto corral_source_split_6721;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    out_$i95 := $add.i64(out_$i94, 8);
    call {:si_unique_call 3037} {:cexpr "__cil_tmp63"} boogie_si_record_i64(out_$i95);
    goto corral_source_split_6720;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    out_$i94 := $p2i.ref.i64(out_$p51);
    call {:si_unique_call 3036} {:cexpr "__cil_tmp62"} boogie_si_record_i64(out_$i94);
    goto corral_source_split_6719;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3035} out_vslice_dummy_var_122 := ldv__builtin_expect(out_$i92, 0);
    goto corral_source_split_6718;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    out_$i92 := $sext.i32.i64(out_$i91);
    call {:si_unique_call 3034} {:cexpr "__cil_tmp61"} boogie_si_record_i64(out_$i92);
    goto corral_source_split_6717;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    out_$i91 := $zext.i1.i32(out_$i90);
    call {:si_unique_call 3033} {:cexpr "__cil_tmp60"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_6716;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    out_$i90 := $xor.i1(out_$i89, 1);
    goto corral_source_split_6715;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i32(out_$i88, 0);
    goto corral_source_split_6714;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i1.i32(out_$i87);
    call {:si_unique_call 3032} {:cexpr "__cil_tmp59"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_6713;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    out_$i87 := $xor.i1(out_$i86, 1);
    goto corral_source_split_6712;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i32(out_$i76, 0);
    goto corral_source_split_6711;

  $bb12:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3031} warn_slowpath_null(.str.36, 844);
    goto corral_source_split_6709;

  $bb11:
    assume out_$i85 == 1;
    goto corral_source_split_6708;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i64(out_$i84, 0);
    goto corral_source_split_6706;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3029} out_$i84 := ldv__builtin_expect(out_$i83, 0);
    call {:si_unique_call 3030} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i84);
    goto corral_source_split_6705;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    out_$i83 := $sext.i32.i64(out_$i82);
    call {:si_unique_call 3028} {:cexpr "__cil_tmp57"} boogie_si_record_i64(out_$i83);
    goto corral_source_split_6704;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i1.i32(out_$i81);
    call {:si_unique_call 3027} {:cexpr "__cil_tmp56"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_6703;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    out_$i81 := $xor.i1(out_$i80, 1);
    goto corral_source_split_6702;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, 0);
    goto corral_source_split_6701;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    out_$i79 := $zext.i1.i32(out_$i78);
    call {:si_unique_call 3026} {:cexpr "__cil_tmp55"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_6700;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    out_$i78 := $xor.i1(out_$i77, 1);
    goto corral_source_split_6699;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i32(out_$i76, 0);
    goto corral_source_split_6698;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i1.i32(out_$i75);
    call {:si_unique_call 3025} {:cexpr "__ret_warn_on"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_6697;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    out_$i75 := $xor.i1(out_$i74, 1);
    goto corral_source_split_6696;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i32(out_$i73, 0);
    goto corral_source_split_6695;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    out_$i73 := $zext.i1.i32(out_$i72);
    call {:si_unique_call 3024} {:cexpr "__cil_tmp54"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_6694;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    out_$i72 := $xor.i1(out_$i71, 1);
    goto corral_source_split_6693;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i32(out_$i70, 0);
    goto corral_source_split_6692;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i1.i32(out_$i69);
    call {:si_unique_call 3023} {:cexpr "__cil_tmp53"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_6691;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_6690;

  SeqInstr_453:
    call {:si_unique_call 3022} {:cexpr "ret"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_6689;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    call {:si_unique_call 3021} out_$i68 := devirtbounce.16(out_$p67, in_$p1);
    goto SeqInstr_452;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    out_$p66 := $i2p.i64.ref(out_$i65);
    goto corral_source_split_6688;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i64(out_$i64, 56);
    call {:si_unique_call 3020} {:cexpr "__cil_tmp50"} boogie_si_record_i64(out_$i65);
    goto corral_source_split_6687;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    out_$i64 := $p2i.ref.i64(out_$p63);
    call {:si_unique_call 3019} {:cexpr "__cil_tmp49"} boogie_si_record_i64(out_$i64);
    goto corral_source_split_6686;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.0, out_$p62);
    goto corral_source_split_6685;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    out_$p62 := $i2p.i64.ref(out_$i61);
    goto corral_source_split_6684;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i64(out_$i60, 488);
    call {:si_unique_call 3018} {:cexpr "__cil_tmp47"} boogie_si_record_i64(out_$i61);
    goto corral_source_split_6683;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    out_$i60 := $p2i.ref.i64(out_$p51);
    call {:si_unique_call 3017} {:cexpr "__cil_tmp46"} boogie_si_record_i64(out_$i60);
    goto corral_source_split_6682;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p59, out_$p51);
    goto corral_source_split_6681;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    out_$p59 := $i2p.i64.ref(out_$i58);
    goto corral_source_split_6680;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i64(out_$i57, 24);
    call {:si_unique_call 3016} {:cexpr "__cil_tmp45"} boogie_si_record_i64(out_$i58);
    goto corral_source_split_6679;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_6678;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume out_$i56 == 1;
    goto corral_source_split_6674;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i55, in_$i50);
    goto corral_source_split_6672;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p54);
    call {:si_unique_call 3015} {:cexpr "__cil_tmp44"} boogie_si_record_i64(out_$i55);
    goto corral_source_split_6671;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    out_$p54 := $i2p.i64.ref(out_$i53);
    goto corral_source_split_6670;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i64(out_$i52, 8);
    call {:si_unique_call 3014} {:cexpr "__cil_tmp42"} boogie_si_record_i64(out_$i53);
    goto corral_source_split_6669;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i52 := $p2i.ref.i64(out_$p51);
    call {:si_unique_call 3013} {:cexpr "__cil_tmp41"} boogie_si_record_i64(out_$i52);
    goto corral_source_split_6668;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_6731_dummy:
    call {:si_unique_call 1} out_$p51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$i101, out_$p102, out_$i103, out_$i104, out_$p105, out_vslice_dummy_var_122 := vmw_lastclose_loop_$bb5(in_$p1, in_$i50, out_$p51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$i101, out_$p102, out_$i103, out_$i104, out_$p105, out_vslice_dummy_var_122);
    return;

  exit:
    return;
}



procedure vmw_lastclose_loop_$bb5(in_$p1: ref, in_$i50: i64, in_$p51: ref, in_$i52: i64, in_$i53: i64, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$i57: i64, in_$i58: i64, in_$p59: ref, in_$i60: i64, in_$i61: i64, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$i65: i64, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$i72: i1, in_$i73: i32, in_$i74: i1, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$i78: i1, in_$i79: i32, in_$i80: i1, in_$i81: i1, in_$i82: i32, in_$i83: i64, in_$i84: i64, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i32, in_$i89: i1, in_$i90: i1, in_$i91: i32, in_$i92: i64, in_$i94: i64, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i64, in_$p100: ref, in_$i101: i32, in_$p102: ref, in_$i103: i64, in_$i104: i64, in_$p105: ref, in_vslice_dummy_var_122: i64) returns (out_$p51: ref, out_$i52: i64, out_$i53: i64, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$i57: i64, out_$i58: i64, out_$p59: ref, out_$i60: i64, out_$i61: i64, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$i65: i64, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$i72: i1, out_$i73: i32, out_$i74: i1, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$i78: i1, out_$i79: i32, out_$i80: i1, out_$i81: i1, out_$i82: i32, out_$i83: i64, out_$i84: i64, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i32, out_$i89: i1, out_$i90: i1, out_$i91: i32, out_$i92: i64, out_$i94: i64, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i64, out_$p100: ref, out_$i101: i32, out_$p102: ref, out_$i103: i64, out_$i104: i64, out_$p105: ref, out_vslice_dummy_var_122: i64);
  modifies $M.0, $M.1, $M.11, $M.12, $M.2, $M.6, $M.10, assertsPassed, $M.16, $M.3, $M.4, $CurrAddr, $M.13;



implementation vmw_master_set_loop_$bb38()
{

  entry:
    goto $bb38, exit;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb39_dummy;

  $bb39_dummy:
    call {:si_unique_call 1} vmw_master_set_loop_$bb38();
    return;

  exit:
    return;
}



procedure vmw_master_set_loop_$bb38();



implementation vmw_master_set_loop_$bb16()
{

  entry:
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb17_dummy:
    call {:si_unique_call 1} vmw_master_set_loop_$bb16();
    return;

  exit:
    return;
}



procedure vmw_master_set_loop_$bb16();



implementation vmw_kms_restore_vga_loop_$bb11(in_$p0: ref, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i48: i64, in_$i49: i64, in_$i50: i64, in_$i51: i64, in_$i52: i64, in_$p53: ref, in_$i54: i64, in_$i55: i64, in_$p56: ref, in_$i57: i32, in_$i58: i64, in_$i59: i64, in_$p60: ref, in_$i61: i32, in_$i62: i64, in_$i63: i64, in_$p64: ref, in_$i65: i32, in_$p66: ref, in_$i67: i32, in_$i68: i64, in_$i69: i64, in_$p70: ref, in_$i71: i32, in_$i72: i32) returns (out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i48: i64, out_$i49: i64, out_$i50: i64, out_$i51: i64, out_$i52: i64, out_$p53: ref, out_$i54: i64, out_$i55: i64, out_$p56: ref, out_$i57: i32, out_$i58: i64, out_$i59: i64, out_$p60: ref, out_$i61: i32, out_$i62: i64, out_$i63: i64, out_$p64: ref, out_$i65: i32, out_$p66: ref, out_$i67: i32, out_$i68: i64, out_$i69: i64, out_$p70: ref, out_$i71: i32, out_$i72: i32)
{

  entry:
    out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72 := in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p53, in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$i59, in_$p60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i69, in_$p70, in_$i71, in_$i72;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_7348;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i72;
    goto corral_source_split_7388_dummy;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i32(out_$i45, 1);
    call {:si_unique_call 3385} {:cexpr "i"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_7388;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3384} vmw_write(in_$p0, 35, $sub.i32(0, 1));
    goto corral_source_split_7387;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3383} vmw_write(in_$p0, 40, out_$i71);
    goto corral_source_split_7386;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.0, out_$p70);
    call {:si_unique_call 3382} {:cexpr "__cil_tmp51"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_7385;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    out_$p70 := $i2p.i64.ref(out_$i69);
    goto corral_source_split_7384;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i64(out_$i68, 4);
    call {:si_unique_call 3381} {:cexpr "__cil_tmp50"} boogie_si_record_i64(out_$i69);
    goto corral_source_split_7383;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    out_$i68 := $p2i.ref.i64(out_$p53);
    call {:si_unique_call 3380} {:cexpr "__cil_tmp49"} boogie_si_record_i64(out_$i68);
    goto corral_source_split_7382;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3379} vmw_write(in_$p0, 39, out_$i67);
    goto corral_source_split_7381;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i32($M.0, out_$p66);
    call {:si_unique_call 3378} {:cexpr "__cil_tmp48"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_7380;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p53);
    goto corral_source_split_7379;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3377} vmw_write(in_$p0, 38, out_$i65);
    goto corral_source_split_7378;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, out_$p64);
    call {:si_unique_call 3376} {:cexpr "__cil_tmp47"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_7377;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    out_$p64 := $i2p.i64.ref(out_$i63);
    goto corral_source_split_7376;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i64(out_$i62, 16);
    call {:si_unique_call 3375} {:cexpr "__cil_tmp46"} boogie_si_record_i64(out_$i63);
    goto corral_source_split_7375;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(out_$p53);
    call {:si_unique_call 3374} {:cexpr "__cil_tmp45"} boogie_si_record_i64(out_$i62);
    goto corral_source_split_7374;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3373} vmw_write(in_$p0, 37, out_$i61);
    goto corral_source_split_7373;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p60);
    call {:si_unique_call 3372} {:cexpr "__cil_tmp44"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_7372;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    out_$p60 := $i2p.i64.ref(out_$i59);
    goto corral_source_split_7371;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i64(out_$i58, 12);
    call {:si_unique_call 3371} {:cexpr "__cil_tmp43"} boogie_si_record_i64(out_$i59);
    goto corral_source_split_7370;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    out_$i58 := $p2i.ref.i64(out_$p53);
    call {:si_unique_call 3370} {:cexpr "__cil_tmp42"} boogie_si_record_i64(out_$i58);
    goto corral_source_split_7369;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3369} vmw_write(in_$p0, 36, out_$i57);
    goto corral_source_split_7368;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p56);
    call {:si_unique_call 3368} {:cexpr "__cil_tmp41"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_7367;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    out_$p56 := $i2p.i64.ref(out_$i55);
    goto corral_source_split_7366;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i64(out_$i54, 8);
    call {:si_unique_call 3367} {:cexpr "__cil_tmp40"} boogie_si_record_i64(out_$i55);
    goto corral_source_split_7365;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    call {:si_unique_call 3366} {:cexpr "__cil_tmp39"} boogie_si_record_i64(out_$i54);
    goto corral_source_split_7364;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3365} vmw_write(in_$p0, 35, out_$i45);
    goto corral_source_split_7363;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    out_$p53 := $i2p.i64.ref(out_$i52);
    goto corral_source_split_7362;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i64(out_$i51, out_$i50);
    call {:si_unique_call 3364} {:cexpr "__cil_tmp38"} boogie_si_record_i64(out_$i52);
    goto corral_source_split_7361;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 3363} {:cexpr "__cil_tmp37"} boogie_si_record_i64(out_$i51);
    goto corral_source_split_7360;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i64(2256, out_$i49);
    call {:si_unique_call 3362} {:cexpr "__cil_tmp36"} boogie_si_record_i64(out_$i50);
    goto corral_source_split_7359;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    out_$i49 := $mul.i64(out_$i48, 20);
    call {:si_unique_call 3361} {:cexpr "__cil_tmp35"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_7358;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i32.i64(out_$i45);
    goto corral_source_split_7357;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume out_$i47 == 1;
    goto corral_source_split_7353;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    out_$i47 := $ult.i32(out_$i45, out_$i46);
    goto corral_source_split_7351;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, in_$p44);
    call {:si_unique_call 3360} {:cexpr "__cil_tmp34"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_7350;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_7388_dummy:
    call {:si_unique_call 1} out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72 := vmw_kms_restore_vga_loop_$bb11(in_$p0, in_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72);
    return;

  exit:
    return;
}



procedure vmw_kms_restore_vga_loop_$bb11(in_$p0: ref, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i48: i64, in_$i49: i64, in_$i50: i64, in_$i51: i64, in_$i52: i64, in_$p53: ref, in_$i54: i64, in_$i55: i64, in_$p56: ref, in_$i57: i32, in_$i58: i64, in_$i59: i64, in_$p60: ref, in_$i61: i32, in_$i62: i64, in_$i63: i64, in_$p64: ref, in_$i65: i32, in_$p66: ref, in_$i67: i32, in_$i68: i64, in_$i69: i64, in_$p70: ref, in_$i71: i32, in_$i72: i32) returns (out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i48: i64, out_$i49: i64, out_$i50: i64, out_$i51: i64, out_$i52: i64, out_$p53: ref, out_$i54: i64, out_$i55: i64, out_$p56: ref, out_$i57: i32, out_$i58: i64, out_$i59: i64, out_$p60: ref, out_$i61: i32, out_$i62: i64, out_$i63: i64, out_$p64: ref, out_$i65: i32, out_$p66: ref, out_$i67: i32, out_$i68: i64, out_$i69: i64, out_$p70: ref, out_$i71: i32, out_$i72: i32);



implementation vmw_3d_resource_dec_loop_$bb16()
{

  entry:
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb17_dummy:
    call {:si_unique_call 1} vmw_3d_resource_dec_loop_$bb16();
    return;

  exit:
    return;
}



procedure vmw_3d_resource_dec_loop_$bb16();



implementation vmw_fb_on_loop_$bb18()
{

  entry:
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb19_dummy;

  $bb19_dummy:
    call {:si_unique_call 1} vmw_fb_on_loop_$bb18();
    return;

  exit:
    return;
}



procedure vmw_fb_on_loop_$bb18();



implementation {:SIextraRecBound 2} vmw_overlay_stop_all_loop_$bb5(in_$p0: ref, in_$p4: ref, in_$i7: i32, in_$i8: i1, in_$i9: i64, in_$i10: i64, in_$i11: i64, in_$i12: i64, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i1, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i32, in_$i35: i64, in_$i36: i64, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i32, in_$i44: i64, in_$i46: i32, in_vslice_dummy_var_147: i64) returns (out_$i7: i32, out_$i8: i1, out_$i9: i64, out_$i10: i64, out_$i11: i64, out_$i12: i64, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i1, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i32, out_$i35: i64, out_$i36: i64, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i32, out_$i44: i64, out_$i46: i32, out_vslice_dummy_var_147: i64)
{

  entry:
    out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i46, out_vslice_dummy_var_147 := in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$p14, in_$p15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i46, in_vslice_dummy_var_147;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7603;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    out_$i7 := out_$i46;
    goto corral_source_split_7626_dummy;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i7, 1);
    call {:si_unique_call 3502} {:cexpr "i"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_7626;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3517} out_vslice_dummy_var_147 := ldv__builtin_expect(out_$i44, 0);
    goto corral_source_split_7659;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i43);
    call {:si_unique_call 3516} {:cexpr "__cil_tmp27"} boogie_si_record_i64(out_$i44);
    goto corral_source_split_7658;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i1.i32(out_$i42);
    call {:si_unique_call 3515} {:cexpr "__cil_tmp26"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_7657;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    out_$i42 := $xor.i1(out_$i41, 1);
    goto corral_source_split_7656;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_7655;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i1.i32(out_$i39);
    call {:si_unique_call 3514} {:cexpr "__cil_tmp25"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_7654;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    out_$i39 := $xor.i1(out_$i38, 1);
    goto corral_source_split_7653;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i28, 0);
    goto corral_source_split_7652;

  $bb16:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3513} warn_slowpath_null(.str.98, 380);
    goto corral_source_split_7650;

  $bb15:
    assume out_$i37 == 1;
    goto corral_source_split_7649;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i64(out_$i36, 0);
    goto corral_source_split_7647;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3511} out_$i36 := ldv__builtin_expect(out_$i35, 0);
    call {:si_unique_call 3512} {:cexpr "tmp___7"} boogie_si_record_i64(out_$i36);
    goto corral_source_split_7646;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i34);
    call {:si_unique_call 3510} {:cexpr "__cil_tmp23"} boogie_si_record_i64(out_$i35);
    goto corral_source_split_7645;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i1.i32(out_$i33);
    call {:si_unique_call 3509} {:cexpr "__cil_tmp22"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_7644;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    out_$i33 := $xor.i1(out_$i32, 1);
    goto corral_source_split_7643;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_7642;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i1.i32(out_$i30);
    call {:si_unique_call 3508} {:cexpr "__cil_tmp21"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_7641;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    out_$i30 := $xor.i1(out_$i29, 1);
    goto corral_source_split_7640;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_7639;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i1.i32(out_$i27);
    call {:si_unique_call 3507} {:cexpr "__ret_warn_on"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_7638;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    out_$i27 := $xor.i1(out_$i26, 1);
    goto corral_source_split_7637;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_7636;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i1.i32(out_$i24);
    call {:si_unique_call 3506} {:cexpr "__cil_tmp20"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_7635;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    out_$i24 := $xor.i1(out_$i23, 1);
    goto corral_source_split_7634;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_7633;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i32(out_$i21);
    call {:si_unique_call 3505} {:cexpr "__cil_tmp19"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_7632;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i20, 0);
    goto corral_source_split_7631;

  SeqInstr_528:
    call {:si_unique_call 3504} {:cexpr "ret"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_7630;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3503} out_$i20 := vmw_overlay_stop(in_$p0, out_$i7, out_$i18, out_$i19);
    goto SeqInstr_527;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i8.i1(0);
    goto corral_source_split_7629;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i18 := $trunc.i8.i1(0);
    goto corral_source_split_7628;

  $bb11:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.ref(out_$p16, $0.ref);
    goto corral_source_split_7619;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_7618;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_7617;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    out_$p14 := $i2p.i64.ref(out_$i13);
    goto corral_source_split_7616;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i64(out_$i12, out_$i11);
    call {:si_unique_call 3500} {:cexpr "__cil_tmp14"} boogie_si_record_i64(out_$i13);
    goto corral_source_split_7615;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(in_$p4);
    call {:si_unique_call 3499} {:cexpr "__cil_tmp13"} boogie_si_record_i64(out_$i12);
    goto corral_source_split_7614;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i64(72, out_$i10);
    call {:si_unique_call 3498} {:cexpr "__cil_tmp12"} boogie_si_record_i64(out_$i11);
    goto corral_source_split_7613;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    out_$i10 := $mul.i64(out_$i9, 104);
    call {:si_unique_call 3497} {:cexpr "__cil_tmp11"} boogie_si_record_i64(out_$i10);
    goto corral_source_split_7612;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i7);
    goto corral_source_split_7611;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_7607;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i7, 1);
    goto corral_source_split_7605;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume !(out_$i17 == 1);
    goto corral_source_split_7624;

  corral_source_split_7626_dummy:
    call {:si_unique_call 1} out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i46, out_vslice_dummy_var_147 := vmw_overlay_stop_all_loop_$bb5(in_$p0, in_$p4, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i46, out_vslice_dummy_var_147);
    return;

  exit:
    return;
}



procedure vmw_overlay_stop_all_loop_$bb5(in_$p0: ref, in_$p4: ref, in_$i7: i32, in_$i8: i1, in_$i9: i64, in_$i10: i64, in_$i11: i64, in_$i12: i64, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i1, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i32, in_$i35: i64, in_$i36: i64, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i32, in_$i44: i64, in_$i46: i32, in_vslice_dummy_var_147: i64) returns (out_$i7: i32, out_$i8: i1, out_$i9: i64, out_$i10: i64, out_$i11: i64, out_$i12: i64, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i1, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i32, out_$i35: i64, out_$i36: i64, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i32, out_$i44: i64, out_$i46: i32, out_vslice_dummy_var_147: i64);
  modifies $M.0, $M.11, $M.12, $M.2, $M.6, $M.1, $CurrAddr, assertsPassed, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_release_device_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb8_dummy;

  $bb8_dummy:
    call {:si_unique_call 1} vmw_release_device_loop_$bb7();
    return;

  exit:
    return;
}



procedure vmw_release_device_loop_$bb7();



implementation vmw_fence_fifo_down_loop_$bb25()
{

  entry:
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb26_dummy;

  $bb26_dummy:
    call {:si_unique_call 1} vmw_fence_fifo_down_loop_$bb25();
    return;

  exit:
    return;
}



procedure vmw_fence_fifo_down_loop_$bb25();



implementation vmw_fence_fifo_down_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$i10: i64, in_$i11: i64, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i15: i64, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i1, in_$i46: i32, in_$i47: i64, in_$i48: i64, in_$i49: i1, in_$i50: i64, in_$i51: i64, in_$p52: ref, in_$i53: i64, in_$i54: i64, in_$i55: i64, in_$i56: i64, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$p60: ref, in_$i61: i64, in_$i62: i64, in_$p63: ref, in_$i64: i64, in_$i65: i64, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$p69: ref, in_$i70: i64, in_$i71: i64, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i76: i64, in_$i77: i64, in_$i78: i1, in_$p79: ref, in_vslice_dummy_var_151: i32) returns (out_$i10: i64, out_$i11: i64, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i15: i64, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i1, out_$i46: i32, out_$i47: i64, out_$i48: i64, out_$i49: i1, out_$i50: i64, out_$i51: i64, out_$p52: ref, out_$i53: i64, out_$i54: i64, out_$i55: i64, out_$i56: i64, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$p60: ref, out_$i61: i64, out_$i62: i64, out_$p63: ref, out_$i64: i64, out_$i65: i64, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$p69: ref, out_$i70: i64, out_$i71: i64, out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i76: i64, out_$i77: i64, out_$i78: i1, out_$p79: ref, out_vslice_dummy_var_151: i32)
{

  entry:
    out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_vslice_dummy_var_151 := in_$i10, in_$i11, in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$p17, in_$p18, in_$i19, in_$i20, in_$p21, in_$i22, in_$p23, in_$i24, in_$i25, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$p31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$p60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$p66, in_$i67, in_$i68, in_$p69, in_$i70, in_$i71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$p79, in_vslice_dummy_var_151;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    goto corral_source_split_8081_dummy;

  SeqInstr_546:
    goto corral_source_split_8081;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3742} out_vslice_dummy_var_151 := kref_put(out_$p79, vmw_fence_obj_destroy_locked);
    goto SeqInstr_545;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p79 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_8080;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb22:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i64(out_$i77, 0);
    goto corral_source_split_8074;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3739} out_$i77 := ldv__builtin_expect(out_$i76, 0);
    call {:si_unique_call 3740} {:cexpr "tmp___11"} boogie_si_record_i64(out_$i77);
    goto corral_source_split_8073;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    out_$i76 := $sext.i32.i64(out_$i75);
    call {:si_unique_call 3738} {:cexpr "__cil_tmp70"} boogie_si_record_i64(out_$i76);
    goto corral_source_split_8072;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_8071;

  $bb19:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    out_$i75 := 1;
    goto $bb20;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    out_$i75 := 0;
    goto $bb20;

  $bb18:
    assume out_$i74 == 1;
    goto corral_source_split_8069;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i32(out_$i73, 0);
    goto corral_source_split_8067;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3736} out_$i73 := list_empty(out_$p72);
    call {:si_unique_call 3737} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_8066;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    out_$p72 := $i2p.i64.ref(out_$i71);
    goto corral_source_split_8065;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i64(out_$i70, 16);
    call {:si_unique_call 3735} {:cexpr "__cil_tmp67"} boogie_si_record_i64(out_$i71);
    goto corral_source_split_8064;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i70 := $p2i.ref.i64(out_$p27);
    call {:si_unique_call 3734} {:cexpr "__cil_tmp66"} boogie_si_record_i64(out_$i70);
    goto corral_source_split_8063;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3733} spin_lock_irq(out_$p69);
    goto corral_source_split_8061;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    out_$p69 := $i2p.i64.ref(out_$i68);
    goto corral_source_split_8060;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i64(out_$i67, 16);
    call {:si_unique_call 3732} {:cexpr "__cil_tmp64"} boogie_si_record_i64(out_$i68);
    goto corral_source_split_8059;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i67 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 3731} {:cexpr "__cil_tmp63"} boogie_si_record_i64(out_$i67);
    goto corral_source_split_8058;

  $bb14:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3730} __wake_up(out_$p66, 3, 0, $0.ref);
    goto corral_source_split_8056;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    out_$p66 := $i2p.i64.ref(out_$i65);
    goto corral_source_split_8055;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i64(out_$i64, 64);
    call {:si_unique_call 3729} {:cexpr "__cil_tmp60"} boogie_si_record_i64(out_$i65);
    goto corral_source_split_8054;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    out_$i64 := $p2i.ref.i64(out_$p27);
    call {:si_unique_call 3728} {:cexpr "__cil_tmp59"} boogie_si_record_i64(out_$i64);
    goto corral_source_split_8053;

  SeqInstr_543:
    goto corral_source_split_8052;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3727} vmw_fences_perform_actions(in_$p0, in_$p1);
    goto SeqInstr_542;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3726} list_splice_init(out_$p63, in_$p1);
    goto corral_source_split_8051;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    out_$p63 := $i2p.i64.ref(out_$i62);
    goto corral_source_split_8050;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i64(out_$i61, 40);
    call {:si_unique_call 3725} {:cexpr "__cil_tmp57"} boogie_si_record_i64(out_$i62);
    goto corral_source_split_8049;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    out_$i61 := $p2i.ref.i64(out_$p27);
    call {:si_unique_call 3724} {:cexpr "__cil_tmp56"} boogie_si_record_i64(out_$i61);
    goto corral_source_split_8048;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3723} INIT_LIST_HEAD(in_$p1);
    goto corral_source_split_8047;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p60, out_$i59);
    goto corral_source_split_8046;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    out_$p60 := $i2p.i64.ref(out_$i54);
    goto corral_source_split_8045;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    out_$i59 := $or.i32(out_$i58, 1);
    goto corral_source_split_8044;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, out_$p57);
    call {:si_unique_call 3722} {:cexpr "__cil_tmp55"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_8043;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    out_$p57 := $i2p.i64.ref(out_$i56);
    goto corral_source_split_8042;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i64(out_$i55, 32);
    call {:si_unique_call 3721} {:cexpr "__cil_tmp54"} boogie_si_record_i64(out_$i56);
    goto corral_source_split_8041;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p27);
    call {:si_unique_call 3720} {:cexpr "__cil_tmp53"} boogie_si_record_i64(out_$i55);
    goto corral_source_split_8040;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i64(out_$i53, 32);
    call {:si_unique_call 3719} {:cexpr "__cil_tmp52"} boogie_si_record_i64(out_$i54);
    goto corral_source_split_8039;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p27);
    call {:si_unique_call 3718} {:cexpr "__cil_tmp51"} boogie_si_record_i64(out_$i53);
    goto corral_source_split_8038;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3717} list_del_init(out_$p52);
    goto corral_source_split_8037;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    out_$p52 := $i2p.i64.ref(out_$i51);
    goto corral_source_split_8036;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i64(out_$i50, 16);
    call {:si_unique_call 3716} {:cexpr "__cil_tmp49"} boogie_si_record_i64(out_$i51);
    goto corral_source_split_8035;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p27);
    call {:si_unique_call 3715} {:cexpr "__cil_tmp48"} boogie_si_record_i64(out_$i50);
    goto corral_source_split_8034;

  $bb13:
    assume out_$i49 == 1;
    goto corral_source_split_8033;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i64(out_$i48, 0);
    goto corral_source_split_8031;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3713} out_$i48 := ldv__builtin_expect(out_$i47, 0);
    call {:si_unique_call 3714} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i48);
    goto corral_source_split_8030;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i46);
    call {:si_unique_call 3712} {:cexpr "__cil_tmp47"} boogie_si_record_i64(out_$i47);
    goto corral_source_split_8029;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i1.i32(out_$i45);
    call {:si_unique_call 3711} {:cexpr "__cil_tmp46"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_8028;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    out_$i45 := $xor.i1(out_$i44, 1);
    goto corral_source_split_8027;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_8026;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i1.i32(out_$i42);
    call {:si_unique_call 3710} {:cexpr "__cil_tmp45"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_8025;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    out_$i42 := $xor.i1(out_$i41, 1);
    goto corral_source_split_8024;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_8023;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i1.i32(out_$i39);
    call {:si_unique_call 3709} {:cexpr "__cil_tmp44"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_8022;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_8021;

  SeqInstr_540:
    call {:si_unique_call 3708} {:cexpr "ret"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_8020;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3707} out_$i38 := vmw_fence_obj_wait(out_$p27, out_$i35, out_$i36, out_$i37, 1250);
    goto SeqInstr_539;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i8.i1(0);
    goto corral_source_split_8019;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i8.i1(0);
    goto corral_source_split_8018;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, out_$p34);
    call {:si_unique_call 3706} {:cexpr "__cil_tmp41"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_8017;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    out_$p34 := $i2p.i64.ref(out_$i33);
    goto corral_source_split_8016;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i64(out_$i32, 36);
    call {:si_unique_call 3705} {:cexpr "__cil_tmp40"} boogie_si_record_i64(out_$i33);
    goto corral_source_split_8015;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(out_$p27);
    call {:si_unique_call 3704} {:cexpr "__cil_tmp39"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_8014;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3703} spin_unlock_irq(out_$p31);
    goto corral_source_split_8013;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    out_$p31 := $i2p.i64.ref(out_$i30);
    goto corral_source_split_8012;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i64(out_$i29, 16);
    call {:si_unique_call 3702} {:cexpr "__cil_tmp37"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_8011;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 3701} {:cexpr "__cil_tmp36"} boogie_si_record_i64(out_$i29);
    goto corral_source_split_8010;

  SeqInstr_537:
    goto corral_source_split_8009;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3700} kref_get(out_$p28);
    goto SeqInstr_536;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_8008;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_8007;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p23, $mul.ref(out_$i25, 1));
    goto corral_source_split_8006;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    out_$i25 := $sub.i64(0, out_$i24);
    goto corral_source_split_8005;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i32.i64(out_$i22);
    goto corral_source_split_8004;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_8003;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i32(out_$p21);
    call {:si_unique_call 3699} {:cexpr "__cil_tmp32"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_8002;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    out_$p21 := $i2p.i64.ref(out_$i20);
    goto corral_source_split_8001;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i64(out_$i19, 16);
    call {:si_unique_call 3698} {:cexpr "__cil_tmp30"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_8000;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 3697} {:cexpr "__cil_tmp29"} boogie_si_record_i64(out_$i19);
    goto corral_source_split_7999;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_7998;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    out_$p17 := $i2p.i64.ref(out_$i16);
    goto corral_source_split_7997;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i64(out_$i15, 48);
    call {:si_unique_call 3696} {:cexpr "__cil_tmp26"} boogie_si_record_i64(out_$i16);
    goto corral_source_split_7996;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 3695} {:cexpr "__cil_tmp25"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_7995;

  $bb10:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_7986;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3690} out_$i13 := list_empty(out_$p12);
    call {:si_unique_call 3691} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_7985;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    out_$p12 := $i2p.i64.ref(out_$i11);
    goto corral_source_split_7984;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i64(out_$i10, 40);
    call {:si_unique_call 3689} {:cexpr "__cil_tmp21"} boogie_si_record_i64(out_$i11);
    goto corral_source_split_7983;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 3688} {:cexpr "__cil_tmp20"} boogie_si_record_i64(out_$i10);
    goto corral_source_split_7982;

  corral_source_split_8081_dummy:
    call {:si_unique_call 1} out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_vslice_dummy_var_151 := vmw_fence_fifo_down_loop_$bb7(in_$p0, in_$p1, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_vslice_dummy_var_151);
    return;

  exit:
    return;
}



procedure vmw_fence_fifo_down_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$i10: i64, in_$i11: i64, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i15: i64, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i1, in_$i46: i32, in_$i47: i64, in_$i48: i64, in_$i49: i1, in_$i50: i64, in_$i51: i64, in_$p52: ref, in_$i53: i64, in_$i54: i64, in_$i55: i64, in_$i56: i64, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$p60: ref, in_$i61: i64, in_$i62: i64, in_$p63: ref, in_$i64: i64, in_$i65: i64, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$p69: ref, in_$i70: i64, in_$i71: i64, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i76: i64, in_$i77: i64, in_$i78: i1, in_$p79: ref, in_vslice_dummy_var_151: i32) returns (out_$i10: i64, out_$i11: i64, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i15: i64, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i1, out_$i46: i32, out_$i47: i64, out_$i48: i64, out_$i49: i1, out_$i50: i64, out_$i51: i64, out_$p52: ref, out_$i53: i64, out_$i54: i64, out_$i55: i64, out_$i56: i64, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$p60: ref, out_$i61: i64, out_$i62: i64, out_$p63: ref, out_$i64: i64, out_$i65: i64, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$p69: ref, out_$i70: i64, out_$i71: i64, out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i76: i64, out_$i77: i64, out_$i78: i1, out_$p79: ref, out_vslice_dummy_var_151: i32);
  modifies $M.0, $M.6, $M.1, assertsPassed, $M.2, $M.11, $M.12, $CurrAddr, $M.10, $M.3, $M.4, $M.16, $M.13;



implementation vmw_fifo_release_loop_$bb1(in_$p0: ref, in_$i9: i32, in_$i10: i1) returns (out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$i9, out_$i10 := in_$i9, in_$i10;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    goto corral_source_split_8100_dummy;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3750} vmw_write(in_$p0, 21, 1);
    goto corral_source_split_8100;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb3:
    assume out_$i10 == 1;
    goto corral_source_split_8096;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_8094;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3748} out_$i9 := vmw_read(in_$p0, 22);
    call {:si_unique_call 3749} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_8093;

  corral_source_split_8100_dummy:
    call {:si_unique_call 1} out_$i9, out_$i10 := vmw_fifo_release_loop_$bb1(in_$p0, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure vmw_fifo_release_loop_$bb1(in_$p0: ref, in_$i9: i32, in_$i10: i1) returns (out_$i9: i32, out_$i10: i1);



implementation vmw_marker_queue_takedown_loop_$bb1(in_$i23: i64, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$p34: ref, in_$i35: i64, in_$i36: i64, in_$p37: ref) returns (out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$p34: ref, out_$i35: i64, out_$i36: i64, out_$p37: ref)
{

  entry:
    out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37 := in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p29, in_$p30, in_$p31, in_$p32, in_$i33, in_$p34, in_$i35, in_$i36, in_$p37;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8220;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    out_$p24, out_$p25 := out_$p25, out_$p37;
    goto corral_source_split_8240_dummy;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    goto corral_source_split_8240;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(out_$p34, $mul.ref(out_$i36, 1));
    goto corral_source_split_8239;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    out_$i36 := $sub.i64(0, out_$i35);
    goto corral_source_split_8238;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i32.i64(out_$i33);
    goto corral_source_split_8237;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_8236;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i32(out_$p32);
    call {:si_unique_call 3809} {:cexpr "__cil_tmp30"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_8235;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_8234;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_8233;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_8232;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3808} kfree(out_$p29);
    goto corral_source_split_8231;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_8230;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb3:
    assume out_$i28 == 1;
    goto corral_source_split_8226;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, in_$i23);
    goto corral_source_split_8224;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    call {:si_unique_call 3807} {:cexpr "__cil_tmp25"} boogie_si_record_i64(out_$i27);
    goto corral_source_split_8223;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_8222;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_8240_dummy:
    call {:si_unique_call 1} out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37 := vmw_marker_queue_takedown_loop_$bb1(in_$i23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37);
    return;

  exit:
    return;
}



procedure vmw_marker_queue_takedown_loop_$bb1(in_$i23: i64, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$p34: ref, in_$i35: i64, in_$i36: i64, in_$p37: ref) returns (out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$p34: ref, out_$i35: i64, out_$i36: i64, out_$p37: ref);



implementation vmw_kms_save_vga_loop_$bb14(in_$p0: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i60: i64, in_$i61: i64, in_$i62: i64, in_$i63: i64, in_$i64: i64, in_$p65: ref, in_$i66: i64, in_$i67: i64, in_$i68: i32, in_$p69: ref, in_$i70: i64, in_$i71: i64, in_$i72: i32, in_$p73: ref, in_$i74: i64, in_$i75: i64, in_$i76: i32, in_$p77: ref, in_$i78: i32, in_$p79: ref, in_$i80: i64, in_$i81: i64, in_$i82: i32, in_$p83: ref, in_$i84: i1, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$i93: i64, in_$i94: i64, in_$p95: ref, in_$i96: i32, in_$i97: i1, in_$i98: i64, in_$i99: i64, in_$p100: ref, in_$i101: i32, in_$i102: i64, in_$i103: i64, in_$p104: ref, in_$i105: i32, in_$i106: i32, in_$p107: ref, in_$i108: i64, in_$i109: i64, in_$i110: i64, in_$i111: i64, in_$p112: ref, in_$i113: i32, in_$i114: i64, in_$i115: i64, in_$p116: ref, in_$i117: i32, in_$i118: i32, in_$p119: ref, in_$i120: i32) returns (out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i60: i64, out_$i61: i64, out_$i62: i64, out_$i63: i64, out_$i64: i64, out_$p65: ref, out_$i66: i64, out_$i67: i64, out_$i68: i32, out_$p69: ref, out_$i70: i64, out_$i71: i64, out_$i72: i32, out_$p73: ref, out_$i74: i64, out_$i75: i64, out_$i76: i32, out_$p77: ref, out_$i78: i32, out_$p79: ref, out_$i80: i64, out_$i81: i64, out_$i82: i32, out_$p83: ref, out_$i84: i1, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$i93: i64, out_$i94: i64, out_$p95: ref, out_$i96: i32, out_$i97: i1, out_$i98: i64, out_$i99: i64, out_$p100: ref, out_$i101: i32, out_$i102: i64, out_$i103: i64, out_$p104: ref, out_$i105: i32, out_$i106: i32, out_$p107: ref, out_$i108: i64, out_$i109: i64, out_$i110: i64, out_$i111: i64, out_$p112: ref, out_$i113: i32, out_$i114: i64, out_$i115: i64, out_$p116: ref, out_$i117: i32, out_$i118: i32, out_$p119: ref, out_$i120: i32)
{

  entry:
    out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$p119, out_$i120 := in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$i68, in_$p69, in_$i70, in_$i71, in_$i72, in_$p73, in_$i74, in_$i75, in_$i76, in_$p77, in_$i78, in_$p79, in_$i80, in_$i81, in_$i82, in_$p83, in_$i84, in_$i85, in_$i86, in_$p87, in_$i88, in_$i89, in_$p90, in_$i91, in_$i92, in_$i93, in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$p100, in_$i101, in_$i102, in_$i103, in_$p104, in_$i105, in_$i106, in_$p107, in_$i108, in_$i109, in_$i110, in_$i111, in_$p112, in_$i113, in_$i114, in_$i115, in_$p116, in_$i117, in_$i118, in_$p119, in_$i120;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_8399;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i120;
    goto corral_source_split_8486_dummy;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i120 := $add.i32(out_$i57, 1);
    call {:si_unique_call 3929} {:cexpr "i"} boogie_si_record_i32(out_$i120);
    goto corral_source_split_8486;

  $bb21:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p119, out_$i118);
    goto corral_source_split_8484;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    out_$p119 := $i2p.i64.ref(out_$i109);
    goto corral_source_split_8483;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    out_$i118 := $sub.i32(out_$i117, out_$i113);
    goto corral_source_split_8482;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i32($M.0, out_$p116);
    call {:si_unique_call 3928} {:cexpr "__cil_tmp69"} boogie_si_record_i32(out_$i117);
    goto corral_source_split_8481;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    out_$p116 := $i2p.i64.ref(out_$i115);
    goto corral_source_split_8480;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    out_$i115 := $add.i64(out_$i114, 2580);
    call {:si_unique_call 3927} {:cexpr "__cil_tmp68"} boogie_si_record_i64(out_$i115);
    goto corral_source_split_8479;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    out_$i114 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 3926} {:cexpr "__cil_tmp67"} boogie_si_record_i64(out_$i114);
    goto corral_source_split_8478;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i32($M.0, out_$p112);
    call {:si_unique_call 3925} {:cexpr "__cil_tmp66"} boogie_si_record_i32(out_$i113);
    goto corral_source_split_8477;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    out_$p112 := $i2p.i64.ref(out_$i111);
    goto corral_source_split_8476;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    out_$i111 := $add.i64(out_$i110, 16);
    call {:si_unique_call 3924} {:cexpr "__cil_tmp65"} boogie_si_record_i64(out_$i111);
    goto corral_source_split_8475;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    out_$i110 := $p2i.ref.i64(out_$p65);
    call {:si_unique_call 3923} {:cexpr "__cil_tmp64"} boogie_si_record_i64(out_$i110);
    goto corral_source_split_8474;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    out_$i109 := $add.i64(out_$i108, 4);
    call {:si_unique_call 3922} {:cexpr "__cil_tmp63"} boogie_si_record_i64(out_$i109);
    goto corral_source_split_8473;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    out_$i108 := $p2i.ref.i64(out_$p65);
    call {:si_unique_call 3921} {:cexpr "__cil_tmp62"} boogie_si_record_i64(out_$i108);
    goto corral_source_split_8472;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p107, out_$i106);
    goto corral_source_split_8471;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    out_$p107 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_8470;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    out_$i106 := $sub.i32(out_$i105, out_$i101);
    goto corral_source_split_8469;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i32($M.0, out_$p104);
    call {:si_unique_call 3920} {:cexpr "__cil_tmp61"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_8468;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    out_$p104 := $i2p.i64.ref(out_$i103);
    goto corral_source_split_8467;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    out_$i103 := $add.i64(out_$i102, 2576);
    call {:si_unique_call 3919} {:cexpr "__cil_tmp60"} boogie_si_record_i64(out_$i103);
    goto corral_source_split_8466;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    out_$i102 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 3918} {:cexpr "__cil_tmp59"} boogie_si_record_i64(out_$i102);
    goto corral_source_split_8465;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i32($M.0, out_$p100);
    call {:si_unique_call 3917} {:cexpr "__cil_tmp58"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_8464;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    out_$p100 := $i2p.i64.ref(out_$i99);
    goto corral_source_split_8463;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    out_$i99 := $add.i64(out_$i98, 12);
    call {:si_unique_call 3916} {:cexpr "__cil_tmp57"} boogie_si_record_i64(out_$i99);
    goto corral_source_split_8462;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    out_$i98 := $p2i.ref.i64(out_$p65);
    call {:si_unique_call 3915} {:cexpr "__cil_tmp56"} boogie_si_record_i64(out_$i98);
    goto corral_source_split_8461;

  $bb26:
    assume out_$i97 == 1;
    goto corral_source_split_8460;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i96, 0);
    goto corral_source_split_8458;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i32($M.0, out_$p95);
    call {:si_unique_call 3914} {:cexpr "__cil_tmp55"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_8457;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    out_$p95 := $i2p.i64.ref(out_$i94);
    goto corral_source_split_8456;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i64(out_$i93, 4);
    call {:si_unique_call 3913} {:cexpr "__cil_tmp54"} boogie_si_record_i64(out_$i94);
    goto corral_source_split_8455;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    out_$i93 := $p2i.ref.i64(out_$p65);
    call {:si_unique_call 3912} {:cexpr "__cil_tmp53"} boogie_si_record_i64(out_$i93);
    goto corral_source_split_8454;

  $bb24:
    assume out_$i92 == 1;
    goto corral_source_split_8453;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 0);
    goto corral_source_split_8451;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i32($M.0, out_$p90);
    call {:si_unique_call 3911} {:cexpr "__cil_tmp52"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_8450;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    out_$p90 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_8449;

  $bb22:
    assume out_$i89 == 1;
    goto corral_source_split_8448;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i88, 1);
    goto corral_source_split_8446;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.0, out_$p87);
    call {:si_unique_call 3910} {:cexpr "__cil_tmp51"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_8445;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    out_$p87 := $i2p.i64.ref(out_$i86);
    goto corral_source_split_8444;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i64(out_$i85, 2596);
    call {:si_unique_call 3909} {:cexpr "__cil_tmp50"} boogie_si_record_i64(out_$i86);
    goto corral_source_split_8443;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    out_$i85 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 3908} {:cexpr "__cil_tmp49"} boogie_si_record_i64(out_$i85);
    goto corral_source_split_8442;

  $bb20:
    assume out_$i84 == 1;
    goto corral_source_split_8441;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i57, 0);
    goto corral_source_split_8439;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3907} vmw_write(in_$p0, 35, $sub.i32(0, 1));
    goto corral_source_split_8438;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p83, out_$i82);
    goto corral_source_split_8437;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    out_$p83 := $i2p.i64.ref(out_$i81);
    goto corral_source_split_8436;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3906} out_$i82 := vmw_read(in_$p0, 40);
    goto corral_source_split_8435;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i64(out_$i80, 4);
    call {:si_unique_call 3905} {:cexpr "__cil_tmp48"} boogie_si_record_i64(out_$i81);
    goto corral_source_split_8434;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    out_$i80 := $p2i.ref.i64(out_$p65);
    call {:si_unique_call 3904} {:cexpr "__cil_tmp47"} boogie_si_record_i64(out_$i80);
    goto corral_source_split_8433;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p79, out_$i78);
    goto corral_source_split_8432;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    out_$p79 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_8431;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3903} out_$i78 := vmw_read(in_$p0, 39);
    goto corral_source_split_8430;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p77, out_$i76);
    goto corral_source_split_8429;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    out_$p77 := $i2p.i64.ref(out_$i75);
    goto corral_source_split_8428;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3902} out_$i76 := vmw_read(in_$p0, 38);
    goto corral_source_split_8427;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i64(out_$i74, 16);
    call {:si_unique_call 3901} {:cexpr "__cil_tmp46"} boogie_si_record_i64(out_$i75);
    goto corral_source_split_8426;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    out_$i74 := $p2i.ref.i64(out_$p65);
    call {:si_unique_call 3900} {:cexpr "__cil_tmp45"} boogie_si_record_i64(out_$i74);
    goto corral_source_split_8425;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p73, out_$i72);
    goto corral_source_split_8424;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    out_$p73 := $i2p.i64.ref(out_$i71);
    goto corral_source_split_8423;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3899} out_$i72 := vmw_read(in_$p0, 37);
    goto corral_source_split_8422;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i64(out_$i70, 12);
    call {:si_unique_call 3898} {:cexpr "__cil_tmp44"} boogie_si_record_i64(out_$i71);
    goto corral_source_split_8421;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    out_$i70 := $p2i.ref.i64(out_$p65);
    call {:si_unique_call 3897} {:cexpr "__cil_tmp43"} boogie_si_record_i64(out_$i70);
    goto corral_source_split_8420;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p69, out_$i68);
    goto corral_source_split_8419;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    out_$p69 := $i2p.i64.ref(out_$i67);
    goto corral_source_split_8418;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3896} out_$i68 := vmw_read(in_$p0, 36);
    goto corral_source_split_8417;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i64(out_$i66, 8);
    call {:si_unique_call 3895} {:cexpr "__cil_tmp42"} boogie_si_record_i64(out_$i67);
    goto corral_source_split_8416;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    out_$i66 := $p2i.ref.i64(out_$p65);
    call {:si_unique_call 3894} {:cexpr "__cil_tmp41"} boogie_si_record_i64(out_$i66);
    goto corral_source_split_8415;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3893} vmw_write(in_$p0, 35, out_$i57);
    goto corral_source_split_8414;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    out_$p65 := $i2p.i64.ref(out_$i64);
    goto corral_source_split_8413;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i64(out_$i63, out_$i62);
    call {:si_unique_call 3892} {:cexpr "__cil_tmp40"} boogie_si_record_i64(out_$i64);
    goto corral_source_split_8412;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 3891} {:cexpr "__cil_tmp39"} boogie_si_record_i64(out_$i63);
    goto corral_source_split_8411;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i64(2256, out_$i61);
    call {:si_unique_call 3890} {:cexpr "__cil_tmp38"} boogie_si_record_i64(out_$i62);
    goto corral_source_split_8410;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    out_$i61 := $mul.i64(out_$i60, 20);
    call {:si_unique_call 3889} {:cexpr "__cil_tmp37"} boogie_si_record_i64(out_$i61);
    goto corral_source_split_8409;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i32.i64(out_$i57);
    goto corral_source_split_8408;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i59 == 1;
    goto corral_source_split_8404;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    out_$i59 := $ult.i32(out_$i57, out_$i58);
    goto corral_source_split_8402;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, in_$p56);
    call {:si_unique_call 3888} {:cexpr "__cil_tmp36"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_8401;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_8486_dummy:
    call {:si_unique_call 1} out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$p119, out_$i120 := vmw_kms_save_vga_loop_$bb14(in_$p0, in_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$p119, out_$i120);
    return;

  exit:
    return;
}



procedure vmw_kms_save_vga_loop_$bb14(in_$p0: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i60: i64, in_$i61: i64, in_$i62: i64, in_$i63: i64, in_$i64: i64, in_$p65: ref, in_$i66: i64, in_$i67: i64, in_$i68: i32, in_$p69: ref, in_$i70: i64, in_$i71: i64, in_$i72: i32, in_$p73: ref, in_$i74: i64, in_$i75: i64, in_$i76: i32, in_$p77: ref, in_$i78: i32, in_$p79: ref, in_$i80: i64, in_$i81: i64, in_$i82: i32, in_$p83: ref, in_$i84: i1, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$i93: i64, in_$i94: i64, in_$p95: ref, in_$i96: i32, in_$i97: i1, in_$i98: i64, in_$i99: i64, in_$p100: ref, in_$i101: i32, in_$i102: i64, in_$i103: i64, in_$p104: ref, in_$i105: i32, in_$i106: i32, in_$p107: ref, in_$i108: i64, in_$i109: i64, in_$i110: i64, in_$i111: i64, in_$p112: ref, in_$i113: i32, in_$i114: i64, in_$i115: i64, in_$p116: ref, in_$i117: i32, in_$i118: i32, in_$p119: ref, in_$i120: i32) returns (out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i60: i64, out_$i61: i64, out_$i62: i64, out_$i63: i64, out_$i64: i64, out_$p65: ref, out_$i66: i64, out_$i67: i64, out_$i68: i32, out_$p69: ref, out_$i70: i64, out_$i71: i64, out_$i72: i32, out_$p73: ref, out_$i74: i64, out_$i75: i64, out_$i76: i32, out_$p77: ref, out_$i78: i32, out_$p79: ref, out_$i80: i64, out_$i81: i64, out_$i82: i32, out_$p83: ref, out_$i84: i1, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$i93: i64, out_$i94: i64, out_$p95: ref, out_$i96: i32, out_$i97: i1, out_$i98: i64, out_$i99: i64, out_$p100: ref, out_$i101: i32, out_$i102: i64, out_$i103: i64, out_$p104: ref, out_$i105: i32, out_$i106: i32, out_$p107: ref, out_$i108: i64, out_$i109: i64, out_$i110: i64, out_$i111: i64, out_$p112: ref, out_$i113: i32, out_$i114: i64, out_$i115: i64, out_$p116: ref, out_$i117: i32, out_$i118: i32, out_$p119: ref, out_$i120: i32);
  modifies $M.0;



implementation {:SIextraRecBound 2} vmw_overlay_close_loop_$bb5(in_$p0: ref, in_$p4: ref, in_$i7: i8, in_$i8: i32, in_$i9: i1, in_$i10: i8, in_$i11: i64, in_$i12: i64, in_$i13: i64, in_$i14: i64, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i22: i8, in_$i23: i32, in_vslice_dummy_var_164: i32) returns (out_$i7: i8, out_$i8: i32, out_$i9: i1, out_$i10: i8, out_$i11: i64, out_$i12: i64, out_$i13: i64, out_$i14: i64, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i22: i8, out_$i23: i32, out_vslice_dummy_var_164: i32)
{

  entry:
    out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i22, out_$i23, out_vslice_dummy_var_164 := in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$p16, in_$p17, in_$i18, in_$i19, in_$i20, in_$i22, in_$i23, in_vslice_dummy_var_164;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8943;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    out_$i7, out_$i8 := out_$i22, out_$i23;
    goto corral_source_split_8982_dummy;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i8, 1);
    call {:si_unique_call 4183} {:cexpr "i"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_8982;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8981;

  $bb12:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := out_$i7;
    goto $bb13;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    out_$i22 := 1;
    goto $bb13;

  SeqInstr_594:
    goto corral_source_split_8979;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4182} out_vslice_dummy_var_164 := vmw_overlay_stop(in_$p0, out_$i8, out_$i19, out_$i20);
    goto SeqInstr_593;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i8.i1(0);
    goto corral_source_split_8978;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i8.i1(0);
    goto corral_source_split_8977;

  $bb11:
    assume out_$i18 == 1;
    goto corral_source_split_8976;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.ref(out_$p17, $0.ref);
    goto corral_source_split_8958;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_8957;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    out_$p16 := $i2p.i64.ref(out_$i15);
    goto corral_source_split_8956;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i64(out_$i14, out_$i13);
    call {:si_unique_call 4174} {:cexpr "__cil_tmp12"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_8955;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(in_$p4);
    call {:si_unique_call 4173} {:cexpr "__cil_tmp11"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_8954;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i64(72, out_$i12);
    call {:si_unique_call 4172} {:cexpr "__cil_tmp10"} boogie_si_record_i64(out_$i13);
    goto corral_source_split_8953;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    out_$i12 := $mul.i64(out_$i11, 104);
    call {:si_unique_call 4171} {:cexpr "__cil_tmp9"} boogie_si_record_i64(out_$i12);
    goto corral_source_split_8952;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i8);
    goto corral_source_split_8951;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume out_$i9 == 1;
    goto corral_source_split_8947;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    out_$i10 := out_$i7;
    assume true;
    goto $bb7;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i8, 1);
    goto corral_source_split_8945;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_8982_dummy:
    call {:si_unique_call 1} out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i22, out_$i23, out_vslice_dummy_var_164 := vmw_overlay_close_loop_$bb5(in_$p0, in_$p4, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i22, out_$i23, out_vslice_dummy_var_164);
    return;

  exit:
    return;
}



procedure vmw_overlay_close_loop_$bb5(in_$p0: ref, in_$p4: ref, in_$i7: i8, in_$i8: i32, in_$i9: i1, in_$i10: i8, in_$i11: i64, in_$i12: i64, in_$i13: i64, in_$i14: i64, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i22: i8, in_$i23: i32, in_vslice_dummy_var_164: i32) returns (out_$i7: i8, out_$i8: i32, out_$i9: i1, out_$i10: i8, out_$i11: i64, out_$i12: i64, out_$i13: i64, out_$i14: i64, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i22: i8, out_$i23: i32, out_vslice_dummy_var_164: i32);
  modifies $M.0, $M.11, $M.12, $M.2, $M.6, $M.1, $CurrAddr, assertsPassed, $M.3, $M.4, $M.13, $M.10, $M.16;



implementation vmw_fence_manager_takedown_loop_$bb19()
{

  entry:
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb20_dummy;

  $bb20_dummy:
    call {:si_unique_call 1} vmw_fence_manager_takedown_loop_$bb19();
    return;

  exit:
    return;
}



procedure vmw_fence_manager_takedown_loop_$bb19();



implementation vmw_kms_close_legacy_display_system_loop_$bb14()
{

  entry:
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  $bb15_dummy:
    call {:si_unique_call 1} vmw_kms_close_legacy_display_system_loop_$bb14();
    return;

  exit:
    return;
}



procedure vmw_kms_close_legacy_display_system_loop_$bb14();



implementation vmw_event_fence_fpriv_gone_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i2: i64, in_$i3: i64, in_$p4: ref, in_$p5: ref, in_$i6: i64, in_$i7: i32, in_$i8: i1, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i64, in_$p15: ref, in_$i16: i32, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$p24: ref, in_$i25: i64, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$p32: ref, in_$i33: i64, in_$i34: i64, in_$p35: ref, in_$i36: i64, in_$i37: i64, in_$p38: ref, in_$p39: ref) returns (out_$i2: i64, out_$i3: i64, out_$p4: ref, out_$p5: ref, out_$i6: i64, out_$i7: i32, out_$i8: i1, out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i64, out_$p15: ref, out_$i16: i32, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$p24: ref, out_$i25: i64, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$p32: ref, out_$i33: i64, out_$i34: i64, out_$p35: ref, out_$i36: i64, out_$i37: i64, out_$p38: ref, out_$p39: ref)
{

  entry:
    out_$i2, out_$i3, out_$p4, out_$p5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39 := in_$i2, in_$i3, in_$p4, in_$p5, in_$i6, in_$i7, in_$i8, in_$i9, in_$p11, in_$p12, in_$i13, in_$i14, in_$p15, in_$i16, in_$p17, in_$i18, in_$i19, in_$p20, in_$p21, in_$i22, in_$i23, in_$p24, in_$i25, in_$i26, in_$p27, in_$p28, in_$i29, in_$i30, in_$p32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$p38, in_$p39;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    goto corral_source_split_9226_dummy;

  SeqInstr_597:
    goto corral_source_split_9226;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    call {:si_unique_call 4296} devirtbounce.17(out_$p39, out_$p28);
    goto SeqInstr_596;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    out_$p38 := $i2p.i64.ref(out_$i37);
    goto corral_source_split_9225;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i64(out_$i36, 40);
    call {:si_unique_call 4295} {:cexpr "__cil_tmp35"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_9224;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p28);
    call {:si_unique_call 4294} {:cexpr "__cil_tmp34"} boogie_si_record_i64(out_$i36);
    goto corral_source_split_9223;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4293} spin_unlock_irqrestore(out_$p35, out_$i6);
    goto corral_source_split_9222;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    out_$p35 := $i2p.i64.ref(out_$i34);
    goto corral_source_split_9221;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i64(out_$i33, 16);
    call {:si_unique_call 4292} {:cexpr "__cil_tmp32"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_9220;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 4291} {:cexpr "__cil_tmp31"} boogie_si_record_i64(out_$i33);
    goto corral_source_split_9219;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p32, $0.ref);
    goto corral_source_split_9218;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    out_$p32 := $i2p.i64.ref(out_$i30);
    goto corral_source_split_9217;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    goto corral_source_split_9216;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i64(out_$i29, 56);
    call {:si_unique_call 4290} {:cexpr "__cil_tmp29"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_9215;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p21);
    call {:si_unique_call 4289} {:cexpr "__cil_tmp28"} boogie_si_record_i64(out_$i29);
    goto corral_source_split_9214;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_9213;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    out_$p27 := $i2p.i64.ref(out_$i26);
    goto corral_source_split_9212;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i64(out_$i25, 56);
    call {:si_unique_call 4288} {:cexpr "__cil_tmp27"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_9211;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p21);
    call {:si_unique_call 4287} {:cexpr "__cil_tmp26"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_9210;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4286} list_del_init(out_$p24);
    goto corral_source_split_9209;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    out_$p24 := $i2p.i64.ref(out_$i23);
    goto corral_source_split_9208;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i64(out_$i22, 40);
    call {:si_unique_call 4285} {:cexpr "__cil_tmp24"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_9207;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    call {:si_unique_call 4284} {:cexpr "__cil_tmp23"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_9206;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_9205;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref(out_$p17, $mul.ref(out_$i19, 1));
    goto corral_source_split_9204;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    out_$i19 := $sub.i64(0, out_$i18);
    goto corral_source_split_9203;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i32.i64(out_$i16);
    goto corral_source_split_9202;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p12);
    goto corral_source_split_9201;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i32(out_$p15);
    call {:si_unique_call 4283} {:cexpr "__cil_tmp20"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_9200;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    out_$p15 := $i2p.i64.ref(out_$i14);
    goto corral_source_split_9199;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i64(out_$i13, 40);
    call {:si_unique_call 4282} {:cexpr "__cil_tmp18"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_9198;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 4281} {:cexpr "__cil_tmp17"} boogie_si_record_i64(out_$i13);
    goto corral_source_split_9197;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_9196;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_9195;

  $bb10:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i6;
    assume true;
    goto $bb10;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_9185;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4276} out_$i7 := list_empty(in_$p1);
    call {:si_unique_call 4277} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_9184;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4274} out_$i6 := _raw_spin_lock_irqsave(out_$p5);
    call {:si_unique_call 4275} {:cexpr "irq_flags"} boogie_si_record_i64(out_$i6);
    goto corral_source_split_9182;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4273} out_$p5 := spinlock_check(out_$p4);
    goto corral_source_split_9181;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    out_$p4 := $i2p.i64.ref(out_$i3);
    goto corral_source_split_9180;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    out_$i3 := $add.i64(out_$i2, 16);
    call {:si_unique_call 4272} {:cexpr "__cil_tmp12"} boogie_si_record_i64(out_$i3);
    goto corral_source_split_9179;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i2 := $p2i.ref.i64(in_$p0);
    call {:si_unique_call 4271} {:cexpr "__cil_tmp11"} boogie_si_record_i64(out_$i2);
    goto corral_source_split_9178;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_9226_dummy:
    call {:si_unique_call 1} out_$i2, out_$i3, out_$p4, out_$p5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39 := vmw_event_fence_fpriv_gone_loop_$bb1(in_$p0, in_$p1, out_$i2, out_$i3, out_$p4, out_$p5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39);
    return;

  exit:
    return;
}



procedure vmw_event_fence_fpriv_gone_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i2: i64, in_$i3: i64, in_$p4: ref, in_$p5: ref, in_$i6: i64, in_$i7: i32, in_$i8: i1, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i64, in_$p15: ref, in_$i16: i32, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$p24: ref, in_$i25: i64, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$p32: ref, in_$i33: i64, in_$i34: i64, in_$p35: ref, in_$i36: i64, in_$i37: i64, in_$p38: ref, in_$p39: ref) returns (out_$i2: i64, out_$i3: i64, out_$p4: ref, out_$p5: ref, out_$i6: i64, out_$i7: i32, out_$i8: i1, out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i64, out_$p15: ref, out_$i16: i32, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$p24: ref, out_$i25: i64, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$p32: ref, out_$i33: i64, out_$i34: i64, out_$p35: ref, out_$i36: i64, out_$i37: i64, out_$p38: ref, out_$p39: ref);
  modifies $M.1, $M.0, $M.6, assertsPassed, $M.2, $M.11, $M.12, $CurrAddr, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation {:SIextraRecBound 2} vmw_overlay_init_loop_$bb17(in_$p21: ref, in_$i24: i32, in_$i25: i1, in_$i26: i64, in_$i27: i64, in_$i28: i64, in_$i29: i64, in_$i30: i64, in_$p32: ref, in_$i33: i64, in_$i34: i64, in_$i35: i64, in_$i36: i64, in_$i37: i64, in_$i38: i64, in_$p39: ref, in_$i40: i64, in_$i41: i64, in_$i42: i64, in_$i43: i64, in_$i44: i64, in_$i45: i64, in_$p46: ref, in_$i47: i32) returns (out_$i24: i32, out_$i25: i1, out_$i26: i64, out_$i27: i64, out_$i28: i64, out_$i29: i64, out_$i30: i64, out_$p32: ref, out_$i33: i64, out_$i34: i64, out_$i35: i64, out_$i36: i64, out_$i37: i64, out_$i38: i64, out_$p39: ref, out_$i40: i64, out_$i41: i64, out_$i42: i64, out_$i43: i64, out_$i44: i64, out_$i45: i64, out_$p46: ref, out_$i47: i32)
{

  entry:
    out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47 := in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p46, in_$i47;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_9645;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i47;
    goto corral_source_split_9677_dummy;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i24, 1);
    call {:si_unique_call 4487} {:cexpr "i"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_9677;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p46, 0);
    goto corral_source_split_9676;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    out_$p46 := $i2p.i64.ref(out_$i45);
    goto corral_source_split_9675;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i64(out_$i44, out_$i43);
    call {:si_unique_call 4486} {:cexpr "__cil_tmp35"} boogie_si_record_i64(out_$i45);
    goto corral_source_split_9674;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(in_$p21);
    call {:si_unique_call 4485} {:cexpr "__cil_tmp34"} boogie_si_record_i64(out_$i44);
    goto corral_source_split_9673;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i64(72, out_$i42);
    call {:si_unique_call 4484} {:cexpr "__cil_tmp33"} boogie_si_record_i64(out_$i43);
    goto corral_source_split_9672;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i64(out_$i41, 8);
    call {:si_unique_call 4483} {:cexpr "__cil_tmp32"} boogie_si_record_i64(out_$i42);
    goto corral_source_split_9671;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    out_$i41 := $mul.i64(out_$i40, 104);
    call {:si_unique_call 4482} {:cexpr "__cil_tmp31"} boogie_si_record_i64(out_$i41);
    goto corral_source_split_9670;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i32.i64(out_$i24);
    goto corral_source_split_9669;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p39, 0);
    goto corral_source_split_9668;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    out_$p39 := $i2p.i64.ref(out_$i38);
    goto corral_source_split_9667;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i64(out_$i37, out_$i36);
    call {:si_unique_call 4481} {:cexpr "__cil_tmp30"} boogie_si_record_i64(out_$i38);
    goto corral_source_split_9666;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(in_$p21);
    call {:si_unique_call 4480} {:cexpr "__cil_tmp29"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_9665;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i64(72, out_$i35);
    call {:si_unique_call 4479} {:cexpr "__cil_tmp28"} boogie_si_record_i64(out_$i36);
    goto corral_source_split_9664;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i64(out_$i34, 9);
    call {:si_unique_call 4478} {:cexpr "__cil_tmp27"} boogie_si_record_i64(out_$i35);
    goto corral_source_split_9663;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    out_$i34 := $mul.i64(out_$i33, 104);
    call {:si_unique_call 4477} {:cexpr "__cil_tmp26"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_9662;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i24);
    goto corral_source_split_9661;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p32, $0.ref);
    goto corral_source_split_9660;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    out_$p32 := $i2p.i64.ref(out_$i30);
    goto corral_source_split_9659;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    goto corral_source_split_9658;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i64(out_$i29, out_$i28);
    call {:si_unique_call 4476} {:cexpr "__cil_tmp24"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_9657;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(in_$p21);
    call {:si_unique_call 4475} {:cexpr "__cil_tmp23"} boogie_si_record_i64(out_$i29);
    goto corral_source_split_9656;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i64(72, out_$i27);
    call {:si_unique_call 4474} {:cexpr "__cil_tmp22"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_9655;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    out_$i27 := $mul.i64(out_$i26, 104);
    call {:si_unique_call 4473} {:cexpr "__cil_tmp21"} boogie_si_record_i64(out_$i27);
    goto corral_source_split_9654;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i24);
    goto corral_source_split_9653;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i25 == 1;
    goto corral_source_split_9649;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i24, 1);
    goto corral_source_split_9647;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_9677_dummy:
    call {:si_unique_call 1} out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47 := vmw_overlay_init_loop_$bb17(in_$p21, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47);
    return;

  exit:
    return;
}



procedure vmw_overlay_init_loop_$bb17(in_$p21: ref, in_$i24: i32, in_$i25: i1, in_$i26: i64, in_$i27: i64, in_$i28: i64, in_$i29: i64, in_$i30: i64, in_$p32: ref, in_$i33: i64, in_$i34: i64, in_$i35: i64, in_$i36: i64, in_$i37: i64, in_$i38: i64, in_$p39: ref, in_$i40: i64, in_$i41: i64, in_$i42: i64, in_$i43: i64, in_$i44: i64, in_$i45: i64, in_$p46: ref, in_$i47: i32) returns (out_$i24: i32, out_$i25: i1, out_$i26: i64, out_$i27: i64, out_$i28: i64, out_$i29: i64, out_$i30: i64, out_$p32: ref, out_$i33: i64, out_$i34: i64, out_$i35: i64, out_$i36: i64, out_$i37: i64, out_$i38: i64, out_$p39: ref, out_$i40: i64, out_$i41: i64, out_$i42: i64, out_$i43: i64, out_$i44: i64, out_$i45: i64, out_$p46: ref, out_$i47: i32);
  modifies $M.0;



implementation vmw_dmabuf_init_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb8_dummy;

  $bb8_dummy:
    call {:si_unique_call 1} vmw_dmabuf_init_loop_$bb7();
    return;

  exit:
    return;
}



procedure vmw_dmabuf_init_loop_$bb7();



implementation {:SIextraRecBound 9} vmw_kms_init_screen_object_display_loop_$bb20(in_$p0: ref, in_$i79: i32, in_$i80: i1, in_$i82: i32, in_vslice_dummy_var_193: i32) returns (out_$i79: i32, out_$i80: i1, out_$i82: i32, out_vslice_dummy_var_193: i32)
{

  entry:
    out_$i79, out_$i80, out_$i82, out_vslice_dummy_var_193 := in_$i79, in_$i80, in_$i82, in_vslice_dummy_var_193;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_10526;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    out_$i79 := out_$i82;
    goto corral_source_split_10535_dummy;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    out_$i82 := $add.i32(out_$i79, 1);
    call {:si_unique_call 4877} {:cexpr "i"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_10535;

  SeqInstr_609:
    goto corral_source_split_10534;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4876} out_vslice_dummy_var_193 := vmw_sou_init(in_$p0, out_$i79);
    goto SeqInstr_608;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i80 == 1;
    goto corral_source_split_10530;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i80 := $slt.i32(out_$i79, 8);
    goto corral_source_split_10528;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_10535_dummy:
    call {:si_unique_call 1} out_$i79, out_$i80, out_$i82, out_vslice_dummy_var_193 := vmw_kms_init_screen_object_display_loop_$bb20(in_$p0, out_$i79, out_$i80, out_$i82, out_vslice_dummy_var_193);
    return;

  exit:
    return;
}



procedure vmw_kms_init_screen_object_display_loop_$bb20(in_$p0: ref, in_$i79: i32, in_$i80: i1, in_$i82: i32, in_vslice_dummy_var_193: i32) returns (out_$i79: i32, out_$i80: i1, out_$i82: i32, out_vslice_dummy_var_193: i32);
  modifies $M.0, $M.1, assertsPassed, $CurrAddr;



implementation {:SIextraRecBound 9} vmw_kms_init_legacy_display_system_loop_$bb21(in_$p0: ref, in_$i68: i32, in_$i69: i1, in_$i71: i32, in_vslice_dummy_var_197: i32) returns (out_$i68: i32, out_$i69: i1, out_$i71: i32, out_vslice_dummy_var_197: i32)
{

  entry:
    out_$i68, out_$i69, out_$i71, out_vslice_dummy_var_197 := in_$i68, in_$i69, in_$i71, in_vslice_dummy_var_197;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_10648;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    out_$i68 := out_$i71;
    goto corral_source_split_10657_dummy;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i32(out_$i68, 1);
    call {:si_unique_call 4924} {:cexpr "i"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_10657;

  SeqInstr_615:
    goto corral_source_split_10656;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4923} out_vslice_dummy_var_197 := vmw_ldu_init(in_$p0, out_$i68);
    goto SeqInstr_614;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i69 == 1;
    goto corral_source_split_10652;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i68, 8);
    goto corral_source_split_10650;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_10657_dummy:
    call {:si_unique_call 1} out_$i68, out_$i69, out_$i71, out_vslice_dummy_var_197 := vmw_kms_init_legacy_display_system_loop_$bb21(in_$p0, out_$i68, out_$i69, out_$i71, out_vslice_dummy_var_197);
    return;

  exit:
    return;
}



procedure vmw_kms_init_legacy_display_system_loop_$bb21(in_$p0: ref, in_$i68: i32, in_$i69: i1, in_$i71: i32, in_vslice_dummy_var_197: i32) returns (out_$i68: i32, out_$i69: i1, out_$i71: i32, out_vslice_dummy_var_197: i32);
  modifies $M.0, $M.1, assertsPassed, $CurrAddr;



implementation vmw_fence_work_func_loop_$bb13(in_$i65: i64, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$i72: i64, in_$i73: i64, in_$p74: ref, in_$p75: ref, in_$i76: i1, in_$i77: i64, in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i32, in_$p85: ref, in_$i86: i64, in_$i87: i64, in_$p88: ref) returns (out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$i72: i64, out_$i73: i64, out_$p74: ref, out_$p75: ref, out_$i76: i1, out_$i77: i64, out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i32, out_$p85: ref, out_$i86: i64, out_$i87: i64, out_$p88: ref)
{

  entry:
    out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88 := in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$p71, in_$i72, in_$i73, in_$p74, in_$p75, in_$i76, in_$i77, in_$i78, in_$p79, in_$p80, in_$p81, in_$p82, in_$p83, in_$i84, in_$p85, in_$i86, in_$i87, in_$p88;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10992;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    out_$p66, out_$p67 := out_$p67, out_$p88;
    goto corral_source_split_11024_dummy;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    goto corral_source_split_11024;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref(out_$p85, $mul.ref(out_$i87, 1));
    goto corral_source_split_11023;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    out_$i87 := $sub.i64(0, out_$i86);
    goto corral_source_split_11022;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i32.i64(out_$i84);
    goto corral_source_split_11021;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    out_$p85 := $bitcast.ref.ref(out_$p82);
    goto corral_source_split_11020;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    out_$i84 := $p2i.ref.i32(out_$p83);
    call {:si_unique_call 5096} {:cexpr "__cil_tmp69"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_11019;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    out_$p83 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_11018;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, out_$p81);
    goto corral_source_split_11017;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p81 := $bitcast.ref.ref(out_$p67);
    goto corral_source_split_11016;

  $bb20:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_639:
    goto corral_source_split_11014;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.0, out_$p79);
    call {:si_unique_call 5095} devirtbounce.11(out_$p80, out_$p66);
    goto SeqInstr_638;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    out_$p79 := $i2p.i64.ref(out_$i78);
    goto corral_source_split_11013;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    out_$i78 := $add.i64(out_$i77, 32);
    call {:si_unique_call 5094} {:cexpr "__cil_tmp64"} boogie_si_record_i64(out_$i78);
    goto corral_source_split_11012;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    out_$i77 := $p2i.ref.i64(out_$p66);
    call {:si_unique_call 5093} {:cexpr "__cil_tmp63"} boogie_si_record_i64(out_$i77);
    goto corral_source_split_11011;

  $bb19:
    assume out_$i76 == 1;
    goto corral_source_split_11010;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.ref(out_$p75, $0.ref);
    goto corral_source_split_11008;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.0, out_$p74);
    goto corral_source_split_11007;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    out_$p74 := $i2p.i64.ref(out_$i73);
    goto corral_source_split_11006;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i64(out_$i72, 32);
    call {:si_unique_call 5092} {:cexpr "__cil_tmp62"} boogie_si_record_i64(out_$i73);
    goto corral_source_split_11005;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(out_$p66);
    call {:si_unique_call 5091} {:cexpr "__cil_tmp61"} boogie_si_record_i64(out_$i72);
    goto corral_source_split_11004;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5090} list_del_init(out_$p71);
    goto corral_source_split_11003;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(out_$p66);
    goto corral_source_split_11002;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i70 == 1;
    goto corral_source_split_10998;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, in_$i65);
    goto corral_source_split_10996;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    call {:si_unique_call 5089} {:cexpr "__cil_tmp59"} boogie_si_record_i64(out_$i69);
    goto corral_source_split_10995;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p68 := $bitcast.ref.ref(out_$p66);
    goto corral_source_split_10994;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_11024_dummy:
    call {:si_unique_call 1} out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88 := vmw_fence_work_func_loop_$bb13(in_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88);
    return;

  exit:
    return;
}



procedure vmw_fence_work_func_loop_$bb13(in_$i65: i64, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$i72: i64, in_$i73: i64, in_$p74: ref, in_$p75: ref, in_$i76: i1, in_$i77: i64, in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i32, in_$p85: ref, in_$i86: i64, in_$i87: i64, in_$p88: ref) returns (out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$i72: i64, out_$i73: i64, out_$p74: ref, out_$p75: ref, out_$i76: i1, out_$i77: i64, out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i32, out_$p85: ref, out_$i86: i64, out_$i87: i64, out_$p88: ref);
  modifies $M.1, $M.0, $M.6, assertsPassed, $M.2, $M.11, $M.12, $CurrAddr, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation vmw_fence_work_func_loop_$bb1(in_$p1: ref, in_$p10: ref, in_$i11: i64, in_$i12: i64, in_$p13: ref, in_$i14: i64, in_$i15: i64, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$p19: ref, in_$i20: i64, in_$i21: i64, in_$p22: ref, in_$i23: i8, in_$i24: i1, in_$i25: i8, in_$i26: i64, in_$i27: i64, in_$p28: ref, in_$i29: i1, in_$i30: i64, in_$i31: i64, in_$p32: ref, in_$i33: i8, in_$i34: i1, in_$i35: i64, in_$i36: i64, in_$p37: ref, in_$i38: i64, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i64, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i64, in_$i53: i64, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$p60: ref, in_$i61: i64, in_$i62: i64, in_$p63: ref, in_$i65: i64, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$i72: i64, in_$i73: i64, in_$p74: ref, in_$p75: ref, in_$i76: i1, in_$i77: i64, in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i32, in_$p85: ref, in_$i86: i64, in_$i87: i64, in_$p88: ref) returns (out_$i11: i64, out_$i12: i64, out_$p13: ref, out_$i14: i64, out_$i15: i64, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$p19: ref, out_$i20: i64, out_$i21: i64, out_$p22: ref, out_$i23: i8, out_$i24: i1, out_$i25: i8, out_$i26: i64, out_$i27: i64, out_$p28: ref, out_$i29: i1, out_$i30: i64, out_$i31: i64, out_$p32: ref, out_$i33: i8, out_$i34: i1, out_$i35: i64, out_$i36: i64, out_$p37: ref, out_$i38: i64, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i64, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i64, out_$i53: i64, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$p60: ref, out_$i61: i64, out_$i62: i64, out_$p63: ref, out_$i65: i64, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$i72: i64, out_$i73: i64, out_$p74: ref, out_$p75: ref, out_$i76: i1, out_$i77: i64, out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i32, out_$p85: ref, out_$i86: i64, out_$i87: i64, out_$p88: ref)
{

  entry:
    out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p63, out_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88 := in_$i11, in_$i12, in_$p13, in_$i14, in_$i15, in_$p16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$p28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$p49, in_$i50, in_$p51, in_$i52, in_$i53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$p60, in_$i61, in_$i62, in_$p63, in_$i65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$p71, in_$i72, in_$i73, in_$p74, in_$p75, in_$i76, in_$i77, in_$i78, in_$p79, in_$p80, in_$p81, in_$p82, in_$p83, in_$i84, in_$p85, in_$i86, in_$i87, in_$p88;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb18_dummy;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume !(out_$i70 == 1);
    goto corral_source_split_11000;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, out_$i65);
    goto corral_source_split_10996;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    call {:si_unique_call 5089} {:cexpr "__cil_tmp59"} boogie_si_record_i64(out_$i69);
    goto corral_source_split_10995;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p68 := $bitcast.ref.ref(out_$p66);
    goto corral_source_split_10994;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    call out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88 := vmw_fence_work_func_loop_$bb13(out_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88);
    goto $bb13_last;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10992;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    out_$p66, out_$p67 := out_$p54, out_$p63;
    goto $bb13;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    out_$p66, out_$p67 := out_$p67, out_$p88;
    assume false;
    return;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    goto corral_source_split_11024;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref(out_$p85, $mul.ref(out_$i87, 1));
    goto corral_source_split_11023;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    out_$i87 := $sub.i64(0, out_$i86);
    goto corral_source_split_11022;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i32.i64(out_$i84);
    goto corral_source_split_11021;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    out_$p85 := $bitcast.ref.ref(out_$p82);
    goto corral_source_split_11020;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    out_$i84 := $p2i.ref.i32(out_$p83);
    call {:si_unique_call 5096} {:cexpr "__cil_tmp69"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_11019;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    out_$p83 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_11018;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, out_$p81);
    goto corral_source_split_11017;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p81 := $bitcast.ref.ref(out_$p67);
    goto corral_source_split_11016;

  $bb20:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_639:
    goto corral_source_split_11014;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.0, out_$p79);
    call {:si_unique_call 5095} devirtbounce.11(out_$p80, out_$p66);
    goto SeqInstr_638;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    out_$p79 := $i2p.i64.ref(out_$i78);
    goto corral_source_split_11013;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    out_$i78 := $add.i64(out_$i77, 32);
    call {:si_unique_call 5094} {:cexpr "__cil_tmp64"} boogie_si_record_i64(out_$i78);
    goto corral_source_split_11012;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    out_$i77 := $p2i.ref.i64(out_$p66);
    call {:si_unique_call 5093} {:cexpr "__cil_tmp63"} boogie_si_record_i64(out_$i77);
    goto corral_source_split_11011;

  $bb19:
    assume out_$i76 == 1;
    goto corral_source_split_11010;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.ref(out_$p75, $0.ref);
    goto corral_source_split_11008;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.0, out_$p74);
    goto corral_source_split_11007;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    out_$p74 := $i2p.i64.ref(out_$i73);
    goto corral_source_split_11006;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i64(out_$i72, 32);
    call {:si_unique_call 5092} {:cexpr "__cil_tmp62"} boogie_si_record_i64(out_$i73);
    goto corral_source_split_11005;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(out_$p66);
    call {:si_unique_call 5091} {:cexpr "__cil_tmp61"} boogie_si_record_i64(out_$i72);
    goto corral_source_split_11004;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5090} list_del_init(out_$p71);
    goto corral_source_split_11003;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(out_$p66);
    goto corral_source_split_11002;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i70 == 1;
    goto corral_source_split_10998;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    out_$i65 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_10990;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    goto corral_source_split_10989;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(out_$p60, $mul.ref(out_$i62, 1));
    goto corral_source_split_10988;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    out_$i62 := $sub.i64(0, out_$i61);
    goto corral_source_split_10987;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i32.i64(out_$i59);
    goto corral_source_split_10986;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p57);
    goto corral_source_split_10985;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i32(out_$p58);
    call {:si_unique_call 5088} {:cexpr "__cil_tmp54"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_10984;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_10983;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_10982;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    out_$p56 := $bitcast.ref.ref(out_$p55);
    goto corral_source_split_10981;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(out_$p54);
    goto corral_source_split_10980;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p51, $mul.ref(out_$i53, 1));
    goto corral_source_split_10979;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    out_$i53 := $sub.i64(0, out_$i52);
    goto corral_source_split_10978;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i32.i64(out_$i50);
    goto corral_source_split_10977;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_10976;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i32(out_$p49);
    call {:si_unique_call 5087} {:cexpr "__cil_tmp48"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_10975;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref($0.ref);
    goto corral_source_split_10974;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_10973;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_10972;

  $bb10:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_10968;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5085} out_$i45 := list_empty(in_$p1);
    call {:si_unique_call 5086} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_10967;

  SeqInstr_636:
    goto corral_source_split_10966;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5084} mutex_unlock(out_$p44);
    goto SeqInstr_635;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    out_$p44 := $i2p.i64.ref(out_$i43);
    goto corral_source_split_10965;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i64(out_$i42, 128);
    call {:si_unique_call 5083} {:cexpr "__cil_tmp41"} boogie_si_record_i64(out_$i43);
    goto corral_source_split_10964;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(in_$p10);
    call {:si_unique_call 5082} {:cexpr "__cil_tmp40"} boogie_si_record_i64(out_$i42);
    goto corral_source_split_10963;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    out_$i29 := $trunc.i8.i1(out_$i25);
    goto corral_source_split_10943;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5074} spin_unlock_irq(out_$p28);
    goto corral_source_split_10942;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    out_$p28 := $i2p.i64.ref(out_$i27);
    goto corral_source_split_10941;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i64(out_$i26, 16);
    call {:si_unique_call 5073} {:cexpr "__cil_tmp31"} boogie_si_record_i64(out_$i27);
    goto corral_source_split_10940;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(in_$p10);
    call {:si_unique_call 5072} {:cexpr "__cil_tmp30"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_10939;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i1.i8(out_$i24);
    call {:si_unique_call 5071} {:cexpr "seqno_valid"} boogie_si_record_i8(out_$i25);
    goto corral_source_split_10938;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i8.i1(out_$i23);
    goto corral_source_split_10937;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i8($M.0, out_$p22);
    goto corral_source_split_10936;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    out_$p22 := $i2p.i64.ref(out_$i21);
    goto corral_source_split_10935;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i64(out_$i20, 201);
    call {:si_unique_call 5070} {:cexpr "__cil_tmp29"} boogie_si_record_i64(out_$i21);
    goto corral_source_split_10934;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(in_$p10);
    call {:si_unique_call 5069} {:cexpr "__cil_tmp28"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_10933;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5068} list_splice_init(out_$p19, in_$p1);
    goto corral_source_split_10932;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    out_$p19 := $i2p.i64.ref(out_$i18);
    goto corral_source_split_10931;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i64(out_$i17, 104);
    call {:si_unique_call 5067} {:cexpr "__cil_tmp26"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_10930;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(in_$p10);
    call {:si_unique_call 5066} {:cexpr "__cil_tmp25"} boogie_si_record_i64(out_$i17);
    goto corral_source_split_10929;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5065} spin_lock_irq(out_$p16);
    goto corral_source_split_10928;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    out_$p16 := $i2p.i64.ref(out_$i15);
    goto corral_source_split_10927;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i64(out_$i14, 16);
    call {:si_unique_call 5064} {:cexpr "__cil_tmp23"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_10926;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(in_$p10);
    call {:si_unique_call 5063} {:cexpr "__cil_tmp22"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_10925;

  SeqInstr_630:
    goto corral_source_split_10924;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5062} mutex_lock(out_$p13);
    goto SeqInstr_629;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    out_$p13 := $i2p.i64.ref(out_$i12);
    goto corral_source_split_10923;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i64(out_$i11, 128);
    call {:si_unique_call 5061} {:cexpr "__cil_tmp20"} boogie_si_record_i64(out_$i12);
    goto corral_source_split_10922;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(in_$p10);
    call {:si_unique_call 5060} {:cexpr "__cil_tmp19"} boogie_si_record_i64(out_$i11);
    goto corral_source_split_10921;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5059} INIT_LIST_HEAD(in_$p1);
    goto corral_source_split_10920;

  $bb6:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_633:
    goto corral_source_split_10961;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5081} vmw_goal_waiter_remove(out_$p41);
    goto SeqInstr_632;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_10960;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    out_$p40 := $i2p.i64.ref(out_$i39);
    goto corral_source_split_10959;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i64(out_$i38, 8);
    call {:si_unique_call 5080} {:cexpr "__cil_tmp38"} boogie_si_record_i64(out_$i39);
    goto corral_source_split_10958;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(in_$p10);
    call {:si_unique_call 5079} {:cexpr "__cil_tmp37"} boogie_si_record_i64(out_$i38);
    goto corral_source_split_10957;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p37, 0);
    goto corral_source_split_10956;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    out_$p37 := $i2p.i64.ref(out_$i36);
    goto corral_source_split_10955;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i64(out_$i35, 200);
    call {:si_unique_call 5078} {:cexpr "__cil_tmp36"} boogie_si_record_i64(out_$i36);
    goto corral_source_split_10954;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    out_$i35 := $p2i.ref.i64(in_$p10);
    call {:si_unique_call 5077} {:cexpr "__cil_tmp35"} boogie_si_record_i64(out_$i35);
    goto corral_source_split_10953;

  $bb5:
    assume out_$i34 == 1;
    goto corral_source_split_10952;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    out_$i34 := $trunc.i8.i1(out_$i33);
    goto corral_source_split_10950;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i8($M.0, out_$p32);
    goto corral_source_split_10949;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    out_$p32 := $i2p.i64.ref(out_$i31);
    goto corral_source_split_10948;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i64(out_$i30, 200);
    call {:si_unique_call 5076} {:cexpr "__cil_tmp34"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_10947;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(in_$p10);
    call {:si_unique_call 5075} {:cexpr "__cil_tmp33"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_10946;

  $bb4:
    assume !(out_$i29 == 1);
    goto corral_source_split_10945;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p63, out_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88 := vmw_fence_work_func_loop_$bb1(in_$p1, in_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p63, out_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88);
    return;

  exit:
    return;
}



procedure vmw_fence_work_func_loop_$bb1(in_$p1: ref, in_$p10: ref, in_$i11: i64, in_$i12: i64, in_$p13: ref, in_$i14: i64, in_$i15: i64, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$p19: ref, in_$i20: i64, in_$i21: i64, in_$p22: ref, in_$i23: i8, in_$i24: i1, in_$i25: i8, in_$i26: i64, in_$i27: i64, in_$p28: ref, in_$i29: i1, in_$i30: i64, in_$i31: i64, in_$p32: ref, in_$i33: i8, in_$i34: i1, in_$i35: i64, in_$i36: i64, in_$p37: ref, in_$i38: i64, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i64, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i64, in_$i53: i64, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$p60: ref, in_$i61: i64, in_$i62: i64, in_$p63: ref, in_$i65: i64, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$i72: i64, in_$i73: i64, in_$p74: ref, in_$p75: ref, in_$i76: i1, in_$i77: i64, in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i32, in_$p85: ref, in_$i86: i64, in_$i87: i64, in_$p88: ref) returns (out_$i11: i64, out_$i12: i64, out_$p13: ref, out_$i14: i64, out_$i15: i64, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$p19: ref, out_$i20: i64, out_$i21: i64, out_$p22: ref, out_$i23: i8, out_$i24: i1, out_$i25: i8, out_$i26: i64, out_$i27: i64, out_$p28: ref, out_$i29: i1, out_$i30: i64, out_$i31: i64, out_$p32: ref, out_$i33: i8, out_$i34: i1, out_$i35: i64, out_$i36: i64, out_$p37: ref, out_$i38: i64, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i64, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i64, out_$i53: i64, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$p60: ref, out_$i61: i64, out_$i62: i64, out_$p63: ref, out_$i65: i64, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$i72: i64, out_$i73: i64, out_$p74: ref, out_$p75: ref, out_$i76: i1, out_$i77: i64, out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i32, out_$p85: ref, out_$i86: i64, out_$i87: i64, out_$p88: ref);
  modifies $M.1, $M.0, $M.6, assertsPassed, $M.2, $M.11, $M.12, $CurrAddr, $M.3, $M.4, $M.10, $M.16, $M.13;



implementation vmw_overlay_unref_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb8_dummy;

  $bb8_dummy:
    call {:si_unique_call 1} vmw_overlay_unref_loop_$bb7();
    return;

  exit:
    return;
}



procedure vmw_overlay_unref_loop_$bb7();



implementation vmw_ldu_del_active_loop_$bb13()
{

  entry:
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb14_dummy:
    call {:si_unique_call 1} vmw_ldu_del_active_loop_$bb13();
    return;

  exit:
    return;
}



procedure vmw_ldu_del_active_loop_$bb13();



implementation vmw_ldu_commit_list_loop_$bb3(in_$i24: i64, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i64, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i64, in_$p42: ref, in_$i43: i32, in_$i44: i64, in_$i45: i64, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i64, in_$i52: i64, in_$p53: ref, in_$i54: i32, in_$i55: i64, in_$i56: i64, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i32, in_$i63: i64, in_$i64: i64, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$p69: ref, in_$i70: i32, in_$p71: ref, in_$i72: i64, in_$i73: i64, in_$p74: ref) returns (out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i64, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i64, out_$p42: ref, out_$i43: i32, out_$i44: i64, out_$i45: i64, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i64, out_$i52: i64, out_$p53: ref, out_$i54: i32, out_$i55: i64, out_$i56: i64, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i32, out_$i63: i64, out_$i64: i64, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$p69: ref, out_$i70: i32, out_$p71: ref, out_$i72: i64, out_$i73: i64, out_$p74: ref)
{

  entry:
    out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74 := in_$i25, in_$i26, in_$i27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$p39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i44, in_$i45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p53, in_$i54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$p65, in_$p66, in_$i67, in_$i68, in_$p69, in_$i70, in_$p71, in_$i72, in_$i73, in_$p74;
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12621;

  corral_source_split_12679:
    assume {:verifier.code 0} true;
    out_$i25, out_$i26, out_$i27, out_$p28, out_$p29 := out_$i61, out_$i50, out_$i62, out_$p29, out_$p74;
    goto corral_source_split_12679_dummy;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    goto corral_source_split_12679;

  corral_source_split_12677:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref(out_$p71, $mul.ref(out_$i73, 1));
    goto corral_source_split_12678;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    out_$i73 := $sub.i64(0, out_$i72);
    goto corral_source_split_12677;

  corral_source_split_12675:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i32.i64(out_$i70);
    goto corral_source_split_12676;

  corral_source_split_12674:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(out_$p66);
    goto corral_source_split_12675;

  corral_source_split_12673:
    assume {:verifier.code 0} true;
    out_$i70 := $p2i.ref.i32(out_$p69);
    call {:si_unique_call 5857} {:cexpr "__cil_tmp88"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_12674;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    out_$p69 := $i2p.i64.ref(out_$i68);
    goto corral_source_split_12673;

  corral_source_split_12671:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i64(out_$i67, 2072);
    call {:si_unique_call 5856} {:cexpr "__cil_tmp86"} boogie_si_record_i64(out_$i68);
    goto corral_source_split_12672;

  corral_source_split_12670:
    assume {:verifier.code 0} true;
    out_$i67 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5855} {:cexpr "__cil_tmp85"} boogie_si_record_i64(out_$i67);
    goto corral_source_split_12671;

  corral_source_split_12669:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_12670;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    out_$p65 := $i2p.i64.ref(out_$i64);
    goto corral_source_split_12669;

  corral_source_split_12667:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i64(out_$i63, 2072);
    call {:si_unique_call 5854} {:cexpr "__cil_tmp82"} boogie_si_record_i64(out_$i64);
    goto corral_source_split_12668;

  corral_source_split_12666:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p29);
    call {:si_unique_call 5853} {:cexpr "__cil_tmp81"} boogie_si_record_i64(out_$i63);
    goto corral_source_split_12667;

  corral_source_split_12665:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i27, 1);
    call {:si_unique_call 5852} {:cexpr "i"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_12666;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_12665;

  $bb13:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    out_$i61 := out_$i59;
    goto $bb14;

  corral_source_split_12663:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i25;
    goto $bb14;

  $bb12:
    assume out_$i60 == 1;
    goto corral_source_split_12663;

  corral_source_split_12661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    out_$i60 := $sgt.i32(out_$i25, out_$i59);
    goto corral_source_split_12661;

  corral_source_split_12659:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i58, out_$i54);
    call {:si_unique_call 5851} {:cexpr "_max2___0"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_12660;

  corral_source_split_12658:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, out_$p57);
    call {:si_unique_call 5850} {:cexpr "__cil_tmp74"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_12659;

  corral_source_split_12657:
    assume {:verifier.code 0} true;
    out_$p57 := $i2p.i64.ref(out_$i56);
    goto corral_source_split_12658;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i64(out_$i55, 484);
    call {:si_unique_call 5849} {:cexpr "__cil_tmp73"} boogie_si_record_i64(out_$i56);
    goto corral_source_split_12657;

  corral_source_split_12655:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p39);
    call {:si_unique_call 5848} {:cexpr "__cil_tmp72"} boogie_si_record_i64(out_$i55);
    goto corral_source_split_12656;

  corral_source_split_12654:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.0, out_$p53);
    call {:si_unique_call 5847} {:cexpr "__cil_tmp71"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_12655;

  corral_source_split_12653:
    assume {:verifier.code 0} true;
    out_$p53 := $i2p.i64.ref(out_$i52);
    goto corral_source_split_12654;

  corral_source_split_12652:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i64(out_$i51, 136);
    call {:si_unique_call 5846} {:cexpr "__cil_tmp70"} boogie_si_record_i64(out_$i52);
    goto corral_source_split_12653;

  corral_source_split_12651:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p39);
    call {:si_unique_call 5845} {:cexpr "__cil_tmp69"} boogie_si_record_i64(out_$i51);
    goto corral_source_split_12652;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_12651;

  $bb10:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    out_$i50 := out_$i48;
    goto $bb11;

  corral_source_split_12649:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i26;
    goto $bb11;

  $bb9:
    assume out_$i49 == 1;
    goto corral_source_split_12649;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_12642:
    assume {:verifier.code 0} true;
    out_$i49 := $sgt.i32(out_$i26, out_$i48);
    goto corral_source_split_12643;

  corral_source_split_12641:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i47, out_$i43);
    call {:si_unique_call 5842} {:cexpr "_max2"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_12642;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, out_$p46);
    call {:si_unique_call 5841} {:cexpr "__cil_tmp59"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_12641;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    out_$p46 := $i2p.i64.ref(out_$i45);
    goto corral_source_split_12640;

  corral_source_split_12638:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i64(out_$i44, 480);
    call {:si_unique_call 5840} {:cexpr "__cil_tmp58"} boogie_si_record_i64(out_$i45);
    goto corral_source_split_12639;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p39);
    call {:si_unique_call 5839} {:cexpr "__cil_tmp57"} boogie_si_record_i64(out_$i44);
    goto corral_source_split_12638;

  corral_source_split_12636:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, out_$p42);
    call {:si_unique_call 5838} {:cexpr "__cil_tmp56"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_12637;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    out_$p42 := $i2p.i64.ref(out_$i41);
    goto corral_source_split_12636;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i64(out_$i40, 116);
    call {:si_unique_call 5837} {:cexpr "__cil_tmp55"} boogie_si_record_i64(out_$i41);
    goto corral_source_split_12635;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    call {:si_unique_call 5836} {:cexpr "__cil_tmp54"} boogie_si_record_i64(out_$i40);
    goto corral_source_split_12634;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_12633;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb5:
    assume out_$i34 == 1;
    goto corral_source_split_12629;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    out_$i35, out_$i36, out_$p37, out_$p38 := out_$i25, out_$i26, out_$p28, out_$p29;
    assume true;
    goto $bb5;

  corral_source_split_12626:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, in_$i24);
    goto corral_source_split_12627;

  corral_source_split_12625:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    call {:si_unique_call 5835} {:cexpr "__cil_tmp50"} boogie_si_record_i64(out_$i33);
    goto corral_source_split_12626;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    out_$p32 := $i2p.i64.ref(out_$i31);
    goto corral_source_split_12625;

  corral_source_split_12623:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i64(out_$i30, 2072);
    call {:si_unique_call 5834} {:cexpr "__cil_tmp48"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_12624;

  $bb4:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    call {:si_unique_call 5833} {:cexpr "__cil_tmp47"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_12623;

  corral_source_split_12621:
    assume {:verifier.code 0} true;
    goto $bb4;

  corral_source_split_12679_dummy:
    call {:si_unique_call 1} out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74 := vmw_ldu_commit_list_loop_$bb3(in_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74);
    return;

  exit:
    return;
}



procedure vmw_ldu_commit_list_loop_$bb3(in_$i24: i64, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i64, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i64, in_$p42: ref, in_$i43: i32, in_$i44: i64, in_$i45: i64, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i64, in_$i52: i64, in_$p53: ref, in_$i54: i32, in_$i55: i64, in_$i56: i64, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i32, in_$i63: i64, in_$i64: i64, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$p69: ref, in_$i70: i32, in_$p71: ref, in_$i72: i64, in_$i73: i64, in_$p74: ref) returns (out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i64, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i64, out_$p42: ref, out_$i43: i32, out_$i44: i64, out_$i45: i64, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i64, out_$i52: i64, out_$p53: ref, out_$i54: i32, out_$i55: i64, out_$i56: i64, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i32, out_$i63: i64, out_$i64: i64, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$p69: ref, out_$i70: i32, out_$p71: ref, out_$i72: i64, out_$i73: i64, out_$p74: ref);



implementation vmw_ldu_commit_list_loop_$bb44(in_$p0: ref, in_$p4: ref, in_$p238: ref, in_$p239: ref, in_$i240: i64, in_$i241: i64, in_$i242: i64, in_$p243: ref, in_$i244: i64, in_$i245: i1, in_$p246: ref, in_$i247: i64, in_$i248: i64, in_$p249: ref, in_$p250: ref, in_$i251: i1, in_$i252: i64, in_$i253: i64, in_$p254: ref, in_$p255: ref, in_$i256: i64, in_$i257: i64, in_$p258: ref, in_$i259: i32, in_$i260: i64, in_$i261: i64, in_$p262: ref, in_$i263: i32, in_$i264: i32, in_$i265: i1, in_$i267: i64, in_$i268: i64, in_$p269: ref, in_$p270: ref, in_$i271: i64, in_$i272: i64, in_$p273: ref, in_$i274: i32, in_$p275: ref, in_$i276: i64, in_$i277: i64, in_$p278: ref, in_vslice_dummy_var_240: i32) returns (out_$p238: ref, out_$p239: ref, out_$i240: i64, out_$i241: i64, out_$i242: i64, out_$p243: ref, out_$i244: i64, out_$i245: i1, out_$p246: ref, out_$i247: i64, out_$i248: i64, out_$p249: ref, out_$p250: ref, out_$i251: i1, out_$i252: i64, out_$i253: i64, out_$p254: ref, out_$p255: ref, out_$i256: i64, out_$i257: i64, out_$p258: ref, out_$i259: i32, out_$i260: i64, out_$i261: i64, out_$p262: ref, out_$i263: i32, out_$i264: i32, out_$i265: i1, out_$i267: i64, out_$i268: i64, out_$p269: ref, out_$p270: ref, out_$i271: i64, out_$i272: i64, out_$p273: ref, out_$i274: i32, out_$p275: ref, out_$i276: i64, out_$i277: i64, out_$p278: ref, out_vslice_dummy_var_240: i32)
{

  entry:
    out_$p238, out_$p239, out_$i240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$p246, out_$i247, out_$i248, out_$p249, out_$p250, out_$i251, out_$i252, out_$i253, out_$p254, out_$p255, out_$i256, out_$i257, out_$p258, out_$i259, out_$i260, out_$i261, out_$p262, out_$i263, out_$i264, out_$i265, out_$i267, out_$i268, out_$p269, out_$p270, out_$i271, out_$i272, out_$p273, out_$i274, out_$p275, out_$i276, out_$i277, out_$p278, out_vslice_dummy_var_240 := in_$p238, in_$p239, in_$i240, in_$i241, in_$i242, in_$p243, in_$i244, in_$i245, in_$p246, in_$i247, in_$i248, in_$p249, in_$p250, in_$i251, in_$i252, in_$i253, in_$p254, in_$p255, in_$i256, in_$i257, in_$p258, in_$i259, in_$i260, in_$i261, in_$p262, in_$i263, in_$i264, in_$i265, in_$i267, in_$i268, in_$p269, in_$p270, in_$i271, in_$i272, in_$p273, in_$i274, in_$p275, in_$i276, in_$i277, in_$p278, in_vslice_dummy_var_240;
    goto $bb44, exit;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_12872;

  corral_source_split_12907:
    assume {:verifier.code 0} true;
    out_$p238 := out_$p278;
    goto corral_source_split_12907_dummy;

  corral_source_split_12906:
    assume {:verifier.code 0} true;
    goto corral_source_split_12907;

  corral_source_split_12905:
    assume {:verifier.code 0} true;
    out_$p278 := $add.ref(out_$p275, $mul.ref(out_$i277, 1));
    goto corral_source_split_12906;

  corral_source_split_12904:
    assume {:verifier.code 0} true;
    out_$i277 := $sub.i64(0, out_$i276);
    goto corral_source_split_12905;

  corral_source_split_12903:
    assume {:verifier.code 0} true;
    out_$i276 := $zext.i32.i64(out_$i274);
    goto corral_source_split_12904;

  corral_source_split_12902:
    assume {:verifier.code 0} true;
    out_$p275 := $bitcast.ref.ref(out_$p270);
    goto corral_source_split_12903;

  corral_source_split_12901:
    assume {:verifier.code 0} true;
    out_$i274 := $p2i.ref.i32(out_$p273);
    call {:si_unique_call 5963} {:cexpr "__cil_tmp242"} boogie_si_record_i32(out_$i274);
    goto corral_source_split_12902;

  corral_source_split_12900:
    assume {:verifier.code 0} true;
    out_$p273 := $i2p.i64.ref(out_$i272);
    goto corral_source_split_12901;

  corral_source_split_12899:
    assume {:verifier.code 0} true;
    out_$i272 := $add.i64(out_$i271, 2072);
    call {:si_unique_call 5962} {:cexpr "__cil_tmp240"} boogie_si_record_i64(out_$i272);
    goto corral_source_split_12900;

  corral_source_split_12898:
    assume {:verifier.code 0} true;
    out_$i271 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5961} {:cexpr "__cil_tmp239"} boogie_si_record_i64(out_$i271);
    goto corral_source_split_12899;

  corral_source_split_12897:
    assume {:verifier.code 0} true;
    out_$p270 := $load.ref($M.0, out_$p269);
    goto corral_source_split_12898;

  corral_source_split_12896:
    assume {:verifier.code 0} true;
    out_$p269 := $i2p.i64.ref(out_$i268);
    goto corral_source_split_12897;

  corral_source_split_12895:
    assume {:verifier.code 0} true;
    out_$i268 := $add.i64(out_$i267, 2072);
    call {:si_unique_call 5960} {:cexpr "__cil_tmp236"} boogie_si_record_i64(out_$i268);
    goto corral_source_split_12896;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i267 := $p2i.ref.i64(out_$p238);
    call {:si_unique_call 5959} {:cexpr "__cil_tmp235"} boogie_si_record_i64(out_$i267);
    goto corral_source_split_12895;

  corral_source_split_12893:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5974} out_vslice_dummy_var_240 := drm_err.ref.ref(.str.276, .str.277);
    goto corral_source_split_12926;

  $bb55:
    assume !(out_$i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_12922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55;

  corral_source_split_12921:
    assume {:verifier.code 0} true;
    out_$i265 := $eq.i32(out_$i264, 0);
    goto corral_source_split_12922;

  SeqInstr_765:
    call {:si_unique_call 5973} {:cexpr "ret"} boogie_si_record_i32(out_$i264);
    goto corral_source_split_12921;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  corral_source_split_12920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5972} out_$i264 := vmw_cursor_update_dmabuf(in_$p0, out_$p255, 64, 64, out_$i259, out_$i263);
    goto SeqInstr_764;

  corral_source_split_12919:
    assume {:verifier.code 0} true;
    out_$i263 := $load.i32($M.0, out_$p262);
    call {:si_unique_call 5971} {:cexpr "__cil_tmp233"} boogie_si_record_i32(out_$i263);
    goto corral_source_split_12920;

  corral_source_split_12918:
    assume {:verifier.code 0} true;
    out_$p262 := $i2p.i64.ref(out_$i261);
    goto corral_source_split_12919;

  corral_source_split_12917:
    assume {:verifier.code 0} true;
    out_$i261 := $add.i64(out_$i260, 2028);
    call {:si_unique_call 5970} {:cexpr "__cil_tmp232"} boogie_si_record_i64(out_$i261);
    goto corral_source_split_12918;

  corral_source_split_12916:
    assume {:verifier.code 0} true;
    out_$i260 := $p2i.ref.i64(out_$p246);
    call {:si_unique_call 5969} {:cexpr "__cil_tmp231"} boogie_si_record_i64(out_$i260);
    goto corral_source_split_12917;

  corral_source_split_12915:
    assume {:verifier.code 0} true;
    out_$i259 := $load.i32($M.0, out_$p258);
    call {:si_unique_call 5968} {:cexpr "__cil_tmp229"} boogie_si_record_i32(out_$i259);
    goto corral_source_split_12916;

  corral_source_split_12914:
    assume {:verifier.code 0} true;
    out_$p258 := $i2p.i64.ref(out_$i257);
    goto corral_source_split_12915;

  corral_source_split_12913:
    assume {:verifier.code 0} true;
    out_$i257 := $add.i64(out_$i256, 2024);
    call {:si_unique_call 5967} {:cexpr "__cil_tmp228"} boogie_si_record_i64(out_$i257);
    goto corral_source_split_12914;

  corral_source_split_12912:
    assume {:verifier.code 0} true;
    out_$i256 := $p2i.ref.i64(out_$p246);
    call {:si_unique_call 5966} {:cexpr "__cil_tmp227"} boogie_si_record_i64(out_$i256);
    goto corral_source_split_12913;

  corral_source_split_12911:
    assume {:verifier.code 0} true;
    out_$p255 := $load.ref($M.0, out_$p254);
    goto corral_source_split_12912;

  corral_source_split_12910:
    assume {:verifier.code 0} true;
    out_$p254 := $i2p.i64.ref(out_$i253);
    goto corral_source_split_12911;

  corral_source_split_12909:
    assume {:verifier.code 0} true;
    out_$i253 := $add.i64(out_$i252, 2000);
    call {:si_unique_call 5965} {:cexpr "__cil_tmp223"} boogie_si_record_i64(out_$i253);
    goto corral_source_split_12910;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i252 := $p2i.ref.i64(out_$p246);
    call {:si_unique_call 5964} {:cexpr "__cil_tmp222"} boogie_si_record_i64(out_$i252);
    goto corral_source_split_12909;

  $bb50:
    assume out_$i251 == 1;
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_12891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_12890:
    assume {:verifier.code 0} true;
    out_$i251 := $ne.ref(out_$p250, $0.ref);
    goto corral_source_split_12891;

  corral_source_split_12889:
    assume {:verifier.code 0} true;
    out_$p250 := $load.ref($M.0, out_$p249);
    goto corral_source_split_12890;

  corral_source_split_12888:
    assume {:verifier.code 0} true;
    out_$p249 := $i2p.i64.ref(out_$i248);
    goto corral_source_split_12889;

  corral_source_split_12887:
    assume {:verifier.code 0} true;
    out_$i248 := $add.i64(out_$i247, 2000);
    call {:si_unique_call 5958} {:cexpr "__cil_tmp220"} boogie_si_record_i64(out_$i248);
    goto corral_source_split_12888;

  corral_source_split_12886:
    assume {:verifier.code 0} true;
    out_$i247 := $p2i.ref.i64(out_$p246);
    call {:si_unique_call 5957} {:cexpr "__cil_tmp219"} boogie_si_record_i64(out_$i247);
    goto corral_source_split_12887;

  $bb48:
    assume {:verifier.code 0} true;
    out_$p246 := $bitcast.ref.ref(out_$p238);
    goto corral_source_split_12886;

  corral_source_split_12882:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb46:
    assume out_$i245 == 1;
    goto corral_source_split_12882;

  corral_source_split_12880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46;

  corral_source_split_12879:
    assume {:verifier.code 0} true;
    out_$i245 := $ne.i64(out_$i244, out_$i240);
    goto corral_source_split_12880;

  corral_source_split_12878:
    assume {:verifier.code 0} true;
    out_$i244 := $p2i.ref.i64(out_$p243);
    call {:si_unique_call 5956} {:cexpr "__cil_tmp218"} boogie_si_record_i64(out_$i244);
    goto corral_source_split_12879;

  corral_source_split_12877:
    assume {:verifier.code 0} true;
    out_$p243 := $i2p.i64.ref(out_$i242);
    goto corral_source_split_12878;

  corral_source_split_12876:
    assume {:verifier.code 0} true;
    out_$i242 := $add.i64(out_$i241, 2072);
    call {:si_unique_call 5955} {:cexpr "__cil_tmp216"} boogie_si_record_i64(out_$i242);
    goto corral_source_split_12877;

  corral_source_split_12875:
    assume {:verifier.code 0} true;
    out_$i241 := $p2i.ref.i64(out_$p238);
    call {:si_unique_call 5954} {:cexpr "__cil_tmp215"} boogie_si_record_i64(out_$i241);
    goto corral_source_split_12876;

  corral_source_split_12874:
    assume {:verifier.code 0} true;
    out_$i240 := $p2i.ref.i64(out_$p239);
    call {:si_unique_call 5953} {:cexpr "__cil_tmp214"} boogie_si_record_i64(out_$i240);
    goto corral_source_split_12875;

  $bb45:
    assume {:verifier.code 0} true;
    out_$p239 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_12874;

  corral_source_split_12872:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb51:
    assume !(out_$i251 == 1);
    goto corral_source_split_12893;

  corral_source_split_12907_dummy:
    call {:si_unique_call 1} out_$p238, out_$p239, out_$i240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$p246, out_$i247, out_$i248, out_$p249, out_$p250, out_$i251, out_$i252, out_$i253, out_$p254, out_$p255, out_$i256, out_$i257, out_$p258, out_$i259, out_$i260, out_$i261, out_$p262, out_$i263, out_$i264, out_$i265, out_$i267, out_$i268, out_$p269, out_$p270, out_$i271, out_$i272, out_$p273, out_$i274, out_$p275, out_$i276, out_$i277, out_$p278, out_vslice_dummy_var_240 := vmw_ldu_commit_list_loop_$bb44(in_$p0, in_$p4, out_$p238, out_$p239, out_$i240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$p246, out_$i247, out_$i248, out_$p249, out_$p250, out_$i251, out_$i252, out_$i253, out_$p254, out_$p255, out_$i256, out_$i257, out_$p258, out_$i259, out_$i260, out_$i261, out_$p262, out_$i263, out_$i264, out_$i265, out_$i267, out_$i268, out_$p269, out_$p270, out_$i271, out_$i272, out_$p273, out_$i274, out_$p275, out_$i276, out_$i277, out_$p278, out_vslice_dummy_var_240);
    return;

  exit:
    return;
}



procedure vmw_ldu_commit_list_loop_$bb44(in_$p0: ref, in_$p4: ref, in_$p238: ref, in_$p239: ref, in_$i240: i64, in_$i241: i64, in_$i242: i64, in_$p243: ref, in_$i244: i64, in_$i245: i1, in_$p246: ref, in_$i247: i64, in_$i248: i64, in_$p249: ref, in_$p250: ref, in_$i251: i1, in_$i252: i64, in_$i253: i64, in_$p254: ref, in_$p255: ref, in_$i256: i64, in_$i257: i64, in_$p258: ref, in_$i259: i32, in_$i260: i64, in_$i261: i64, in_$p262: ref, in_$i263: i32, in_$i264: i32, in_$i265: i1, in_$i267: i64, in_$i268: i64, in_$p269: ref, in_$p270: ref, in_$i271: i64, in_$i272: i64, in_$p273: ref, in_$i274: i32, in_$p275: ref, in_$i276: i64, in_$i277: i64, in_$p278: ref, in_vslice_dummy_var_240: i32) returns (out_$p238: ref, out_$p239: ref, out_$i240: i64, out_$i241: i64, out_$i242: i64, out_$p243: ref, out_$i244: i64, out_$i245: i1, out_$p246: ref, out_$i247: i64, out_$i248: i64, out_$p249: ref, out_$p250: ref, out_$i251: i1, out_$i252: i64, out_$i253: i64, out_$p254: ref, out_$p255: ref, out_$i256: i64, out_$i257: i64, out_$p258: ref, out_$i259: i32, out_$i260: i64, out_$i261: i64, out_$p262: ref, out_$i263: i32, out_$i264: i32, out_$i265: i1, out_$i267: i64, out_$i268: i64, out_$p269: ref, out_$p270: ref, out_$i271: i64, out_$i272: i64, out_$p273: ref, out_$i274: i32, out_$p275: ref, out_$i276: i64, out_$i277: i64, out_$p278: ref, out_vslice_dummy_var_240: i32);
  modifies $M.0, $M.1, $M.2, $CurrAddr, assertsPassed, $M.3, $M.4, $M.6, $M.11, $M.12, $M.13, $M.10, $M.16;



implementation vmw_ldu_commit_list_loop_$bb38()
{

  entry:
    goto $bb38, exit;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb39_dummy;

  $bb39_dummy:
    call {:si_unique_call 1} vmw_ldu_commit_list_loop_$bb38();
    return;

  exit:
    return;
}



procedure vmw_ldu_commit_list_loop_$bb38();



implementation vmw_ldu_commit_list_loop_$bb26(in_$p0: ref, in_$i162: i64, in_$i163: i32, in_$p164: ref, in_$i165: i64, in_$i166: i64, in_$p167: ref, in_$i168: i64, in_$i169: i1, in_$i170: i32, in_$p171: ref, in_$i172: i1, in_$i173: i1, in_$i174: i32, in_$i175: i64, in_$i176: i64, in_$p177: ref, in_$i178: i32, in_$i179: i64, in_$i180: i64, in_$p181: ref, in_$i182: i32, in_$i183: i64, in_$i184: i64, in_$p185: ref, in_$i186: i32, in_$i187: i64, in_$i188: i64, in_$p189: ref, in_$i190: i32, in_$i191: i32, in_$i192: i64, in_$i193: i64, in_$p194: ref, in_$p195: ref, in_$i196: i64, in_$i197: i64, in_$p198: ref, in_$i199: i32, in_$p200: ref, in_$i201: i64, in_$i202: i64, in_$p203: ref) returns (out_$i163: i32, out_$p164: ref, out_$i165: i64, out_$i166: i64, out_$p167: ref, out_$i168: i64, out_$i169: i1, out_$i170: i32, out_$p171: ref, out_$i172: i1, out_$i173: i1, out_$i174: i32, out_$i175: i64, out_$i176: i64, out_$p177: ref, out_$i178: i32, out_$i179: i64, out_$i180: i64, out_$p181: ref, out_$i182: i32, out_$i183: i64, out_$i184: i64, out_$p185: ref, out_$i186: i32, out_$i187: i64, out_$i188: i64, out_$p189: ref, out_$i190: i32, out_$i191: i32, out_$i192: i64, out_$i193: i64, out_$p194: ref, out_$p195: ref, out_$i196: i64, out_$i197: i64, out_$p198: ref, out_$i199: i32, out_$p200: ref, out_$i201: i64, out_$i202: i64, out_$p203: ref)
{

  entry:
    out_$i163, out_$p164, out_$i165, out_$i166, out_$p167, out_$i168, out_$i169, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$i184, out_$p185, out_$i186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$p194, out_$p195, out_$i196, out_$i197, out_$p198, out_$i199, out_$p200, out_$i201, out_$i202, out_$p203 := in_$i163, in_$p164, in_$i165, in_$i166, in_$p167, in_$i168, in_$i169, in_$i170, in_$p171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$p177, in_$i178, in_$i179, in_$i180, in_$p181, in_$i182, in_$i183, in_$i184, in_$p185, in_$i186, in_$i187, in_$i188, in_$p189, in_$i190, in_$i191, in_$i192, in_$i193, in_$p194, in_$p195, in_$i196, in_$i197, in_$p198, in_$i199, in_$p200, in_$i201, in_$i202, in_$p203;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12778;

  corral_source_split_12830:
    assume {:verifier.code 0} true;
    out_$i163, out_$p164 := out_$i191, out_$p203;
    goto corral_source_split_12830_dummy;

  corral_source_split_12829:
    assume {:verifier.code 0} true;
    goto corral_source_split_12830;

  corral_source_split_12828:
    assume {:verifier.code 0} true;
    out_$p203 := $add.ref(out_$p200, $mul.ref(out_$i202, 1));
    goto corral_source_split_12829;

  corral_source_split_12827:
    assume {:verifier.code 0} true;
    out_$i202 := $sub.i64(0, out_$i201);
    goto corral_source_split_12828;

  corral_source_split_12826:
    assume {:verifier.code 0} true;
    out_$i201 := $zext.i32.i64(out_$i199);
    goto corral_source_split_12827;

  corral_source_split_12825:
    assume {:verifier.code 0} true;
    out_$p200 := $bitcast.ref.ref(out_$p195);
    goto corral_source_split_12826;

  corral_source_split_12824:
    assume {:verifier.code 0} true;
    out_$i199 := $p2i.ref.i32(out_$p198);
    call {:si_unique_call 5935} {:cexpr "__cil_tmp190"} boogie_si_record_i32(out_$i199);
    goto corral_source_split_12825;

  corral_source_split_12823:
    assume {:verifier.code 0} true;
    out_$p198 := $i2p.i64.ref(out_$i197);
    goto corral_source_split_12824;

  corral_source_split_12822:
    assume {:verifier.code 0} true;
    out_$i197 := $add.i64(out_$i196, 2072);
    call {:si_unique_call 5934} {:cexpr "__cil_tmp188"} boogie_si_record_i64(out_$i197);
    goto corral_source_split_12823;

  corral_source_split_12821:
    assume {:verifier.code 0} true;
    out_$i196 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 5933} {:cexpr "__cil_tmp187"} boogie_si_record_i64(out_$i196);
    goto corral_source_split_12822;

  corral_source_split_12820:
    assume {:verifier.code 0} true;
    out_$p195 := $load.ref($M.0, out_$p194);
    goto corral_source_split_12821;

  corral_source_split_12819:
    assume {:verifier.code 0} true;
    out_$p194 := $i2p.i64.ref(out_$i193);
    goto corral_source_split_12820;

  corral_source_split_12818:
    assume {:verifier.code 0} true;
    out_$i193 := $add.i64(out_$i192, 2072);
    call {:si_unique_call 5932} {:cexpr "__cil_tmp184"} boogie_si_record_i64(out_$i193);
    goto corral_source_split_12819;

  corral_source_split_12817:
    assume {:verifier.code 0} true;
    out_$i192 := $p2i.ref.i64(out_$p164);
    call {:si_unique_call 5931} {:cexpr "__cil_tmp183"} boogie_si_record_i64(out_$i192);
    goto corral_source_split_12818;

  corral_source_split_12816:
    assume {:verifier.code 0} true;
    out_$i191 := $add.i32(out_$i163, 1);
    call {:si_unique_call 5930} {:cexpr "i"} boogie_si_record_i32(out_$i191);
    goto corral_source_split_12817;

  corral_source_split_12815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5929} vmw_write(in_$p0, 35, $sub.i32(0, 1));
    goto corral_source_split_12816;

  corral_source_split_12814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5928} vmw_write(in_$p0, 40, out_$i190);
    goto corral_source_split_12815;

  corral_source_split_12813:
    assume {:verifier.code 0} true;
    out_$i190 := $load.i32($M.0, out_$p189);
    call {:si_unique_call 5927} {:cexpr "__cil_tmp181"} boogie_si_record_i32(out_$i190);
    goto corral_source_split_12814;

  corral_source_split_12812:
    assume {:verifier.code 0} true;
    out_$p189 := $i2p.i64.ref(out_$i188);
    goto corral_source_split_12813;

  corral_source_split_12811:
    assume {:verifier.code 0} true;
    out_$i188 := $add.i64(out_$i187, 136);
    call {:si_unique_call 5926} {:cexpr "__cil_tmp180"} boogie_si_record_i64(out_$i188);
    goto corral_source_split_12812;

  corral_source_split_12810:
    assume {:verifier.code 0} true;
    out_$i187 := $p2i.ref.i64(out_$p171);
    call {:si_unique_call 5925} {:cexpr "__cil_tmp179"} boogie_si_record_i64(out_$i187);
    goto corral_source_split_12811;

  corral_source_split_12809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5924} vmw_write(in_$p0, 39, out_$i186);
    goto corral_source_split_12810;

  corral_source_split_12808:
    assume {:verifier.code 0} true;
    out_$i186 := $load.i32($M.0, out_$p185);
    call {:si_unique_call 5923} {:cexpr "__cil_tmp176"} boogie_si_record_i32(out_$i186);
    goto corral_source_split_12809;

  corral_source_split_12807:
    assume {:verifier.code 0} true;
    out_$p185 := $i2p.i64.ref(out_$i184);
    goto corral_source_split_12808;

  corral_source_split_12806:
    assume {:verifier.code 0} true;
    out_$i184 := $add.i64(out_$i183, 116);
    call {:si_unique_call 5922} {:cexpr "__cil_tmp175"} boogie_si_record_i64(out_$i184);
    goto corral_source_split_12807;

  corral_source_split_12805:
    assume {:verifier.code 0} true;
    out_$i183 := $p2i.ref.i64(out_$p171);
    call {:si_unique_call 5921} {:cexpr "__cil_tmp174"} boogie_si_record_i64(out_$i183);
    goto corral_source_split_12806;

  corral_source_split_12804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5920} vmw_write(in_$p0, 38, out_$i182);
    goto corral_source_split_12805;

  corral_source_split_12803:
    assume {:verifier.code 0} true;
    out_$i182 := $load.i32($M.0, out_$p181);
    call {:si_unique_call 5919} {:cexpr "__cil_tmp171"} boogie_si_record_i32(out_$i182);
    goto corral_source_split_12804;

  corral_source_split_12802:
    assume {:verifier.code 0} true;
    out_$p181 := $i2p.i64.ref(out_$i180);
    goto corral_source_split_12803;

  corral_source_split_12801:
    assume {:verifier.code 0} true;
    out_$i180 := $add.i64(out_$i179, 484);
    call {:si_unique_call 5918} {:cexpr "__cil_tmp170"} boogie_si_record_i64(out_$i180);
    goto corral_source_split_12802;

  corral_source_split_12800:
    assume {:verifier.code 0} true;
    out_$i179 := $p2i.ref.i64(out_$p171);
    call {:si_unique_call 5917} {:cexpr "__cil_tmp169"} boogie_si_record_i64(out_$i179);
    goto corral_source_split_12801;

  corral_source_split_12799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5916} vmw_write(in_$p0, 37, out_$i178);
    goto corral_source_split_12800;

  corral_source_split_12798:
    assume {:verifier.code 0} true;
    out_$i178 := $load.i32($M.0, out_$p177);
    call {:si_unique_call 5915} {:cexpr "__cil_tmp167"} boogie_si_record_i32(out_$i178);
    goto corral_source_split_12799;

  corral_source_split_12797:
    assume {:verifier.code 0} true;
    out_$p177 := $i2p.i64.ref(out_$i176);
    goto corral_source_split_12798;

  corral_source_split_12796:
    assume {:verifier.code 0} true;
    out_$i176 := $add.i64(out_$i175, 480);
    call {:si_unique_call 5914} {:cexpr "__cil_tmp166"} boogie_si_record_i64(out_$i176);
    goto corral_source_split_12797;

  corral_source_split_12795:
    assume {:verifier.code 0} true;
    out_$i175 := $p2i.ref.i64(out_$p171);
    call {:si_unique_call 5913} {:cexpr "__cil_tmp165"} boogie_si_record_i64(out_$i175);
    goto corral_source_split_12796;

  corral_source_split_12794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5912} vmw_write(in_$p0, 36, out_$i174);
    goto corral_source_split_12795;

  corral_source_split_12793:
    assume {:verifier.code 0} true;
    out_$i174 := $zext.i1.i32(out_$i173);
    call {:si_unique_call 5911} {:cexpr "__cil_tmp163"} boogie_si_record_i32(out_$i174);
    goto corral_source_split_12794;

  corral_source_split_12792:
    assume {:verifier.code 0} true;
    out_$i173 := $xor.i1(out_$i172, 1);
    goto corral_source_split_12793;

  corral_source_split_12791:
    assume {:verifier.code 0} true;
    out_$i172 := $ne.i32(out_$i163, 0);
    goto corral_source_split_12792;

  corral_source_split_12790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5910} vmw_write(in_$p0, 35, out_$i163);
    goto corral_source_split_12791;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p171 := $bitcast.ref.ref(out_$p164);
    goto corral_source_split_12790;

  corral_source_split_12786:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i169 == 1;
    goto corral_source_split_12786;

  corral_source_split_12784:
    assume {:verifier.code 0} true;
    out_$i170 := out_$i163;
    assume true;
    goto $bb28;

  corral_source_split_12783:
    assume {:verifier.code 0} true;
    out_$i169 := $ne.i64(out_$i168, in_$i162);
    goto corral_source_split_12784;

  corral_source_split_12782:
    assume {:verifier.code 0} true;
    out_$i168 := $p2i.ref.i64(out_$p167);
    call {:si_unique_call 5909} {:cexpr "__cil_tmp161"} boogie_si_record_i64(out_$i168);
    goto corral_source_split_12783;

  corral_source_split_12781:
    assume {:verifier.code 0} true;
    out_$p167 := $i2p.i64.ref(out_$i166);
    goto corral_source_split_12782;

  corral_source_split_12780:
    assume {:verifier.code 0} true;
    out_$i166 := $add.i64(out_$i165, 2072);
    call {:si_unique_call 5908} {:cexpr "__cil_tmp159"} boogie_si_record_i64(out_$i166);
    goto corral_source_split_12781;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i165 := $p2i.ref.i64(out_$p164);
    call {:si_unique_call 5907} {:cexpr "__cil_tmp158"} boogie_si_record_i64(out_$i165);
    goto corral_source_split_12780;

  corral_source_split_12778:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_12830_dummy:
    call {:si_unique_call 1} out_$i163, out_$p164, out_$i165, out_$i166, out_$p167, out_$i168, out_$i169, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$i184, out_$p185, out_$i186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$p194, out_$p195, out_$i196, out_$i197, out_$p198, out_$i199, out_$p200, out_$i201, out_$i202, out_$p203 := vmw_ldu_commit_list_loop_$bb26(in_$p0, in_$i162, out_$i163, out_$p164, out_$i165, out_$i166, out_$p167, out_$i168, out_$i169, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$i184, out_$p185, out_$i186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$p194, out_$p195, out_$i196, out_$i197, out_$p198, out_$i199, out_$p200, out_$i201, out_$i202, out_$p203);
    return;

  exit:
    return;
}



procedure vmw_ldu_commit_list_loop_$bb26(in_$p0: ref, in_$i162: i64, in_$i163: i32, in_$p164: ref, in_$i165: i64, in_$i166: i64, in_$p167: ref, in_$i168: i64, in_$i169: i1, in_$i170: i32, in_$p171: ref, in_$i172: i1, in_$i173: i1, in_$i174: i32, in_$i175: i64, in_$i176: i64, in_$p177: ref, in_$i178: i32, in_$i179: i64, in_$i180: i64, in_$p181: ref, in_$i182: i32, in_$i183: i64, in_$i184: i64, in_$p185: ref, in_$i186: i32, in_$i187: i64, in_$i188: i64, in_$p189: ref, in_$i190: i32, in_$i191: i32, in_$i192: i64, in_$i193: i64, in_$p194: ref, in_$p195: ref, in_$i196: i64, in_$i197: i64, in_$p198: ref, in_$i199: i32, in_$p200: ref, in_$i201: i64, in_$i202: i64, in_$p203: ref) returns (out_$i163: i32, out_$p164: ref, out_$i165: i64, out_$i166: i64, out_$p167: ref, out_$i168: i64, out_$i169: i1, out_$i170: i32, out_$p171: ref, out_$i172: i1, out_$i173: i1, out_$i174: i32, out_$i175: i64, out_$i176: i64, out_$p177: ref, out_$i178: i32, out_$i179: i64, out_$i180: i64, out_$p181: ref, out_$i182: i32, out_$i183: i64, out_$i184: i64, out_$p185: ref, out_$i186: i32, out_$i187: i64, out_$i188: i64, out_$p189: ref, out_$i190: i32, out_$i191: i32, out_$i192: i64, out_$i193: i64, out_$p194: ref, out_$p195: ref, out_$i196: i64, out_$i197: i64, out_$p198: ref, out_$i199: i32, out_$p200: ref, out_$i201: i64, out_$i202: i64, out_$p203: ref);



implementation vmw_ldu_add_active_loop_$bb35(in_$p1: ref, in_$p6: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i64, in_$i91: i64, in_$p92: ref, in_$i93: i64, in_$i94: i1, in_$p95: ref, in_$i97: i64, in_$i98: i64, in_$p99: ref, in_$i100: i32, in_$i101: i64, in_$i102: i64, in_$p103: ref, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i64, in_$i108: i64, in_$p109: ref, in_$i110: i64, in_$i111: i64, in_$p112: ref, in_$p113: ref, in_$i114: i64, in_$i115: i64, in_$p116: ref, in_$i117: i32, in_$p118: ref, in_$i119: i64, in_$i120: i64, in_$p121: ref) returns (out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i64, out_$i91: i64, out_$p92: ref, out_$i93: i64, out_$i94: i1, out_$p95: ref, out_$i97: i64, out_$i98: i64, out_$p99: ref, out_$i100: i32, out_$i101: i64, out_$i102: i64, out_$p103: ref, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i64, out_$i108: i64, out_$p109: ref, out_$i110: i64, out_$i111: i64, out_$p112: ref, out_$p113: ref, out_$i114: i64, out_$i115: i64, out_$p116: ref, out_$i117: i32, out_$p118: ref, out_$i119: i64, out_$i120: i64, out_$p121: ref)
{

  entry:
    out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$p118, out_$i119, out_$i120, out_$p121 := in_$p86, in_$p87, in_$p88, in_$i89, in_$i90, in_$i91, in_$p92, in_$i93, in_$i94, in_$p95, in_$i97, in_$i98, in_$p99, in_$i100, in_$i101, in_$i102, in_$p103, in_$i104, in_$i105, in_$p106, in_$i107, in_$i108, in_$p109, in_$i110, in_$i111, in_$p112, in_$p113, in_$i114, in_$i115, in_$p116, in_$i117, in_$p118, in_$i119, in_$i120, in_$p121;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_13095;

  corral_source_split_13151:
    assume {:verifier.code 0} true;
    out_$p86, out_$p87 := out_$p121, out_$p109;
    goto corral_source_split_13151_dummy;

  corral_source_split_13150:
    assume {:verifier.code 0} true;
    goto corral_source_split_13151;

  corral_source_split_13149:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref(out_$p118, $mul.ref(out_$i120, 1));
    goto corral_source_split_13150;

  corral_source_split_13148:
    assume {:verifier.code 0} true;
    out_$i120 := $sub.i64(0, out_$i119);
    goto corral_source_split_13149;

  corral_source_split_13147:
    assume {:verifier.code 0} true;
    out_$i119 := $zext.i32.i64(out_$i117);
    goto corral_source_split_13148;

  corral_source_split_13146:
    assume {:verifier.code 0} true;
    out_$p118 := $bitcast.ref.ref(out_$p113);
    goto corral_source_split_13147;

  corral_source_split_13145:
    assume {:verifier.code 0} true;
    out_$i117 := $p2i.ref.i32(out_$p116);
    call {:si_unique_call 6068} {:cexpr "__cil_tmp83"} boogie_si_record_i32(out_$i117);
    goto corral_source_split_13146;

  corral_source_split_13144:
    assume {:verifier.code 0} true;
    out_$p116 := $i2p.i64.ref(out_$i115);
    goto corral_source_split_13145;

  corral_source_split_13143:
    assume {:verifier.code 0} true;
    out_$i115 := $add.i64(out_$i114, 2072);
    call {:si_unique_call 6067} {:cexpr "__cil_tmp81"} boogie_si_record_i64(out_$i115);
    goto corral_source_split_13144;

  corral_source_split_13142:
    assume {:verifier.code 0} true;
    out_$i114 := $p2i.ref.i64($0.ref);
    call {:si_unique_call 6066} {:cexpr "__cil_tmp80"} boogie_si_record_i64(out_$i114);
    goto corral_source_split_13143;

  corral_source_split_13141:
    assume {:verifier.code 0} true;
    out_$p113 := $load.ref($M.0, out_$p112);
    goto corral_source_split_13142;

  corral_source_split_13140:
    assume {:verifier.code 0} true;
    out_$p112 := $i2p.i64.ref(out_$i111);
    goto corral_source_split_13141;

  corral_source_split_13139:
    assume {:verifier.code 0} true;
    out_$i111 := $add.i64(out_$i110, 2072);
    call {:si_unique_call 6065} {:cexpr "__cil_tmp77"} boogie_si_record_i64(out_$i111);
    goto corral_source_split_13140;

  corral_source_split_13138:
    assume {:verifier.code 0} true;
    out_$i110 := $p2i.ref.i64(out_$p86);
    call {:si_unique_call 6064} {:cexpr "__cil_tmp76"} boogie_si_record_i64(out_$i110);
    goto corral_source_split_13139;

  corral_source_split_13137:
    assume {:verifier.code 0} true;
    out_$p109 := $i2p.i64.ref(out_$i108);
    goto corral_source_split_13138;

  corral_source_split_13136:
    assume {:verifier.code 0} true;
    out_$i108 := $add.i64(out_$i107, 2072);
    call {:si_unique_call 6063} {:cexpr "__cil_tmp75"} boogie_si_record_i64(out_$i108);
    goto corral_source_split_13137;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i107 := $p2i.ref.i64(out_$p86);
    call {:si_unique_call 6062} {:cexpr "__cil_tmp74"} boogie_si_record_i64(out_$i107);
    goto corral_source_split_13136;

  $bb42:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_13117:
    assume {:verifier.code 0} true;
    out_$p106 := out_$p87;
    assume true;
    goto $bb42;

  corral_source_split_13116:
    assume {:verifier.code 0} true;
    out_$i105 := $ugt.i32(out_$i104, out_$i100);
    goto corral_source_split_13117;

  corral_source_split_13115:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i32($M.0, out_$p103);
    call {:si_unique_call 6053} {:cexpr "__cil_tmp73"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_13116;

  corral_source_split_13114:
    assume {:verifier.code 0} true;
    out_$p103 := $i2p.i64.ref(out_$i102);
    goto corral_source_split_13115;

  corral_source_split_13113:
    assume {:verifier.code 0} true;
    out_$i102 := $add.i64(out_$i101, 2032);
    call {:si_unique_call 6052} {:cexpr "__cil_tmp72"} boogie_si_record_i64(out_$i102);
    goto corral_source_split_13114;

  corral_source_split_13112:
    assume {:verifier.code 0} true;
    out_$i101 := $p2i.ref.i64(out_$p86);
    call {:si_unique_call 6051} {:cexpr "__cil_tmp71"} boogie_si_record_i64(out_$i101);
    goto corral_source_split_13113;

  corral_source_split_13111:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i32($M.0, out_$p99);
    call {:si_unique_call 6050} {:cexpr "__cil_tmp69"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_13112;

  corral_source_split_13110:
    assume {:verifier.code 0} true;
    out_$p99 := $i2p.i64.ref(out_$i98);
    goto corral_source_split_13111;

  corral_source_split_13109:
    assume {:verifier.code 0} true;
    out_$i98 := $add.i64(out_$i97, 2032);
    call {:si_unique_call 6049} {:cexpr "__cil_tmp68"} boogie_si_record_i64(out_$i98);
    goto corral_source_split_13110;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i97 := $p2i.ref.i64(in_$p1);
    call {:si_unique_call 6048} {:cexpr "__cil_tmp67"} boogie_si_record_i64(out_$i97);
    goto corral_source_split_13109;

  corral_source_split_13105:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume out_$i94 == 1;
    goto corral_source_split_13105;

  corral_source_split_13103:
    assume {:verifier.code 0} true;
    out_$p95 := out_$p87;
    assume true;
    goto $bb37;

  corral_source_split_13102:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i64(out_$i93, out_$i89);
    goto corral_source_split_13103;

  corral_source_split_13101:
    assume {:verifier.code 0} true;
    out_$i93 := $p2i.ref.i64(out_$p92);
    call {:si_unique_call 6047} {:cexpr "__cil_tmp65"} boogie_si_record_i64(out_$i93);
    goto corral_source_split_13102;

  corral_source_split_13100:
    assume {:verifier.code 0} true;
    out_$p92 := $i2p.i64.ref(out_$i91);
    goto corral_source_split_13101;

  corral_source_split_13099:
    assume {:verifier.code 0} true;
    out_$i91 := $add.i64(out_$i90, 2072);
    call {:si_unique_call 6046} {:cexpr "__cil_tmp63"} boogie_si_record_i64(out_$i91);
    goto corral_source_split_13100;

  corral_source_split_13098:
    assume {:verifier.code 0} true;
    out_$i90 := $p2i.ref.i64(out_$p86);
    call {:si_unique_call 6045} {:cexpr "__cil_tmp62"} boogie_si_record_i64(out_$i90);
    goto corral_source_split_13099;

  corral_source_split_13097:
    assume {:verifier.code 0} true;
    out_$i89 := $p2i.ref.i64(out_$p88);
    call {:si_unique_call 6044} {:cexpr "__cil_tmp61"} boogie_si_record_i64(out_$i89);
    goto corral_source_split_13098;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p88 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_13097;

  corral_source_split_13095:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_13151_dummy:
    call {:si_unique_call 1} out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$p118, out_$i119, out_$i120, out_$p121 := vmw_ldu_add_active_loop_$bb35(in_$p1, in_$p6, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$p118, out_$i119, out_$i120, out_$p121);
    return;

  exit:
    return;
}



procedure vmw_ldu_add_active_loop_$bb35(in_$p1: ref, in_$p6: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i64, in_$i91: i64, in_$p92: ref, in_$i93: i64, in_$i94: i1, in_$p95: ref, in_$i97: i64, in_$i98: i64, in_$p99: ref, in_$i100: i32, in_$i101: i64, in_$i102: i64, in_$p103: ref, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i64, in_$i108: i64, in_$p109: ref, in_$i110: i64, in_$i111: i64, in_$p112: ref, in_$p113: ref, in_$i114: i64, in_$i115: i64, in_$p116: ref, in_$i117: i32, in_$p118: ref, in_$i119: i64, in_$i120: i64, in_$p121: ref) returns (out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i64, out_$i91: i64, out_$p92: ref, out_$i93: i64, out_$i94: i1, out_$p95: ref, out_$i97: i64, out_$i98: i64, out_$p99: ref, out_$i100: i32, out_$i101: i64, out_$i102: i64, out_$p103: ref, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i64, out_$i108: i64, out_$p109: ref, out_$i110: i64, out_$i111: i64, out_$p112: ref, out_$p113: ref, out_$i114: i64, out_$i115: i64, out_$p116: ref, out_$i117: i32, out_$p118: ref, out_$i119: i64, out_$i120: i64, out_$p121: ref);



implementation vmw_ldu_add_active_loop_$bb13()
{

  entry:
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb14_dummy:
    call {:si_unique_call 1} vmw_ldu_add_active_loop_$bb13();
    return;

  exit:
    return;
}



procedure vmw_ldu_add_active_loop_$bb13();



implementation vmw_sou_fifo_create_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb8_dummy;

  $bb8_dummy:
    call {:si_unique_call 1} vmw_sou_fifo_create_loop_$bb7();
    return;

  exit:
    return;
}



procedure vmw_sou_fifo_create_loop_$bb7();



implementation vmw_sou_add_active_loop_$bb13()
{

  entry:
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb14_dummy:
    call {:si_unique_call 1} vmw_sou_add_active_loop_$bb13();
    return;

  exit:
    return;
}



procedure vmw_sou_add_active_loop_$bb13();



implementation main_loop_$bb5(in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$i5: i1, in_$i6: i1, in_$i7: i32, in_$i8: i1, in_$i9: i1, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i37: i1, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i47: i1, in_$i49: i1, in_$i50: i1, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$i32: i32, in_$i33: i32, in_vslice_dummy_var_258: i32, in_vslice_dummy_var_259: i32, in_vslice_dummy_var_260: i32, in_vslice_dummy_var_261: i64, in_vslice_dummy_var_262: i32, in_vslice_dummy_var_263: i32, in_vslice_dummy_var_264: i32, in_vslice_dummy_var_265: i32, in_vslice_dummy_var_266: i32) returns (out_$i2: i32, out_$i3: i32, out_$i4: i32, out_$i5: i1, out_$i6: i1, out_$i7: i32, out_$i8: i1, out_$i9: i1, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i37: i1, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i47: i1, out_$i49: i1, out_$i50: i1, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$i32: i32, out_$i33: i32, out_vslice_dummy_var_258: i32, out_vslice_dummy_var_259: i32, out_vslice_dummy_var_260: i32, out_vslice_dummy_var_261: i64, out_vslice_dummy_var_262: i32, out_vslice_dummy_var_263: i32, out_vslice_dummy_var_264: i32, out_vslice_dummy_var_265: i32, out_vslice_dummy_var_266: i32)
{

  entry:
    out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i32, out_$i33, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263, out_vslice_dummy_var_264, out_vslice_dummy_var_265, out_vslice_dummy_var_266 := in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i47, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i32, in_$i33, in_vslice_dummy_var_258, in_vslice_dummy_var_259, in_vslice_dummy_var_260, in_vslice_dummy_var_261, in_vslice_dummy_var_262, in_vslice_dummy_var_263, in_vslice_dummy_var_264, in_vslice_dummy_var_265, in_vslice_dummy_var_266;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14163;

  $bb107:
    assume {:verifier.code 0} true;
    out_$i2, out_$i3 := out_$i32, out_$i33;
    goto $bb107_dummy;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb75:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb71:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i2, out_$i3;
    goto $bb75;

  corral_source_split_14314:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i2, out_$i3;
    goto $bb75;

  corral_source_split_14340:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i2, out_$i55;
    goto $bb75;

  corral_source_split_14301:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i2, out_$i3;
    goto $bb75;

  corral_source_split_14294:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i2, out_$i3;
    goto $bb75;

  corral_source_split_14287:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i2, out_$i3;
    goto $bb75;

  corral_source_split_14279:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i2, out_$i3;
    goto $bb75;

  corral_source_split_14271:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i2, out_$i3;
    goto $bb75;

  corral_source_split_14264:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i2, out_$i3;
    goto $bb75;

  corral_source_split_14257:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i2, out_$i3;
    goto $bb75;

  corral_source_split_14250:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i2, out_$i3;
    goto $bb75;

  corral_source_split_14243:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i2, out_$i3;
    goto $bb75;

  corral_source_split_14236:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i2, out_$i3;
    goto $bb75;

  corral_source_split_14328:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i42, out_$i3;
    goto $bb75;

  corral_source_split_14222:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i2, out_$i3;
    goto $bb75;

  corral_source_split_14215:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i2, out_$i3;
    goto $bb75;

  corral_source_split_14208:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i2, out_$i3;
    goto $bb75;

  corral_source_split_14201:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i2, out_$i3;
    goto $bb75;

  corral_source_split_14194:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i2, out_$i3;
    goto $bb75;

  SeqInstr_834:
    goto corral_source_split_14194;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6529} out_vslice_dummy_var_258 := vmw_pm_prepare($u5);
    goto SeqInstr_833;

  corral_source_split_14189:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume out_$i13 == 1;
    goto corral_source_split_14189;

  corral_source_split_14176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_14175:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, 0);
    goto corral_source_split_14176;

  $bb9:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6525} out_$i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 6526} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i12);
    call {:si_unique_call 6527} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_14175;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_14168:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume out_$i5 == 1;
    goto corral_source_split_14168;

  corral_source_split_14166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_14165:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_14166;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 6521} out_$i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 6522} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i4);
    call {:si_unique_call 6523} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_14165;

  corral_source_split_14163:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_14183:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_14187:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    assume !(out_$i11 == 1);
    goto corral_source_split_14187;

  corral_source_split_14181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_14180:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_14181;

  corral_source_split_14179:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i1.i32(out_$i9);
    call {:si_unique_call 6528} {:cexpr "__cil_tmp19"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_14180;

  corral_source_split_14178:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i3, 0);
    goto corral_source_split_14179;

  $bb10:
    assume out_$i8 == 1;
    goto corral_source_split_14178;

  corral_source_split_14173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_14172:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_14173;

  corral_source_split_14171:
    assume {:verifier.code 0} true;
    out_$i7 := $zext.i1.i32(out_$i6);
    call {:si_unique_call 6524} {:cexpr "__cil_tmp18"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_14172;

  corral_source_split_14170:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i2, 0);
    goto corral_source_split_14171;

  $bb8:
    assume !(out_$i5 == 1);
    goto corral_source_split_14170;

  $bb11:
    assume !(out_$i8 == 1);
    goto corral_source_split_14183;

  SeqInstr_837:
    goto corral_source_split_14201;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6530} vmw_pm_complete($u5);
    goto SeqInstr_836;

  corral_source_split_14196:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i14 == 1;
    goto corral_source_split_14196;

  corral_source_split_14192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_14191:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i12, 1);
    goto corral_source_split_14192;

  $bb18:
    assume !(out_$i13 == 1);
    goto corral_source_split_14191;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6531} out_vslice_dummy_var_259 := vmw_pm_suspend($u5);
    goto corral_source_split_14208;

  corral_source_split_14203:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i15 == 1;
    goto corral_source_split_14203;

  corral_source_split_14199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_14198:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i12, 2);
    goto corral_source_split_14199;

  $bb21:
    assume !(out_$i14 == 1);
    goto corral_source_split_14198;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6532} out_vslice_dummy_var_260 := vmw_pm_resume($u5);
    goto corral_source_split_14215;

  corral_source_split_14210:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume out_$i16 == 1;
    goto corral_source_split_14210;

  corral_source_split_14206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_14205:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i12, 3);
    goto corral_source_split_14206;

  $bb24:
    assume !(out_$i15 == 1);
    goto corral_source_split_14205;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6533} out_vslice_dummy_var_261 := vmw_unlocked_ioctl($u6, $u2, $u3);
    goto corral_source_split_14222;

  corral_source_split_14217:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb29:
    assume out_$i17 == 1;
    goto corral_source_split_14217;

  corral_source_split_14213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_14212:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i12, 4);
    goto corral_source_split_14213;

  $bb27:
    assume !(out_$i16 == 1);
    goto corral_source_split_14212;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_14328;

  $bb77:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    out_$i42 := out_$i2;
    goto $bb82;

  $bb81:
    assume {:verifier.code 0} true;
    out_$i42 := 0;
    goto $bb82;

  $bb79:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_14322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79;

  corral_source_split_14321:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_14322;

  corral_source_split_14320:
    assume {:verifier.code 0} true;
    out_$i40 := $M.36;
    goto corral_source_split_14321;

  corral_source_split_14319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6547} ldv_check_return_value(out_$i39);
    goto corral_source_split_14320;

  corral_source_split_14318:
    assume {:verifier.code 0} true;
    out_$i39 := $M.36;
    goto corral_source_split_14319;

  corral_source_split_14317:
    assume {:verifier.code 0} true;
    $M.36 := out_$i38;
    call {:si_unique_call 6546} {:cexpr "res_vmw_driver_open_12"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_14318;

  corral_source_split_14316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6545} out_$i38 := vmw_driver_open($u7, $u8);
    goto corral_source_split_14317;

  $bb76:
    assume out_$i37 == 1;
    goto corral_source_split_14316;

  corral_source_split_14229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i2, 0);
    goto corral_source_split_14229;

  corral_source_split_14224:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i18 == 1;
    goto corral_source_split_14224;

  corral_source_split_14220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_14219:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i12, 5);
    goto corral_source_split_14220;

  $bb30:
    assume !(out_$i17 == 1);
    goto corral_source_split_14219;

  SeqInstr_840:
    goto corral_source_split_14236;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6534} out_vslice_dummy_var_262 := vmw_driver_load($u7, $u3);
    goto SeqInstr_839;

  corral_source_split_14231:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i19 == 1;
    goto corral_source_split_14231;

  corral_source_split_14227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_14226:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i12, 6);
    goto corral_source_split_14227;

  $bb33:
    assume !(out_$i18 == 1);
    goto corral_source_split_14226;

  SeqInstr_843:
    goto corral_source_split_14243;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6535} out_vslice_dummy_var_263 := vmw_driver_unload($u7);
    goto SeqInstr_842;

  corral_source_split_14238:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb38:
    assume out_$i20 == 1;
    goto corral_source_split_14238;

  corral_source_split_14234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_14233:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i12, 7);
    goto corral_source_split_14234;

  $bb36:
    assume !(out_$i19 == 1);
    goto corral_source_split_14233;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6536} out_vslice_dummy_var_264 := vmw_firstopen($u7);
    goto corral_source_split_14250;

  corral_source_split_14245:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb41:
    assume out_$i21 == 1;
    goto corral_source_split_14245;

  corral_source_split_14241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_14240:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i12, 8);
    goto corral_source_split_14241;

  $bb39:
    assume !(out_$i20 == 1);
    goto corral_source_split_14240;

  SeqInstr_846:
    goto corral_source_split_14257;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6537} vmw_lastclose($u7);
    goto SeqInstr_845;

  corral_source_split_14252:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume out_$i22 == 1;
    goto corral_source_split_14252;

  corral_source_split_14248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_14247:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i12, 9);
    goto corral_source_split_14248;

  $bb42:
    assume !(out_$i21 == 1);
    goto corral_source_split_14247;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6538} out_vslice_dummy_var_265 := vmw_master_create($u7, $u9);
    goto corral_source_split_14264;

  corral_source_split_14259:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume out_$i23 == 1;
    goto corral_source_split_14259;

  corral_source_split_14255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_14254:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i12, 10);
    goto corral_source_split_14255;

  $bb45:
    assume !(out_$i22 == 1);
    goto corral_source_split_14254;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6539} vmw_master_destroy($u7, $u9);
    goto corral_source_split_14271;

  corral_source_split_14266:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb50:
    assume out_$i24 == 1;
    goto corral_source_split_14266;

  corral_source_split_14262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_14261:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i12, 11);
    goto corral_source_split_14262;

  $bb48:
    assume !(out_$i23 == 1);
    goto corral_source_split_14261;

  SeqInstr_849:
    goto corral_source_split_14279;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  corral_source_split_14278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6540} out_vslice_dummy_var_266 := vmw_master_set($u7, $u8, out_$i47);
    goto SeqInstr_848;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i47 := $trunc.i8.i1($u10);
    goto corral_source_split_14278;

  corral_source_split_14273:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb53:
    assume out_$i25 == 1;
    goto corral_source_split_14273;

  corral_source_split_14269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_14268:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i12, 12);
    goto corral_source_split_14269;

  $bb51:
    assume !(out_$i24 == 1);
    goto corral_source_split_14268;

  SeqInstr_852:
    goto corral_source_split_14287;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  corral_source_split_14286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6541} vmw_master_drop($u7, $u8, out_$i49);
    goto SeqInstr_851;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i49 := $trunc.i8.i1($u10);
    goto corral_source_split_14286;

  corral_source_split_14281:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb56:
    assume out_$i26 == 1;
    goto corral_source_split_14281;

  corral_source_split_14276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_14275:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i12, 13);
    goto corral_source_split_14276;

  $bb54:
    assume !(out_$i25 == 1);
    goto corral_source_split_14275;

  SeqInstr_855:
    goto corral_source_split_14294;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6542} vmw_preclose($u7, $u8);
    goto SeqInstr_854;

  corral_source_split_14289:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume out_$i27 == 1;
    goto corral_source_split_14289;

  corral_source_split_14284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_14283:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i12, 14);
    goto corral_source_split_14284;

  $bb57:
    assume !(out_$i26 == 1);
    goto corral_source_split_14283;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6543} vmw_postclose($u7, $u8);
    goto corral_source_split_14301;

  corral_source_split_14296:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb62:
    assume out_$i28 == 1;
    goto corral_source_split_14296;

  corral_source_split_14292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_14291:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i12, 15);
    goto corral_source_split_14292;

  $bb60:
    assume !(out_$i27 == 1);
    goto corral_source_split_14291;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_14340;

  $bb84:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := out_$i3;
    goto $bb88;

  $bb87:
    assume {:verifier.code 0} true;
    out_$i55 := 0;
    goto $bb88;

  $bb86:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_14336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86;

  corral_source_split_14335:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i53, 0);
    goto corral_source_split_14336;

  corral_source_split_14334:
    assume {:verifier.code 0} true;
    out_$i53 := $M.37;
    goto corral_source_split_14335;

  corral_source_split_14333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6551} ldv_check_return_value(out_$i52);
    goto corral_source_split_14334;

  corral_source_split_14332:
    assume {:verifier.code 0} true;
    out_$i52 := $M.37;
    goto corral_source_split_14333;

  corral_source_split_14331:
    assume {:verifier.code 0} true;
    $M.37 := out_$i51;
    call {:si_unique_call 6550} {:cexpr "res_vmw_probe_29"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_14332;

  corral_source_split_14330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6549} out_$i51 := vmw_probe($u11, $u12);
    goto corral_source_split_14331;

  $bb83:
    assume out_$i50 == 1;
    goto corral_source_split_14330;

  corral_source_split_14308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb67:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i3, 0);
    goto corral_source_split_14308;

  corral_source_split_14303:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb65:
    assume out_$i29 == 1;
    goto corral_source_split_14303;

  corral_source_split_14299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_14298:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i12, 16);
    goto corral_source_split_14299;

  $bb63:
    assume !(out_$i28 == 1);
    goto corral_source_split_14298;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6544} vmw_remove($u11);
    goto corral_source_split_14314;

  corral_source_split_14310:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb68:
    assume out_$i30 == 1;
    goto corral_source_split_14310;

  corral_source_split_14306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_14305:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i12, 17);
    goto corral_source_split_14306;

  $bb66:
    assume !(out_$i29 == 1);
    goto corral_source_split_14305;

  corral_source_split_14312:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb69:
    assume !(out_$i30 == 1);
    goto corral_source_split_14312;

  $bb107_dummy:
    call {:si_unique_call 1} out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i32, out_$i33, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263, out_vslice_dummy_var_264, out_vslice_dummy_var_265, out_vslice_dummy_var_266 := main_loop_$bb5(out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i32, out_$i33, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263, out_vslice_dummy_var_264, out_vslice_dummy_var_265, out_vslice_dummy_var_266);
    return;

  exit:
    return;
}



procedure main_loop_$bb5(in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$i5: i1, in_$i6: i1, in_$i7: i32, in_$i8: i1, in_$i9: i1, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i37: i1, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i47: i1, in_$i49: i1, in_$i50: i1, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$i32: i32, in_$i33: i32, in_vslice_dummy_var_258: i32, in_vslice_dummy_var_259: i32, in_vslice_dummy_var_260: i32, in_vslice_dummy_var_261: i64, in_vslice_dummy_var_262: i32, in_vslice_dummy_var_263: i32, in_vslice_dummy_var_264: i32, in_vslice_dummy_var_265: i32, in_vslice_dummy_var_266: i32) returns (out_$i2: i32, out_$i3: i32, out_$i4: i32, out_$i5: i1, out_$i6: i1, out_$i7: i32, out_$i8: i1, out_$i9: i1, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i37: i1, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i47: i1, out_$i49: i1, out_$i50: i1, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$i32: i32, out_$i33: i32, out_vslice_dummy_var_258: i32, out_vslice_dummy_var_259: i32, out_vslice_dummy_var_260: i32, out_vslice_dummy_var_261: i64, out_vslice_dummy_var_262: i32, out_vslice_dummy_var_263: i32, out_vslice_dummy_var_264: i32, out_vslice_dummy_var_265: i32, out_vslice_dummy_var_266: i32);
  modifies $M.0, $M.1, assertsPassed, $M.2, $M.6, $M.11, $M.12, $CurrAddr, $M.3, $M.4, $M.10, $M.13, $M.16, $M.36, $M.37;


