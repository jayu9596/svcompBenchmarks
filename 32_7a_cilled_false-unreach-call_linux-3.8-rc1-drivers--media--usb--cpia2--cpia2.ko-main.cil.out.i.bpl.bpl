var $M.0: [ref]ref;

var $M.1: [ref]i32;

var $M.2: [ref]i32;

var $M.3: [ref]i32;

var $M.4: [ref]i8;

var $M.5: [ref]i32;

var $M.6: [ref]i32;

var $M.7: [ref]i8;

var $M.8: i32;

var $M.9: [ref]i8;

var $M.10: [ref]i8;

var $M.11: [ref]ref;

var $M.12: [ref]ref;

var $M.13: [ref]i64;

var $M.14: [ref]i32;

var $M.15: [ref]i64;

var $M.16: [ref]i64;

var $M.17: [ref]i8;

var $M.18: [ref]i32;

var $M.19: [ref]ref;

var $M.20: [ref]ref;

var $M.21: [ref]ref;

var $M.22: [ref]ref;

var $M.23: [ref]i32;

var $M.24: [ref]i32;

var $M.25: [ref]i8;

var $M.26: [ref]i32;

var $M.27: [ref]ref;

var $M.28: [ref]i32;

var $M.29: [ref]ref;

var $M.30: [ref]i32;

var $M.31: [ref]i32;

var $M.32: [ref]i32;

var $M.33: [ref]i32;

var $M.34: [ref]i32;

var $M.35: [ref]i32;

var $M.36: [ref]i32;

var $M.37: [ref]ref;

var $M.38: [ref]ref;

var $M.39: [ref]i8;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.52: ref;

var $M.53: i32;

var $M.54: ref;

var $M.55: ref;

var $M.56: i64;

var $M.57: ref;

var $M.58: ref;

var $M.59: i32;

var $M.60: i64;

var $M.61: i32;

var $M.62: ref;

var $M.63: ref;

var $M.64: ref;

var $M.65: ref;

var $M.66: ref;

var $M.67: ref;

var $M.68: ref;

var $M.69: ref;

var $M.70: ref;

var $M.71: ref;

var $M.72: ref;

var $M.73: ref;

var $M.74: ref;

var $M.75: i32;

var $M.76: ref;

var $M.77: ref;

var $M.78: ref;

var $M.79: ref;

var $M.80: ref;

var $M.81: ref;

var $M.82: ref;

var $M.83: ref;

var $M.84: ref;

var $M.85: ref;

var $M.86: ref;

var $M.87: ref;

var $M.88: ref;

var $M.89: ref;

var $M.90: ref;

var $M.91: ref;

var $M.92: ref;

var $M.93: ref;

var $M.94: ref;

var $M.95: ref;

var $M.96: ref;

var $M.97: ref;

var $M.98: ref;

var $M.99: ref;

var $M.100: ref;

var $M.101: i32;

var $M.102: ref;

var $M.103: i32;

var $M.104: i32;

var $M.105: i32;

var $M.106: i32;

var $M.107: i32;

var $M.108: ref;

var $M.109: ref;

var $M.110: i32;

var $M.111: i32;

var $M.112: i32;

var $M.113: i32;

var $M.114: i32;

var $M.115: i32;

var $M.129: [ref]i8;

var $M.133: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 467323);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 1028);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 2056);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 3084);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 4112);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 5140);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 6168);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 7196);

const cpia2_fops_group0: ref;

axiom cpia2_fops_group0 == $sub.ref(0, 8228);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 9256);

const ldvarg6: ref;

axiom ldvarg6 == $sub.ref(0, 10288);

const ldvarg5: ref;

axiom ldvarg5 == $sub.ref(0, 11320);

const ldvarg4: ref;

axiom ldvarg4 == $sub.ref(0, 12352);

const ldvarg3: ref;

axiom ldvarg3 == $sub.ref(0, 13384);

const ldvarg2: ref;

axiom ldvarg2 == $sub.ref(0, 14416);

const ldvarg1: ref;

axiom ldvarg1 == $sub.ref(0, 15444);

const ldvarg0: ref;

axiom ldvarg0 == $sub.ref(0, 16476);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 17504);

const ldvarg9: ref;

axiom ldvarg9 == $sub.ref(0, 18536);

const ldvarg10: ref;

axiom ldvarg10 == $sub.ref(0, 19568);

const cpia2_ioctl_ops_group3: ref;

axiom cpia2_ioctl_ops_group3 == $sub.ref(0, 20600);

const ldvarg44: ref;

axiom ldvarg44 == $sub.ref(0, 21632);

const ldvarg43: ref;

axiom ldvarg43 == $sub.ref(0, 22664);

const cpia2_ioctl_ops_group1: ref;

axiom cpia2_ioctl_ops_group1 == $sub.ref(0, 23696);

const cpia2_ioctl_ops_group0: ref;

axiom cpia2_ioctl_ops_group0 == $sub.ref(0, 24728);

const ldvarg42: ref;

axiom ldvarg42 == $sub.ref(0, 25760);

const cpia2_ioctl_ops_group5: ref;

axiom cpia2_ioctl_ops_group5 == $sub.ref(0, 26792);

const ldvarg41: ref;

axiom ldvarg41 == $sub.ref(0, 27824);

const cpia2_ioctl_ops_group4: ref;

axiom cpia2_ioctl_ops_group4 == $sub.ref(0, 28856);

const ldvarg40: ref;

axiom ldvarg40 == $sub.ref(0, 29888);

const ldvarg39: ref;

axiom ldvarg39 == $sub.ref(0, 30920);

const ldvarg38: ref;

axiom ldvarg38 == $sub.ref(0, 31948);

const ldvarg37: ref;

axiom ldvarg37 == $sub.ref(0, 32980);

const ldvarg36: ref;

axiom ldvarg36 == $sub.ref(0, 34012);

const ldvarg35: ref;

axiom ldvarg35 == $sub.ref(0, 35044);

const ldvarg34: ref;

axiom ldvarg34 == $sub.ref(0, 36076);

const ldvarg33: ref;

axiom ldvarg33 == $sub.ref(0, 37108);

const ldvarg32: ref;

axiom ldvarg32 == $sub.ref(0, 38140);

const ldvarg31: ref;

axiom ldvarg31 == $sub.ref(0, 39172);

const ldvarg30: ref;

axiom ldvarg30 == $sub.ref(0, 40204);

const ldvarg29: ref;

axiom ldvarg29 == $sub.ref(0, 41236);

const ldvarg28: ref;

axiom ldvarg28 == $sub.ref(0, 42268);

const ldvarg27: ref;

axiom ldvarg27 == $sub.ref(0, 43300);

const ldvarg26: ref;

axiom ldvarg26 == $sub.ref(0, 44332);

const ldvarg25: ref;

axiom ldvarg25 == $sub.ref(0, 45364);

const ldvarg24: ref;

axiom ldvarg24 == $sub.ref(0, 46396);

const ldvarg23: ref;

axiom ldvarg23 == $sub.ref(0, 47428);

const ldvarg22: ref;

axiom ldvarg22 == $sub.ref(0, 48460);

const ldvarg21: ref;

axiom ldvarg21 == $sub.ref(0, 49492);

const ldvarg20: ref;

axiom ldvarg20 == $sub.ref(0, 50524);

const ldvarg19: ref;

axiom ldvarg19 == $sub.ref(0, 51556);

const ldvarg18: ref;

axiom ldvarg18 == $sub.ref(0, 52588);

const cpia2_ioctl_ops_group2: ref;

axiom cpia2_ioctl_ops_group2 == $sub.ref(0, 53620);

const ldvarg17: ref;

axiom ldvarg17 == $sub.ref(0, 54652);

const ldvarg16: ref;

axiom ldvarg16 == $sub.ref(0, 55684);

const ldvarg15: ref;

axiom ldvarg15 == $sub.ref(0, 56716);

const ldvarg14: ref;

axiom ldvarg14 == $sub.ref(0, 57748);

const ldvarg13: ref;

axiom ldvarg13 == $sub.ref(0, 58776);

const ldvarg12: ref;

axiom ldvarg12 == $sub.ref(0, 59808);

const ldvarg11: ref;

axiom ldvarg11 == $sub.ref(0, 60836);

const cpia2_driver_group1: ref;

axiom cpia2_driver_group1 == $sub.ref(0, 61868);

const ldvarg8: ref;

axiom ldvarg8 == $sub.ref(0, 62900);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 63928);

const ldvarg7: ref;

axiom ldvarg7 == $sub.ref(0, 64956);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 65984);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 67012);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 68040);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 69068);

const __mod_usb_device_table: ref;

axiom __mod_usb_device_table == $sub.ref(0, 70124);

const {:count 4} cpia2_id_table: ref;

axiom cpia2_id_table == $sub.ref(0, 71276);

const cpia2_driver: ref;

axiom cpia2_driver == $sub.ref(0, 72604);

const {:count 8} frame_sizes: ref;

axiom frame_sizes == $sub.ref(0, 73660);

const {:count 6} framerate_controls: ref;

axiom framerate_controls == $sub.ref(0, 74756);

const {:count 8} cpia2_framesizes: ref;

axiom cpia2_framesizes == $sub.ref(0, 75844);

const video_nr: ref;

axiom video_nr == $sub.ref(0, 76872);

const flicker_mode: ref;

axiom flicker_mode == $sub.ref(0, 77900);

const num_buffers: ref;

axiom num_buffers == $sub.ref(0, 78928);

const buffer_size: ref;

axiom buffer_size == $sub.ref(0, 79956);

const cpia2_ioctl_ops: ref;

axiom cpia2_ioctl_ops == $sub.ref(0, 81884);

const cpia2_fops: ref;

axiom cpia2_fops == $sub.ref(0, 82996);

const cpia2_template: ref;

axiom cpia2_template == $sub.ref(0, 85596);

const alternate: ref;

axiom alternate == $sub.ref(0, 86624);

const cpia2_ctrl_ops: ref;

axiom cpia2_ctrl_ops == $sub.ref(0, 87672);

const ldv_mutex_v4l2_lock_of_camera_data: ref;

axiom ldv_mutex_v4l2_lock_of_camera_data == $sub.ref(0, 88700);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 89728);

const ldv_mutex_lock_of_v4l2_ctrl_handler: ref;

axiom ldv_mutex_lock_of_v4l2_ctrl_handler == $sub.ref(0, 90756);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 91784);

const ldv_mutex_cred_guard_mutex_of_signal_struct: ref;

axiom ldv_mutex_cred_guard_mutex_of_signal_struct == $sub.ref(0, 92812);

const {:count 44} .str.13: ref;

axiom .str.13 == $sub.ref(0, 93880);

const {:count 34} .str.14: ref;

axiom .str.14 == $sub.ref(0, 94938);

const {:count 19} .str.15: ref;

axiom .str.15 == $sub.ref(0, 95981);

const {:count 49} .str.2: ref;

axiom .str.2 == $sub.ref(0, 97054);

const {:count 23} .str.3: ref;

axiom .str.3 == $sub.ref(0, 98101);

const {:count 59} .str.4: ref;

axiom .str.4 == $sub.ref(0, 99184);

const {:count 46} .str.5: ref;

axiom .str.5 == $sub.ref(0, 100254);

const {:count 49} .str.6: ref;

axiom .str.6 == $sub.ref(0, 101327);

const {:count 50} .str.7: ref;

axiom .str.7 == $sub.ref(0, 102401);

const {:count 48} .str.8: ref;

axiom .str.8 == $sub.ref(0, 103473);

const {:count 30} .str.9: ref;

axiom .str.9 == $sub.ref(0, 104527);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 45} .str.16: ref;

axiom .str.16 == $sub.ref(0, 105596);

const {:count 34} .str.54: ref;

axiom .str.54 == $sub.ref(0, 106654);

const {:count 12} .str.55: ref;

axiom .str.55 == $sub.ref(0, 107690);

const {:count 35} .str.56: ref;

axiom .str.56 == $sub.ref(0, 108749);

const {:count 65} .str.57: ref;

axiom .str.57 == $sub.ref(0, 109838);

const {:count 52} .str.58: ref;

axiom .str.58 == $sub.ref(0, 110914);

const {:count 72} .str.59: ref;

axiom .str.59 == $sub.ref(0, 112010);

const {:count 44} .str.60: ref;

axiom .str.60 == $sub.ref(0, 113078);

const {:count 36} .str.61: ref;

axiom .str.61 == $sub.ref(0, 114138);

const {:count 19} .str.62: ref;

axiom .str.62 == $sub.ref(0, 115181);

const {:count 45} .str.76: ref;

axiom .str.76 == $sub.ref(0, 116250);

const {:count 22} .str.77: ref;

axiom .str.77 == $sub.ref(0, 117296);

const {:count 38} .str.75: ref;

axiom .str.75 == $sub.ref(0, 118358);

const {:count 32} .str.74: ref;

axiom .str.74 == $sub.ref(0, 119414);

const {:count 32} .str.79: ref;

axiom .str.79 == $sub.ref(0, 120470);

const {:count 32} .str.78: ref;

axiom .str.78 == $sub.ref(0, 121526);

const {:count 50} .str.22: ref;

axiom .str.22 == $sub.ref(0, 122600);

const {:count 49} .str.23: ref;

axiom .str.23 == $sub.ref(0, 123673);

const {:count 54} .str.10: ref;

axiom .str.10 == $sub.ref(0, 124751);

const {:count 128} .str.11: ref;

axiom .str.11 == $sub.ref(0, 125903);

const {:count 25} .str.24: ref;

axiom .str.24 == $sub.ref(0, 126952);

const {:count 11} .str.25: ref;

axiom .str.25 == $sub.ref(0, 127987);

const {:count 47} .str.26: ref;

axiom .str.26 == $sub.ref(0, 129058);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 37} .str.51: ref;

axiom .str.51 == $sub.ref(0, 130119);

const {:count 24} .str.52: ref;

axiom .str.52 == $sub.ref(0, 131167);

const {:count 7} .str.53: ref;

axiom .str.53 == $sub.ref(0, 132198);

const {:count 6} .str.37: ref;

axiom .str.37 == $sub.ref(0, 133228);

const {:count 5} .str.38: ref;

axiom .str.38 == $sub.ref(0, 134257);

const {:count 6} .str.12: ref;

axiom .str.12 == $sub.ref(0, 135287);

const {:count 15} .str.39: ref;

axiom .str.39 == $sub.ref(0, 136326);

const {:count 13} .str.40: ref;

axiom .str.40 == $sub.ref(0, 137363);

const {:count 7} .str.41: ref;

axiom .str.41 == $sub.ref(0, 138394);

const {:count 7} .str.42: ref;

axiom .str.42 == $sub.ref(0, 139425);

const {:count 7} .str.43: ref;

axiom .str.43 == $sub.ref(0, 140456);

const {:count 5} .str.44: ref;

axiom .str.44 == $sub.ref(0, 141485);

const {:count 5} .str.45: ref;

axiom .str.45 == $sub.ref(0, 142514);

const {:count 5} .str.46: ref;

axiom .str.46 == $sub.ref(0, 143543);

const {:count 5} .str.47: ref;

axiom .str.47 == $sub.ref(0, 144572);

const {:count 5} .str.48: ref;

axiom .str.48 == $sub.ref(0, 145601);

const {:count 5} .str.49: ref;

axiom .str.49 == $sub.ref(0, 146630);

const {:count 10} .str.50: ref;

axiom .str.50 == $sub.ref(0, 147664);

const {:count 25} .str.72: ref;

axiom .str.72 == $sub.ref(0, 148713);

const {:count 22} .str.71: ref;

axiom .str.71 == $sub.ref(0, 149759);

const {:count 36} .str.73: ref;

axiom .str.73 == $sub.ref(0, 150819);

const {:count 32} .str.63: ref;

axiom .str.63 == $sub.ref(0, 151875);

const {:count 48} .str.64: ref;

axiom .str.64 == $sub.ref(0, 152947);

const {:count 16} .str.65: ref;

axiom .str.65 == $sub.ref(0, 153987);

const {:count 58} .str.66: ref;

axiom .str.66 == $sub.ref(0, 155069);

const {:count 41} .str.67: ref;

axiom .str.67 == $sub.ref(0, 156134);

const {:count 39} .str.68: ref;

axiom .str.68 == $sub.ref(0, 157197);

const {:count 37} .str.69: ref;

axiom .str.69 == $sub.ref(0, 158258);

const {:count 56} .str.70: ref;

axiom .str.70 == $sub.ref(0, 159338);

const .str: ref;

axiom .str == $sub.ref(0, 160376);

const {:count 38} .str.1: ref;

axiom .str.1 == $sub.ref(0, 161438);

const {:count 61} .str.21: ref;

axiom .str.21 == $sub.ref(0, 162523);

const {:count 39} .str.17: ref;

axiom .str.17 == $sub.ref(0, 163586);

const {:count 36} .str.18: ref;

axiom .str.18 == $sub.ref(0, 164646);

const {:count 16} .str.19: ref;

axiom .str.19 == $sub.ref(0, 165686);

const {:count 16} .str.20: ref;

axiom .str.20 == $sub.ref(0, 166726);

const {:count 16} .str.28: ref;

axiom .str.28 == $sub.ref(0, 167766);

const {:count 42} .str.29: ref;

axiom .str.29 == $sub.ref(0, 168832);

const {:count 6} .str.30: ref;

axiom .str.30 == $sub.ref(0, 169862);

const {:count 46} .str.31: ref;

axiom .str.31 == $sub.ref(0, 170932);

const {:count 55} .str.32: ref;

axiom .str.32 == $sub.ref(0, 172011);

const {:count 46} .str.33: ref;

axiom .str.33 == $sub.ref(0, 173081);

const {:count 46} .str.34: ref;

axiom .str.34 == $sub.ref(0, 174151);

const {:count 50} .str.35: ref;

axiom .str.35 == $sub.ref(0, 175225);

const {:count 53} .str.36: ref;

axiom .str.36 == $sub.ref(0, 176302);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 177334);

const {:count 3} .str.1.118: ref;

axiom .str.1.118 == $sub.ref(0, 178361);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 179399);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 180427);

const cpia2_camera_release: ref;

axiom cpia2_camera_release == $sub.ref(0, 181459);

procedure cpia2_camera_release($p0: ref);



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 182491);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const v4l2_ctrl_handler_free: ref;

axiom v4l2_ctrl_handler_free == $sub.ref(0, 183523);

procedure v4l2_ctrl_handler_free($p0: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_handler_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_device_unregister: ref;

axiom v4l2_device_unregister == $sub.ref(0, 184555);

procedure v4l2_device_unregister($p0: ref);



const kfree: ref;

axiom kfree == $sub.ref(0, 185587);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} free_($p0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 186619);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 1} $free($p0);
    return;
}



const cpia2_s_ctrl: ref;

axiom cpia2_s_ctrl == $sub.ref(0, 187651);

procedure cpia2_s_ctrl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4, $CurrAddr, $M.7;



implementation cpia2_s_ctrl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i8;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i8;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i8;
  var $i43: i32;
  var $i44: i8;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i64;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i8;
  var $i67: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i8;
  var $i76: i32;
  var $i77: i32;
  var $i78: i8;
  var $i79: i32;
  var $i80: i8;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i8;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i8;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i8;
  var $p105: ref;
  var $i58: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p1 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(32, 1));
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 528), 2824));
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p6, 0);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, 50);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(2, 4));
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p8, 60);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(64, 1));
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.2, $p9);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 9963800);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 10025216);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i10, 10291459);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i10, 10291460);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i10, 10291460);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 22);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $r := $i58;
    return;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.3, $p83);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, 262144);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 0);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i87 := $zext.i1.i32($i86);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i8($i87);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref($sub.ref(0, 528), 2824)), $mul.ref(820, 1)), $mul.ref(25, 1)), $mul.ref(3, 1));
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p91, $i88);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb36;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.3, $p93);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i8($i94);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref($sub.ref(0, 528), 2824)), $mul.ref(820, 1)), $mul.ref(63, 1)), $mul.ref(5, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p98, $i95);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i10, 10025216);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb12;

  $bb13:
    assume $i16 == 1;
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.3, $p100);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i8($i101);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref($sub.ref(0, 528), 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(2, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p105, $i102);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb4:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i10, 9963813);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i10, 9963813);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb12;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p4, $mul.ref($sub.ref(0, 528), 2824)), $mul.ref(760, 1)), $mul.ref(0, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.4, $p60);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.5, $p63);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i65 := $shl.i32($i64, 6);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i67 := $sext.i8.i32($i66);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p4, $mul.ref($sub.ref(0, 528), 2824)), $mul.ref(760, 1)), $mul.ref(8, 1));
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.4, $p69);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.6, $p72);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i74 := $shl.i32($i73, 7);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i8($i74);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i76 := $sext.i8.i32($i75);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i77 := $or.i32($i67, $i76);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i8($i77);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i8($i79);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $i81 := cpia2_set_gpio($p5, $i80);
    call {:si_unique_call 4} {:cexpr "tmp___0"} boogie_si_record_i32($i81);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i58 := $i81;
    goto $bb36;

  $bb15:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i10, 9963800);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb12;

  $bb19:
    assume $i19 == 1;
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.3, $p52);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i53);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref($i54, 4));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.1, $p55);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $i57 := cpia2_set_flicker_mode($p5, $i56);
    call {:si_unique_call 6} {:cexpr "tmp"} boogie_si_record_i32($i57);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb36;

  $bb2:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i10, 9963778);
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i10, 9963796);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i10, 9963797);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i10, 9963797);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb12;

  $bb27:
    assume $i23 == 1;
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.3, $p49);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} cpia2_set_property_flip($p5, $i50);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb25:
    assume $i22 == 1;
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.3, $p46);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} cpia2_set_property_mirror($p5, $i47);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb23:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i10, 9963778);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb12;

  $bb29:
    assume $i24 == 1;
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.3, $p40);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} cpia2_set_saturation($p5, $i44);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb21:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i10, 9963777);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i25 == 1);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.3, $p34);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} cpia2_set_contrast($p5, $i38);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb31:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i10, 9963776);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb12;

  $bb33:
    assume $i26 == 1;
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.3, $p28);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} cpia2_set_brightness($p5, $i32);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    goto $bb35;
}



const cpia2_set_brightness: ref;

axiom cpia2_set_brightness == $sub.ref(0, 188683);

procedure cpia2_set_brightness($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.7, $M.4, $CurrAddr;



implementation cpia2_set_brightness($p0: ref, $i1: i8)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $i12: i8;
  var $i13: i32;
  var $i14: i8;
  var vslice_dummy_var_54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} {:cexpr "cpia2_set_brightness:arg:value"} boogie_si_record_i8($i1);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.4, $p4);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 1);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $i1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} vslice_dummy_var_54 := cpia2_do_command($p0, 7, 1, $i14);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i1);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 1);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    call {:si_unique_call 13} {:cexpr "value"} boogie_si_record_i8($i11);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb6;
}



const cpia2_set_contrast: ref;

axiom cpia2_set_contrast == $sub.ref(0, 189715);

procedure cpia2_set_contrast($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.7, $M.4, $CurrAddr;



implementation cpia2_set_contrast($p0: ref, $i1: i8)
{
  var $i2: i32;
  var $i3: i8;
  var vslice_dummy_var_55: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} {:cexpr "cpia2_set_contrast:arg:value"} boogie_si_record_i8($i1);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} vslice_dummy_var_55 := cpia2_do_command($p0, 9, 1, $i3);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    return;
}



const cpia2_set_saturation: ref;

axiom cpia2_set_saturation == $sub.ref(0, 190747);

procedure cpia2_set_saturation($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.7, $M.4, $CurrAddr;



implementation cpia2_set_saturation($p0: ref, $i1: i8)
{
  var $i2: i32;
  var $i3: i8;
  var vslice_dummy_var_56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} {:cexpr "cpia2_set_saturation:arg:value"} boogie_si_record_i8($i1);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} vslice_dummy_var_56 := cpia2_do_command($p0, 11, 1, $i3);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    return;
}



const cpia2_set_property_mirror: ref;

axiom cpia2_set_property_mirror == $sub.ref(0, 191779);

procedure cpia2_set_property_mirror($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.4, $M.7, $CurrAddr;



implementation cpia2_set_property_mirror($p0: ref, $i1: i32)
{
  var $p5: ref;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $i11: i8;
  var $p17: ref;
  var $i18: i32;
  var $i19: i8;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} {:cexpr "cpia2_set_property_mirror:arg:prop_val"} boogie_si_record_i32($i1);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} vslice_dummy_var_57 := cpia2_do_command($p0, 51, 0, 0);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(10, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.4, $p5);
    call {:si_unique_call 21} {:cexpr "cam_reg"} boogie_si_record_i8($i6);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i1, 0);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i6);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 251);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    call {:si_unique_call 23} {:cexpr "cam_reg"} boogie_si_record_i8($i14);
    assume {:verifier.code 0} true;
    $i11 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(10, 1));
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p17, $i11);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i11);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} vslice_dummy_var_58 := cpia2_do_command($p0, 52, 1, $i19);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i6);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, 4);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    call {:si_unique_call 22} {:cexpr "cam_reg"} boogie_si_record_i8($i10);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const cpia2_set_property_flip: ref;

axiom cpia2_set_property_flip == $sub.ref(0, 192811);

procedure cpia2_set_property_flip($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.4, $M.7, $CurrAddr;



implementation cpia2_set_property_flip($p0: ref, $i1: i32)
{
  var $p5: ref;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $i11: i8;
  var $p17: ref;
  var $i18: i32;
  var $i19: i8;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} {:cexpr "cpia2_set_property_flip:arg:prop_val"} boogie_si_record_i32($i1);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} vslice_dummy_var_59 := cpia2_do_command($p0, 51, 0, 0);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(10, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.4, $p5);
    call {:si_unique_call 27} {:cexpr "cam_reg"} boogie_si_record_i8($i6);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i1, 0);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i6);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 191);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    call {:si_unique_call 29} {:cexpr "cam_reg"} boogie_si_record_i8($i14);
    assume {:verifier.code 0} true;
    $i11 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(10, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p17, $i11);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i11);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} vslice_dummy_var_60 := cpia2_do_command($p0, 52, 1, $i19);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i6);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, 64);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    call {:si_unique_call 28} {:cexpr "cam_reg"} boogie_si_record_i8($i10);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const cpia2_set_flicker_mode: ref;

axiom cpia2_set_flicker_mode == $sub.ref(0, 193843);

procedure cpia2_set_flicker_mode($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.7, $CurrAddr;



implementation cpia2_set_flicker_mode($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $i37: i8;
  var $i25: i8;
  var $i38: i32;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $p46: ref;
  var $i47: i8;
  var $i48: i1;
  var $i49: i32;
  var $i50: i32;
  var $i51: i8;
  var $i53: i32;
  var $i54: i32;
  var $i55: i8;
  var $i52: i8;
  var $i56: i32;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i8;
  var $p70: ref;
  var $i71: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} {:cexpr "cpia2_set_flicker_mode:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.4, $p4);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 1);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $i8 := cpia2_do_command($p0, 21, 0, 0);
    call {:si_unique_call 33} {:cexpr "err"} boogie_si_record_i32($i8);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(23, 1)), $mul.ref(0, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.4, $p12);
    call {:si_unique_call 34} {:cexpr "cam_reg"} boogie_si_record_i8($i13);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i1, 50);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i1, 60);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i1, 60);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb13:
    assume $i16 == 1;
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i13);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 223);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    call {:si_unique_call 35} {:cexpr "cam_reg"} boogie_si_record_i8($i28);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 127);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    call {:si_unique_call 36} {:cexpr "cam_reg"} boogie_si_record_i8($i31);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i25 := $i31;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i25);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $i40 := cpia2_do_command($p0, 22, 1, $i39);
    call {:si_unique_call 42} {:cexpr "err"} boogie_si_record_i32($i40);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $i42 := cpia2_do_command($p0, 40, 0, 0);
    call {:si_unique_call 44} {:cexpr "err"} boogie_si_record_i32($i42);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(9, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.4, $p46);
    call {:si_unique_call 45} {:cexpr "cam_reg"} boogie_si_record_i8($i47);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i1, 0);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i48 == 1);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i47);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 223);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    call {:si_unique_call 47} {:cexpr "cam_reg"} boogie_si_record_i8($i55);
    assume {:verifier.code 0} true;
    $i52 := $i55;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i52);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i56);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $i58 := cpia2_do_command($p0, 41, 1, $i57);
    call {:si_unique_call 49} {:cexpr "err"} boogie_si_record_i32($i58);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i60 := cpia2_do_command($p0, 50, 1, 1);
    call {:si_unique_call 51} {:cexpr "err"} boogie_si_record_i32($i60);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i1, 50);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i1, 60);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i1, 60);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i71 := $sub.i32(0, 22);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i7 := $i71;
    goto $bb3;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i1);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(23, 1)), $mul.ref(1, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p70, $i67);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i71 := $i60;
    goto $bb51;

  $bb40:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i1, 50);
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb46, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb45;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb47;

  $bb38:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb45;

  $bb49:
    assume $i66 == 1;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb34:
    assume $i61 == 1;
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i7 := $i60;
    goto $bb3;

  $bb31:
    assume $i59 == 1;
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i7 := $i58;
    goto $bb3;

  $bb28:
    assume $i48 == 1;
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i47);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i49, 32);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    call {:si_unique_call 46} {:cexpr "cam_reg"} boogie_si_record_i8($i51);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb30;

  $bb25:
    assume $i43 == 1;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i7 := $i42;
    goto $bb3;

  $bb22:
    assume $i41 == 1;
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i7 := $i40;
    goto $bb3;

  $bb11:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i1, 50);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb15;

  $bb16:
    assume $i17 == 1;
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i13);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 223);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    call {:si_unique_call 37} {:cexpr "cam_reg"} boogie_si_record_i8($i34);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, 128);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    call {:si_unique_call 38} {:cexpr "cam_reg"} boogie_si_record_i8($i37);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i25 := $i37;
    goto $bb20;

  $bb9:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb15;

  $bb18:
    assume $i18 == 1;
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i13);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i19, 32);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    call {:si_unique_call 39} {:cexpr "cam_reg"} boogie_si_record_i8($i21);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 127);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    call {:si_unique_call 40} {:cexpr "cam_reg"} boogie_si_record_i8($i24);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb20;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i7 := $i8;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const cpia2_set_gpio: ref;

axiom cpia2_set_gpio == $sub.ref(0, 194875);

procedure cpia2_set_gpio($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.7, $CurrAddr;



implementation cpia2_set_gpio($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p14: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} {:cexpr "cpia2_set_gpio:arg:setting"} boogie_si_record_i8($i1);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $i2 := cpia2_do_command($p0, 17, 1, $sub.i8(0, 1));
    call {:si_unique_call 54} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(3, 1));
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p7, $sub.i8(0, 1));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $i10 := cpia2_do_command($p0, 19, 1, $i9);
    call {:si_unique_call 56} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(4, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p14, $i1);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i4 := $i10;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;
}



const cpia2_do_command: ref;

axiom cpia2_do_command == $sub.ref(0, 195907);

procedure cpia2_do_command($p0: ref, $i1: i32, $i2: i8, $i3: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.4, $CurrAddr;



implementation cpia2_do_command($p0: ref, $i1: i32, $i2: i8, $i3: i8) returns ($r: i32)
{
  var $p4: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $i188: i1;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i1;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $p302: ref;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $p309: ref;
  var $p310: ref;
  var $i311: i1;
  var $p312: ref;
  var $p313: ref;
  var $i316: i32;
  var $i317: i1;
  var $i318: i1;
  var $i319: i1;
  var $i320: i1;
  var $i321: i1;
  var $i322: i1;
  var $i323: i1;
  var $i324: i1;
  var $i325: i1;
  var $i326: i1;
  var $i327: i1;
  var $i328: i1;
  var $i329: i1;
  var $i330: i1;
  var $i331: i1;
  var $i332: i1;
  var $i333: i1;
  var $i334: i1;
  var $i335: i1;
  var $i336: i1;
  var $i337: i1;
  var $i338: i1;
  var $i339: i1;
  var $i340: i1;
  var $i341: i1;
  var $i342: i1;
  var $i343: i1;
  var $i344: i1;
  var $i345: i1;
  var $i346: i1;
  var $i347: i1;
  var $i348: i1;
  var $i349: i1;
  var $i350: i1;
  var $i351: i1;
  var $i352: i1;
  var $p353: ref;
  var $p354: ref;
  var $p355: ref;
  var $i356: i8;
  var $p359: ref;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $i363: i8;
  var $p366: ref;
  var $p367: ref;
  var $p368: ref;
  var $p369: ref;
  var $i370: i8;
  var $i371: i32;
  var $i372: i32;
  var $i373: i16;
  var $i374: i32;
  var $p375: ref;
  var $p376: ref;
  var $p377: ref;
  var $i378: i8;
  var $i379: i16;
  var $i380: i32;
  var $i381: i32;
  var $i382: i16;
  var $p385: ref;
  var $p386: ref;
  var $p387: ref;
  var $p388: ref;
  var $i389: i8;
  var $i390: i32;
  var $i391: i32;
  var $i392: i16;
  var $i393: i32;
  var $p394: ref;
  var $p395: ref;
  var $p396: ref;
  var $i397: i8;
  var $i398: i16;
  var $i399: i32;
  var $i400: i32;
  var $i401: i16;
  var $p404: ref;
  var $p405: ref;
  var $p406: ref;
  var $p407: ref;
  var $i408: i8;
  var $i409: i32;
  var $i410: i32;
  var $i411: i16;
  var $i412: i32;
  var $p413: ref;
  var $p414: ref;
  var $p415: ref;
  var $i416: i8;
  var $i417: i16;
  var $i418: i32;
  var $i419: i32;
  var $i420: i16;
  var $p423: ref;
  var $p426: ref;
  var $i427: i16;
  var $i428: i32;
  var $i429: i1;
  var $p432: ref;
  var $i433: i16;
  var $i434: i32;
  var $i435: i1;
  var $p438: ref;
  var $p441: ref;
  var $i442: i16;
  var $i443: i32;
  var $i444: i1;
  var $p447: ref;
  var $i448: i16;
  var $i449: i32;
  var $i450: i1;
  var $p453: ref;
  var $p454: ref;
  var $p455: ref;
  var $p456: ref;
  var $i457: i8;
  var $p460: ref;
  var $p461: ref;
  var $p462: ref;
  var $p463: ref;
  var $i464: i8;
  var $p467: ref;
  var $p468: ref;
  var $p469: ref;
  var $p470: ref;
  var $i471: i8;
  var $p474: ref;
  var $p475: ref;
  var $p476: ref;
  var $p477: ref;
  var $i478: i8;
  var $p481: ref;
  var $p482: ref;
  var $p483: ref;
  var $p484: ref;
  var $i485: i8;
  var $p488: ref;
  var $p489: ref;
  var $p490: ref;
  var $p491: ref;
  var $i492: i8;
  var $p495: ref;
  var $p496: ref;
  var $p497: ref;
  var $p498: ref;
  var $i499: i8;
  var $p502: ref;
  var $p503: ref;
  var $p504: ref;
  var $p505: ref;
  var $i506: i8;
  var $p509: ref;
  var $p510: ref;
  var $p511: ref;
  var $p512: ref;
  var $i513: i8;
  var $p516: ref;
  var $p517: ref;
  var $p518: ref;
  var $p519: ref;
  var $i520: i8;
  var $p523: ref;
  var $p524: ref;
  var $p525: ref;
  var $p526: ref;
  var $i527: i8;
  var $p530: ref;
  var $p531: ref;
  var $p532: ref;
  var $p533: ref;
  var $i534: i8;
  var $p537: ref;
  var $p538: ref;
  var $p539: ref;
  var $p540: ref;
  var $i541: i8;
  var $p544: ref;
  var $p545: ref;
  var $p546: ref;
  var $p547: ref;
  var $i548: i8;
  var $p551: ref;
  var $p552: ref;
  var $p553: ref;
  var $p554: ref;
  var $i555: i8;
  var $p558: ref;
  var $p559: ref;
  var $p560: ref;
  var $p561: ref;
  var $i562: i8;
  var $p565: ref;
  var $p566: ref;
  var $p567: ref;
  var $p568: ref;
  var $i569: i8;
  var $p572: ref;
  var $p573: ref;
  var $p574: ref;
  var $p575: ref;
  var $i576: i8;
  var $p579: ref;
  var $p580: ref;
  var $p581: ref;
  var $p582: ref;
  var $i583: i8;
  var $p586: ref;
  var $p587: ref;
  var $p588: ref;
  var $p589: ref;
  var $i590: i8;
  var $p593: ref;
  var $p594: ref;
  var $p595: ref;
  var $p596: ref;
  var $i597: i8;
  var $p600: ref;
  var $i315: i32;
  var vslice_dummy_var_61: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $p4 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    call {:si_unique_call 58} {:cexpr "cpia2_do_command:arg:command"} boogie_si_record_i32($i1);
    call {:si_unique_call 59} {:cexpr "cpia2_do_command:arg:direction"} boogie_si_record_i8($i2);
    call {:si_unique_call 60} {:cexpr "cpia2_do_command:arg:param"} boogie_si_record_i8($i3);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.4, $p7);
    call {:si_unique_call 61} {:cexpr "device"} boogie_si_record_i32($i8);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p9, $i1);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p10, 2);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(6, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p11, $i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i1, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i1, 40);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i1, 46);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i1, 49);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i1, 51);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i1, 52);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i1, 52);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} vslice_dummy_var_61 := printk.ref(.str.13);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i315 := $sub.i32(0, 22);
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $r := $i315;
    return;

  $bb15:
    assume $i18 == 1;
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p307 := $bitcast.ref.ref($p306);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p307, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p308, $i3);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p309, 2);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p310, 1);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i8, 1);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i311} true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i311 == 1);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p313, 21);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $i316 := cpia2_send_command($p0, $p4);
    call {:si_unique_call 63} {:cexpr "retval"} boogie_si_record_i32($i316);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i317 := $ne.i32($i316, 0);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    assume {:branchcond $i317} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $i318 := $slt.i32($i1, 28);
    assume {:verifier.code 0} true;
    assume {:branchcond $i318} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    $i319 := $slt.i32($i1, 38);
    assume {:verifier.code 0} true;
    assume {:branchcond $i319} true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    $i320 := $slt.i32($i1, 42);
    assume {:verifier.code 0} true;
    assume {:branchcond $i320} true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    $i321 := $slt.i32($i1, 46);
    assume {:verifier.code 0} true;
    assume {:branchcond $i321} true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    $i322 := $slt.i32($i1, 51);
    assume {:verifier.code 0} true;
    assume {:branchcond $i322} true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    $i323 := $eq.i32($i1, 51);
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb158, $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    assume !($i323 == 1);
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $i315 := $i316;
    goto $bb143;

  $bb158:
    assume $i323 == 1;
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p594 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p595 := $bitcast.ref.ref($p594);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($add.ref($p595, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i597 := $load.i8($M.7, $p596);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p600 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(10, 1));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p600, $i597);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb156:
    assume $i322 == 1;
    assume {:verifier.code 0} true;
    $i324 := $eq.i32($i1, 46);
    assume {:verifier.code 0} true;
    assume {:branchcond $i324} true;
    goto $bb161, $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    assume !($i324 == 1);
    goto $bb160;

  $bb161:
    assume $i324 == 1;
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p580 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p581 := $bitcast.ref.ref($p580);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($p581, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i583 := $load.i8($M.7, $p582);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(63, 1)), $mul.ref(2, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p586, $i583);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb154:
    assume $i321 == 1;
    assume {:verifier.code 0} true;
    $i325 := $eq.i32($i1, 42);
    assume {:verifier.code 0} true;
    assume {:branchcond $i325} true;
    goto $bb163, $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    assume !($i325 == 1);
    goto $bb160;

  $bb163:
    assume $i325 == 1;
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p574 := $bitcast.ref.ref($p573);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p575 := $add.ref($add.ref($p574, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i576 := $load.i8($M.7, $p575);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(8, 1));
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p579, $i576);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb152:
    assume $i320 == 1;
    assume {:verifier.code 0} true;
    $i326 := $slt.i32($i1, 40);
    assume {:verifier.code 0} true;
    assume {:branchcond $i326} true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    $i327 := $eq.i32($i1, 40);
    assume {:verifier.code 0} true;
    assume {:branchcond $i327} true;
    goto $bb167, $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    assume !($i327 == 1);
    goto $bb160;

  $bb167:
    assume $i327 == 1;
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p566 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p567 := $bitcast.ref.ref($p566);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p568 := $add.ref($add.ref($p567, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i569 := $load.i8($M.7, $p568);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p572 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(9, 1));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p572, $i569);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb165:
    assume $i326 == 1;
    assume {:verifier.code 0} true;
    $i328 := $eq.i32($i1, 38);
    assume {:verifier.code 0} true;
    assume {:branchcond $i328} true;
    goto $bb169, $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    assume !($i328 == 1);
    goto $bb160;

  $bb169:
    assume $i328 == 1;
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p560 := $bitcast.ref.ref($p559);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($p560, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i562 := $load.i8($M.7, $p561);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(5, 1));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p565, $i562);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb150:
    assume $i319 == 1;
    assume {:verifier.code 0} true;
    $i329 := $slt.i32($i1, 33);
    assume {:verifier.code 0} true;
    assume {:branchcond $i329} true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    $i330 := $slt.i32($i1, 35);
    assume {:verifier.code 0} true;
    assume {:branchcond $i330} true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    $i331 := $slt.i32($i1, 37);
    assume {:verifier.code 0} true;
    assume {:branchcond $i331} true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i331 == 1);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p553 := $bitcast.ref.ref($p552);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref($p553, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i555 := $load.i8($M.7, $p554);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p558 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p558, $i555);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb175:
    assume $i331 == 1;
    assume {:verifier.code 0} true;
    $i332 := $eq.i32($i1, 35);
    assume {:verifier.code 0} true;
    assume {:branchcond $i332} true;
    goto $bb177, $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    assume !($i332 == 1);
    goto $bb160;

  $bb177:
    assume $i332 == 1;
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p546 := $bitcast.ref.ref($p545);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($p546, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i548 := $load.i8($M.7, $p547);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p551, $i548);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb173:
    assume $i330 == 1;
    assume {:verifier.code 0} true;
    $i333 := $eq.i32($i1, 33);
    assume {:verifier.code 0} true;
    assume {:branchcond $i333} true;
    goto $bb179, $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    assume !($i333 == 1);
    goto $bb160;

  $bb179:
    assume $i333 == 1;
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p538 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p539 := $bitcast.ref.ref($p538);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p540 := $add.ref($add.ref($p539, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i541 := $load.i8($M.7, $p540);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p544 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(63, 1)), $mul.ref(0, 1));
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p544, $i541);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb171:
    assume $i329 == 1;
    assume {:verifier.code 0} true;
    $i334 := $slt.i32($i1, 31);
    assume {:verifier.code 0} true;
    assume {:branchcond $i334} true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    $i335 := $eq.i32($i1, 31);
    assume {:verifier.code 0} true;
    assume {:branchcond $i335} true;
    goto $bb183, $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    assume !($i335 == 1);
    goto $bb160;

  $bb183:
    assume $i335 == 1;
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p532 := $bitcast.ref.ref($p531);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($p532, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i534 := $load.i8($M.7, $p533);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(63, 1)), $mul.ref(1, 1));
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p537, $i534);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb181:
    assume $i334 == 1;
    assume {:verifier.code 0} true;
    $i336 := $eq.i32($i1, 28);
    assume {:verifier.code 0} true;
    assume {:branchcond $i336} true;
    goto $bb185, $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    assume !($i336 == 1);
    goto $bb160;

  $bb185:
    assume $i336 == 1;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p587 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p588 := $bitcast.ref.ref($p587);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($add.ref($p588, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i590 := $load.i8($M.7, $p589);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p593 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(0, 1));
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p593, $i590);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb148:
    assume $i318 == 1;
    assume {:verifier.code 0} true;
    $i337 := $slt.i32($i1, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i337} true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    $i338 := $slt.i32($i1, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i338} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    $i339 := $slt.i32($i1, 18);
    assume {:verifier.code 0} true;
    assume {:branchcond $i339} true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    $i340 := $slt.i32($i1, 21);
    assume {:verifier.code 0} true;
    assume {:branchcond $i340} true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    $i341 := $eq.i32($i1, 21);
    assume {:verifier.code 0} true;
    assume {:branchcond $i341} true;
    goto $bb195, $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    assume !($i341 == 1);
    goto $bb160;

  $bb195:
    assume $i341 == 1;
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p524 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p525 := $bitcast.ref.ref($p524);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($add.ref($p525, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i527 := $load.i8($M.7, $p526);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(23, 1)), $mul.ref(0, 1));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p530, $i527);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb193:
    assume $i340 == 1;
    assume {:verifier.code 0} true;
    $i342 := $eq.i32($i1, 18);
    assume {:verifier.code 0} true;
    assume {:branchcond $i342} true;
    goto $bb197, $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    assume !($i342 == 1);
    goto $bb160;

  $bb197:
    assume $i342 == 1;
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p518 := $bitcast.ref.ref($p517);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($p518, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i520 := $load.i8($M.7, $p519);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(63, 1)), $mul.ref(4, 1));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p523, $i520);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb191:
    assume $i339 == 1;
    assume {:verifier.code 0} true;
    $i343 := $eq.i32($i1, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb199, $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    assume !($i343 == 1);
    goto $bb160;

  $bb199:
    assume $i343 == 1;
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p510 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p511 := $bitcast.ref.ref($p510);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p512 := $add.ref($add.ref($p511, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i513 := $load.i8($M.7, $p512);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(63, 1)), $mul.ref(3, 1));
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p516, $i513);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb189:
    assume $i338 == 1;
    assume {:verifier.code 0} true;
    $i344 := $slt.i32($i1, 14);
    assume {:verifier.code 0} true;
    assume {:branchcond $i344} true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    $i345 := $eq.i32($i1, 14);
    assume {:verifier.code 0} true;
    assume {:branchcond $i345} true;
    goto $bb203, $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    assume !($i345 == 1);
    goto $bb160;

  $bb203:
    assume $i345 == 1;
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p497 := $bitcast.ref.ref($p496);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p498 := $add.ref($add.ref($p497, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i499 := $load.i8($M.7, $p498);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p502 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(4, 1));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p502, $i499);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb201:
    assume $i344 == 1;
    assume {:verifier.code 0} true;
    $i346 := $eq.i32($i1, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i346} true;
    goto $bb205, $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    assume !($i346 == 1);
    goto $bb160;

  $bb205:
    assume $i346 == 1;
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p504 := $bitcast.ref.ref($p503);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($p504, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i506 := $load.i8($M.7, $p505);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(3, 1));
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p509, $i506);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb187:
    assume $i337 == 1;
    assume {:verifier.code 0} true;
    $i347 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i347} true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i347 == 1);
    assume {:verifier.code 0} true;
    $i348 := $slt.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i348} true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i348 == 1);
    assume {:verifier.code 0} true;
    $i349 := $slt.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i349} true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i349 == 1);
    assume {:verifier.code 0} true;
    $i350 := $eq.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i350} true;
    goto $bb213, $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    assume !($i350 == 1);
    goto $bb160;

  $bb213:
    assume $i350 == 1;
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p483 := $bitcast.ref.ref($p482);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($p483, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i485 := $load.i8($M.7, $p484);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p488, $i485);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p490 := $bitcast.ref.ref($p489);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p490, $mul.ref(0, 64)), $mul.ref(1, 1));
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i492 := $load.i8($M.7, $p491);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p495, $i492);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb211:
    assume $i349 == 1;
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p468 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p469 := $bitcast.ref.ref($p468);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($p469, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i471 := $load.i8($M.7, $p470);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p474, $i471);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p476 := $bitcast.ref.ref($p475);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($p476, $mul.ref(0, 64)), $mul.ref(1, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i478 := $load.i8($M.7, $p477);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p481, $i478);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb209:
    assume $i348 == 1;
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p455 := $bitcast.ref.ref($p454);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($p455, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i457 := $load.i8($M.7, $p456);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p460, $i457);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p462 := $bitcast.ref.ref($p461);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($p462, $mul.ref(0, 64)), $mul.ref(1, 1));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i464 := $load.i8($M.7, $p463);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p467, $i464);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb207:
    assume $i347 == 1;
    assume {:verifier.code 0} true;
    $i351 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i351} true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i351 == 1);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p368 := $bitcast.ref.ref($p367);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p368, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i370 := $load.i8($M.7, $p369);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i371 := $zext.i8.i32($i370);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i372 := $shl.i32($i371, 8);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i373 := $trunc.i32.i16($i372);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i374 := $sext.i16.i32($i373);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p376 := $bitcast.ref.ref($p375);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p376, $mul.ref(0, 64)), $mul.ref(1, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i378 := $load.i8($M.7, $p377);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i379 := $zext.i8.i16($i378);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i380 := $sext.i16.i32($i379);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i381 := $or.i32($i374, $i380);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i382 := $trunc.i32.i16($i381);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $M.4 := $store.i16($M.4, $p385, $i382);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p387 := $bitcast.ref.ref($p386);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p387, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i389 := $load.i8($M.7, $p388);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i390 := $zext.i8.i32($i389);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i391 := $shl.i32($i390, 8);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i392 := $trunc.i32.i16($i391);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i393 := $sext.i16.i32($i392);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p395 := $bitcast.ref.ref($p394);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p395, $mul.ref(0, 64)), $mul.ref(3, 1));
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i397 := $load.i8($M.7, $p396);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i398 := $zext.i8.i16($i397);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i399 := $sext.i16.i32($i398);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i400 := $or.i32($i393, $i399);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i401 := $trunc.i32.i16($i400);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $M.4 := $store.i16($M.4, $p404, $i401);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p406 := $bitcast.ref.ref($p405);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($p406, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i408 := $load.i8($M.7, $p407);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i409 := $zext.i8.i32($i408);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i410 := $shl.i32($i409, 8);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i411 := $trunc.i32.i16($i410);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i412 := $sext.i16.i32($i411);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p414 := $bitcast.ref.ref($p413);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($p414, $mul.ref(0, 64)), $mul.ref(5, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i416 := $load.i8($M.7, $p415);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i417 := $zext.i8.i16($i416);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i418 := $sext.i16.i32($i417);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i419 := $or.i32($i412, $i418);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i420 := $trunc.i32.i16($i419);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $M.4 := $store.i16($M.4, $p423, $i420);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i427 := $load.i16($M.4, $p426);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i428 := $zext.i16.i32($i427);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i429 := $eq.i32($i428, 1363);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i429} true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i429 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb220:
    assume $i429 == 1;
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i433 := $load.i16($M.4, $p432);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i434 := $zext.i16.i32($i433);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i435 := $eq.i32($i434, 256);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i435} true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i435 == 1);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i442 := $load.i16($M.4, $p441);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i443 := $zext.i16.i32($i442);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i444 := $eq.i32($i443, 320);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i444} true;
    goto $bb225, $bb227;

  $bb227:
    assume !($i444 == 1);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i448 := $load.i16($M.4, $p447);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i449 := $zext.i16.i32($i448);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i450 := $eq.i32($i449, 337);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i450} true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb228:
    assume {:verifier.code 0} true;
    assume $i450 == 1;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p453, 2);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb225:
    assume {:verifier.code 0} true;
    assume $i444 == 1;
    goto $bb226;

  $bb222:
    assume $i435 == 1;
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p438, 1);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb215:
    assume $i351 == 1;
    assume {:verifier.code 0} true;
    $i352 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i352} true;
    goto $bb217, $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    assume !($i352 == 1);
    goto $bb160;

  $bb217:
    assume $i352 == 1;
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p354 := $bitcast.ref.ref($p353);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p354, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i356 := $load.i8($M.7, $p355);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p359, $i356);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p361 := $bitcast.ref.ref($p360);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p361, $mul.ref(0, 64)), $mul.ref(1, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i363 := $load.i8($M.7, $p362);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p366, $i363);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb144:
    assume $i317 == 1;
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i315 := $i316;
    goto $bb143;

  $bb139:
    assume $i311 == 1;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p312, 18);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb13;

  $bb10:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i1, 50);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i19 == 1);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p300, 2);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p301, 1);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p302, 96);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p304 := $bitcast.ref.ref($p303);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p304, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p305, $i3);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb18:
    assume $i19 == 1;
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p266, 5);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p267, 4);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p269 := $bitcast.ref.ref($p268);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($add.ref($p269, $mul.ref(0, 64)), $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p271, $sub.i8(0, 42));
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p273 := $bitcast.ref.ref($p272);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($add.ref($p273, $mul.ref(0, 64)), $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p275, 1);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p277 := $bitcast.ref.ref($p276);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($p277, $mul.ref(0, 64)), $mul.ref(1, 2)), $mul.ref(0, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p279, $sub.i8(0, 40));
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p281 := $bitcast.ref.ref($p280);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($add.ref($p281, $mul.ref(0, 64)), $mul.ref(1, 2)), $mul.ref(1, 1));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p283, 20);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p285 := $bitcast.ref.ref($p284);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($add.ref($p285, $mul.ref(0, 64)), $mul.ref(2, 2)), $mul.ref(0, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p287, $sub.i8(0, 41));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p288);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($add.ref($p289, $mul.ref(0, 64)), $mul.ref(2, 2)), $mul.ref(1, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p291, 2);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p293 := $bitcast.ref.ref($p292);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($add.ref($p293, $mul.ref(0, 64)), $mul.ref(3, 2)), $mul.ref(0, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p295, $sub.i8(0, 42));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p297 := $bitcast.ref.ref($p296);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($add.ref($p297, $mul.ref(0, 64)), $mul.ref(3, 2)), $mul.ref(1, 1));
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p299, 5);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb8:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i1, 47);
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i1, 48);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i21 == 1);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p256, 5);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p257, 1);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p259 := $bitcast.ref.ref($p258);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref($p259, $mul.ref(0, 64)), $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p261, $sub.i8(0, 39));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p263 := $bitcast.ref.ref($p262);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($add.ref($p263, $mul.ref(0, 64)), $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p265, $i3);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb23:
    assume $i21 == 1;
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p251 := $bitcast.ref.ref($p250);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p251, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p252, $i3);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p253, 1);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p254, 1);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p255, $sub.i8(0, 64));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb21;

  $bb6:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i1, 43);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i1, 44);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i1, 45);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i24 == 1);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p245 := $bitcast.ref.ref($p244);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p245, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p246, $i3);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p247, 2);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p248, 1);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p249, 118);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb29:
    assume $i24 == 1;
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p239 := $bitcast.ref.ref($p238);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p239, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p240, $i3);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p241, 0);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p242, 1);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p243, 8);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb27:
    assume $i23 == 1;
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p233 := $bitcast.ref.ref($p232);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p233, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p234, $i3);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p235, 2);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p236, 1);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p237, 7);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb25:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i1, 41);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i1, 42);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb36;

  $bb34:
    assume $i26 == 1;
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p227 := $bitcast.ref.ref($p226);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p227, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p228, $i3);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p229, 2);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p230, 1);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p231, 21);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb32;

  $bb4:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i1, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i1, 36);
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i1, 38);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i1, 39);
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb43, $bb45;

  $bb45:
    assume !($i30 == 1);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p221 := $bitcast.ref.ref($p220);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p221, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p222, $i3);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p223, 2);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p224, 1);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p225, 3);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb44;

  $bb41:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i1, 37);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i31 == 1);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p211, 2);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p212, 1);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p213, 2);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb46:
    assume $i31 == 1;
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p215 := $bitcast.ref.ref($p214);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p215, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p216, $i3);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p217, 0);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p218, 1);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p219, 2);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb39:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i1, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb50;

  $bb50:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i1, 35);
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb53;

  $bb51:
    assume $i33 == 1;
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p206 := $bitcast.ref.ref($p205);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p206, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p207, $i3);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p208, 1);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p209, 1);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p210, $sub.i8(0, 126));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb49;

  $bb37:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i1, 29);
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i1, 31);
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i1, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb60;

  $bb60:
    assume !($i36 == 1);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p200 := $bitcast.ref.ref($p199);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p200, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p201, $i3);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p202, 1);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p203, 1);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p204, $sub.i8(0, 125));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb59;

  $bb56:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i1, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb17;

  $bb61:
    assume $i37 == 1;
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p191, 2);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p192, 1);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i193 := $eq.i32($i8, 1);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i193 == 1);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p195, 20);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p197 := $bitcast.ref.ref($p196);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p197, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p198, $i3);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb136:
    assume $i193 == 1;
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p194, 17);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb54:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i1, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i1, 28);
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p186, 2);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p187, 1);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i8, 1);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i188 == 1);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p190, 19);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb133:
    assume $i188 == 1;
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p189, 16);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb65:
    assume $i39 == 1;
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p183);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p184, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p185, $i3);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb63:
    assume $i38 == 1;
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p177, 0);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p178, 1);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p179, 2);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p181 := $bitcast.ref.ref($p180);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p181, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p182, $sub.i8(0, 128));
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb2:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i1, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i1, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i1, 22);
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i1, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i1, 25);
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i44 == 1);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p171, 0);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p172, 1);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p173, 2);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p175 := $bitcast.ref.ref($p174);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p175, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p176, 0);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb76:
    assume $i44 == 1;
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p153, 4);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p154, 2);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p155);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($p156, $mul.ref(0, 64)), $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p158, 2);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p159);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p160, $mul.ref(0, 64)), $mul.ref(1, 2)), $mul.ref(0, 1));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p162, 2);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p164 := $bitcast.ref.ref($p163);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($p164, $mul.ref(0, 64)), $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p166, $sub.i8(0, 128));
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p167);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p168, $mul.ref(0, 64)), $mul.ref(1, 2)), $mul.ref(1, 1));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p170, 1);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb74:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i1, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i45 == 1);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p134, 5);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p135, 2);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p136, 0);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p138, $mul.ref(0, 64)), $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p140, $sub.i8(0, 96));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p141);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p142, $mul.ref(0, 64)), $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p144, 64);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p145);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p146, $mul.ref(0, 64)), $mul.ref(1, 2)), $mul.ref(0, 1));
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p148, $sub.i8(0, 96));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p150, $mul.ref(0, 64)), $mul.ref(1, 2)), $mul.ref(1, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p152, 96);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb78:
    assume $i45 == 1;
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p129, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p130, $i3);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p131, 2);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p132, 1);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p133, 27);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb72:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i1, 20);
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i1, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb84;

  $bb82:
    assume $i47 == 1;
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p122, 0);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p123, 4);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p124, 1);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p126, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p127, $i3);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb80:
    assume $i46 == 1;
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p111, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p112, $i3);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p113, 1);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p114, 1);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p115, $sub.i8(0, 111));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb70:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i1, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i1, 17);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb87, $bb89;

  $bb89:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i1, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb92;

  $bb90:
    assume $i50 == 1;
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p117, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p118, $i3);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p119, 1);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p120, 1);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p121, $sub.i8(0, 112));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb88;

  $bb85:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i1, 14);
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i1, 15);
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb95, $bb97;

  $bb97:
    assume !($i52 == 1);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p100, $i3);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p101, 2);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p102, 1);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p103, 9);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb96;

  $bb93:
    assume $i51 == 1;
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p106, $i3);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p107, 2);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p108, 1);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p109, 8);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb68:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i1, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i1, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i1, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb104;

  $bb104:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i1, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb107;

  $bb105:
    assume $i56 == 1;
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p92, $i3);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p93, 2);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p94, 1);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i8, 1);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i95 == 1);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p97, 61);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb130:
    assume $i95 == 1;
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p96, 39);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb102:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb103;

  $bb100:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i1, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i1, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb110, $bb112;

  $bb112:
    assume !($i58 == 1);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p86, $i3);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p87, 2);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p88, 1);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p89, 38);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb110:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb111;

  $bb108:
    assume $i57 == 1;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p78, $i3);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p79, 2);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p80, 1);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i8, 1);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i81 == 1);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p83, 32);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb127:
    assume $i81 == 1;
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p82, 22);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb98:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb119;

  $bb117:
    assume $i61 == 1;
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p74, 2);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p75, 0);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb115:
    assume $i60 == 1;
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p72, 2);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p73, 5);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb113:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i63 == 1);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p70, 1);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p71, $sub.i8(0, 128));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb122:
    assume $i63 == 1;
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p67, 0);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p68, 8);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p69, 48);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb120:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb17;

  $bb124:
    assume $i64 == 1;
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p65, 0);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p66, 0);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    goto $bb126;
}



const printk: ref;

axiom printk == $sub.ref(0, 196939);

procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 1} true;
    call {:si_unique_call 65} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 66} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 1} true;
    call {:si_unique_call 67} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 68} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 1} true;
    call {:si_unique_call 69} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 70} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 1} true;
    call {:si_unique_call 71} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 72} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 1} true;
    call {:si_unique_call 73} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 74} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 1} true;
    call {:si_unique_call 75} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 76} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 1} true;
    call {:si_unique_call 77} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 78} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 1} true;
    call {:si_unique_call 79} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 80} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const cpia2_send_command: ref;

axiom cpia2_send_command == $sub.ref(0, 197971);

procedure cpia2_send_command($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpia2_send_command($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $p18: ref;
  var $p23: ref;
  var $i24: i8;
  var $p25: ref;
  var $i26: i8;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $p35: ref;
  var $p37: ref;
  var $i38: i8;
  var $p39: ref;
  var $i40: i8;
  var $p41: ref;
  var $p42: ref;
  var $i20: i8;
  var $i21: i8;
  var $p22: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i8;
  var $i50: i32;
  var $i51: i8;
  var $i52: i32;
  var $i53: i8;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i8;
  var $i58: i32;
  var $i45: i32;
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.7, $p2);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} vslice_dummy_var_62 := printk.ref.ref(.str.14, .str.15);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32(0, 22);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $r := $i45;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.7, $p37);
    call {:si_unique_call 81} {:cexpr "count"} boogie_si_record_i8($i38);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.7, $p39);
    call {:si_unique_call 82} {:cexpr "start"} boogie_si_record_i8($i40);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i20, $i21, $p22 := $i38, $i40, $p41;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.7, $p46);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i21);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i20);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(6, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.7, $p54);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i56);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i58 := cpia2_usb_transfer_cmd($p0, $p22, $i49, $i51, $i53, $i57);
    call {:si_unique_call 88} {:cexpr "retval"} boogie_si_record_i32($i58);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i45 := $i58;
    goto $bb19;

  $bb4:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i5, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.7, $p30);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i33 := $mul.i32($i32, 4);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    call {:si_unique_call 83} {:cexpr "count"} boogie_si_record_i8($i34);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i20, $i21, $p22 := $i34, 0, $p35;
    goto $bb17;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i5, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i5, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.7, $p13);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i16 := $mul.i32($i15, 2);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    call {:si_unique_call 84} {:cexpr "count"} boogie_si_record_i8($i17);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i20, $i21, $p22 := $i17, 0, $p18;
    goto $bb17;

  $bb11:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb8;

  $bb15:
    assume $i12 == 1;
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.7, $p23);
    call {:si_unique_call 85} {:cexpr "count"} boogie_si_record_i8($i24);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.7, $p25);
    call {:si_unique_call 86} {:cexpr "start"} boogie_si_record_i8($i26);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i20, $i21, $p22 := $i24, $i26, $p27;
    goto $bb17;
}



const cpia2_usb_transfer_cmd: ref;

axiom cpia2_usb_transfer_cmd == $sub.ref(0, 199003);

procedure cpia2_usb_transfer_cmd($p0: ref, $p1: ref, $i2: i8, $i3: i8, $i4: i8, $i5: i8) returns ($r: i32);
  free requires assertsPassed;



implementation cpia2_usb_transfer_cmd($p0: ref, $p1: ref, $i2: i8, $i3: i8, $i4: i8, $i5: i8) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i12: i64;
  var $i13: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i16;
  var $i21: i64;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i8;
  var $i30: i32;
  var $i31: i16;
  var $i32: i64;
  var $i33: i32;
  var $i34: i1;
  var $i36: i32;
  var $i37: i32;
  var $i39: i32;
  var $i40: i8;
  var $i41: i32;
  var $i43: i32;
  var $i44: i32;
  var $i25: i32;
  var $i46: i1;
  var $i11: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} {:cexpr "cpia2_usb_transfer_cmd:arg:request"} boogie_si_record_i8($i2);
    call {:si_unique_call 91} {:cexpr "cpia2_usb_transfer_cmd:arg:start"} boogie_si_record_i8($i3);
    call {:si_unique_call 92} {:cexpr "cpia2_usb_transfer_cmd:arg:count"} boogie_si_record_i8($i4);
    call {:si_unique_call 93} {:cexpr "cpia2_usb_transfer_cmd:arg:direction"} boogie_si_record_i8($i5);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2496, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.4, $p6);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p1);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i5);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i5);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i5);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} vslice_dummy_var_65 := printk.ref.i32(.str.8, $i44);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb14:
    assume $i27 == 1;
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i2);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i3);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i64($i4);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $i33 := write_packet($p7, $i29, $p1, $i31, $i32);
    call {:si_unique_call 99} {:cexpr "err"} boogie_si_record_i32($i33);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i25 := $i43;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i25, 0);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i11 := $i25;
    goto $bb3;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} vslice_dummy_var_69 := printk.ref.i32(.str.9, $i25);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} vslice_dummy_var_66 := printk.ref.i32(.str.5, $i33);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i2);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i3);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} vslice_dummy_var_67 := printk.ref.i32.i32(.str.6, $i36, $i37);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i4);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.7, $p1);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} vslice_dummy_var_68 := printk.ref.i32.i32(.str.7, $i39, $i41);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i43 := $i33;
    goto $bb18;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i2);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i3);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i4);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $i22 := read_packet($p7, $i18, $p1, $i20, $i21);
    call {:si_unique_call 97} {:cexpr "err"} boogie_si_record_i32($i22);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i23 := $sgt.i32($i22, 0);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb13;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb12;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} vslice_dummy_var_64 := printk.ref.ref(.str.4, .str.3);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} vslice_dummy_var_63 := printk.ref.ref(.str.2, .str.3);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;
}



const read_packet: ref;

axiom read_packet == $sub.ref(0, 200035);

procedure read_packet($p0: ref, $i1: i8, $p2: ref, $i3: i16, $i4: i64) returns ($r: i32);
  free requires assertsPassed;



implementation read_packet($p0: ref, $i1: i8, $p2: ref, $i3: i16, $i4: i64) returns ($r: i32)
{
  var $i5: i64;
  var $i6: i1;
  var $i7: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i16;
  var $i15: i16;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} {:cexpr "read_packet:arg:request"} boogie_si_record_i8($i1);
    call {:si_unique_call 106} {:cexpr "read_packet:arg:start"} boogie_si_record_i16($i3);
    call {:si_unique_call 107} {:cexpr "read_packet:arg:size"} boogie_si_record_i64($i4);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p2);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i4, 0);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $i9 := __create_pipe($p0, 0);
    call {:si_unique_call 109} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, $sub.i32(0, 2147483520));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i1);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i3);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i16($i4);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $i18 := usb_control_msg($p0, $i10, $i12, $sub.i8(0, 64), $i14, 0, $p2, $i17, 250);
    call {:si_unique_call 111} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i8 := $i18;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const write_packet: ref;

axiom write_packet == $sub.ref(0, 201067);

procedure write_packet($p0: ref, $i1: i8, $p2: ref, $i3: i16, $i4: i64) returns ($r: i32);
  free requires assertsPassed;



implementation write_packet($p0: ref, $i1: i8, $p2: ref, $i3: i16, $i4: i64) returns ($r: i32)
{
  var $i5: i64;
  var $i6: i1;
  var $i7: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i16;
  var $i15: i16;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} {:cexpr "write_packet:arg:request"} boogie_si_record_i8($i1);
    call {:si_unique_call 113} {:cexpr "write_packet:arg:start"} boogie_si_record_i16($i3);
    call {:si_unique_call 114} {:cexpr "write_packet:arg:size"} boogie_si_record_i64($i4);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p2);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i4, 0);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $i9 := __create_pipe($p0, 0);
    call {:si_unique_call 116} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, $sub.i32(0, 2147483648));
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i1);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i3);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i16($i4);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $i18 := usb_control_msg($p0, $i10, $i12, 64, $i14, 0, $p2, $i17, 250);
    call {:si_unique_call 118} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i8 := $i18;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 202099);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(0, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.4, $p2);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 203131);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 120} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 121} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 122} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 123} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 124} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 125} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 126} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 1} true;
    call {:si_unique_call 127} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 128} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const video_device_release_empty: ref;

axiom video_device_release_empty == $sub.ref(0, 204163);

procedure video_device_release_empty($p0: ref);
  free requires assertsPassed;



implementation video_device_release_empty($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    return;
}



const cpia2_v4l_read: ref;

axiom cpia2_v4l_read == $sub.ref(0, 205195);

procedure cpia2_v4l_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.8, $M.4, $M.9, $M.7, $M.18, $M.19, $M.20, $M.21, $M.22, assertsPassed, $M.10, $CurrAddr, $M.26;



implementation cpia2_v4l_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} {:cexpr "cpia2_v4l_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $p4 := video_drvdata($p0);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(128, 1));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.4, $p6);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 2048);
    call {:si_unique_call 131} {:cexpr "noblock"} boogie_si_record_i32($i8);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p5);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $i13 := ldv_mutex_lock_interruptible_14($p12);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 133} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $i15 := cpia2_read($p5, $p1, $i2, $i8);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 135} {:cexpr "ret"} boogie_si_record_i64($i15);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} ldv_mutex_unlock_15($p16);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i11 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 512);
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;
}



const cpia2_v4l_poll: ref;

axiom cpia2_v4l_poll == $sub.ref(0, 206227);

procedure cpia2_v4l_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, assertsPassed, $M.4, $M.9, $M.7, $M.10, $CurrAddr;



implementation cpia2_v4l_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $p2 := video_drvdata($p0);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} ldv_mutex_lock_16($p4);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} $i5 := cpia2_poll($p3, $p0, $p1);
    call {:si_unique_call 140} {:cexpr "res"} boogie_si_record_i32($i5);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} ldv_mutex_unlock_17($p6);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const video_ioctl2: ref;

axiom video_ioctl2 == $sub.ref(0, 207259);

procedure video_ioctl2($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation video_ioctl2($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 142} {:cexpr "video_ioctl2:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 143} {:cexpr "video_ioctl2:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 1} true;
    call {:si_unique_call 144} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 145} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const cpia2_mmap: ref;

axiom cpia2_mmap == $sub.ref(0, 208291);

procedure cpia2_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.8, $M.15, assertsPassed, $M.16, $CurrAddr;



implementation cpia2_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $p2 := video_drvdata($p0);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $i5 := ldv_mutex_lock_interruptible_22($p4);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 148} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $i8 := cpia2_remap_buffer($p3, $p1);
    call {:si_unique_call 150} {:cexpr "retval"} boogie_si_record_i32($i8);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} ldv_mutex_unlock_23($p14);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i7 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.4, $p10);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 2824)), $mul.ref(800, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, $p11);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 512);
    goto $bb3;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const cpia2_open: ref;

axiom cpia2_open == $sub.ref(0, 209323);

procedure cpia2_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.8, $M.7, $M.10, assertsPassed, $CurrAddr, $M.9;



implementation cpia2_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $i9: i32;
  var $p20: ref;
  var $i6: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $p1 := video_drvdata($p0);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $i4 := ldv_mutex_lock_interruptible_10($p3);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 154} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $i7 := v4l2_fh_open($p0);
    call {:si_unique_call 156} {:cexpr "retval"} boogie_si_record_i32($i7);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $i10 := v4l2_fh_is_singular_file($p0);
    call {:si_unique_call 159} {:cexpr "tmp___3"} boogie_si_record_i32($i10);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} cpia2_dbg_dump_registers($p2);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} ldv_mutex_unlock_11($p20);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i11 == 1;
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i12 := cpia2_allocate_buffers($p2);
    call {:si_unique_call 161} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i15 := cpia2_reset_camera($p2);
    call {:si_unique_call 164} {:cexpr "tmp___2"} boogie_si_record_i32($i15);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 2824)), $mul.ref(2692, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p18, 0);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 2824)), $mul.ref(2756, 1));
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p19, 0);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i16 == 1;
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} vslice_dummy_var_71 := v4l2_fh_release($p0);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 5);
    goto $bb7;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} vslice_dummy_var_70 := v4l2_fh_release($p0);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb7;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 512);
    goto $bb3;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const cpia2_close: ref;

axiom cpia2_close == $sub.ref(0, 210355);

procedure cpia2_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.7, $M.8, $M.9, assertsPassed, $CurrAddr;



implementation cpia2_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $p1 := video_devdata($p0);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p2 := video_get_drvdata($p1);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} ldv_mutex_lock_12($p4);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 2824)), $mul.ref(904, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $i6 := video_is_registered($p5);
    call {:si_unique_call 171} {:cexpr "tmp___1"} boogie_si_record_i32($i6);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 2824)), $mul.ref(800, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.4, $p12);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.4, $p16);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i15, $i18);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} ldv_mutex_unlock_13($p22);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i23 := v4l2_fh_release($p0);
    call {:si_unique_call 180} {:cexpr "tmp___3"} boogie_si_record_i32($i23);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 2824)), $mul.ref(800, 1));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p20, $0.ref);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 2824)), $mul.ref(808, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p21, 0);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i8 := v4l2_fh_is_singular_file($p0);
    call {:si_unique_call 173} {:cexpr "tmp___2"} boogie_si_record_i32($i8);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} vslice_dummy_var_72 := cpia2_usb_stream_stop($p3);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} cpia2_save_camera_state($p3);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} vslice_dummy_var_73 := cpia2_set_low_power($p3);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} cpia2_free_buffers($p3);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const video_devdata: ref;

axiom video_devdata == $sub.ref(0, 211387);

procedure video_devdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_devdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $p1 := external_alloc();
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const video_get_drvdata: ref;

axiom video_get_drvdata == $sub.ref(0, 212419);

procedure video_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1576)), $mul.ref(136, 1));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_mutex_lock_12: ref;

axiom ldv_mutex_lock_12 == $sub.ref(0, 213451);

procedure ldv_mutex_lock_12($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_12($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} ldv_mutex_lock_v4l2_lock_of_camera_data($p0);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} mutex_lock($p0);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const video_is_registered: ref;

axiom video_is_registered == $sub.ref(0, 214483);

procedure video_is_registered($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation video_is_registered($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1576)), $mul.ref(1376, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 186} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const v4l2_fh_is_singular_file: ref;

axiom v4l2_fh_is_singular_file == $sub.ref(0, 215515);

procedure v4l2_fh_is_singular_file($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_fh_is_singular_file($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.4, $p1);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $i4 := v4l2_fh_is_singular($p3);
    call {:si_unique_call 188} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const cpia2_usb_stream_stop: ref;

axiom cpia2_usb_stream_stop == $sub.ref(0, 216547);

procedure cpia2_usb_stream_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.9, $M.7, $CurrAddr;



implementation cpia2_usb_stream_stop($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $p2: ref;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $i1 := cpia2_usb_stream_pause($p0);
    call {:si_unique_call 190} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(812, 1));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p2, 0);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} vslice_dummy_var_74 := configure_transfer_mode($p0, 0);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const cpia2_save_camera_state: ref;

axiom cpia2_save_camera_state == $sub.ref(0, 217579);

procedure cpia2_save_camera_state($p0: ref);
  free requires assertsPassed;
  modifies $M.7, $M.4, $CurrAddr;



implementation cpia2_save_camera_state($p0: ref)
{
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} vslice_dummy_var_75 := cpia2_do_command($p0, 51, 0, 0);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} vslice_dummy_var_76 := cpia2_do_command($p0, 16, 0, 0);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} vslice_dummy_var_77 := cpia2_do_command($p0, 18, 0, 0);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    return;
}



const cpia2_set_low_power: ref;

axiom cpia2_set_low_power == $sub.ref(0, 218611);

procedure cpia2_set_low_power($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.7, $CurrAddr;



implementation cpia2_set_low_power($p0: ref) returns ($r: i32)
{
  var $p3: ref;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(0, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p3, 0);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} vslice_dummy_var_78 := cpia2_do_command($p0, 36, 1, 0);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const cpia2_free_buffers: ref;

axiom cpia2_free_buffers == $sub.ref(0, 219643);

procedure cpia2_free_buffers($p0: ref);
  free requires assertsPassed;
  modifies $M.4;



implementation cpia2_free_buffers($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.4, $p1);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2656, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.4, $p9);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2656, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.4, $p13);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2640, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.4, $p15);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2644, 1));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.4, $p17);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i19 := $mul.i32($i16, $i18);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} rvfree($p14, $i20);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2656, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p21, $0.ref);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.4, $p5);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} kfree($p7);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, $0.ref);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_unlock_13: ref;

axiom ldv_mutex_unlock_13 == $sub.ref(0, 220675);

procedure ldv_mutex_unlock_13($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_13($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} ldv_mutex_unlock_v4l2_lock_of_camera_data($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} mutex_unlock($p0);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const v4l2_fh_release: ref;

axiom v4l2_fh_release == $sub.ref(0, 221707);

procedure v4l2_fh_release($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_fh_release($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 1} true;
    call {:si_unique_call 200} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 201} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_unlock_v4l2_lock_of_camera_data: ref;

axiom ldv_mutex_unlock_v4l2_lock_of_camera_data == $sub.ref(0, 222739);

procedure ldv_mutex_unlock_v4l2_lock_of_camera_data($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_v4l2_lock_of_camera_data($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i1 := $M.8;
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} ldv_error();
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 203} {:cexpr "ldv_mutex_v4l2_lock_of_camera_data"} boogie_si_record_i32(1);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 223771);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 224803);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 204} __VERIFIER_error();
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const rvfree: ref;

axiom rvfree == $sub.ref(0, 225835);

procedure rvfree($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation rvfree($p0: ref, $i1: i64)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i8: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} {:cexpr "rvfree:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i1, 4095);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, $sub.i64(0, 4096));
    call {:si_unique_call 206} {:cexpr "size"} boogie_si_record_i64($i5);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 207} {:cexpr "adr"} boogie_si_record_i64($i6);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i64($i5, 0);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} vfree($p0);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i8, $i9 := $i6, $i5;
    goto $bb8;

  $bb8:
    call $p10, $p11, $i12, $i13, $i14, $i8, $i9 := rvfree_loop_$bb8($p10, $p11, $i12, $i13, $i14, $i8, $i9);
    goto $bb8_last;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i8);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $p11 := vmalloc_to_page($p10);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} ClearPageReserved($p11);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i8, 4096);
    call {:si_unique_call 210} {:cexpr "adr"} boogie_si_record_i64($i12);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64($i9, 4096);
    call {:si_unique_call 211} {:cexpr "size"} boogie_si_record_i64($i13);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i64($i13, 0);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i8, $i9 := $i12, $i13;
    goto $bb10_dummy;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1503;
}



const vmalloc_to_page: ref;

axiom vmalloc_to_page == $sub.ref(0, 226867);

procedure vmalloc_to_page($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vmalloc_to_page($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $p1 := external_alloc();
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ClearPageReserved: ref;

axiom ClearPageReserved == $sub.ref(0, 227899);

procedure ClearPageReserved($p0: ref);
  free requires assertsPassed;



implementation ClearPageReserved($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} clear_bit(10, $p1);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    return;
}



const vfree: ref;

axiom vfree == $sub.ref(0, 228931);

procedure vfree($p0: ref);
  free requires assertsPassed;



implementation vfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 229963);

procedure clear_bit($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 216} devirtbounce(0, $p1, $i0, $p1);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 230995);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 1} true;
    call {:si_unique_call 217} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 218} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const cpia2_usb_stream_pause: ref;

axiom cpia2_usb_stream_pause == $sub.ref(0, 232027);

procedure cpia2_usb_stream_pause($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4;



implementation cpia2_usb_stream_pause($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(812, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.4, $p1);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} free_sbufs($p0);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $i4 := set_alternate($p0, 0);
    call {:si_unique_call 221} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const configure_transfer_mode: ref;

axiom configure_transfer_mode == $sub.ref(0, 233059);

procedure configure_transfer_mode($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.7, $M.4, $CurrAddr;



implementation configure_transfer_mode($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p72: ref;
  var $i73: i64;
  var $p75: ref;
  var $i76: i8;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $p82: ref;
  var $i83: i8;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $p89: ref;
  var $i90: i8;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $p96: ref;
  var $i97: i8;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i8;
  var $i114: i32;
  var $i115: i32;
  var $i116: i8;
  var $i117: i1;
  var $i118: i32;
  var $i119: i32;
  var $i120: i8;
  var $p121: ref;
  var $i123: i1;
  var $i124: i32;
  var $i125: i32;
  var $i126: i8;
  var $p127: ref;
  var $i128: i8;
  var $i122: i8;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i71: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $p3 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    call {:si_unique_call 224} {:cexpr "configure_transfer_mode:arg:alt"} boogie_si_record_i32($i1);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p5, 0);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p7, 0);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p9, 0);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p11, 0);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p13, 0);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 4)), $mul.ref(1, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p15, 0);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p17, 0);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 4)), $mul.ref(3, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p19, 0);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p21, $sub.i8(0, 71));
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(2, 4)), $mul.ref(1, 1));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p23, 0);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p25, 0);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(2, 4)), $mul.ref(3, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p27, 126);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p29, $sub.i8(0, 71));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(3, 4)), $mul.ref(1, 1));
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p31, 0);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p33, 1);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(3, 4)), $mul.ref(3, 1));
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p35, 126);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p37, $sub.i8(0, 71));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 4)), $mul.ref(1, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p39, 0);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p41, 2);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 4)), $mul.ref(3, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p43, 126);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p45, $sub.i8(0, 71));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(5, 4)), $mul.ref(1, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p47, 0);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p49, 2);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(5, 4)), $mul.ref(3, 1));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p51, $sub.i8(0, 2));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p53, $sub.i8(0, 71));
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(6, 4)), $mul.ref(1, 1));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p55, 0);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p57, 3);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(6, 4)), $mul.ref(3, 1));
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p59, 126);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p61, $sub.i8(0, 71));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(7, 4)), $mul.ref(1, 1));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p63, 0);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p65, 3);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(7, 4)), $mul.ref(3, 1));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p67, $sub.i8(0, 3));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(904, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $i69 := video_is_registered($p68);
    call {:si_unique_call 226} {:cexpr "tmp"} boogie_si_record_i32($i69);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 0);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(6, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p72, 1);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i73 := $zext.i32.i64($i1);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref($i73, 4)), $mul.ref(0, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.9, $p75);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p79, $i76);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i80 := $zext.i32.i64($i1);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref($i80, 4)), $mul.ref(1, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.9, $p82);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 64)), $mul.ref(1, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p86, $i83);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i87 := $zext.i32.i64($i1);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref($i87, 4)), $mul.ref(2, 1));
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.9, $p89);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p93, $i90);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i94 := $zext.i32.i64($i1);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref($i94, 4)), $mul.ref(3, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.9, $p96);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 64)), $mul.ref(3, 1));
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p100, $i97);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p101, 1);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p102, $sub.i8(0, 80));
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p103, 4);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} vslice_dummy_var_79 := cpia2_send_command($p0, $p3);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(6, 1));
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p105, 0);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p106, 1);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p107, $sub.i8(0, 87));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p108, 1);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} vslice_dummy_var_80 := cpia2_send_command($p0, $p3);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p111, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.7, $p112);
    call {:si_unique_call 229} {:cexpr "reg"} boogie_si_record_i8($i113);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i32($i113);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i115 := $and.i32($i114, 248);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i8($i115);
    call {:si_unique_call 230} {:cexpr "reg"} boogie_si_record_i8($i116);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i1, 1);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i117 == 1);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i123 := $ugt.i32($i1, 1);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    $i128 := $i116;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i122 := $i128;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p129);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p130, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p131, $i122);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(6, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p132, 1);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p133, $sub.i8(0, 87));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p134, 1);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p135, 1);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} vslice_dummy_var_81 := cpia2_send_command($p0, $p3);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i71 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $r := $i71;
    return;

  $bb8:
    assume $i123 == 1;
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i116);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i125 := $or.i32($i124, 1);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i32.i8($i125);
    call {:si_unique_call 233} {:cexpr "reg"} boogie_si_record_i8($i126);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(816, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p127, 0);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i128 := $i126;
    goto $bb10;

  $bb5:
    assume $i117 == 1;
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i116);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i119 := $or.i32($i118, 2);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i32.i8($i119);
    call {:si_unique_call 231} {:cexpr "reg"} boogie_si_record_i8($i120);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(816, 1));
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p121, 1);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i122 := $i120;
    goto $bb7;

  $bb1:
    assume $i70 == 1;
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i71 := $sub.i32(0, 19);
    goto $bb3;
}



const free_sbufs: ref;

axiom free_sbufs == $sub.ref(0, 234091);

procedure free_sbufs($p0: ref);
  free requires assertsPassed;
  modifies $M.4;



implementation free_sbufs($p0: ref)
{
  var $i2: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p22: ref;
  var $i23: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i1 := 0;
    goto $bb1;

  $bb1:
    call $i2, $p5, $p6, $i7, $i8, $i9, $p12, $p13, $i14, $p17, $p18, $i19, $p22, $i23, $p26, $p27, $i28, $i29, $i30, $p33, $p34, $i35, $p38, $i39, $i40, $i1 := free_sbufs_loop_$bb1($p0, $i2, $p5, $p6, $i7, $i8, $i9, $p12, $p13, $i14, $p17, $p18, $i19, $p22, $i23, $p26, $p27, $i28, $i29, $i30, $p33, $p34, $i35, $p38, $i39, $i40, $i1);
    goto $bb1_last;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref($i2, 16)), $mul.ref(8, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.4, $p5);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i1);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref($i23, 16)), $mul.ref(0, 1));
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.4, $p26);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i1, 1);
    call {:si_unique_call 237} {:cexpr "i"} boogie_si_record_i32($i39);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i40 := $sle.i32($i39, 1);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i40 == 1);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i1 := $i39;
    goto $bb9_dummy;

  $bb6:
    assume $i29 == 1;
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i1);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref($i30, 16)), $mul.ref(0, 1));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.4, $p33);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} kfree($p34);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i1);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref($i35, 16)), $mul.ref(0, 1));
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p38, $0.ref);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i1);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref($i9, 16)), $mul.ref(8, 1));
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.4, $p12);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} usb_kill_urb($p13);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i1);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref($i14, 16)), $mul.ref(8, 1));
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.4, $p17);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} usb_free_urb($p18);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i1);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref($i19, 16)), $mul.ref(8, 1));
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p22, $0.ref);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1704;
}



const set_alternate: ref;

axiom set_alternate == $sub.ref(0, 235123);

procedure set_alternate($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4;



implementation set_alternate($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} {:cexpr "set_alternate:arg:alt"} boogie_si_record_i32($i1);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.4, $p2);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $i1);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.4, $p6);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i1, 0);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i25 := $i16;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.4, $p26);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2512, 1));
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p28, $i27);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p29, $i1);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i5 := $i25;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2496, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.4, $p18);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2504, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.4, $p20);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $i23 := usb_set_interface($p19, $i22, $i1);
    call {:si_unique_call 242} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i25 := $i23;
    goto $bb16;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i5 := $i23;
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2496, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.4, $p9);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2504, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.4, $p11);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $i14 := usb_set_interface($p10, $i13, 0);
    call {:si_unique_call 240} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    goto $bb10;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i5 := $i14;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const usb_set_interface: ref;

axiom usb_set_interface == $sub.ref(0, 236155);

procedure usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 243} {:cexpr "usb_set_interface:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 244} {:cexpr "usb_set_interface:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 1} true;
    call {:si_unique_call 245} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 246} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 237187);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 238219);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;



implementation usb_free_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_fh_is_singular: ref;

axiom v4l2_fh_is_singular == $sub.ref(0, 239251);

procedure v4l2_fh_is_singular($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_fh_is_singular($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 1} true;
    call {:si_unique_call 247} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 248} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 240283);

procedure constant_test_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i32($i0);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i2 := $udiv.i32($i0, 64);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p1, $mul.ref($i3, 8));
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.4, $p4);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i0, 63);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i5, $i7);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const ldv_mutex_lock_v4l2_lock_of_camera_data: ref;

axiom ldv_mutex_lock_v4l2_lock_of_camera_data == $sub.ref(0, 241315);

procedure ldv_mutex_lock_v4l2_lock_of_camera_data($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_v4l2_lock_of_camera_data($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i1 := $M.8;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} ldv_error();
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 251} {:cexpr "ldv_mutex_v4l2_lock_of_camera_data"} boogie_si_record_i32(2);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 242347);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 243379);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $p1 := external_alloc();
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const video_drvdata: ref;

axiom video_drvdata == $sub.ref(0, 244411);

procedure video_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $p1 := video_devdata($p0);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $p2 := video_get_drvdata($p1);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_mutex_lock_interruptible_10: ref;

axiom ldv_mutex_lock_interruptible_10 == $sub.ref(0, 245443);

procedure ldv_mutex_lock_interruptible_10($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_interruptible_10($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 256} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $i2 := ldv_mutex_lock_interruptible_v4l2_lock_of_camera_data($p0);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 258} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const v4l2_fh_open: ref;

axiom v4l2_fh_open == $sub.ref(0, 246475);

procedure v4l2_fh_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_fh_open($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 1} true;
    call {:si_unique_call 259} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 260} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const cpia2_allocate_buffers: ref;

axiom cpia2_allocate_buffers == $sub.ref(0, 247507);

procedure cpia2_allocate_buffers($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $CurrAddr;



implementation cpia2_allocate_buffers($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $i46: i32;
  var $i93: i32;
  var $i45: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $i106: i64;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i64;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i64;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i19: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.4, $p1);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2656, 1));
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.4, $p20);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2644, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.4, $p41);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, $sub.i32(0, 1));
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i44 := $sgt.i32($i43, 0);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i45 := 0;
    assume {:branchcond $i44} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.4, $p94);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.4, $p96);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64($i45);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p97, $mul.ref($i98, 56)), $mul.ref(48, 1));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p100, $p95);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2656, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.4, $p101);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2640, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.4, $p103);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i105 := $mul.i32($i104, $i45);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i106 := $zext.i32.i64($i105);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p102, $mul.ref($i106, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.4, $p108);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i45);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p109, $mul.ref($i110, 56)), $mul.ref(40, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p112, $p107);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.4, $p113);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i115 := $sext.i32.i64($i45);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p114, $mul.ref($i115, 56)), $mul.ref(36, 1));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p117, 0);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.4, $p118);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i120 := $sext.i32.i64($i45);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p119, $mul.ref($i120, 56)), $mul.ref(28, 1));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p122, 0);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.4, $p123);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i125 := $sext.i32.i64($i45);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p124, $mul.ref($i125, 56)), $mul.ref(32, 1));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p127, 0);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.4, $p128);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i130 := $sext.i32.i64($i45);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p129, $mul.ref($i130, 56)), $mul.ref(24, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p132, $i45);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.4, $p133);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2672, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p135, $p134);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2672, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.4, $p136);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.4, $p138);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2680, 1));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p140, $p139);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb17;

  $bb17:
    call $p47, $p48, $i49, $i50, $p51, $p52, $p53, $i54, $p56, $p57, $p58, $p59, $i60, $i61, $i62, $p63, $p64, $p65, $i66, $p68, $p69, $p70, $i71, $p73, $p74, $p75, $i76, $p78, $p79, $p80, $i81, $p83, $p84, $p85, $i86, $p88, $i89, $i90, $i91, $i92, $i46, $i93 := cpia2_allocate_buffers_loop_$bb17($p0, $p41, $p47, $p48, $i49, $i50, $p51, $p52, $p53, $i54, $p56, $p57, $p58, $p59, $i60, $i61, $i62, $p63, $p64, $p65, $i66, $p68, $p69, $p70, $i71, $p73, $p74, $p75, $i76, $p78, $p79, $p80, $i81, $p83, $p84, $p85, $i86, $p88, $i89, $i90, $i91, $i92, $i46, $i93);
    goto $bb17_last;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.4, $p47);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i46);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i49, 1);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p48, $mul.ref($i50, 56));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.4, $p52);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i46);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p53, $mul.ref($i54, 56)), $mul.ref(48, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p56, $p51);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2656, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.4, $p57);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2640, 1));
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.4, $p59);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i61 := $mul.i32($i60, $i46);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i62 := $zext.i32.i64($i61);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p58, $mul.ref($i62, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.4, $p64);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i46);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p65, $mul.ref($i66, 56)), $mul.ref(40, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p68, $p63);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.4, $p69);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i46);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p70, $mul.ref($i71, 56)), $mul.ref(36, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p73, 0);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.4, $p74);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i46);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p75, $mul.ref($i76, 56)), $mul.ref(28, 1));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p78, 0);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.4, $p79);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i46);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p80, $mul.ref($i81, 56)), $mul.ref(32, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p83, 0);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.4, $p84);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i46);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p85, $mul.ref($i86, 56)), $mul.ref(24, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p88, $i46);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i46, 1);
    call {:si_unique_call 267} {:cexpr "i"} boogie_si_record_i32($i89);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.4, $p41);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i90, $sub.i32(0, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i92 := $sgt.i32($i91, $i89);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i93 := $i89;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i45 := $i93;
    goto $bb16;

  $bb19:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $i46 := $i89;
    goto $bb19_dummy;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2640, 1));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.4, $p24);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2644, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.4, $p26);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i28 := $mul.i32($i25, $i27);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i28);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $p30 := rvmalloc($i29);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2656, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p31, $p30);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2656, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.4, $p32);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i35 == 1;
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} vslice_dummy_var_83 := printk.ref(.str.23);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.4, $p37);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} kfree($p39);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p40, $0.ref);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 12);
    goto $bb5;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2644, 1));
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.4, $p5);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i9 := $mul.i32($i8, 56);
    call {:si_unique_call 261} {:cexpr "size"} boogie_si_record_i32($i9);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $p11 := kmalloc($i10, 208);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, $p11);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.4, $p14);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} vslice_dummy_var_82 := printk.ref(.str.22);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 12);
    goto $bb5;

  $bb19_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1903;
}



const cpia2_reset_camera: ref;

axiom cpia2_reset_camera == $sub.ref(0, 248539);

procedure cpia2_reset_camera($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.4, $M.10, $CurrAddr, $M.9;



implementation cpia2_reset_camera($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p4: ref;
  var $i5: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $i51: i64;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var $i60: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i144: i64;
  var $p151: ref;
  var $i152: i8;
  var $i153: i32;
  var $i154: i32;
  var $i155: i8;
  var $p156: ref;
  var $p157: ref;
  var $p159: ref;
  var $p163: ref;
  var $i164: i8;
  var $i165: i32;
  var $i166: i32;
  var $i167: i8;
  var $p168: ref;
  var $p169: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p189: ref;
  var $i190: i32;
  var $i191: i1;
  var $p196: ref;
  var $i197: i32;
  var $i198: i1;
  var $p203: ref;
  var $i204: i8;
  var $i205: i32;
  var $i206: i32;
  var $i207: i8;
  var $p208: ref;
  var $p209: ref;
  var $p211: ref;
  var $p215: ref;
  var $i216: i8;
  var $i217: i32;
  var $i218: i32;
  var $i219: i8;
  var $p220: ref;
  var $p221: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p239: ref;
  var $i240: i8;
  var $i241: i32;
  var $i242: i1;
  var $p245: ref;
  var $i246: i8;
  var $i247: i32;
  var $i248: i32;
  var $i249: i8;
  var $p253: ref;
  var $i254: i8;
  var $i255: i32;
  var $i256: i32;
  var $i257: i8;
  var $i250: i8;
  var $i258: i32;
  var $i259: i8;
  var $p261: ref;
  var $i262: i32;
  var $p263: ref;
  var $i264: i32;
  var $i265: i32;
  var $i266: i32;
  var $i267: i32;
  var $p270: ref;
  var $i271: i8;
  var $i272: i32;
  var $i273: i32;
  var $i274: i32;
  var $i275: i1;
  var $i276: i32;
  var $i277: i8;
  var $i278: i32;
  var $i279: i8;
  var $p284: ref;
  var $i285: i8;
  var $i286: i32;
  var $i287: i32;
  var $i288: i8;
  var $i289: i32;
  var $i290: i8;
  var $i292: i32;
  var $i293: i32;
  var $i294: i8;
  var $i295: i32;
  var $i296: i8;
  var $i13: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i64;
  var vslice_dummy_var_89: i64;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i64;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $p1 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.4, $p4);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.4, $p8);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $i10 := configure_sensor($p0, $i5, $i9);
    call {:si_unique_call 270} {:cexpr "retval"} boogie_si_record_i32($i10);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p14, 5);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(6, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p15, 1);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p16, 2);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 64)), $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p20, $sub.i8(0, 96));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 64)), $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p24, 64);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 64)), $mul.ref(1, 2)), $mul.ref(0, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p28, $sub.i8(0, 96));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 64)), $mul.ref(1, 2)), $mul.ref(1, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p32, 96);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} vslice_dummy_var_85 := cpia2_send_command($p0, $p1);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} vslice_dummy_var_86 := cpia2_set_high_power($p0);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.4, $p37);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 1);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i51 := msecs_to_jiffies(100);
    call {:si_unique_call 276} {:cexpr "tmp"} boogie_si_record_i64($i51);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} vslice_dummy_var_88 := schedule_timeout_interruptible($i51);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.4, $p55);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 1);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i59 := $i10;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i60 := msecs_to_jiffies(100);
    call {:si_unique_call 281} {:cexpr "tmp___0"} boogie_si_record_i64($i60);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} vslice_dummy_var_89 := schedule_timeout_interruptible($i60);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.4, $p64);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 2);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} vslice_dummy_var_91 := set_default_user_mode($p0);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $i144 := msecs_to_jiffies(100);
    call {:si_unique_call 286} {:cexpr "tmp___1"} boogie_si_record_i64($i144);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} vslice_dummy_var_92 := schedule_timeout_interruptible($i144);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} vslice_dummy_var_93 := set_all_properties($p0);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} vslice_dummy_var_94 := cpia2_do_command($p0, 28, 0, 0);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} vslice_dummy_var_95 := cpia2_do_command($p0, 38, 0, 0);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(5, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i152 := $load.i8($M.4, $p151);
    call {:si_unique_call 291} {:cexpr "tmp_reg"} boogie_si_record_i8($i152);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i32($i152);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i154 := $and.i32($i153, 253);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i155 := $trunc.i32.i8($i154);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p156);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p157, $mul.ref(0, 64)), $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p159, $i155);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} vslice_dummy_var_96 := cpia2_do_command($p0, 42, 0, 0);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(8, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i164 := $load.i8($M.4, $p163);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i165 := $zext.i8.i32($i164);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i166 := $or.i32($i165, 1);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i167 := $trunc.i32.i8($i166);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p168);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p169, $mul.ref(0, 64)), $mul.ref(1, 2)), $mul.ref(1, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p171, $i167);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p173, $mul.ref(0, 64)), $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p175, 3);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p176);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p177, $mul.ref(0, 64)), $mul.ref(1, 2)), $mul.ref(0, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p179, 7);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p180, 6);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p181, 2);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(6, 1));
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p182, 1);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p183, 0);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} vslice_dummy_var_97 := cpia2_send_command($p0, $p1);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} vslice_dummy_var_98 := cpia2_do_command($p0, 44, 1, 32);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} vslice_dummy_var_99 := cpia2_do_command($p0, 45, 1, 16);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i190 := $load.i32($M.4, $p189);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 1);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i191 == 1);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} vslice_dummy_var_101 := cpia2_do_command($p0, 44, 1, $sub.i8(0, 118));
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.4, $p196);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i198 := $eq.i32($i197, 2);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i198} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} vslice_dummy_var_103 := cpia2_do_command($p0, 42, 0, 0);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(8, 1));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i204 := $load.i8($M.4, $p203);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i205 := $zext.i8.i32($i204);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i206 := $and.i32($i205, 254);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i207 := $trunc.i32.i8($i206);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p209 := $bitcast.ref.ref($p208);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p209, $mul.ref(0, 64)), $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p211, $i207);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} vslice_dummy_var_104 := cpia2_do_command($p0, 38, 0, 0);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(5, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i216 := $load.i8($M.4, $p215);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i217 := $zext.i8.i32($i216);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i218 := $or.i32($i217, 2);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i219 := $trunc.i32.i8($i218);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p221 := $bitcast.ref.ref($p220);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p221, $mul.ref(0, 64)), $mul.ref(1, 2)), $mul.ref(1, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p223, $i219);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p225 := $bitcast.ref.ref($p224);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p225, $mul.ref(0, 64)), $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p227, 7);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p229 := $bitcast.ref.ref($p228);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p229, $mul.ref(0, 64)), $mul.ref(1, 2)), $mul.ref(0, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p231, 3);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p232, 6);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p233, 2);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(6, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p234, 1);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} vslice_dummy_var_105 := cpia2_send_command($p0, $p1);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} vslice_dummy_var_106 := cpia2_do_command($p0, 46, 0, 0);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(25, 1)), $mul.ref(3, 1));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i240 := $load.i8($M.4, $p239);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i241 := $zext.i8.i32($i240);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i242 := $ne.i32($i241, 0);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i242} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i242 == 1);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(63, 1)), $mul.ref(2, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i254 := $load.i8($M.4, $p253);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i255 := $zext.i8.i32($i254);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i256 := $and.i32($i255, 239);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i257 := $trunc.i32.i8($i256);
    call {:si_unique_call 304} {:cexpr "tmp_reg"} boogie_si_record_i8($i257);
    assume {:verifier.code 0} true;
    $i250 := $i257;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i258 := $zext.i8.i32($i250);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i259 := $trunc.i32.i8($i258);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} vslice_dummy_var_107 := cpia2_do_command($p0, 47, 1, $i259);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2480, 1));
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i262 := $load.i32($M.4, $p261);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2484, 1));
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i264 := $load.i32($M.4, $p263);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i265 := $mul.i32($i262, $i264);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i266 := $mul.i32($i265, 2);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i267 := $udiv.i32($i266, 16384);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(63, 1)), $mul.ref(5, 1));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i271 := $load.i8($M.4, $p270);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i272 := $zext.i8.i32($i271);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i273 := $mul.i32($i267, $i272);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i274 := $udiv.i32($i273, 100);
    call {:si_unique_call 306} {:cexpr "target_kb"} boogie_si_record_i32($i274);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i275 := $sle.i32($i274, 0);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i275} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    $i276 := $i274;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i277 := $trunc.i32.i8($i276);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i278 := $zext.i8.i32($i277);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i279 := $trunc.i32.i8($i278);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} vslice_dummy_var_108 := cpia2_do_command($p0, 48, 1, $i279);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} vslice_dummy_var_109 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} vslice_dummy_var_110 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} vslice_dummy_var_115 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} vslice_dummy_var_116 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} vslice_dummy_var_117 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} vslice_dummy_var_118 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} vslice_dummy_var_119 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} vslice_dummy_var_120 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} vslice_dummy_var_121 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} vslice_dummy_var_122 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} vslice_dummy_var_123 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} vslice_dummy_var_124 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} vslice_dummy_var_125 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} vslice_dummy_var_126 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} vslice_dummy_var_127 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} vslice_dummy_var_128 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} vslice_dummy_var_129 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} vslice_dummy_var_130 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} vslice_dummy_var_131 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} vslice_dummy_var_132 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} vslice_dummy_var_133 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} vslice_dummy_var_134 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} vslice_dummy_var_135 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} vslice_dummy_var_136 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} vslice_dummy_var_137 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} vslice_dummy_var_138 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} vslice_dummy_var_139 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} vslice_dummy_var_140 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} vslice_dummy_var_141 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} vslice_dummy_var_142 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} vslice_dummy_var_143 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} vslice_dummy_var_144 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} vslice_dummy_var_145 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} vslice_dummy_var_146 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} vslice_dummy_var_147 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} vslice_dummy_var_148 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} vslice_dummy_var_149 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} vslice_dummy_var_150 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} vslice_dummy_var_151 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} vslice_dummy_var_152 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} vslice_dummy_var_153 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} vslice_dummy_var_154 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} vslice_dummy_var_155 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} vslice_dummy_var_156 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} vslice_dummy_var_157 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} vslice_dummy_var_158 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} vslice_dummy_var_159 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} vslice_dummy_var_160 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} vslice_dummy_var_161 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} vslice_dummy_var_162 := cpia2_do_command($p0, 33, 0, 0);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(63, 1)), $mul.ref(0, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i285 := $load.i8($M.4, $p284);
    call {:si_unique_call 310} {:cexpr "tmp_reg"} boogie_si_record_i8($i285);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i286 := $zext.i8.i32($i285);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i287 := $and.i32($i286, 239);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i288 := $trunc.i32.i8($i287);
    call {:si_unique_call 311} {:cexpr "tmp_reg"} boogie_si_record_i8($i288);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i289 := $zext.i8.i32($i288);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i290 := $trunc.i32.i8($i289);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} vslice_dummy_var_111 := cpia2_do_command($p0, 34, 1, $i290);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i292 := $zext.i8.i32($i288);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i293 := $or.i32($i292, 16);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i294 := $trunc.i32.i8($i293);
    call {:si_unique_call 313} {:cexpr "tmp_reg"} boogie_si_record_i8($i294);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i295 := $zext.i8.i32($i294);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i296 := $trunc.i32.i8($i295);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} vslice_dummy_var_112 := cpia2_do_command($p0, 34, 1, $i296);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} vslice_dummy_var_113 := cpia2_do_command($p0, 49, 1, 0);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} vslice_dummy_var_114 := cpia2_do_command($p0, 28, 0, 0);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i13 := $i59;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb23:
    assume $i275 == 1;
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i276 := 1;
    goto $bb25;

  $bb20:
    assume $i242 == 1;
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(63, 1)), $mul.ref(2, 1));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i246 := $load.i8($M.4, $p245);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i247 := $zext.i8.i32($i246);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i248 := $or.i32($i247, 16);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i249 := $trunc.i32.i8($i248);
    call {:si_unique_call 303} {:cexpr "tmp_reg"} boogie_si_record_i8($i249);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i250 := $i249;
    goto $bb22;

  $bb17:
    assume $i198 == 1;
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} vslice_dummy_var_102 := cpia2_do_command($p0, 41, 1, 16);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i191 == 1;
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} vslice_dummy_var_100 := cpia2_do_command($p0, 44, 1, $sub.i8(0, 120));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i66 == 1;
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p67, 6);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p69, $mul.ref(0, 64)), $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p71, 58);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p73, $mul.ref(0, 64)), $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p75, 0);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p77, $mul.ref(0, 64)), $mul.ref(1, 2)), $mul.ref(0, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p79, 59);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p81, $mul.ref(0, 64)), $mul.ref(1, 2)), $mul.ref(1, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p83, $sub.i8(0, 110));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p85, $mul.ref(0, 64)), $mul.ref(2, 2)), $mul.ref(0, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p87, 60);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p89, $mul.ref(0, 64)), $mul.ref(2, 2)), $mul.ref(1, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p91, $sub.i8(0, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p93, $mul.ref(0, 64)), $mul.ref(3, 2)), $mul.ref(0, 1));
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p95, 61);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p97, $mul.ref(0, 64)), $mul.ref(3, 2)), $mul.ref(1, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p99, $sub.i8(0, 1));
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p101, $mul.ref(0, 64)), $mul.ref(4, 2)), $mul.ref(0, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p103, 34);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p105, $mul.ref(0, 64)), $mul.ref(4, 2)), $mul.ref(1, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p107, $sub.i8(0, 128));
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p109, $mul.ref(0, 64)), $mul.ref(5, 2)), $mul.ref(0, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p111, 10);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p113, $mul.ref(0, 64)), $mul.ref(5, 2)), $mul.ref(1, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p115, 1);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p117, $mul.ref(0, 64)), $mul.ref(6, 2)), $mul.ref(0, 1));
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p119, 11);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p121, $mul.ref(0, 64)), $mul.ref(6, 2)), $mul.ref(1, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p123, $sub.i8(0, 29));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p125, $mul.ref(0, 64)), $mul.ref(7, 2)), $mul.ref(0, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p127, 12);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p129, $mul.ref(0, 64)), $mul.ref(7, 2)), $mul.ref(1, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p131, 2);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p133, $mul.ref(0, 64)), $mul.ref(8, 2)), $mul.ref(0, 1));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p135, 12);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p136);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p137, $mul.ref(0, 64)), $mul.ref(8, 2)), $mul.ref(1, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p139, $sub.i8(0, 4));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(6, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p140, 1);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p141, 9);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} vslice_dummy_var_90 := cpia2_send_command($p0, $p1);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i57 == 1;
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i58 := apply_vp_patch($p0);
    call {:si_unique_call 279} {:cexpr "retval"} boogie_si_record_i32($i58);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb10;

  $bb5:
    assume $i39 == 1;
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p40, 4);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 64)), $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p44, 4);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 64)), $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p48, 1);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p49, 1);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} vslice_dummy_var_87 := cpia2_send_command($p0, $p1);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} vslice_dummy_var_84 := printk.ref.i32(.str.16, $i10);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i13 := $i10;
    goto $bb3;
}



const cpia2_dbg_dump_registers: ref;

axiom cpia2_dbg_dump_registers == $sub.ref(0, 249571);

procedure cpia2_dbg_dump_registers($p0: ref);
  free requires assertsPassed;



implementation cpia2_dbg_dump_registers($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_11: ref;

axiom ldv_mutex_unlock_11 == $sub.ref(0, 250603);

procedure ldv_mutex_unlock_11($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} ldv_mutex_unlock_v4l2_lock_of_camera_data($p0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} mutex_unlock($p0);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const configure_sensor: ref;

axiom configure_sensor == $sub.ref(0, 251635);

procedure configure_sensor($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.4, $CurrAddr;



implementation configure_sensor($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i19: i32;
  var $i18: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} {:cexpr "configure_sensor:arg:req_width"} boogie_si_record_i32($i1);
    call {:si_unique_call 368} {:cexpr "configure_sensor:arg:req_height"} boogie_si_record_i32($i2);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.4, $p5);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i7, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i7, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i7, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 22);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $i19 := config_sensor_500($p0, $i1, $i2);
    call {:si_unique_call 370} {:cexpr "retval"} boogie_si_record_i32($i19);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i18 := $i19;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    goto $bb26;

  $bb6:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i7, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i17 := config_sensor_410($p0, $i1, $i2);
    call {:si_unique_call 372} {:cexpr "retval"} boogie_si_record_i32($i17);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb24;

  $bb4:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i7, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i7, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i7, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb17:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb22:
    assume $i16 == 1;
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    goto $bb20;
}



const cpia2_set_high_power: ref;

axiom cpia2_set_high_power == $sub.ref(0, 252667);

procedure cpia2_set_high_power($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.4, $CurrAddr;



implementation cpia2_set_high_power($p0: ref) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p21: ref;
  var $p26: ref;
  var $i23: i32;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $p112: ref;
  var $i113: i8;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $p120: ref;
  var $i121: i8;
  var $i122: i32;
  var $i123: i32;
  var $i124: i1;
  var $p130: ref;
  var $i131: i8;
  var $i132: i32;
  var $i133: i32;
  var $i134: i1;
  var $p138: ref;
  var $i139: i8;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $p148: ref;
  var $i149: i8;
  var $i150: i32;
  var $i151: i32;
  var $i152: i1;
  var $p156: ref;
  var $i157: i8;
  var $i158: i32;
  var $i159: i32;
  var $i160: i1;
  var $p166: ref;
  var $i167: i8;
  var $i168: i32;
  var $i169: i32;
  var $i170: i1;
  var $p174: ref;
  var $i175: i8;
  var $i176: i32;
  var $i177: i32;
  var $i178: i1;
  var $p184: ref;
  var $i185: i8;
  var $i186: i32;
  var $i187: i32;
  var $i188: i1;
  var $p192: ref;
  var $i193: i8;
  var $i194: i32;
  var $i195: i32;
  var $i196: i1;
  var $p202: ref;
  var $i203: i8;
  var $i204: i32;
  var $i205: i32;
  var $i206: i1;
  var $p210: ref;
  var $i211: i8;
  var $i212: i32;
  var $i213: i32;
  var $i214: i1;
  var $p220: ref;
  var $i221: i8;
  var $i222: i32;
  var $i223: i32;
  var $i224: i1;
  var $p228: ref;
  var $i229: i8;
  var $i230: i32;
  var $i231: i32;
  var $i232: i1;
  var $p238: ref;
  var $i239: i8;
  var $i240: i32;
  var $i241: i32;
  var $i242: i1;
  var $p246: ref;
  var $i247: i8;
  var $i248: i32;
  var $i249: i32;
  var $i250: i1;
  var $p256: ref;
  var $i257: i8;
  var $i258: i32;
  var $i259: i32;
  var $i260: i1;
  var $p264: ref;
  var $i265: i8;
  var $i266: i32;
  var $i267: i32;
  var $i268: i1;
  var $p274: ref;
  var $i275: i8;
  var $i276: i32;
  var $i277: i32;
  var $i278: i1;
  var $p282: ref;
  var $i283: i8;
  var $i284: i32;
  var $i285: i32;
  var $i286: i1;
  var $p292: ref;
  var $i293: i8;
  var $i294: i32;
  var $i295: i32;
  var $i296: i1;
  var $p300: ref;
  var $i301: i8;
  var $i302: i32;
  var $i303: i32;
  var $i304: i1;
  var $p310: ref;
  var $i311: i8;
  var $i312: i32;
  var $i313: i32;
  var $i314: i1;
  var $p318: ref;
  var $i319: i8;
  var $i320: i32;
  var $i321: i32;
  var $i322: i1;
  var $p328: ref;
  var $i329: i8;
  var $i330: i32;
  var $i331: i32;
  var $i332: i1;
  var $p336: ref;
  var $i337: i8;
  var $i338: i32;
  var $i339: i32;
  var $i340: i1;
  var $p346: ref;
  var $i347: i8;
  var $i348: i32;
  var $i349: i32;
  var $i350: i1;
  var $p354: ref;
  var $i355: i8;
  var $i356: i32;
  var $i357: i32;
  var $i358: i1;
  var $p364: ref;
  var $i365: i8;
  var $i366: i32;
  var $i367: i32;
  var $i368: i1;
  var $p372: ref;
  var $i373: i8;
  var $i374: i32;
  var $i375: i32;
  var $i376: i1;
  var $p382: ref;
  var $i383: i8;
  var $i384: i32;
  var $i385: i32;
  var $i386: i1;
  var $p390: ref;
  var $i391: i8;
  var $i392: i32;
  var $i393: i32;
  var $i394: i1;
  var $p400: ref;
  var $i401: i8;
  var $i402: i32;
  var $i403: i32;
  var $i404: i1;
  var $p408: ref;
  var $i409: i8;
  var $i410: i32;
  var $i411: i32;
  var $i412: i1;
  var $p418: ref;
  var $i419: i8;
  var $i420: i32;
  var $i421: i32;
  var $i422: i1;
  var $p426: ref;
  var $i427: i8;
  var $i428: i32;
  var $i429: i32;
  var $i430: i1;
  var $p436: ref;
  var $i437: i8;
  var $i438: i32;
  var $i439: i32;
  var $i440: i1;
  var $p444: ref;
  var $i445: i8;
  var $i446: i32;
  var $i447: i32;
  var $i448: i1;
  var $p454: ref;
  var $i455: i8;
  var $i456: i32;
  var $i457: i32;
  var $i458: i1;
  var $p462: ref;
  var $i463: i8;
  var $i464: i32;
  var $i465: i32;
  var $i466: i1;
  var $p472: ref;
  var $i473: i8;
  var $i474: i32;
  var $i475: i32;
  var $i476: i1;
  var $p480: ref;
  var $i481: i8;
  var $i482: i32;
  var $i483: i32;
  var $i484: i1;
  var $p490: ref;
  var $i491: i8;
  var $i492: i32;
  var $i493: i32;
  var $i494: i1;
  var $p498: ref;
  var $i499: i8;
  var $i500: i32;
  var $i501: i32;
  var $i502: i1;
  var $p508: ref;
  var $i509: i8;
  var $i510: i32;
  var $i511: i32;
  var $i512: i1;
  var $p516: ref;
  var $i517: i8;
  var $i518: i32;
  var $i519: i32;
  var $i520: i1;
  var $p526: ref;
  var $i527: i8;
  var $i528: i32;
  var $i529: i32;
  var $i530: i1;
  var $p534: ref;
  var $i535: i8;
  var $i536: i32;
  var $i537: i32;
  var $i538: i1;
  var $p544: ref;
  var $i545: i8;
  var $i546: i32;
  var $i547: i32;
  var $i548: i1;
  var $p552: ref;
  var $i553: i8;
  var $i554: i32;
  var $i555: i32;
  var $i556: i1;
  var $p562: ref;
  var $i563: i8;
  var $i564: i32;
  var $i565: i32;
  var $i566: i1;
  var $p570: ref;
  var $i571: i8;
  var $i572: i32;
  var $i573: i32;
  var $i574: i1;
  var $p580: ref;
  var $i581: i8;
  var $i582: i32;
  var $i583: i32;
  var $i584: i1;
  var $p588: ref;
  var $i589: i8;
  var $i590: i32;
  var $i591: i32;
  var $i592: i1;
  var $p598: ref;
  var $i599: i8;
  var $i600: i32;
  var $i601: i32;
  var $i602: i1;
  var $p606: ref;
  var $i607: i8;
  var $i608: i32;
  var $i609: i32;
  var $i610: i1;
  var $p616: ref;
  var $i617: i8;
  var $i618: i32;
  var $i619: i32;
  var $i620: i1;
  var $p624: ref;
  var $i625: i8;
  var $i626: i32;
  var $i627: i32;
  var $i628: i1;
  var $p634: ref;
  var $i635: i8;
  var $i636: i32;
  var $i637: i32;
  var $i638: i1;
  var $p642: ref;
  var $i643: i8;
  var $i644: i32;
  var $i645: i32;
  var $i646: i1;
  var $p652: ref;
  var $i653: i8;
  var $i654: i32;
  var $i655: i32;
  var $i656: i1;
  var $p660: ref;
  var $i661: i8;
  var $i662: i32;
  var $i663: i32;
  var $i664: i1;
  var $p670: ref;
  var $i671: i8;
  var $i672: i32;
  var $i673: i32;
  var $i674: i1;
  var $p678: ref;
  var $i679: i8;
  var $i680: i32;
  var $i681: i32;
  var $i682: i1;
  var $p688: ref;
  var $i689: i8;
  var $i690: i32;
  var $i691: i32;
  var $i692: i1;
  var $p696: ref;
  var $i697: i8;
  var $i698: i32;
  var $i699: i32;
  var $i700: i1;
  var $p706: ref;
  var $i707: i8;
  var $i708: i32;
  var $i709: i32;
  var $i710: i1;
  var $p714: ref;
  var $i715: i8;
  var $i716: i32;
  var $i717: i32;
  var $i718: i1;
  var $p724: ref;
  var $i725: i8;
  var $i726: i32;
  var $i727: i32;
  var $i728: i1;
  var $p732: ref;
  var $i733: i8;
  var $i734: i32;
  var $i735: i32;
  var $i736: i1;
  var $p742: ref;
  var $i743: i8;
  var $i744: i32;
  var $i745: i32;
  var $i746: i1;
  var $p750: ref;
  var $i751: i8;
  var $i752: i32;
  var $i753: i32;
  var $i754: i1;
  var $p760: ref;
  var $i761: i8;
  var $i762: i32;
  var $i763: i32;
  var $i764: i1;
  var $p768: ref;
  var $i769: i8;
  var $i770: i32;
  var $i771: i32;
  var $i772: i1;
  var $p778: ref;
  var $i779: i8;
  var $i780: i32;
  var $i781: i32;
  var $i782: i1;
  var $p786: ref;
  var $i787: i8;
  var $i788: i32;
  var $i789: i32;
  var $i790: i1;
  var $p796: ref;
  var $i797: i8;
  var $i798: i32;
  var $i799: i32;
  var $i800: i1;
  var $p804: ref;
  var $i805: i8;
  var $i806: i32;
  var $i807: i32;
  var $i808: i1;
  var $p814: ref;
  var $i815: i8;
  var $i816: i32;
  var $i817: i32;
  var $i818: i1;
  var $p822: ref;
  var $i823: i8;
  var $i824: i32;
  var $i825: i32;
  var $i826: i1;
  var $p832: ref;
  var $i833: i8;
  var $i834: i32;
  var $i835: i32;
  var $i836: i1;
  var $p840: ref;
  var $i841: i8;
  var $i842: i32;
  var $i843: i32;
  var $i844: i1;
  var $p850: ref;
  var $i851: i8;
  var $i852: i32;
  var $i853: i32;
  var $i854: i1;
  var $p858: ref;
  var $i859: i8;
  var $i860: i32;
  var $i861: i32;
  var $i862: i1;
  var $p868: ref;
  var $i869: i8;
  var $i870: i32;
  var $i871: i32;
  var $i872: i1;
  var $p876: ref;
  var $i877: i8;
  var $i878: i32;
  var $i879: i32;
  var $i880: i1;
  var $p886: ref;
  var $i887: i8;
  var $i888: i32;
  var $i889: i32;
  var $i890: i1;
  var $p894: ref;
  var $i895: i8;
  var $i896: i32;
  var $i897: i32;
  var $i898: i1;
  var $p904: ref;
  var $i905: i8;
  var $i906: i32;
  var $i907: i32;
  var $i908: i1;
  var $p912: ref;
  var $i913: i8;
  var $i914: i32;
  var $i915: i32;
  var $i916: i1;
  var $p922: ref;
  var $i923: i8;
  var $i924: i32;
  var $i925: i32;
  var $i926: i1;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i32;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;
  var vslice_dummy_var_206: i32;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i32;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i32;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;
  var vslice_dummy_var_227: i32;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i32;
  var vslice_dummy_var_230: i32;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;
  var vslice_dummy_var_234: i32;
  var vslice_dummy_var_235: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;
  var vslice_dummy_var_240: i32;
  var vslice_dummy_var_241: i32;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i32;
  var vslice_dummy_var_245: i32;
  var vslice_dummy_var_246: i32;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i32;
  var vslice_dummy_var_249: i32;
  var vslice_dummy_var_250: i32;
  var vslice_dummy_var_251: i32;
  var vslice_dummy_var_252: i32;
  var vslice_dummy_var_253: i32;
  var vslice_dummy_var_254: i32;
  var vslice_dummy_var_255: i32;
  var vslice_dummy_var_256: i32;
  var vslice_dummy_var_257: i32;
  var vslice_dummy_var_258: i32;
  var vslice_dummy_var_259: i32;
  var vslice_dummy_var_260: i32;
  var vslice_dummy_var_261: i32;
  var vslice_dummy_var_262: i32;
  var vslice_dummy_var_263: i32;
  var vslice_dummy_var_264: i32;
  var vslice_dummy_var_265: i32;
  var vslice_dummy_var_266: i32;
  var vslice_dummy_var_267: i32;
  var vslice_dummy_var_268: i32;
  var vslice_dummy_var_269: i32;
  var vslice_dummy_var_270: i32;
  var vslice_dummy_var_271: i32;
  var vslice_dummy_var_272: i32;
  var vslice_dummy_var_273: i32;
  var vslice_dummy_var_274: i32;
  var vslice_dummy_var_275: i32;
  var vslice_dummy_var_276: i32;
  var vslice_dummy_var_277: i32;
  var vslice_dummy_var_278: i32;
  var vslice_dummy_var_279: i32;
  var vslice_dummy_var_280: i32;
  var vslice_dummy_var_281: i32;
  var vslice_dummy_var_282: i32;
  var vslice_dummy_var_283: i32;
  var vslice_dummy_var_284: i32;
  var vslice_dummy_var_285: i32;
  var vslice_dummy_var_286: i32;
  var vslice_dummy_var_287: i32;
  var vslice_dummy_var_288: i32;
  var vslice_dummy_var_289: i32;
  var vslice_dummy_var_290: i32;
  var vslice_dummy_var_291: i32;
  var vslice_dummy_var_292: i32;
  var vslice_dummy_var_293: i32;
  var vslice_dummy_var_294: i32;
  var vslice_dummy_var_295: i32;
  var vslice_dummy_var_296: i32;
  var vslice_dummy_var_297: i32;
  var vslice_dummy_var_298: i32;
  var vslice_dummy_var_299: i32;
  var vslice_dummy_var_300: i32;
  var vslice_dummy_var_301: i32;
  var vslice_dummy_var_302: i32;
  var vslice_dummy_var_303: i32;
  var vslice_dummy_var_304: i32;
  var vslice_dummy_var_305: i32;
  var vslice_dummy_var_306: i32;
  var vslice_dummy_var_307: i32;
  var vslice_dummy_var_308: i32;
  var vslice_dummy_var_309: i32;
  var vslice_dummy_var_310: i32;
  var vslice_dummy_var_311: i32;
  var vslice_dummy_var_312: i32;
  var vslice_dummy_var_313: i32;
  var vslice_dummy_var_314: i32;
  var vslice_dummy_var_315: i32;
  var vslice_dummy_var_316: i32;
  var vslice_dummy_var_317: i32;
  var vslice_dummy_var_318: i32;
  var vslice_dummy_var_319: i32;
  var vslice_dummy_var_320: i32;
  var vslice_dummy_var_321: i32;
  var vslice_dummy_var_322: i32;
  var vslice_dummy_var_323: i32;
  var vslice_dummy_var_324: i32;
  var vslice_dummy_var_325: i32;
  var vslice_dummy_var_326: i32;
  var vslice_dummy_var_327: i32;
  var vslice_dummy_var_328: i32;
  var vslice_dummy_var_329: i32;
  var vslice_dummy_var_330: i32;
  var vslice_dummy_var_331: i32;
  var vslice_dummy_var_332: i32;
  var vslice_dummy_var_333: i32;
  var vslice_dummy_var_334: i32;
  var vslice_dummy_var_335: i32;
  var vslice_dummy_var_336: i32;
  var vslice_dummy_var_337: i32;
  var vslice_dummy_var_338: i32;
  var vslice_dummy_var_339: i32;
  var vslice_dummy_var_340: i32;
  var vslice_dummy_var_341: i32;
  var vslice_dummy_var_342: i32;
  var vslice_dummy_var_343: i32;
  var vslice_dummy_var_344: i32;
  var vslice_dummy_var_345: i32;
  var vslice_dummy_var_346: i32;
  var vslice_dummy_var_347: i32;
  var vslice_dummy_var_348: i32;
  var vslice_dummy_var_349: i32;
  var vslice_dummy_var_350: i32;
  var vslice_dummy_var_351: i32;
  var vslice_dummy_var_352: i32;
  var vslice_dummy_var_353: i32;
  var vslice_dummy_var_354: i32;
  var vslice_dummy_var_355: i32;
  var vslice_dummy_var_356: i32;
  var vslice_dummy_var_357: i32;
  var vslice_dummy_var_358: i32;
  var vslice_dummy_var_359: i32;
  var vslice_dummy_var_360: i32;
  var vslice_dummy_var_361: i32;
  var vslice_dummy_var_362: i32;
  var vslice_dummy_var_363: i32;
  var vslice_dummy_var_364: i32;
  var vslice_dummy_var_365: i32;
  var vslice_dummy_var_366: i32;
  var vslice_dummy_var_367: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} vslice_dummy_var_163 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.4, $p4);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 16);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} vslice_dummy_var_165 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} vslice_dummy_var_166 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.4, $p14);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 1);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i18 == 1);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb10, $bb12;

  $bb12:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} vslice_dummy_var_168 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.4, $p30);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 16);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} vslice_dummy_var_170 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} vslice_dummy_var_171 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.4, $p40);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 1);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i44 == 1);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb22, $bb23;

  $bb23:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} vslice_dummy_var_172 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.4, $p48);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 16);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} vslice_dummy_var_174 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} vslice_dummy_var_175 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.4, $p58);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 1);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i62 == 1);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb32, $bb33;

  $bb33:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} vslice_dummy_var_176 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.4, $p66);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 16);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} vslice_dummy_var_178 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} vslice_dummy_var_179 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.4, $p76);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, 1);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i80 == 1);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb42, $bb43;

  $bb43:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} vslice_dummy_var_180 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.4, $p84);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 16);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} vslice_dummy_var_182 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} vslice_dummy_var_183 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.4, $p94);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i96, 1);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i98 == 1);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb52, $bb53;

  $bb53:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} vslice_dummy_var_184 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.4, $p102);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i105 := $and.i32($i104, 16);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} vslice_dummy_var_186 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} vslice_dummy_var_187 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.4, $p112);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i32($i113);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i115 := $and.i32($i114, 1);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i116 == 1);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb62, $bb63;

  $bb63:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} vslice_dummy_var_188 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.4, $p120);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i121);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i123 := $and.i32($i122, 16);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i124 := $ne.i32($i123, 0);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} vslice_dummy_var_190 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} vslice_dummy_var_191 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.4, $p130);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i133 := $and.i32($i132, 1);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i133, 0);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i134 == 1);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb72, $bb73;

  $bb73:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} vslice_dummy_var_192 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i139 := $load.i8($M.4, $p138);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i140 := $zext.i8.i32($i139);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i141 := $and.i32($i140, 16);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i142 := $ne.i32($i141, 0);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} vslice_dummy_var_194 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} vslice_dummy_var_195 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i149 := $load.i8($M.4, $p148);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i150 := $zext.i8.i32($i149);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i151 := $and.i32($i150, 1);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i151, 0);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i152 == 1);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb82, $bb83;

  $bb83:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} vslice_dummy_var_196 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.4, $p156);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i157);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i159 := $and.i32($i158, 16);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i159, 0);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} vslice_dummy_var_198 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} vslice_dummy_var_199 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.4, $p166);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i168 := $zext.i8.i32($i167);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i169 := $and.i32($i168, 1);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i170 := $ne.i32($i169, 0);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i170 == 1);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb92, $bb93;

  $bb93:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} vslice_dummy_var_200 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.4, $p174);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i176 := $zext.i8.i32($i175);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i177 := $and.i32($i176, 16);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i178 := $ne.i32($i177, 0);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i178} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} vslice_dummy_var_202 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} vslice_dummy_var_203 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.4, $p184);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i32($i185);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i187 := $and.i32($i186, 1);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i188 := $ne.i32($i187, 0);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i188 == 1);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb102, $bb103;

  $bb103:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} vslice_dummy_var_204 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i193 := $load.i8($M.4, $p192);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i194 := $zext.i8.i32($i193);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i195 := $and.i32($i194, 16);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i196 := $ne.i32($i195, 0);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} vslice_dummy_var_206 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} vslice_dummy_var_207 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i203 := $load.i8($M.4, $p202);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i204 := $zext.i8.i32($i203);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i205 := $and.i32($i204, 1);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i206 := $ne.i32($i205, 0);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i206} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i206 == 1);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb112, $bb113;

  $bb113:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} vslice_dummy_var_208 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i211 := $load.i8($M.4, $p210);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i212 := $zext.i8.i32($i211);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i213 := $and.i32($i212, 16);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i214 := $ne.i32($i213, 0);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i214} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} vslice_dummy_var_210 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} vslice_dummy_var_211 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i221 := $load.i8($M.4, $p220);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i32($i221);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i223 := $and.i32($i222, 1);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i224 := $ne.i32($i223, 0);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i224} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i224 == 1);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb122, $bb123;

  $bb123:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} vslice_dummy_var_212 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i229 := $load.i8($M.4, $p228);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i230 := $zext.i8.i32($i229);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i231 := $and.i32($i230, 16);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i232 := $ne.i32($i231, 0);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i232} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} vslice_dummy_var_214 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} vslice_dummy_var_215 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i239 := $load.i8($M.4, $p238);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i240 := $zext.i8.i32($i239);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i241 := $and.i32($i240, 1);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i242 := $ne.i32($i241, 0);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    assume {:branchcond $i242} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i242 == 1);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb132, $bb133;

  $bb133:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} vslice_dummy_var_216 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i247 := $load.i8($M.4, $p246);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i248 := $zext.i8.i32($i247);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i249 := $and.i32($i248, 16);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i250 := $ne.i32($i249, 0);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i250} true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} vslice_dummy_var_218 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} vslice_dummy_var_219 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i257 := $load.i8($M.4, $p256);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i258 := $zext.i8.i32($i257);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i259 := $and.i32($i258, 1);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i260 := $ne.i32($i259, 0);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i260 == 1);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb142, $bb143;

  $bb143:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} vslice_dummy_var_220 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i265 := $load.i8($M.4, $p264);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i266 := $zext.i8.i32($i265);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i267 := $and.i32($i266, 16);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i268 := $ne.i32($i267, 0);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} vslice_dummy_var_222 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} vslice_dummy_var_223 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i275 := $load.i8($M.4, $p274);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i276 := $zext.i8.i32($i275);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i277 := $and.i32($i276, 1);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i278 := $ne.i32($i277, 0);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i278} true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i278 == 1);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb152, $bb153;

  $bb153:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} vslice_dummy_var_224 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i283 := $load.i8($M.4, $p282);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i284 := $zext.i8.i32($i283);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i285 := $and.i32($i284, 16);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i286 := $ne.i32($i285, 0);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i286} true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} vslice_dummy_var_226 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} vslice_dummy_var_227 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i293 := $load.i8($M.4, $p292);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i294 := $zext.i8.i32($i293);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i295 := $and.i32($i294, 1);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i296 := $ne.i32($i295, 0);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i296 == 1);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb162, $bb163;

  $bb163:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} vslice_dummy_var_228 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i301 := $load.i8($M.4, $p300);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i302 := $zext.i8.i32($i301);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i303 := $and.i32($i302, 16);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i304 := $ne.i32($i303, 0);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i304} true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} vslice_dummy_var_230 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} vslice_dummy_var_231 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i311 := $load.i8($M.4, $p310);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i312 := $zext.i8.i32($i311);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i313 := $and.i32($i312, 1);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i314 := $ne.i32($i313, 0);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i314} true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i314 == 1);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb172, $bb173;

  $bb173:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} vslice_dummy_var_232 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i319 := $load.i8($M.4, $p318);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i320 := $zext.i8.i32($i319);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i321 := $and.i32($i320, 16);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i322 := $ne.i32($i321, 0);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i322} true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} vslice_dummy_var_234 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} vslice_dummy_var_235 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i329 := $load.i8($M.4, $p328);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i330 := $zext.i8.i32($i329);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i331 := $and.i32($i330, 1);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i332 := $ne.i32($i331, 0);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i332} true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i332 == 1);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb182, $bb183;

  $bb183:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} vslice_dummy_var_236 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i337 := $load.i8($M.4, $p336);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i338 := $zext.i8.i32($i337);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i339 := $and.i32($i338, 16);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i340 := $ne.i32($i339, 0);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i340} true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} vslice_dummy_var_238 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} vslice_dummy_var_239 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i347 := $load.i8($M.4, $p346);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i348 := $zext.i8.i32($i347);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i349 := $and.i32($i348, 1);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i350 := $ne.i32($i349, 0);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i350} true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i350 == 1);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb192, $bb193;

  $bb193:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} vslice_dummy_var_240 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i355 := $load.i8($M.4, $p354);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i356 := $zext.i8.i32($i355);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i357 := $and.i32($i356, 16);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i358 := $ne.i32($i357, 0);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i358} true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} vslice_dummy_var_242 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} vslice_dummy_var_243 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i365 := $load.i8($M.4, $p364);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i366 := $zext.i8.i32($i365);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i367 := $and.i32($i366, 1);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i368 := $ne.i32($i367, 0);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i368} true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i368 == 1);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb202, $bb203;

  $bb203:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} vslice_dummy_var_244 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i373 := $load.i8($M.4, $p372);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i374 := $zext.i8.i32($i373);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i375 := $and.i32($i374, 16);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i376 := $ne.i32($i375, 0);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i376} true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i376 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} vslice_dummy_var_246 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} vslice_dummy_var_247 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i383 := $load.i8($M.4, $p382);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i384 := $zext.i8.i32($i383);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i385 := $and.i32($i384, 1);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i386 := $ne.i32($i385, 0);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    assume {:branchcond $i386} true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i386 == 1);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb212, $bb213;

  $bb213:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} vslice_dummy_var_248 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i391 := $load.i8($M.4, $p390);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i392 := $zext.i8.i32($i391);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i393 := $and.i32($i392, 16);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i394 := $ne.i32($i393, 0);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    assume {:branchcond $i394} true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i394 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} vslice_dummy_var_250 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} vslice_dummy_var_251 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i401 := $load.i8($M.4, $p400);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i402 := $zext.i8.i32($i401);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i403 := $and.i32($i402, 1);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i404 := $ne.i32($i403, 0);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i404} true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i404 == 1);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb222, $bb223;

  $bb223:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} vslice_dummy_var_252 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i409 := $load.i8($M.4, $p408);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i410 := $zext.i8.i32($i409);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i411 := $and.i32($i410, 16);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i412 := $ne.i32($i411, 0);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i412} true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i412 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} vslice_dummy_var_254 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} vslice_dummy_var_255 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i419 := $load.i8($M.4, $p418);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i420 := $zext.i8.i32($i419);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i421 := $and.i32($i420, 1);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i422 := $ne.i32($i421, 0);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    assume {:branchcond $i422} true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i422 == 1);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb232, $bb233;

  $bb233:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} vslice_dummy_var_256 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i427 := $load.i8($M.4, $p426);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i428 := $zext.i8.i32($i427);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i429 := $and.i32($i428, 16);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i430 := $ne.i32($i429, 0);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i430} true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i430 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} vslice_dummy_var_258 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} vslice_dummy_var_259 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i437 := $load.i8($M.4, $p436);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i438 := $zext.i8.i32($i437);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i439 := $and.i32($i438, 1);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i440 := $ne.i32($i439, 0);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i440} true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i440 == 1);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb242, $bb243;

  $bb243:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} vslice_dummy_var_260 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i445 := $load.i8($M.4, $p444);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i446 := $zext.i8.i32($i445);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i447 := $and.i32($i446, 16);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i448 := $ne.i32($i447, 0);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i448} true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i448 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} vslice_dummy_var_262 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} vslice_dummy_var_263 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i455 := $load.i8($M.4, $p454);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i456 := $zext.i8.i32($i455);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i457 := $and.i32($i456, 1);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i458 := $ne.i32($i457, 0);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i458} true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i458 == 1);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb252, $bb253;

  $bb253:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} vslice_dummy_var_264 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i463 := $load.i8($M.4, $p462);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i464 := $zext.i8.i32($i463);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i465 := $and.i32($i464, 16);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i466 := $ne.i32($i465, 0);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    assume {:branchcond $i466} true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} vslice_dummy_var_266 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} vslice_dummy_var_267 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i473 := $load.i8($M.4, $p472);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i474 := $zext.i8.i32($i473);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i475 := $and.i32($i474, 1);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i476 := $ne.i32($i475, 0);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i476} true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i476 == 1);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb262, $bb263;

  $bb263:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} vslice_dummy_var_268 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i481 := $load.i8($M.4, $p480);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i482 := $zext.i8.i32($i481);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i483 := $and.i32($i482, 16);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i484 := $ne.i32($i483, 0);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i484} true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i484 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} vslice_dummy_var_270 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} vslice_dummy_var_271 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i491 := $load.i8($M.4, $p490);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i492 := $zext.i8.i32($i491);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i493 := $and.i32($i492, 1);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i494 := $ne.i32($i493, 0);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i494} true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i494 == 1);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb272, $bb273;

  $bb273:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} vslice_dummy_var_272 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p498 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i499 := $load.i8($M.4, $p498);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i500 := $zext.i8.i32($i499);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i501 := $and.i32($i500, 16);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i502 := $ne.i32($i501, 0);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i502} true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i502 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} vslice_dummy_var_274 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} vslice_dummy_var_275 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i509 := $load.i8($M.4, $p508);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i510 := $zext.i8.i32($i509);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i511 := $and.i32($i510, 1);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i512 := $ne.i32($i511, 0);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i512} true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i512 == 1);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb282, $bb283;

  $bb283:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} vslice_dummy_var_276 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i517 := $load.i8($M.4, $p516);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i518 := $zext.i8.i32($i517);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i519 := $and.i32($i518, 16);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i520 := $ne.i32($i519, 0);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i520} true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i520 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} vslice_dummy_var_278 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} vslice_dummy_var_279 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i527 := $load.i8($M.4, $p526);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i528 := $zext.i8.i32($i527);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i529 := $and.i32($i528, 1);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i530 := $ne.i32($i529, 0);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i530} true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i530 == 1);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb292, $bb293;

  $bb293:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} vslice_dummy_var_280 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p534 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i535 := $load.i8($M.4, $p534);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i536 := $zext.i8.i32($i535);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i537 := $and.i32($i536, 16);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i538 := $ne.i32($i537, 0);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i538} true;
    goto $bb297, $bb298;

  $bb298:
    assume !($i538 == 1);
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} vslice_dummy_var_282 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} vslice_dummy_var_283 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p544 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i545 := $load.i8($M.4, $p544);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i546 := $zext.i8.i32($i545);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i547 := $and.i32($i546, 1);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i548 := $ne.i32($i547, 0);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i548} true;
    goto $bb300, $bb301;

  $bb301:
    assume !($i548 == 1);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb302, $bb303;

  $bb303:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} vslice_dummy_var_284 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i553 := $load.i8($M.4, $p552);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i554 := $zext.i8.i32($i553);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i555 := $and.i32($i554, 16);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i556 := $ne.i32($i555, 0);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i556} true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i556 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} vslice_dummy_var_286 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} vslice_dummy_var_287 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i563 := $load.i8($M.4, $p562);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i564 := $zext.i8.i32($i563);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i565 := $and.i32($i564, 1);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i566 := $ne.i32($i565, 0);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i566} true;
    goto $bb310, $bb311;

  $bb311:
    assume !($i566 == 1);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb312, $bb313;

  $bb313:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} vslice_dummy_var_288 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i571 := $load.i8($M.4, $p570);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i572 := $zext.i8.i32($i571);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i573 := $and.i32($i572, 16);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i574 := $ne.i32($i573, 0);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i574} true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i574 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} vslice_dummy_var_290 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} vslice_dummy_var_291 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p580 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i581 := $load.i8($M.4, $p580);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i582 := $zext.i8.i32($i581);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i583 := $and.i32($i582, 1);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i584 := $ne.i32($i583, 0);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i584} true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i584 == 1);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb322, $bb323;

  $bb323:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} vslice_dummy_var_292 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i589 := $load.i8($M.4, $p588);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i590 := $zext.i8.i32($i589);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i591 := $and.i32($i590, 16);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i592 := $ne.i32($i591, 0);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i592} true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i592 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} vslice_dummy_var_294 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} vslice_dummy_var_295 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i599 := $load.i8($M.4, $p598);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i600 := $zext.i8.i32($i599);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i601 := $and.i32($i600, 1);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i602 := $ne.i32($i601, 0);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i602} true;
    goto $bb330, $bb331;

  $bb331:
    assume !($i602 == 1);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb332, $bb333;

  $bb333:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} vslice_dummy_var_296 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p606 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i607 := $load.i8($M.4, $p606);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i608 := $zext.i8.i32($i607);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i609 := $and.i32($i608, 16);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i610 := $ne.i32($i609, 0);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i610} true;
    goto $bb337, $bb338;

  $bb338:
    assume !($i610 == 1);
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} vslice_dummy_var_298 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} vslice_dummy_var_299 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p616 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i617 := $load.i8($M.4, $p616);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i618 := $zext.i8.i32($i617);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i619 := $and.i32($i618, 1);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i620 := $ne.i32($i619, 0);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i620} true;
    goto $bb340, $bb341;

  $bb341:
    assume !($i620 == 1);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb342, $bb343;

  $bb343:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} vslice_dummy_var_300 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p624 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i625 := $load.i8($M.4, $p624);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i626 := $zext.i8.i32($i625);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i627 := $and.i32($i626, 16);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i628 := $ne.i32($i627, 0);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i628} true;
    goto $bb347, $bb348;

  $bb348:
    assume !($i628 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} vslice_dummy_var_302 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} vslice_dummy_var_303 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p634 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i635 := $load.i8($M.4, $p634);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i636 := $zext.i8.i32($i635);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i637 := $and.i32($i636, 1);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i638 := $ne.i32($i637, 0);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i638} true;
    goto $bb350, $bb351;

  $bb351:
    assume !($i638 == 1);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb352, $bb353;

  $bb353:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} vslice_dummy_var_304 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i643 := $load.i8($M.4, $p642);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i644 := $zext.i8.i32($i643);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i645 := $and.i32($i644, 16);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i646 := $ne.i32($i645, 0);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i646} true;
    goto $bb357, $bb358;

  $bb358:
    assume !($i646 == 1);
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} vslice_dummy_var_306 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} vslice_dummy_var_307 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p652 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i653 := $load.i8($M.4, $p652);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i654 := $zext.i8.i32($i653);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i655 := $and.i32($i654, 1);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i656 := $ne.i32($i655, 0);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i656} true;
    goto $bb360, $bb361;

  $bb361:
    assume !($i656 == 1);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb362, $bb363;

  $bb363:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} vslice_dummy_var_308 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i661 := $load.i8($M.4, $p660);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i662 := $zext.i8.i32($i661);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i663 := $and.i32($i662, 16);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i664 := $ne.i32($i663, 0);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i664} true;
    goto $bb367, $bb368;

  $bb368:
    assume !($i664 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} vslice_dummy_var_310 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} vslice_dummy_var_311 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p670 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i671 := $load.i8($M.4, $p670);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i672 := $zext.i8.i32($i671);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i673 := $and.i32($i672, 1);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i674 := $ne.i32($i673, 0);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i674} true;
    goto $bb370, $bb371;

  $bb371:
    assume !($i674 == 1);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb372, $bb373;

  $bb373:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} vslice_dummy_var_312 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p678 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i679 := $load.i8($M.4, $p678);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i680 := $zext.i8.i32($i679);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i681 := $and.i32($i680, 16);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i682 := $ne.i32($i681, 0);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i682} true;
    goto $bb377, $bb378;

  $bb378:
    assume !($i682 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} vslice_dummy_var_314 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} vslice_dummy_var_315 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p688 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i689 := $load.i8($M.4, $p688);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i690 := $zext.i8.i32($i689);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i691 := $and.i32($i690, 1);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i692 := $ne.i32($i691, 0);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i692} true;
    goto $bb380, $bb381;

  $bb381:
    assume !($i692 == 1);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb382, $bb383;

  $bb383:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} vslice_dummy_var_316 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p696 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i697 := $load.i8($M.4, $p696);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i698 := $zext.i8.i32($i697);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i699 := $and.i32($i698, 16);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i700 := $ne.i32($i699, 0);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i700} true;
    goto $bb387, $bb388;

  $bb388:
    assume !($i700 == 1);
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} vslice_dummy_var_318 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} vslice_dummy_var_319 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p706 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i707 := $load.i8($M.4, $p706);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i708 := $zext.i8.i32($i707);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i709 := $and.i32($i708, 1);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i710 := $ne.i32($i709, 0);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i710} true;
    goto $bb390, $bb391;

  $bb391:
    assume !($i710 == 1);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb392, $bb393;

  $bb393:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} vslice_dummy_var_320 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p714 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i715 := $load.i8($M.4, $p714);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i716 := $zext.i8.i32($i715);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i717 := $and.i32($i716, 16);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i718 := $ne.i32($i717, 0);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i718} true;
    goto $bb397, $bb398;

  $bb398:
    assume !($i718 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} vslice_dummy_var_322 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} vslice_dummy_var_323 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i725 := $load.i8($M.4, $p724);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i726 := $zext.i8.i32($i725);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i727 := $and.i32($i726, 1);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i728 := $ne.i32($i727, 0);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i728} true;
    goto $bb400, $bb401;

  $bb401:
    assume !($i728 == 1);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb402, $bb403;

  $bb403:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} vslice_dummy_var_324 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i733 := $load.i8($M.4, $p732);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i734 := $zext.i8.i32($i733);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i735 := $and.i32($i734, 16);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i736 := $ne.i32($i735, 0);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    assume {:branchcond $i736} true;
    goto $bb407, $bb408;

  $bb408:
    assume !($i736 == 1);
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} vslice_dummy_var_326 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} vslice_dummy_var_327 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p742 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i743 := $load.i8($M.4, $p742);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i744 := $zext.i8.i32($i743);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i745 := $and.i32($i744, 1);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i746 := $ne.i32($i745, 0);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i746} true;
    goto $bb410, $bb411;

  $bb411:
    assume !($i746 == 1);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb412, $bb413;

  $bb413:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} vslice_dummy_var_328 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p750 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i751 := $load.i8($M.4, $p750);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i752 := $zext.i8.i32($i751);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i753 := $and.i32($i752, 16);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i754 := $ne.i32($i753, 0);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    assume {:branchcond $i754} true;
    goto $bb417, $bb418;

  $bb418:
    assume !($i754 == 1);
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} vslice_dummy_var_330 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} vslice_dummy_var_331 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p760 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i761 := $load.i8($M.4, $p760);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i762 := $zext.i8.i32($i761);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i763 := $and.i32($i762, 1);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i764 := $ne.i32($i763, 0);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i764} true;
    goto $bb420, $bb421;

  $bb421:
    assume !($i764 == 1);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb422, $bb423;

  $bb423:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} vslice_dummy_var_332 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p768 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i769 := $load.i8($M.4, $p768);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i770 := $zext.i8.i32($i769);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i771 := $and.i32($i770, 16);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i772 := $ne.i32($i771, 0);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i772} true;
    goto $bb427, $bb428;

  $bb428:
    assume !($i772 == 1);
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} vslice_dummy_var_334 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} vslice_dummy_var_335 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p778 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i779 := $load.i8($M.4, $p778);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i780 := $zext.i8.i32($i779);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i781 := $and.i32($i780, 1);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i782 := $ne.i32($i781, 0);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i782} true;
    goto $bb430, $bb431;

  $bb431:
    assume !($i782 == 1);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb432, $bb433;

  $bb433:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} vslice_dummy_var_336 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $p786 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i787 := $load.i8($M.4, $p786);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i788 := $zext.i8.i32($i787);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i789 := $and.i32($i788, 16);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i790 := $ne.i32($i789, 0);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i790} true;
    goto $bb437, $bb438;

  $bb438:
    assume !($i790 == 1);
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} vslice_dummy_var_338 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} vslice_dummy_var_339 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p796 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i797 := $load.i8($M.4, $p796);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i798 := $zext.i8.i32($i797);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i799 := $and.i32($i798, 1);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i800 := $ne.i32($i799, 0);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i800} true;
    goto $bb440, $bb441;

  $bb441:
    assume !($i800 == 1);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb442, $bb443;

  $bb443:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} vslice_dummy_var_340 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p804 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i805 := $load.i8($M.4, $p804);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i806 := $zext.i8.i32($i805);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i807 := $and.i32($i806, 16);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i808 := $ne.i32($i807, 0);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i808} true;
    goto $bb447, $bb448;

  $bb448:
    assume !($i808 == 1);
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} vslice_dummy_var_342 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} vslice_dummy_var_343 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p814 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i815 := $load.i8($M.4, $p814);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i816 := $zext.i8.i32($i815);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i817 := $and.i32($i816, 1);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i818 := $ne.i32($i817, 0);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i818} true;
    goto $bb450, $bb451;

  $bb451:
    assume !($i818 == 1);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb452, $bb453;

  $bb453:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} vslice_dummy_var_344 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p822 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i823 := $load.i8($M.4, $p822);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i824 := $zext.i8.i32($i823);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i825 := $and.i32($i824, 16);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i826 := $ne.i32($i825, 0);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i826} true;
    goto $bb457, $bb458;

  $bb458:
    assume !($i826 == 1);
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} vslice_dummy_var_346 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} vslice_dummy_var_347 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p832 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i833 := $load.i8($M.4, $p832);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i834 := $zext.i8.i32($i833);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i835 := $and.i32($i834, 1);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i836 := $ne.i32($i835, 0);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i836} true;
    goto $bb460, $bb461;

  $bb461:
    assume !($i836 == 1);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb462, $bb463;

  $bb463:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} vslice_dummy_var_348 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p840 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i841 := $load.i8($M.4, $p840);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i842 := $zext.i8.i32($i841);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i843 := $and.i32($i842, 16);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i844 := $ne.i32($i843, 0);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i844} true;
    goto $bb467, $bb468;

  $bb468:
    assume !($i844 == 1);
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} vslice_dummy_var_350 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} vslice_dummy_var_351 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p850 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i851 := $load.i8($M.4, $p850);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i852 := $zext.i8.i32($i851);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i853 := $and.i32($i852, 1);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i854 := $ne.i32($i853, 0);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i854} true;
    goto $bb470, $bb471;

  $bb471:
    assume !($i854 == 1);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb472, $bb473;

  $bb473:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} vslice_dummy_var_352 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p858 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i859 := $load.i8($M.4, $p858);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i860 := $zext.i8.i32($i859);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i861 := $and.i32($i860, 16);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i862 := $ne.i32($i861, 0);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i862} true;
    goto $bb477, $bb478;

  $bb478:
    assume !($i862 == 1);
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} vslice_dummy_var_354 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} vslice_dummy_var_355 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p868 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i869 := $load.i8($M.4, $p868);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i870 := $zext.i8.i32($i869);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i871 := $and.i32($i870, 1);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i872 := $ne.i32($i871, 0);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i872} true;
    goto $bb480, $bb481;

  $bb481:
    assume !($i872 == 1);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb482, $bb483;

  $bb483:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} vslice_dummy_var_356 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p876 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i877 := $load.i8($M.4, $p876);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i878 := $zext.i8.i32($i877);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i879 := $and.i32($i878, 16);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i880 := $ne.i32($i879, 0);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i880} true;
    goto $bb487, $bb488;

  $bb488:
    assume !($i880 == 1);
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} vslice_dummy_var_358 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} vslice_dummy_var_359 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p886 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i887 := $load.i8($M.4, $p886);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i888 := $zext.i8.i32($i887);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i889 := $and.i32($i888, 1);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i890 := $ne.i32($i889, 0);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i890} true;
    goto $bb490, $bb491;

  $bb491:
    assume !($i890 == 1);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb492, $bb493;

  $bb493:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    goto $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    goto $bb496;

  $bb496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} vslice_dummy_var_360 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p894 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i895 := $load.i8($M.4, $p894);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i896 := $zext.i8.i32($i895);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i897 := $and.i32($i896, 16);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i898 := $ne.i32($i897, 0);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i898} true;
    goto $bb497, $bb498;

  $bb498:
    assume !($i898 == 1);
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} vslice_dummy_var_362 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} vslice_dummy_var_363 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p904 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i905 := $load.i8($M.4, $p904);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i906 := $zext.i8.i32($i905);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i907 := $and.i32($i906, 1);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i908 := $ne.i32($i907, 0);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i908} true;
    goto $bb500, $bb501;

  $bb501:
    assume !($i908 == 1);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb502, $bb503;

  $bb503:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb504:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} vslice_dummy_var_364 := cpia2_do_command($p0, 35, 0, 0);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p912 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(1, 1));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i913 := $load.i8($M.4, $p912);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i914 := $zext.i8.i32($i913);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i915 := $and.i32($i914, 16);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i916 := $ne.i32($i915, 0);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i916} true;
    goto $bb507, $bb508;

  $bb508:
    assume !($i916 == 1);
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} vslice_dummy_var_366 := cpia2_do_command($p0, 36, 1, 1);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} vslice_dummy_var_367 := cpia2_do_command($p0, 37, 0, 0);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p922 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(6, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i923 := $load.i8($M.4, $p922);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i924 := $zext.i8.i32($i923);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i925 := $and.i32($i924, 1);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i926 := $ne.i32($i925, 0);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i926} true;
    goto $bb510, $bb511;

  $bb511:
    assume !($i926 == 1);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb512, $bb513;

  $bb513:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb515:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(0, 1));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p26, 1);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb512:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(0, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p21, 0);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} vslice_dummy_var_167 := printk.ref(.str.74);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 5);
    goto $bb13;

  $bb510:
    assume {:verifier.code 0} true;
    assume $i926 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb507:
    assume $i916 == 1;
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} vslice_dummy_var_365 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb502:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb500:
    assume {:verifier.code 0} true;
    assume $i908 == 1;
    goto $bb7;

  $bb497:
    assume $i898 == 1;
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} vslice_dummy_var_361 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb492:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb490:
    assume {:verifier.code 0} true;
    assume $i890 == 1;
    goto $bb7;

  $bb487:
    assume $i880 == 1;
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} vslice_dummy_var_357 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb482:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb480:
    assume {:verifier.code 0} true;
    assume $i872 == 1;
    goto $bb7;

  $bb477:
    assume $i862 == 1;
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} vslice_dummy_var_353 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb472:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb470:
    assume {:verifier.code 0} true;
    assume $i854 == 1;
    goto $bb7;

  $bb467:
    assume $i844 == 1;
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} vslice_dummy_var_349 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb462:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb460:
    assume {:verifier.code 0} true;
    assume $i836 == 1;
    goto $bb7;

  $bb457:
    assume $i826 == 1;
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} vslice_dummy_var_345 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb452:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb450:
    assume {:verifier.code 0} true;
    assume $i818 == 1;
    goto $bb7;

  $bb447:
    assume $i808 == 1;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} vslice_dummy_var_341 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb442:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb440:
    assume {:verifier.code 0} true;
    assume $i800 == 1;
    goto $bb7;

  $bb437:
    assume $i790 == 1;
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} vslice_dummy_var_337 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb432:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb430:
    assume {:verifier.code 0} true;
    assume $i782 == 1;
    goto $bb7;

  $bb427:
    assume $i772 == 1;
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} vslice_dummy_var_333 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb422:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb420:
    assume {:verifier.code 0} true;
    assume $i764 == 1;
    goto $bb7;

  $bb417:
    assume $i754 == 1;
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} vslice_dummy_var_329 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb412:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb410:
    assume {:verifier.code 0} true;
    assume $i746 == 1;
    goto $bb7;

  $bb407:
    assume $i736 == 1;
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} vslice_dummy_var_325 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb402:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb400:
    assume {:verifier.code 0} true;
    assume $i728 == 1;
    goto $bb7;

  $bb397:
    assume $i718 == 1;
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} vslice_dummy_var_321 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb392:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb390:
    assume {:verifier.code 0} true;
    assume $i710 == 1;
    goto $bb7;

  $bb387:
    assume $i700 == 1;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} vslice_dummy_var_317 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb382:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb380:
    assume {:verifier.code 0} true;
    assume $i692 == 1;
    goto $bb7;

  $bb377:
    assume $i682 == 1;
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} vslice_dummy_var_313 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb372:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb370:
    assume {:verifier.code 0} true;
    assume $i674 == 1;
    goto $bb7;

  $bb367:
    assume $i664 == 1;
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} vslice_dummy_var_309 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb362:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb360:
    assume {:verifier.code 0} true;
    assume $i656 == 1;
    goto $bb7;

  $bb357:
    assume $i646 == 1;
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} vslice_dummy_var_305 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb352:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb350:
    assume {:verifier.code 0} true;
    assume $i638 == 1;
    goto $bb7;

  $bb347:
    assume $i628 == 1;
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} vslice_dummy_var_301 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb342:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb340:
    assume {:verifier.code 0} true;
    assume $i620 == 1;
    goto $bb7;

  $bb337:
    assume $i610 == 1;
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} vslice_dummy_var_297 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb332:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb330:
    assume {:verifier.code 0} true;
    assume $i602 == 1;
    goto $bb7;

  $bb327:
    assume $i592 == 1;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} vslice_dummy_var_293 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb322:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb320:
    assume {:verifier.code 0} true;
    assume $i584 == 1;
    goto $bb7;

  $bb317:
    assume $i574 == 1;
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} vslice_dummy_var_289 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb312:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb310:
    assume {:verifier.code 0} true;
    assume $i566 == 1;
    goto $bb7;

  $bb307:
    assume $i556 == 1;
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} vslice_dummy_var_285 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb302:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb300:
    assume {:verifier.code 0} true;
    assume $i548 == 1;
    goto $bb7;

  $bb297:
    assume $i538 == 1;
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} vslice_dummy_var_281 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb292:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb290:
    assume {:verifier.code 0} true;
    assume $i530 == 1;
    goto $bb7;

  $bb287:
    assume $i520 == 1;
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} vslice_dummy_var_277 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb282:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb280:
    assume {:verifier.code 0} true;
    assume $i512 == 1;
    goto $bb7;

  $bb277:
    assume $i502 == 1;
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} vslice_dummy_var_273 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb272:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb270:
    assume {:verifier.code 0} true;
    assume $i494 == 1;
    goto $bb7;

  $bb267:
    assume $i484 == 1;
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} vslice_dummy_var_269 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb262:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb260:
    assume {:verifier.code 0} true;
    assume $i476 == 1;
    goto $bb7;

  $bb257:
    assume $i466 == 1;
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} vslice_dummy_var_265 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb252:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb250:
    assume {:verifier.code 0} true;
    assume $i458 == 1;
    goto $bb7;

  $bb247:
    assume $i448 == 1;
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} vslice_dummy_var_261 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb242:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb240:
    assume {:verifier.code 0} true;
    assume $i440 == 1;
    goto $bb7;

  $bb237:
    assume $i430 == 1;
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} vslice_dummy_var_257 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb232:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb230:
    assume {:verifier.code 0} true;
    assume $i422 == 1;
    goto $bb7;

  $bb227:
    assume $i412 == 1;
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} vslice_dummy_var_253 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb222:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb220:
    assume {:verifier.code 0} true;
    assume $i404 == 1;
    goto $bb7;

  $bb217:
    assume $i394 == 1;
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} vslice_dummy_var_249 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb212:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb210:
    assume {:verifier.code 0} true;
    assume $i386 == 1;
    goto $bb7;

  $bb207:
    assume $i376 == 1;
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} vslice_dummy_var_245 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb202:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb200:
    assume {:verifier.code 0} true;
    assume $i368 == 1;
    goto $bb7;

  $bb197:
    assume $i358 == 1;
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} vslice_dummy_var_241 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb192:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb190:
    assume {:verifier.code 0} true;
    assume $i350 == 1;
    goto $bb7;

  $bb187:
    assume $i340 == 1;
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} vslice_dummy_var_237 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb182:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb180:
    assume {:verifier.code 0} true;
    assume $i332 == 1;
    goto $bb7;

  $bb177:
    assume $i322 == 1;
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} vslice_dummy_var_233 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb172:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb170:
    assume {:verifier.code 0} true;
    assume $i314 == 1;
    goto $bb7;

  $bb167:
    assume $i304 == 1;
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} vslice_dummy_var_229 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb162:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb160:
    assume {:verifier.code 0} true;
    assume $i296 == 1;
    goto $bb7;

  $bb157:
    assume $i286 == 1;
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} vslice_dummy_var_225 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb152:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb150:
    assume {:verifier.code 0} true;
    assume $i278 == 1;
    goto $bb7;

  $bb147:
    assume $i268 == 1;
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} vslice_dummy_var_221 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb142:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb140:
    assume {:verifier.code 0} true;
    assume $i260 == 1;
    goto $bb7;

  $bb137:
    assume $i250 == 1;
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} vslice_dummy_var_217 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb132:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb130:
    assume {:verifier.code 0} true;
    assume $i242 == 1;
    goto $bb7;

  $bb127:
    assume $i232 == 1;
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} vslice_dummy_var_213 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb122:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb120:
    assume {:verifier.code 0} true;
    assume $i224 == 1;
    goto $bb7;

  $bb117:
    assume $i214 == 1;
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} vslice_dummy_var_209 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb112:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb110:
    assume {:verifier.code 0} true;
    assume $i206 == 1;
    goto $bb7;

  $bb107:
    assume $i196 == 1;
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} vslice_dummy_var_205 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb102:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb100:
    assume {:verifier.code 0} true;
    assume $i188 == 1;
    goto $bb7;

  $bb97:
    assume $i178 == 1;
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} vslice_dummy_var_201 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb92:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb90:
    assume {:verifier.code 0} true;
    assume $i170 == 1;
    goto $bb7;

  $bb87:
    assume $i160 == 1;
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} vslice_dummy_var_197 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb82:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i152 == 1;
    goto $bb7;

  $bb77:
    assume $i142 == 1;
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} vslice_dummy_var_193 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb72:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i134 == 1;
    goto $bb7;

  $bb67:
    assume $i124 == 1;
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} vslice_dummy_var_189 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb62:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb7;

  $bb57:
    assume $i106 == 1;
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} vslice_dummy_var_185 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb52:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb7;

  $bb47:
    assume $i88 == 1;
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} vslice_dummy_var_181 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb42:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb7;

  $bb37:
    assume $i70 == 1;
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} vslice_dummy_var_177 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb32:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb7;

  $bb27:
    assume $i52 == 1;
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} vslice_dummy_var_173 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb7;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} vslice_dummy_var_169 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb7;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} vslice_dummy_var_164 := cpia2_do_command($p0, 26, 1, 0);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 253699);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 578} {:cexpr "msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 1} true;
    call {:si_unique_call 579} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 580} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const schedule_timeout_interruptible: ref;

axiom schedule_timeout_interruptible == $sub.ref(0, 254731);

procedure schedule_timeout_interruptible($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout_interruptible($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 581} {:cexpr "schedule_timeout_interruptible:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 1} true;
    call {:si_unique_call 582} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 583} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const apply_vp_patch: ref;

axiom apply_vp_patch == $sub.ref(0, 255763);

procedure apply_vp_patch($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.7, $CurrAddr;



implementation apply_vp_patch($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i8;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i8;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i8;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i64;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $p77: ref;
  var $i79: i32;
  var $i80: i64;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $i56: i32;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i8;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var $i98: i8;
  var $p101: ref;
  var $i34: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_368: i32;
  var vslice_dummy_var_369: i32;
  var vslice_dummy_var_370: i32;
  var vslice_dummy_var_371: i32;
  var vslice_dummy_var_372: i32;
  var vslice_dummy_var_373: i32;
  var vslice_dummy_var_374: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $p2 := $alloc($mul.ref(22, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $p3 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 22)), $mul.ref(0, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p4, 99);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 22)), $mul.ref(1, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p5, 112);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 22)), $mul.ref(2, 1));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p6, 105);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 22)), $mul.ref(3, 1));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p7, 97);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 22)), $mul.ref(4, 1));
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p8, 50);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 22)), $mul.ref(5, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p9, 47);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 22)), $mul.ref(6, 1));
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p10, 115);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 22)), $mul.ref(7, 1));
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p11, 116);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 22)), $mul.ref(8, 1));
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p12, 118);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 22)), $mul.ref(9, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p13, 48);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 22)), $mul.ref(10, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p14, 54);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 22)), $mul.ref(11, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p15, 55);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 22)), $mul.ref(12, 1));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p16, 50);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 22)), $mul.ref(13, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p17, 95);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 22)), $mul.ref(14, 1));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p18, 118);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 22)), $mul.ref(15, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p19, 112);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 22)), $mul.ref(16, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p20, 52);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 22)), $mul.ref(17, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p21, 46);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 22)), $mul.ref(18, 1));
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p22, 98);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 22)), $mul.ref(19, 1));
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p23, 105);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 22)), $mul.ref(20, 1));
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p24, 110);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 22)), $mul.ref(21, 1));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p25, 0);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p2);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2496, 1));
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.4, $p27);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 1744)), $mul.ref(136, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i30 := request_firmware($p1, $p26, $p29);
    call {:si_unique_call 588} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p35, 14);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(6, 1));
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p36, 1);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.11, $p1);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.12, $p38);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.7, $p39);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} vslice_dummy_var_369 := cpia2_send_onebyte_command($p0, $p3, 10, $i42);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.11, $p1);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.12, $p45);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p46, $mul.ref(1, 1));
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.7, $p47);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} vslice_dummy_var_370 := cpia2_send_onebyte_command($p0, $p3, 11, $i50);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.11, $p1);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.13, $p53);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i55 := $ult.i64(2, $i54);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.11, $p1);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.12, $p86);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.7, $p87);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i8($i89);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} vslice_dummy_var_372 := cpia2_send_onebyte_command($p0, $p3, 10, $i90);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.11, $p1);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.12, $p93);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p94, $mul.ref(1, 1));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.7, $p95);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i8($i97);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} vslice_dummy_var_373 := cpia2_send_onebyte_command($p0, $p3, 11, $i98);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} vslice_dummy_var_374 := cpia2_send_onebyte_command($p0, $p3, 13, 1);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.11, $p1);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} release_firmware($p101);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb5:
    assume $i55 == 1;
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i56 := 2;
    goto $bb8;

  $bb8:
    call $p57, $p58, $p59, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $p67, $i68, $i69, $p70, $p71, $p72, $p73, $p74, $p75, $i76, $p77, $i79, $i80, $p81, $p82, $i83, $i84, $i56, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, vslice_dummy_var_371 := apply_vp_patch_loop_$bb8($p0, $p1, $p3, $p57, $p58, $p59, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $p67, $i68, $i69, $p70, $p71, $p72, $p73, $p74, $p75, $i76, $p77, $i79, $i80, $p81, $p82, $i83, $i84, $i56, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, vslice_dummy_var_371);
    goto $bb8_last;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p57, 12);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.11, $p1);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.13, $p59);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i64.i32($i60);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32($i61, $i56);
    call {:si_unique_call 592} {:cexpr "__min2"} boogie_si_record_i32($i62);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i63 := $slt.i32(64, $i62);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $i62;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i8($i64);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p66, $i65);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.7, $p67);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i64($i68);
    call {:si_unique_call 593} {:cexpr "__len"} boogie_si_record_i64($i69);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.11, $p1);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.12, $p74);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i56);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p75, $mul.ref($i76, 1));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.7;
    cmdloc_dummy_var_1 := $M.7;
    call {:si_unique_call 594} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p72, $p77, $i69, $zext.i32.i64(1), 0 == 1);
    $M.7 := cmdloc_dummy_var_2;
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} vslice_dummy_var_371 := cpia2_send_command($p0, $p3);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i56, 64);
    call {:si_unique_call 596} {:cexpr "i"} boogie_si_record_i32($i79);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i79);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.11, $p1);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.13, $p82);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i84 := $ult.i64($i80, $i83);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i84 == 1);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    $i56 := $i79;
    goto $bb13_dummy;

  $bb10:
    assume $i63 == 1;
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i64 := 64;
    goto $bb12;

  $bb1:
    assume $i31 == 1;
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p2);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} vslice_dummy_var_368 := printk.ref.ref(.str.75, $p32);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i34 := $i30;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3568;
}



const set_default_user_mode: ref;

axiom set_default_user_mode == $sub.ref(0, 256795);

procedure set_default_user_mode($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.4, $CurrAddr;



implementation set_default_user_mode($p0: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p7: ref;
  var $i8: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i8;
  var $i28: i1;
  var $i29: i1;
  var $i30: i8;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i8;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i26: i8;
  var $i27: i8;
  var $i44: i32;
  var $i45: i8;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $p62: ref;
  var $i63: i8;
  var $i64: i8;
  var $i65: i32;
  var $i43: i32;
  var vslice_dummy_var_375: i32;
  var vslice_dummy_var_376: i32;
  var vslice_dummy_var_377: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.4, $p3);
    call {:si_unique_call 601} {:cexpr "width"} boogie_si_record_i32($i4);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.4, $p7);
    call {:si_unique_call 602} {:cexpr "height"} boogie_si_record_i32($i8);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.4, $p11);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i13, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i13, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.4, $p39);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} vslice_dummy_var_376 := printk.ref.ref.i32(.str.76, .str.77, $i41);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 22);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $r := $i43;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i4, 352);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i28 == 1);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i29 := $sgt.i32($i8, 288);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := 8;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.4, $p33);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 1);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := 32;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i26, $i27 := $i30, $i36;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i26);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} vslice_dummy_var_375 := cpia2_do_command($p0, 27, 1, $i45);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(1, 1));
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.4, $p49);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i64 := $i27;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} vslice_dummy_var_377 := cpia2_set_fps($p0, $i65);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb41;

  $bb42:
    assume $i52 == 1;
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(1, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.4, $p55);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i27);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i57, $i58);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb44;

  $bb45:
    assume $i59 == 1;
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(1, 1));
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.4, $p62);
    call {:si_unique_call 605} {:cexpr "frame_rate"} boogie_si_record_i8($i63);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i64 := $i63;
    goto $bb47;

  $bb37:
    assume $i35 == 1;
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i36 := 8;
    goto $bb39;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i30 := 32;
    goto $bb36;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb32;

  $bb6:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i13, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i23 := $sgt.i32($i4, 176);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume !($i23 == 1);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i8, 144);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := 2;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i26, $i27 := $i25, 32;
    goto $bb30;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb29;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb25;

  $bb4:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i13, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb10;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb2:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i13, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i13, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb19, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb10;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb17:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i13, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb10;

  $bb22:
    assume $i22 == 1;
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    goto $bb20;
}



const set_all_properties: ref;

axiom set_all_properties == $sub.ref(0, 257827);

procedure set_all_properties($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.4, $M.9, $M.10, $CurrAddr;



implementation set_all_properties($p0: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i8;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i8;
  var $p21: ref;
  var vslice_dummy_var_378: i32;
  var vslice_dummy_var_379: i32;
  var vslice_dummy_var_380: i32;
  var vslice_dummy_var_381: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(2, 1));
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.4, $p3);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} vslice_dummy_var_378 := cpia2_usb_change_streaming_alternate($p0, $i5);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(3, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.4, $p9);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} vslice_dummy_var_379 := cpia2_do_command($p0, 17, 1, $i12);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(4, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.4, $p16);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} vslice_dummy_var_380 := cpia2_do_command($p0, 19, 1, $i19);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(528, 1));
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} vslice_dummy_var_381 := v4l2_ctrl_handler_setup($p21);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} wake_system($p0);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} set_lowlight_boost($p0);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const cpia2_usb_change_streaming_alternate: ref;

axiom cpia2_usb_change_streaming_alternate == $sub.ref(0, 258859);

procedure cpia2_usb_change_streaming_alternate($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.7, $M.4, $M.10, $CurrAddr;



implementation cpia2_usb_change_streaming_alternate($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i13: i8;
  var $p16: ref;
  var $i4: i32;
  var vslice_dummy_var_382: i32;
  var vslice_dummy_var_383: i32;
  var vslice_dummy_var_384: i32;
  var vslice_dummy_var_385: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} {:cexpr "cpia2_usb_change_streaming_alternate:arg:alt"} boogie_si_record_i32($i1);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i2 := $ule.i32($i1, 1);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i1, 7);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(2, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.4, $p7);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, $i1);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} vslice_dummy_var_382 := cpia2_usb_stream_pause($p0);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} vslice_dummy_var_383 := configure_transfer_mode($p0, $i1);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i1);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(2, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p16, $i13);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} vslice_dummy_var_384 := cpia2_reset_camera($p0);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} vslice_dummy_var_385 := cpia2_usb_stream_resume($p0);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const v4l2_ctrl_handler_setup: ref;

axiom v4l2_ctrl_handler_setup == $sub.ref(0, 259891);

procedure v4l2_ctrl_handler_setup($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_handler_setup($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 1} true;
    call {:si_unique_call 618} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 619} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wake_system: ref;

axiom wake_system == $sub.ref(0, 260923);

procedure wake_system($p0: ref);
  free requires assertsPassed;
  modifies $M.7, $M.4, $CurrAddr;



implementation wake_system($p0: ref)
{
  var vslice_dummy_var_386: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} vslice_dummy_var_386 := cpia2_do_command($p0, 32, 1, 0);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    return;
}



const set_lowlight_boost: ref;

axiom set_lowlight_boost == $sub.ref(0, 261955);

procedure set_lowlight_boost($p0: ref);
  free requires assertsPassed;
  modifies $M.7, $M.4, $CurrAddr;



implementation set_lowlight_boost($p0: ref)
{
  var $p1: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var vslice_dummy_var_387: i32;
  var vslice_dummy_var_388: i32;
  var vslice_dummy_var_389: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $p1 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.4, $p4);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 1);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.4, $p9);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 16);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(6, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p13, 1);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p14, 2);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p15, 3);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p16, 10);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p19, 0);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 64)), $mul.ref(1, 1));
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p22, 89);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p25, 0);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} vslice_dummy_var_387 := cpia2_send_command($p0, $p1);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(7, 1));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.4, $p29);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p38, 6);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p39, 12);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p40, 1);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} vslice_dummy_var_388 := cpia2_send_command($p0, $p1);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} vslice_dummy_var_389 := cpia2_do_command($p0, 50, 1, 1);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p35, 2);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const cpia2_usb_stream_resume: ref;

axiom cpia2_usb_stream_resume == $sub.ref(0, 262987);

procedure cpia2_usb_stream_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.7, $CurrAddr;



implementation cpia2_usb_stream_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var vslice_dummy_var_390: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(812, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.4, $p1);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(784, 1));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p4, 0);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(2, 1));
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.4, $p7);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $i10 := set_alternate($p0, $i9);
    call {:si_unique_call 626} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i20 := $i10;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(10, 1));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.4, $p14);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} vslice_dummy_var_390 := cpia2_do_command($p0, 52, 1, $i17);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $i19 := submit_urbs($p0);
    call {:si_unique_call 629} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb5;
}



const submit_urbs: ref;

axiom submit_urbs == $sub.ref(0, 264019);

procedure submit_urbs($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $CurrAddr;



implementation submit_urbs($p0: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $p17: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i28: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i27: i32;
  var $i41: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $i51: i32;
  var $i53: i1;
  var $i55: i64;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i54: i32;
  var $i62: i64;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i64;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i64;
  var $p99: ref;
  var $i100: i32;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $i40: i32;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $i113: i32;
  var $i39: i32;
  var $p117: ref;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i122: i32;
  var $i123: i64;
  var $p124: ref;
  var $i125: i32;
  var $p128: ref;
  var $p129: ref;
  var $i130: i32;
  var $i131: i64;
  var $p132: ref;
  var $i133: i32;
  var $p136: ref;
  var $p137: ref;
  var $i138: i32;
  var $i139: i64;
  var $p140: ref;
  var $i141: i32;
  var $i142: i32;
  var $p145: ref;
  var $p146: ref;
  var $i147: i32;
  var $i148: i64;
  var $p149: ref;
  var $i150: i32;
  var $p153: ref;
  var $p154: ref;
  var $i155: i32;
  var $i156: i64;
  var $p157: ref;
  var $i158: i32;
  var $i159: i32;
  var $p162: ref;
  var $p163: ref;
  var $i164: i32;
  var $i165: i64;
  var $p166: ref;
  var $i167: i32;
  var $p170: ref;
  var $p171: ref;
  var $i172: i32;
  var $i173: i64;
  var $p174: ref;
  var $i175: i32;
  var $i176: i32;
  var $p179: ref;
  var $p180: ref;
  var $i181: i32;
  var $i182: i64;
  var $p183: ref;
  var $i184: i32;
  var $p187: ref;
  var $p188: ref;
  var $i189: i32;
  var $i190: i64;
  var $p191: ref;
  var $i192: i32;
  var $i193: i32;
  var $p196: ref;
  var $p197: ref;
  var $i198: i32;
  var $i199: i64;
  var $p200: ref;
  var $i201: i32;
  var $p204: ref;
  var $p205: ref;
  var $i206: i32;
  var $i207: i64;
  var $p208: ref;
  var $i209: i32;
  var $i210: i32;
  var $p213: ref;
  var $p214: ref;
  var $i215: i32;
  var $i216: i64;
  var $p217: ref;
  var $i218: i32;
  var $p221: ref;
  var $p222: ref;
  var $i223: i32;
  var $i224: i64;
  var $p225: ref;
  var $i226: i32;
  var $i227: i32;
  var $p230: ref;
  var $p231: ref;
  var $i232: i32;
  var $i233: i64;
  var $p234: ref;
  var $i235: i32;
  var $p238: ref;
  var $p239: ref;
  var $i240: i32;
  var $i241: i64;
  var $p242: ref;
  var $i243: i32;
  var $i244: i32;
  var $p247: ref;
  var $p248: ref;
  var $i249: i32;
  var $i250: i64;
  var $p251: ref;
  var $i252: i32;
  var $p255: ref;
  var $p256: ref;
  var $i257: i32;
  var $i258: i64;
  var $p259: ref;
  var $i260: i32;
  var $i261: i32;
  var $p264: ref;
  var $p265: ref;
  var $i266: i32;
  var $i267: i64;
  var $p268: ref;
  var $i269: i32;
  var $p272: ref;
  var $p275: ref;
  var $p276: ref;
  var $i277: i64;
  var $i278: i1;
  var $p279: ref;
  var $i280: i32;
  var $i281: i64;
  var $p282: ref;
  var $i283: i32;
  var $i284: i32;
  var $i285: i64;
  var $p286: ref;
  var $p289: ref;
  var $p292: ref;
  var $p293: ref;
  var $i294: i64;
  var $i295: i1;
  var vslice_dummy_var_391: i32;
  var vslice_dummy_var_392: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.4, $p3);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.4, $p7);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref($i9, 4));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.14, $p10);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i11, 10);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $p14 := kmalloc($i13, 208);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p17, $p14);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.4, $p20);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i24 := 0;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p276 := $load.ref($M.4, $p275);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i277 := $p2i.ref.i64($p276);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i278 := $ne.i64($i277, 0);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    assume {:branchcond $i278} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i280 := $load.i32($M.4, $p279);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i281 := $zext.i32.i64($i280);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref($i281, 4));
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i283 := $load.i32($M.14, $p282);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i284 := $mul.i32($i283, 10);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i285 := $sext.i32.i64($i284);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $p286 := kmalloc($i285, 208);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p289, $p286);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $p293 := $load.ref($M.4, $p292);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i294 := $p2i.ref.i64($p293);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i295 := $eq.i64($i294, 0);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i24 := 1;
    assume {:branchcond $i295} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb22;

  $bb22:
    call $i41, $p44, $p45, $i46, $i47, $p48, $i49, $i50, $i51, $i62, $p65, $p66, $p67, $p68, $p70, $p71, $p72, $i73, $i74, $p75, $p76, $i77, $p80, $p81, $p82, $p83, $p84, $p85, $p86, $i87, $i88, $p89, $i90, $i91, $p92, $p95, $p96, $i97, $i98, $p99, $i100, $p103, $i104, $i105, $i40, $p121, $i122, $i123, $p124, $i125, $p128, $p129, $i130, $i131, $p132, $i133, $p136, $p137, $i138, $i139, $p140, $i141, $i142, $p145, $p146, $i147, $i148, $p149, $i150, $p153, $p154, $i155, $i156, $p157, $i158, $i159, $p162, $p163, $i164, $i165, $p166, $i167, $p170, $p171, $i172, $i173, $p174, $i175, $i176, $p179, $p180, $i181, $i182, $p183, $i184, $p187, $p188, $i189, $i190, $p191, $i192, $i193, $p196, $p197, $i198, $i199, $p200, $i201, $p204, $p205, $i206, $i207, $p208, $i209, $i210, $p213, $p214, $i215, $i216, $p217, $i218, $p221, $p222, $i223, $i224, $p225, $i226, $i227, $p230, $p231, $i232, $i233, $p234, $i235, $p238, $p239, $i240, $i241, $p242, $i243, $i244, $p247, $p248, $i249, $i250, $p251, $i252, $p255, $p256, $i257, $i258, $p259, $i260, $i261, $p264, $p265, $i266, $i267, $p268, $i269, $p272 := submit_urbs_loop_$bb22($p0, $i41, $p44, $p45, $i46, $i47, $p48, $i49, $i50, $i51, $i62, $p65, $p66, $p67, $p68, $p70, $p71, $p72, $i73, $i74, $p75, $p76, $i77, $p80, $p81, $p82, $p83, $p84, $p85, $p86, $i87, $i88, $p89, $i90, $i91, $p92, $p95, $p96, $i97, $i98, $p99, $i100, $p103, $i104, $i105, $i40, $p121, $i122, $i123, $p124, $i125, $p128, $p129, $i130, $i131, $p132, $i133, $p136, $p137, $i138, $i139, $p140, $i141, $i142, $p145, $p146, $i147, $i148, $p149, $i150, $p153, $p154, $i155, $i156, $p157, $i158, $i159, $p162, $p163, $i164, $i165, $p166, $i167, $p170, $p171, $i172, $i173, $p174, $i175, $i176, $p179, $p180, $i181, $i182, $p183, $i184, $p187, $p188, $i189, $i190, $p191, $i192, $i193, $p196, $p197, $i198, $i199, $p200, $i201, $p204, $p205, $i206, $i207, $p208, $i209, $i210, $p213, $p214, $i215, $i216, $p217, $i218, $p221, $p222, $i223, $i224, $p225, $i226, $i227, $p230, $p231, $i232, $i233, $p234, $i235, $p238, $p239, $i240, $i241, $p242, $i243, $i244, $p247, $p248, $i249, $i250, $p251, $i252, $p255, $p256, $i257, $i258, $p259, $i260, $i261, $p264, $p265, $i266, $i267, $p268, $i269, $p272);
    goto $bb22_last;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref($i41, 16)), $mul.ref(8, 1));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.4, $p44);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $p48 := usb_alloc_urb(10, 208);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i51 := $i40;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i40);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref($i62, 16)), $mul.ref(8, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p65, $p48);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2496, 1));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.4, $p66);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p68, $p67);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p70, $p0);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2496, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.4, $p71);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $i73 := __create_pipe($p72, 1);
    call {:si_unique_call 640} {:cexpr "tmp___0"} boogie_si_record_i32($i73);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i73, 128);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p75, $i74);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p76, 2);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i40);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref($i77, 16)), $mul.ref(0, 1));
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.4, $p80);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p82, $p81);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p83, cpia2_usb_complete);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p84, 10);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p85, 1);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.4, $p86);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i88 := $zext.i32.i64($i87);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref($i88, 4));
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.14, $p89);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i91 := $mul.i32($i90, 10);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p92, $i91);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p95, 0);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.4, $p96);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i98 := $zext.i32.i64($i97);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref($i98, 4));
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.14, $p99);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p103, $i100);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.4, $p121);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i123 := $zext.i32.i64($i122);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref($i123, 4));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.14, $p124);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p128, $i125);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.4, $p129);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i131 := $zext.i32.i64($i130);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref($i131, 4));
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.14, $p132);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p136, $i133);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.4, $p137);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i139 := $zext.i32.i64($i138);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref($i139, 4));
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.14, $p140);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i142 := $mul.i32($i141, 2);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p145, $i142);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.4, $p146);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i148 := $zext.i32.i64($i147);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref($i148, 4));
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.14, $p149);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p153, $i150);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.4, $p154);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i156 := $zext.i32.i64($i155);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref($i156, 4));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.14, $p157);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i159 := $mul.i32($i158, 3);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p162, $i159);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.4, $p163);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i165 := $zext.i32.i64($i164);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref($i165, 4));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.14, $p166);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p170, $i167);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.4, $p171);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i173 := $zext.i32.i64($i172);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref($i173, 4));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.14, $p174);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i176 := $mul.i32($i175, 4);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p179, $i176);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.4, $p180);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i182 := $zext.i32.i64($i181);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref($i182, 4));
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i184 := $load.i32($M.14, $p183);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p187, $i184);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.4, $p188);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i190 := $zext.i32.i64($i189);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref($i190, 4));
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i192 := $load.i32($M.14, $p191);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i193 := $mul.i32($i192, 5);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p196, $i193);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i198 := $load.i32($M.4, $p197);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i199 := $zext.i32.i64($i198);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref($i199, 4));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.14, $p200);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p204, $i201);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i206 := $load.i32($M.4, $p205);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i207 := $zext.i32.i64($i206);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref($i207, 4));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i209 := $load.i32($M.14, $p208);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i210 := $mul.i32($i209, 6);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p213, $i210);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.4, $p214);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i216 := $zext.i32.i64($i215);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref($i216, 4));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i218 := $load.i32($M.14, $p217);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p221, $i218);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i223 := $load.i32($M.4, $p222);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i224 := $zext.i32.i64($i223);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref($i224, 4));
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i226 := $load.i32($M.14, $p225);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i227 := $mul.i32($i226, 7);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p230, $i227);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i232 := $load.i32($M.4, $p231);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i233 := $zext.i32.i64($i232);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref($i233, 4));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i235 := $load.i32($M.14, $p234);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p238, $i235);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i240 := $load.i32($M.4, $p239);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i241 := $zext.i32.i64($i240);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref($i241, 4));
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i243 := $load.i32($M.14, $p242);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i244 := $mul.i32($i243, 8);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p247, $i244);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i249 := $load.i32($M.4, $p248);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i250 := $zext.i32.i64($i249);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref($i250, 4));
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i252 := $load.i32($M.14, $p251);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p255, $i252);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i257 := $load.i32($M.4, $p256);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i258 := $zext.i32.i64($i257);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref($i258, 4));
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i260 := $load.i32($M.14, $p259);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i261 := $mul.i32($i260, 9);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p264, $i261);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i266 := $load.i32($M.4, $p265);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i267 := $zext.i32.i64($i266);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref($i267, 4));
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i269 := $load.i32($M.14, $p268);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p272, $i269);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i40, 1);
    call {:si_unique_call 634} {:cexpr "i"} boogie_si_record_i32($i104);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i105 := $sle.i32($i104, 1);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i105 == 1);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.4, $p108);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $i110 := usb_submit_urb($p109, 208);
    call {:si_unique_call 642} {:cexpr "err"} boogie_si_record_i32($i110);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i112, $i113 := 0, $i110;
    assume true;
    goto $bb48, $bb50;

  $bb50:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.4, $p117);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $i119 := usb_submit_urb($p118, 208);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i112, $i113 := 1, $i119;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i120 == 1;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} vslice_dummy_var_392 := printk.ref.i32.i32(.str.56, $i112, $i113);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i39 := $i113;
    goto $bb18;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i111 == 1;
    goto $bb49;

  $bb43:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    $i40 := $i104;
    goto $bb43_dummy;

  $bb28:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} vslice_dummy_var_391 := printk.ref.ref(.str.54, .str.55);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32(0, $i51);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 12);
    goto $bb18;

  $bb30:
    assume $i53 == 1;
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb33;

  $bb33:
    call $i55, $p58, $p59, $i60, $i61, $i54 := submit_urbs_loop_$bb33($p0, $i51, $i55, $p58, $p59, $i60, $i61, $i54);
    goto $bb33_last;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i54);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref($i55, 16)), $mul.ref(8, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.4, $p58);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} usb_free_urb($p59);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i54, 1);
    call {:si_unique_call 638} {:cexpr "j"} boogie_si_record_i32($i60);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i60, $i51);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i61 == 1);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb35:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i54 := $i60;
    goto $bb35_dummy;

  $bb24:
    assume $i47 == 1;
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i295 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i24, 1);
    call {:si_unique_call 631} {:cexpr "i"} boogie_si_record_i32($i25);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i26 := $sge.i32($i25, 0);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 12);
    goto $bb18;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i27 := $i25;
    goto $bb13;

  $bb13:
    call $i28, $p31, $p32, $i33, $p36, $i37, $i38, $i27 := submit_urbs_loop_$bb13($p0, $i28, $p31, $p32, $i33, $p36, $i37, $i38, $i27);
    goto $bb13_last;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref($i28, 16)), $mul.ref(0, 1));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.4, $p31);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} kfree($p32);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i27);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref($i33, 16)), $mul.ref(0, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p36, $0.ref);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32($i27, 1);
    call {:si_unique_call 633} {:cexpr "i"} boogie_si_record_i32($i37);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i38 := $sge.i32($i37, 0);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i38 == 1);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i27 := $i37;
    goto $bb15_dummy;

  $bb65:
    assume $i278 == 1;
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb8;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb35_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3893;

  $bb43_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3870;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3849;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 265051);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 647} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_alloc_urb: ref;

axiom usb_alloc_urb == $sub.ref(0, 266083);

procedure usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} {:cexpr "usb_alloc_urb:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 650} {:cexpr "usb_alloc_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $p2 := external_alloc();
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const cpia2_usb_complete: ref;

axiom cpia2_usb_complete == $sub.ref(0, 267115);

procedure cpia2_usb_complete($p0: ref);



const usb_submit_urb: ref;

axiom usb_submit_urb == $sub.ref(0, 268147);

procedure usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 652} {:cexpr "usb_submit_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 1} true;
    call {:si_unique_call 653} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 654} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const do_gettimeofday: ref;

axiom do_gettimeofday == $sub.ref(0, 269179);

procedure do_gettimeofday($p0: ref);



const add_APPn: ref;

axiom add_APPn == $sub.ref(0, 270211);

procedure add_APPn($p0: ref);



const add_COM: ref;

axiom add_COM == $sub.ref(0, 271243);

procedure add_COM($p0: ref);



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 272275);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const process_frame: ref;

axiom process_frame == $sub.ref(0, 273307);

procedure process_frame($p0: ref);



const waitqueue_active: ref;

axiom waitqueue_active == $sub.ref(0, 274339);

procedure waitqueue_active($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation waitqueue_active($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $i2 := list_empty($p1);
    call {:si_unique_call 656} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 275371);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 658} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 276403);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.4, $p1);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 277435);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 278467);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 660} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $p2 := ldv_malloc($i0);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 279499);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 662} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 1} true;
    call {:si_unique_call 663} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 664} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $p3 := malloc($i0);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i4 := ldv_is_err($p3);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 1} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 1} true;
    $i6 := $xor.i1($i5, 1);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 1} true;
    call {:si_unique_call 667} __VERIFIER_assume($i7);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 280531);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 668} $r := $malloc($i0);
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 281563);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547521);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const cpia2_set_fps: ref;

axiom cpia2_set_fps == $sub.ref(0, 282595);

procedure cpia2_set_fps($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.4, $CurrAddr;



implementation cpia2_set_fps($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i37: i8;
  var $p40: ref;
  var $i24: i32;

  $bb0:
    call {:si_unique_call 669} {:cexpr "cpia2_set_fps:arg:framerate"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i1, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb8:
    assume $i5 == 1;
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.4, $p15);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 1);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.4, $p27);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i31 := $i1;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i35 := cpia2_do_command($p0, 29, 1, $i34);
    call {:si_unique_call 671} {:cexpr "retval"} boogie_si_record_i32($i35);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i24 := $i35;
    goto $bb35;

  $bb45:
    assume $i36 == 1;
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i31);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(1, 1));
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p40, $i37);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb39:
    assume $i29 == 1;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i1, 8);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb41;

  $bb42:
    assume $i30 == 1;
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb44;

  $bb30:
    assume $i17 == 1;
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.4, $p20);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 16);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb32;

  $bb33:
    assume $i23 == 1;
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb35;

  $bb6:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb12;

  $bb4:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb15;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb21, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb22;

  $bb19:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb25;

  $bb17:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb28;
}



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 283627);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 1} true;
    call {:si_unique_call 672} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 673} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const cpia2_send_onebyte_command: ref;

axiom cpia2_send_onebyte_command == $sub.ref(0, 284659);

procedure cpia2_send_onebyte_command($p0: ref, $p1: ref, $i2: i8, $i3: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation cpia2_send_onebyte_command($p0: ref, $p1: ref, $i2: i8, $i3: i8) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} {:cexpr "cpia2_send_onebyte_command:arg:start"} boogie_si_record_i8($i2);
    call {:si_unique_call 675} {:cexpr "cpia2_send_onebyte_command:arg:datum"} boogie_si_record_i8($i3);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i3);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i2);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p8, 1);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $i9 := cpia2_send_command($p0, $p1);
    call {:si_unique_call 677} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 285691);

procedure release_firmware($p0: ref);
  free requires assertsPassed;



implementation release_firmware($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    return;
}



const config_sensor_410: ref;

axiom config_sensor_410 == $sub.ref(0, 286723);

procedure config_sensor_410($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.4, $CurrAddr;



implementation config_sensor_410($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p13: ref;
  var $i14: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i21: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $i34: i1;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $i50: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $i71: i64;
  var $p72: ref;
  var $p73: ref;
  var $p75: ref;
  var $i76: i64;
  var $p77: ref;
  var $p78: ref;
  var $p80: ref;
  var $i81: i64;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var $i86: i1;
  var $i87: i64;
  var $p88: ref;
  var $p89: ref;
  var $p91: ref;
  var $i92: i64;
  var $p93: ref;
  var $p94: ref;
  var $p96: ref;
  var $i97: i64;
  var $p98: ref;
  var $p99: ref;
  var $p101: ref;
  var $i102: i1;
  var $i103: i64;
  var $p104: ref;
  var $p105: ref;
  var $p107: ref;
  var $i108: i64;
  var $p109: ref;
  var $p110: ref;
  var $p112: ref;
  var $i113: i64;
  var $p114: ref;
  var $p115: ref;
  var $p117: ref;
  var $i118: i1;
  var $i119: i64;
  var $p120: ref;
  var $p121: ref;
  var $p123: ref;
  var $i124: i64;
  var $p125: ref;
  var $p126: ref;
  var $p128: ref;
  var $i129: i64;
  var $p130: ref;
  var $p131: ref;
  var $p133: ref;
  var $i134: i1;
  var $i135: i64;
  var $p136: ref;
  var $p137: ref;
  var $p139: ref;
  var $i140: i64;
  var $p141: ref;
  var $p142: ref;
  var $p144: ref;
  var $i145: i64;
  var $p146: ref;
  var $p147: ref;
  var $p149: ref;
  var $i150: i1;
  var $i151: i64;
  var $p152: ref;
  var $p153: ref;
  var $p155: ref;
  var $i156: i64;
  var $p157: ref;
  var $p158: ref;
  var $p160: ref;
  var $i161: i64;
  var $p162: ref;
  var $p163: ref;
  var $p165: ref;
  var $i166: i32;
  var $p169: ref;
  var $i170: i32;
  var $i171: i32;
  var $i172: i8;
  var $i173: i64;
  var $p174: ref;
  var $p175: ref;
  var $p177: ref;
  var $i178: i64;
  var $p179: ref;
  var $p180: ref;
  var $p182: ref;
  var $i183: i32;
  var $p186: ref;
  var $i187: i32;
  var $i188: i32;
  var $i189: i8;
  var $i190: i64;
  var $p191: ref;
  var $p192: ref;
  var $p194: ref;
  var $i195: i64;
  var $p196: ref;
  var $p197: ref;
  var $p199: ref;
  var $i200: i1;
  var $i201: i32;
  var $i202: i32;
  var $i203: i32;
  var $i204: i32;
  var $i205: i8;
  var $i206: i64;
  var $p207: ref;
  var $p208: ref;
  var $p210: ref;
  var $i212: i32;
  var $i213: i32;
  var $i214: i32;
  var $i215: i32;
  var $i216: i8;
  var $i217: i64;
  var $p218: ref;
  var $p219: ref;
  var $p221: ref;
  var $i211: i32;
  var $i222: i64;
  var $p223: ref;
  var $p224: ref;
  var $p226: ref;
  var $i227: i1;
  var $i228: i32;
  var $i229: i32;
  var $i230: i32;
  var $i231: i32;
  var $i232: i8;
  var $i233: i64;
  var $p234: ref;
  var $p235: ref;
  var $p237: ref;
  var $i239: i32;
  var $i240: i32;
  var $i241: i32;
  var $i242: i32;
  var $i243: i8;
  var $i244: i64;
  var $p245: ref;
  var $p246: ref;
  var $p248: ref;
  var $i238: i32;
  var $i249: i64;
  var $p250: ref;
  var $p251: ref;
  var $p253: ref;
  var $i254: i32;
  var $i255: i64;
  var $p256: ref;
  var $p257: ref;
  var $p259: ref;
  var $i260: i64;
  var $p261: ref;
  var $p262: ref;
  var $p264: ref;
  var $i265: i32;
  var $i266: i64;
  var $p267: ref;
  var $p268: ref;
  var $p270: ref;
  var $i271: i64;
  var $p272: ref;
  var $p273: ref;
  var $p275: ref;
  var $i276: i32;
  var $i277: i64;
  var $p278: ref;
  var $p279: ref;
  var $p281: ref;
  var $i282: i64;
  var $p283: ref;
  var $p284: ref;
  var $p286: ref;
  var $i287: i32;
  var $i288: i64;
  var $p289: ref;
  var $p290: ref;
  var $p292: ref;
  var $i293: i64;
  var $p294: ref;
  var $p295: ref;
  var $p297: ref;
  var $i298: i32;
  var $i299: i64;
  var $p300: ref;
  var $p301: ref;
  var $p303: ref;
  var $i304: i64;
  var $p305: ref;
  var $p306: ref;
  var $p308: ref;
  var $i309: i32;
  var $i310: i64;
  var $p311: ref;
  var $p312: ref;
  var $p314: ref;
  var $i315: i64;
  var $p316: ref;
  var $p317: ref;
  var $p319: ref;
  var $i320: i32;
  var $i321: i64;
  var $p322: ref;
  var $p323: ref;
  var $p325: ref;
  var $i326: i64;
  var $p327: ref;
  var $p328: ref;
  var $p330: ref;
  var $i331: i32;
  var $i332: i64;
  var $p333: ref;
  var $p334: ref;
  var $p336: ref;
  var $i337: i8;
  var $p338: ref;
  var $i26: i32;
  var vslice_dummy_var_393: i32;
  var vslice_dummy_var_394: i32;
  var vslice_dummy_var_395: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $p3 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    call {:si_unique_call 679} {:cexpr "config_sensor_410:arg:req_width"} boogie_si_record_i32($i1);
    call {:si_unique_call 680} {:cexpr "config_sensor_410:arg:req_height"} boogie_si_record_i32($i2);
    call {:si_unique_call 681} {:cexpr "config_sensor_410:arg:width"} boogie_si_record_i32($i1);
    call {:si_unique_call 682} {:cexpr "config_sensor_410:arg:height"} boogie_si_record_i32($i2);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i1, 352);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i2, 288);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $i8 := cpia2_match_video_size($i5, $i7);
    call {:si_unique_call 684} {:cexpr "image_size"} boogie_si_record_i32($i8);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i9 := $sge.i32($i8, 0);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i9 == 1);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} vslice_dummy_var_394 := printk.ref(.str.78);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 22);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} vslice_dummy_var_393 := set_vw_size($p0, $i8);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.4, $p13);
    call {:si_unique_call 686} {:cexpr "width"} boogie_si_record_i32($i14);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.4, $p17);
    call {:si_unique_call 687} {:cexpr "height"} boogie_si_record_i32($i18);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i19 := $sle.i32($i14, 176);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i22 := $sle.i32($i14, 320);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i24 := 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i21 := $i24;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p27, 5);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(6, 1));
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p28, 1);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64(0);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 64)), $mul.ref($i29, 2)), $mul.ref(0, 1));
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p33, $sub.i8(0, 61));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i21, 1);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i34 == 1);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64(0);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 64)), $mul.ref($i40, 2)), $mul.ref(1, 1));
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p44, 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64(1);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p47, $mul.ref(0, 64)), $mul.ref($i45, 2)), $mul.ref(0, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p49, $sub.i8(0, 60));
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i21, 3);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i50 == 1);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.4, $p68);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 1);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i70 == 1);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64(1);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p78, $mul.ref(0, 64)), $mul.ref($i76, 2)), $mul.ref(1, 1));
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p80, 24);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64(2);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p83, $mul.ref(0, 64)), $mul.ref($i81, 2)), $mul.ref(0, 1));
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p85, $sub.i8(0, 59));
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i21, 3);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i86 == 1);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64(2);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p94, $mul.ref(0, 64)), $mul.ref($i92, 2)), $mul.ref(1, 1));
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p96, 88);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64(3);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p99, $mul.ref(0, 64)), $mul.ref($i97, 2)), $mul.ref(0, 1));
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p101, $sub.i8(0, 58));
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i21, 3);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i102 == 1);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i108 := $sext.i32.i64(3);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p110, $mul.ref(0, 64)), $mul.ref($i108, 2)), $mul.ref(1, 1));
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p112, 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i113 := $sext.i32.i64(4);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p115, $mul.ref(0, 64)), $mul.ref($i113, 2)), $mul.ref(0, 1));
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p117, $sub.i8(0, 57));
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i21, 3);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i118 == 1);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i124 := $sext.i32.i64(4);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p126, $mul.ref(0, 64)), $mul.ref($i124, 2)), $mul.ref(1, 1));
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p128, $sub.i8(0, 96));
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i129 := $sext.i32.i64(5);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p131, $mul.ref(0, 64)), $mul.ref($i129, 2)), $mul.ref(0, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p133, $sub.i8(0, 56));
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i21, 3);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i134 == 1);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i140 := $sext.i32.i64(5);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p141);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p142, $mul.ref(0, 64)), $mul.ref($i140, 2)), $mul.ref(1, 1));
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p144, 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i145 := $sext.i32.i64(6);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p146);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p147, $mul.ref(0, 64)), $mul.ref($i145, 2)), $mul.ref(0, 1));
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p149, $sub.i8(0, 55));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i21, 3);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i150 == 1);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i156 := $sext.i32.i64(6);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p158, $mul.ref(0, 64)), $mul.ref($i156, 2)), $mul.ref(1, 1));
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p160, 64);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i161 := $sext.i32.i64(7);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p163, $mul.ref(0, 64)), $mul.ref($i161, 2)), $mul.ref(0, 1));
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p165, $sub.i8(0, 54));
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i166 := $add.i32(7, 1);
    call {:si_unique_call 689} {:cexpr "i"} boogie_si_record_i32($i166);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i170 := $load.i32($M.4, $p169);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i171 := $sdiv.i32($i170, 4);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i172 := $trunc.i32.i8($i171);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i173 := $sext.i32.i64(7);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p175 := $bitcast.ref.ref($p174);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 64)), $mul.ref($i173, 2)), $mul.ref(1, 1));
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p177, $i172);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i178 := $sext.i32.i64($i166);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $p180 := $bitcast.ref.ref($p179);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p180, $mul.ref(0, 64)), $mul.ref($i178, 2)), $mul.ref(0, 1));
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p182, $sub.i8(0, 53));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i183 := $add.i32($i166, 1);
    call {:si_unique_call 690} {:cexpr "i"} boogie_si_record_i32($i183);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.4, $p186);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i188 := $sdiv.i32($i187, 4);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i189 := $trunc.i32.i8($i188);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i190 := $sext.i32.i64($i166);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p192 := $bitcast.ref.ref($p191);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($add.ref($p192, $mul.ref(0, 64)), $mul.ref($i190, 2)), $mul.ref(1, 1));
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p194, $i189);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i195 := $sext.i32.i64($i183);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $p197 := $bitcast.ref.ref($p196);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p197, $mul.ref(0, 64)), $mul.ref($i195, 2)), $mul.ref(0, 1));
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p199, $sub.i8(0, 52));
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i21, 3);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i200 == 1);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i212 := $add.i32($i183, 1);
    call {:si_unique_call 692} {:cexpr "i"} boogie_si_record_i32($i212);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i213 := $sdiv.i32($i14, 4);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i214 := $sub.i32(88, $i213);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i215 := $sdiv.i32($i214, 2);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i216 := $trunc.i32.i8($i215);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i217 := $sext.i32.i64($i183);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p219 := $bitcast.ref.ref($p218);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p219, $mul.ref(0, 64)), $mul.ref($i217, 2)), $mul.ref(1, 1));
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p221, $i216);
    assume {:verifier.code 0} true;
    $i211 := $i212;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i222 := $sext.i32.i64($i211);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p224 := $bitcast.ref.ref($p223);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p224, $mul.ref(0, 64)), $mul.ref($i222, 2)), $mul.ref(0, 1));
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p226, $sub.i8(0, 51));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i21, 3);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i227} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i227 == 1);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i239 := $add.i32($i211, 1);
    call {:si_unique_call 694} {:cexpr "i"} boogie_si_record_i32($i239);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i240 := $sdiv.i32($i18, 4);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i241 := $sub.i32(72, $i240);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i242 := $sdiv.i32($i241, 2);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i243 := $trunc.i32.i8($i242);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i244 := $sext.i32.i64($i211);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p246 := $bitcast.ref.ref($p245);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($p246, $mul.ref(0, 64)), $mul.ref($i244, 2)), $mul.ref(1, 1));
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p248, $i243);
    assume {:verifier.code 0} true;
    $i238 := $i239;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i249 := $sext.i32.i64($i238);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p251 := $bitcast.ref.ref($p250);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($p251, $mul.ref(0, 64)), $mul.ref($i249, 2)), $mul.ref(0, 1));
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p253, $sub.i8(0, 50));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i254 := $add.i32($i238, 1);
    call {:si_unique_call 695} {:cexpr "i"} boogie_si_record_i32($i254);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i255 := $sext.i32.i64($i238);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p257 := $bitcast.ref.ref($p256);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($add.ref($p257, $mul.ref(0, 64)), $mul.ref($i255, 2)), $mul.ref(1, 1));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p259, 0);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i260 := $sext.i32.i64($i254);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p262 := $bitcast.ref.ref($p261);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($p262, $mul.ref(0, 64)), $mul.ref($i260, 2)), $mul.ref(0, 1));
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p264, $sub.i8(0, 49));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i265 := $add.i32($i254, 1);
    call {:si_unique_call 696} {:cexpr "i"} boogie_si_record_i32($i265);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i266 := $sext.i32.i64($i254);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p268 := $bitcast.ref.ref($p267);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($add.ref($p268, $mul.ref(0, 64)), $mul.ref($i266, 2)), $mul.ref(1, 1));
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p270, 0);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $i271 := $sext.i32.i64($i265);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $p273 := $bitcast.ref.ref($p272);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($add.ref($p273, $mul.ref(0, 64)), $mul.ref($i271, 2)), $mul.ref(0, 1));
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p275, $sub.i8(0, 48));
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i276 := $add.i32($i265, 1);
    call {:si_unique_call 697} {:cexpr "i"} boogie_si_record_i32($i276);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i277 := $sext.i32.i64($i265);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p279 := $bitcast.ref.ref($p278);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($add.ref($p279, $mul.ref(0, 64)), $mul.ref($i277, 2)), $mul.ref(1, 1));
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p281, 31);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i282 := $sext.i32.i64($i276);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p284 := $bitcast.ref.ref($p283);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($add.ref($p284, $mul.ref(0, 64)), $mul.ref($i282, 2)), $mul.ref(0, 1));
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p286, $sub.i8(0, 47));
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i287 := $add.i32($i276, 1);
    call {:si_unique_call 698} {:cexpr "i"} boogie_si_record_i32($i287);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i288 := $sext.i32.i64($i276);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p290 := $bitcast.ref.ref($p289);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($add.ref($p290, $mul.ref(0, 64)), $mul.ref($i288, 2)), $mul.ref(1, 1));
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p292, 31);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i293 := $sext.i32.i64($i287);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p295 := $bitcast.ref.ref($p294);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($p295, $mul.ref(0, 64)), $mul.ref($i293, 2)), $mul.ref(0, 1));
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p297, $sub.i8(0, 46));
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i298 := $add.i32($i287, 1);
    call {:si_unique_call 699} {:cexpr "i"} boogie_si_record_i32($i298);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i299 := $sext.i32.i64($i287);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $p301 := $bitcast.ref.ref($p300);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($add.ref($p301, $mul.ref(0, 64)), $mul.ref($i299, 2)), $mul.ref(1, 1));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p303, 0);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i304 := $sext.i32.i64($i298);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p306 := $bitcast.ref.ref($p305);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($add.ref($p306, $mul.ref(0, 64)), $mul.ref($i304, 2)), $mul.ref(0, 1));
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p308, $sub.i8(0, 45));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i309 := $add.i32($i298, 1);
    call {:si_unique_call 700} {:cexpr "i"} boogie_si_record_i32($i309);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i310 := $sext.i32.i64($i298);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p312 := $bitcast.ref.ref($p311);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($add.ref($p312, $mul.ref(0, 64)), $mul.ref($i310, 2)), $mul.ref(1, 1));
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p314, 0);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i315 := $sext.i32.i64($i309);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p317 := $bitcast.ref.ref($p316);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($add.ref($p317, $mul.ref(0, 64)), $mul.ref($i315, 2)), $mul.ref(0, 1));
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p319, $sub.i8(0, 44));
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i320 := $add.i32($i309, 1);
    call {:si_unique_call 701} {:cexpr "i"} boogie_si_record_i32($i320);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i321 := $sext.i32.i64($i309);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p323 := $bitcast.ref.ref($p322);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($add.ref($p323, $mul.ref(0, 64)), $mul.ref($i321, 2)), $mul.ref(1, 1));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p325, $sub.i8(0, 127));
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i326 := $sext.i32.i64($i320);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p328 := $bitcast.ref.ref($p327);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($add.ref($p328, $mul.ref(0, 64)), $mul.ref($i326, 2)), $mul.ref(0, 1));
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p330, $sub.i8(0, 43));
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i331 := $add.i32($i320, 1);
    call {:si_unique_call 702} {:cexpr "i"} boogie_si_record_i32($i331);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i332 := $sext.i32.i64($i320);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $p334 := $bitcast.ref.ref($p333);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($add.ref($p334, $mul.ref(0, 64)), $mul.ref($i332, 2)), $mul.ref(1, 1));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p336, $sub.i8(0, 127));
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i337 := $trunc.i32.i8($i331);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p338, $i337);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} vslice_dummy_var_395 := cpia2_send_command($p0, $p3);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i26 := $i331;
    goto $bb22;

  $bb53:
    assume $i227 == 1;
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i228 := $add.i32($i211, 1);
    call {:si_unique_call 693} {:cexpr "i"} boogie_si_record_i32($i228);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i229 := $sdiv.i32($i18, 4);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i230 := $sub.i32(36, $i229);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i231 := $sdiv.i32($i230, 2);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i232 := $trunc.i32.i8($i231);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i233 := $sext.i32.i64($i211);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p235 := $bitcast.ref.ref($p234);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p235, $mul.ref(0, 64)), $mul.ref($i233, 2)), $mul.ref(1, 1));
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p237, $i232);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i238 := $i228;
    goto $bb55;

  $bb50:
    assume $i200 == 1;
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i201 := $add.i32($i183, 1);
    call {:si_unique_call 691} {:cexpr "i"} boogie_si_record_i32($i201);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i202 := $sdiv.i32($i14, 4);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i203 := $sub.i32(44, $i202);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i204 := $sdiv.i32($i203, 2);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i205 := $trunc.i32.i8($i204);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i206 := $sext.i32.i64($i183);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p207);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p208, $mul.ref(0, 64)), $mul.ref($i206, 2)), $mul.ref(1, 1));
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p210, $i205);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i211 := $i201;
    goto $bb52;

  $bb47:
    assume $i150 == 1;
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i151 := $sext.i32.i64(6);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p152);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p153, $mul.ref(0, 64)), $mul.ref($i151, 2)), $mul.ref(1, 1));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p155, $sub.i8(0, 96));
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i134 == 1;
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i135 := $sext.i32.i64(5);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p136);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p137, $mul.ref(0, 64)), $mul.ref($i135, 2)), $mul.ref(1, 1));
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p139, 0);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i118 == 1;
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64(4);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p121, $mul.ref(0, 64)), $mul.ref($i119, 2)), $mul.ref(1, 1));
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p123, $sub.i8(0, 48));
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i102 == 1;
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64(3);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p105, $mul.ref(0, 64)), $mul.ref($i103, 2)), $mul.ref(1, 1));
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p107, 0);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume $i86 == 1;
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64(2);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p89, $mul.ref(0, 64)), $mul.ref($i87, 2)), $mul.ref(1, 1));
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p91, 44);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i70 == 1;
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64(1);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p73, $mul.ref(0, 64)), $mul.ref($i71, 2)), $mul.ref(1, 1));
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p75, 4);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb26:
    assume $i50 == 1;
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.4, $p53);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 1);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i55 == 1);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64(1);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 64)), $mul.ref($i61, 2)), $mul.ref(1, 1));
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p65, 10);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i55 == 1;
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64(1);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p58, $mul.ref(0, 64)), $mul.ref($i56, 2)), $mul.ref(1, 1));
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p60, 14);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb23:
    assume $i34 == 1;
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64(0);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 64)), $mul.ref($i35, 2)), $mul.ref(1, 1));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p39, 9);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb15:
    assume $i22 == 1;
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i23 := $sle.i32($i18, 240);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb17;

  $bb18:
    assume $i23 == 1;
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i24 := 2;
    goto $bb20;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i20 := $sle.i32($i18, 144);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb11;

  $bb12:
    assume $i20 == 1;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i21 := 3;
    goto $bb14;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i7 := 288;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i5 := 352;
    goto $bb3;
}



const config_sensor_500: ref;

axiom config_sensor_500 == $sub.ref(0, 287755);

procedure config_sensor_500($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.4, $CurrAddr;



implementation config_sensor_500($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i12: i1;
  var $i13: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i14: i32;
  var $i11: i32;
  var $i18: i1;
  var $p22: ref;
  var $i23: i32;
  var $p26: ref;
  var $i27: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $i42: i1;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i8;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $i63: i1;
  var $i64: i1;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $p74: ref;
  var $i75: i1;
  var $i76: i64;
  var $p77: ref;
  var $p78: ref;
  var $p80: ref;
  var $i81: i64;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i64;
  var $p88: ref;
  var $p89: ref;
  var $p91: ref;
  var $i92: i1;
  var $i93: i64;
  var $p94: ref;
  var $p95: ref;
  var $p97: ref;
  var $i98: i64;
  var $p99: ref;
  var $p100: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i64;
  var $p105: ref;
  var $p106: ref;
  var $p108: ref;
  var $i109: i1;
  var $i110: i32;
  var $i111: i64;
  var $p112: ref;
  var $p113: ref;
  var $p115: ref;
  var $i117: i32;
  var $i118: i64;
  var $p119: ref;
  var $p120: ref;
  var $p122: ref;
  var $i116: i32;
  var $i123: i64;
  var $p124: ref;
  var $p125: ref;
  var $p127: ref;
  var $i128: i1;
  var $i129: i32;
  var $i130: i64;
  var $p131: ref;
  var $p132: ref;
  var $p134: ref;
  var $i136: i1;
  var $i137: i32;
  var $i138: i64;
  var $p139: ref;
  var $p140: ref;
  var $p142: ref;
  var $i144: i32;
  var $i145: i64;
  var $p146: ref;
  var $p147: ref;
  var $p149: ref;
  var $i143: i32;
  var $i135: i32;
  var $i150: i64;
  var $p151: ref;
  var $p152: ref;
  var $p154: ref;
  var $i155: i1;
  var $i156: i32;
  var $i157: i64;
  var $p158: ref;
  var $p159: ref;
  var $p161: ref;
  var $i163: i32;
  var $i164: i64;
  var $p165: ref;
  var $p166: ref;
  var $p168: ref;
  var $i162: i32;
  var $i169: i64;
  var $p170: ref;
  var $p171: ref;
  var $p173: ref;
  var $i174: i1;
  var $i175: i32;
  var $i176: i64;
  var $p177: ref;
  var $p178: ref;
  var $p180: ref;
  var $i182: i1;
  var $i183: i32;
  var $i184: i64;
  var $p185: ref;
  var $p186: ref;
  var $p188: ref;
  var $i190: i32;
  var $i191: i64;
  var $p192: ref;
  var $p193: ref;
  var $p195: ref;
  var $i189: i32;
  var $i181: i32;
  var $i196: i64;
  var $p197: ref;
  var $p198: ref;
  var $p200: ref;
  var $i201: i1;
  var $i202: i32;
  var $i203: i64;
  var $p204: ref;
  var $p205: ref;
  var $p207: ref;
  var $i209: i32;
  var $i210: i32;
  var $i211: i8;
  var $i212: i64;
  var $p213: ref;
  var $p214: ref;
  var $p216: ref;
  var $i208: i32;
  var $i217: i64;
  var $p218: ref;
  var $p219: ref;
  var $p221: ref;
  var $i222: i1;
  var $i223: i32;
  var $i224: i64;
  var $p225: ref;
  var $p226: ref;
  var $p228: ref;
  var $i230: i32;
  var $i231: i32;
  var $i232: i8;
  var $i233: i64;
  var $p234: ref;
  var $p235: ref;
  var $p237: ref;
  var $i229: i32;
  var $i238: i64;
  var $p239: ref;
  var $p240: ref;
  var $p242: ref;
  var $i243: i1;
  var $i244: i32;
  var $i245: i32;
  var $i246: i32;
  var $i247: i32;
  var $i248: i8;
  var $i249: i64;
  var $p250: ref;
  var $p251: ref;
  var $p253: ref;
  var $i255: i1;
  var $i256: i32;
  var $i257: i32;
  var $i258: i32;
  var $i259: i32;
  var $i260: i8;
  var $i261: i64;
  var $p262: ref;
  var $p263: ref;
  var $p265: ref;
  var $i267: i1;
  var $i268: i32;
  var $i269: i32;
  var $i270: i32;
  var $i271: i32;
  var $i272: i8;
  var $i273: i64;
  var $p274: ref;
  var $p275: ref;
  var $p277: ref;
  var $i279: i32;
  var $i280: i32;
  var $i281: i32;
  var $i282: i32;
  var $i283: i8;
  var $i284: i64;
  var $p285: ref;
  var $p286: ref;
  var $p288: ref;
  var $i278: i32;
  var $i266: i32;
  var $i254: i32;
  var $i289: i64;
  var $p290: ref;
  var $p291: ref;
  var $p293: ref;
  var $i294: i1;
  var $i295: i32;
  var $i296: i32;
  var $i297: i32;
  var $i298: i32;
  var $i299: i8;
  var $i300: i64;
  var $p301: ref;
  var $p302: ref;
  var $p304: ref;
  var $i306: i1;
  var $i307: i32;
  var $i308: i32;
  var $i309: i32;
  var $i310: i32;
  var $i311: i8;
  var $i312: i64;
  var $p313: ref;
  var $p314: ref;
  var $p316: ref;
  var $i318: i1;
  var $i319: i32;
  var $i320: i32;
  var $i321: i32;
  var $i322: i32;
  var $i323: i8;
  var $i324: i64;
  var $p325: ref;
  var $p326: ref;
  var $p328: ref;
  var $i330: i32;
  var $i331: i32;
  var $i332: i32;
  var $i333: i32;
  var $i334: i8;
  var $i335: i64;
  var $p336: ref;
  var $p337: ref;
  var $p339: ref;
  var $i329: i32;
  var $i317: i32;
  var $i305: i32;
  var $i340: i64;
  var $p341: ref;
  var $p342: ref;
  var $p344: ref;
  var $i345: i1;
  var $i346: i1;
  var $i347: i32;
  var $i348: i64;
  var $p349: ref;
  var $p350: ref;
  var $p352: ref;
  var $i354: i32;
  var $i355: i64;
  var $p356: ref;
  var $p357: ref;
  var $p359: ref;
  var $i353: i32;
  var $i360: i64;
  var $p361: ref;
  var $p362: ref;
  var $p364: ref;
  var $i365: i1;
  var $i366: i1;
  var $i367: i32;
  var $i368: i64;
  var $p369: ref;
  var $p370: ref;
  var $p372: ref;
  var $i374: i32;
  var $i375: i64;
  var $p376: ref;
  var $p377: ref;
  var $p379: ref;
  var $i373: i32;
  var $i380: i64;
  var $p381: ref;
  var $p382: ref;
  var $p384: ref;
  var $i385: i1;
  var $i386: i1;
  var $i387: i32;
  var $i388: i64;
  var $p389: ref;
  var $p390: ref;
  var $p392: ref;
  var $i394: i32;
  var $i395: i64;
  var $p396: ref;
  var $p397: ref;
  var $p399: ref;
  var $i393: i32;
  var $i400: i64;
  var $p401: ref;
  var $p402: ref;
  var $p404: ref;
  var $i405: i1;
  var $i406: i1;
  var $i407: i32;
  var $i408: i64;
  var $p409: ref;
  var $p410: ref;
  var $p412: ref;
  var $i414: i32;
  var $i415: i64;
  var $p416: ref;
  var $p417: ref;
  var $p419: ref;
  var $i413: i32;
  var $i420: i64;
  var $p421: ref;
  var $p422: ref;
  var $p424: ref;
  var $i425: i32;
  var $i426: i64;
  var $p427: ref;
  var $p428: ref;
  var $p430: ref;
  var $i431: i64;
  var $p432: ref;
  var $p433: ref;
  var $p435: ref;
  var $i436: i32;
  var $i437: i64;
  var $p438: ref;
  var $p439: ref;
  var $p441: ref;
  var $i442: i64;
  var $p443: ref;
  var $p444: ref;
  var $p446: ref;
  var $i447: i1;
  var $i448: i1;
  var $i449: i32;
  var $i450: i64;
  var $p451: ref;
  var $p452: ref;
  var $p454: ref;
  var $i456: i32;
  var $i457: i64;
  var $p458: ref;
  var $p459: ref;
  var $p461: ref;
  var $i455: i32;
  var $i462: i64;
  var $p463: ref;
  var $p464: ref;
  var $p466: ref;
  var $i467: i1;
  var $i468: i1;
  var $i469: i32;
  var $i470: i64;
  var $p471: ref;
  var $p472: ref;
  var $p474: ref;
  var $i476: i32;
  var $i477: i64;
  var $p478: ref;
  var $p479: ref;
  var $p481: ref;
  var $i475: i32;
  var $i482: i8;
  var $p483: ref;
  var $i29: i32;
  var vslice_dummy_var_396: i32;
  var vslice_dummy_var_397: i32;
  var vslice_dummy_var_398: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $p3 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    call {:si_unique_call 705} {:cexpr "config_sensor_500:arg:req_width"} boogie_si_record_i32($i1);
    call {:si_unique_call 706} {:cexpr "config_sensor_500:arg:req_height"} boogie_si_record_i32($i2);
    call {:si_unique_call 707} {:cexpr "config_sensor_500:arg:width"} boogie_si_record_i32($i1);
    call {:si_unique_call 708} {:cexpr "config_sensor_500:arg:height"} boogie_si_record_i32($i2);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.4, $p6);
    call {:si_unique_call 709} {:cexpr "device"} boogie_si_record_i32($i7);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $i8 := cpia2_match_video_size($i1, $i2);
    call {:si_unique_call 711} {:cexpr "image_size"} boogie_si_record_i32($i8);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i1, 352);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i2, 288);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i1, 320);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i12 == 1);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i2, 240);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i1, 176);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i15 == 1);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i2, 144);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := 3;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i14 := $i17;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i11 := $i14;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i18 := $sge.i32($i8, 0);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i18 == 1);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} vslice_dummy_var_397 := printk.ref(.str.79);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb19:
    assume $i18 == 1;
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} vslice_dummy_var_396 := set_vw_size($p0, $i8);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.4, $p22);
    call {:si_unique_call 713} {:cexpr "width"} boogie_si_record_i32($i23);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.4, $p26);
    call {:si_unique_call 714} {:cexpr "height"} boogie_si_record_i32($i27);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p30, 5);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(6, 1));
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p31, 1);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64(0);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 64)), $mul.ref($i32, 2)), $mul.ref(0, 1));
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p36, $sub.i8(0, 61));
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64(0);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 64)), $mul.ref($i37, 2)), $mul.ref(1, 1));
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p41, 1);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i11, 3);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i57 := $add.i32(0, 1);
    call {:si_unique_call 716} {:cexpr "i"} boogie_si_record_i32($i57);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i57);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p60, $mul.ref(0, 64)), $mul.ref($i58, 2)), $mul.ref(0, 1));
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p62, $sub.i8(0, 60));
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i7, 1);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i63 == 1);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i11, 0);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i75 == 1);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i57);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p83, $mul.ref(0, 64)), $mul.ref($i81, 2)), $mul.ref(1, 1));
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p85, 18);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i57, 1);
    call {:si_unique_call 717} {:cexpr "i"} boogie_si_record_i32($i86);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i86);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p89, $mul.ref(0, 64)), $mul.ref($i87, 2)), $mul.ref(0, 1));
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p91, $sub.i8(0, 59));
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i11, 0);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i92 == 1);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64($i86);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p100, $mul.ref(0, 64)), $mul.ref($i98, 2)), $mul.ref(1, 1));
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p102, 80);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i103 := $add.i32($i86, 1);
    call {:si_unique_call 718} {:cexpr "i"} boogie_si_record_i32($i103);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i103);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p106, $mul.ref(0, 64)), $mul.ref($i104, 2)), $mul.ref(0, 1));
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p108, $sub.i8(0, 58));
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i11, 0);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i109 == 1);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i117 := $add.i32($i103, 1);
    call {:si_unique_call 720} {:cexpr "i"} boogie_si_record_i32($i117);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i118 := $sext.i32.i64($i103);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p119);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p120, $mul.ref(0, 64)), $mul.ref($i118, 2)), $mul.ref(1, 1));
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p122, 1);
    assume {:verifier.code 0} true;
    $i116 := $i117;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i123 := $sext.i32.i64($i116);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p125, $mul.ref(0, 64)), $mul.ref($i123, 2)), $mul.ref(0, 1));
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p127, $sub.i8(0, 57));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i11, 0);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i128 == 1);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i11, 2);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i136 == 1);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i144 := $add.i32($i116, 1);
    call {:si_unique_call 723} {:cexpr "i"} boogie_si_record_i32($i144);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i145 := $sext.i32.i64($i116);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p146);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p147, $mul.ref(0, 64)), $mul.ref($i145, 2)), $mul.ref(1, 1));
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p149, $sub.i8(0, 96));
    assume {:verifier.code 0} true;
    $i143 := $i144;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i135 := $i143;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i150 := $sext.i32.i64($i135);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p151);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p152, $mul.ref(0, 64)), $mul.ref($i150, 2)), $mul.ref(0, 1));
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p154, $sub.i8(0, 56));
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i11, 0);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i155 == 1);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i163 := $add.i32($i135, 1);
    call {:si_unique_call 725} {:cexpr "i"} boogie_si_record_i32($i163);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i164 := $sext.i32.i64($i135);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $p166 := $bitcast.ref.ref($p165);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($p166, $mul.ref(0, 64)), $mul.ref($i164, 2)), $mul.ref(1, 1));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p168, 1);
    assume {:verifier.code 0} true;
    $i162 := $i163;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i169 := $sext.i32.i64($i162);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $p171 := $bitcast.ref.ref($p170);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p171, $mul.ref(0, 64)), $mul.ref($i169, 2)), $mul.ref(0, 1));
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p173, $sub.i8(0, 55));
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i11, 0);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i174} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i174 == 1);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i11, 2);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i182 == 1);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i190 := $add.i32($i162, 1);
    call {:si_unique_call 728} {:cexpr "i"} boogie_si_record_i32($i190);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i191 := $sext.i32.i64($i162);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p192);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p193, $mul.ref(0, 64)), $mul.ref($i191, 2)), $mul.ref(1, 1));
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p195, 6);
    assume {:verifier.code 0} true;
    $i189 := $i190;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i181 := $i189;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i196 := $sext.i32.i64($i181);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p198, $mul.ref(0, 64)), $mul.ref($i196, 2)), $mul.ref(0, 1));
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p200, $sub.i8(0, 54));
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i11, 3);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i201 == 1);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i209 := $add.i32($i181, 1);
    call {:si_unique_call 730} {:cexpr "i"} boogie_si_record_i32($i209);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i210 := $sdiv.i32($i23, 4);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i32.i8($i210);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i212 := $sext.i32.i64($i181);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $p214 := $bitcast.ref.ref($p213);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p214, $mul.ref(0, 64)), $mul.ref($i212, 2)), $mul.ref(1, 1));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p216, $i211);
    assume {:verifier.code 0} true;
    $i208 := $i209;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i217 := $sext.i32.i64($i208);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p219 := $bitcast.ref.ref($p218);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p219, $mul.ref(0, 64)), $mul.ref($i217, 2)), $mul.ref(0, 1));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p221, $sub.i8(0, 53));
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i11, 3);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i222} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i222 == 1);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i230 := $add.i32($i208, 1);
    call {:si_unique_call 732} {:cexpr "i"} boogie_si_record_i32($i230);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i231 := $sdiv.i32($i27, 4);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i232 := $trunc.i32.i8($i231);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i233 := $sext.i32.i64($i208);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p235 := $bitcast.ref.ref($p234);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p235, $mul.ref(0, 64)), $mul.ref($i233, 2)), $mul.ref(1, 1));
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p237, $i232);
    assume {:verifier.code 0} true;
    $i229 := $i230;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i238 := $sext.i32.i64($i229);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p240 := $bitcast.ref.ref($p239);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($p240, $mul.ref(0, 64)), $mul.ref($i238, 2)), $mul.ref(0, 1));
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p242, $sub.i8(0, 52));
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i11, 0);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i243 == 1);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i11, 2);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i255 == 1);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i11, 1);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i267} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i267 == 1);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i279 := $add.i32($i229, 1);
    call {:si_unique_call 736} {:cexpr "i"} boogie_si_record_i32($i279);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i280 := $sdiv.i32($i23, 4);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i281 := $sub.i32(44, $i280);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i282 := $sdiv.i32($i281, 2);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i283 := $trunc.i32.i8($i282);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i284 := $sext.i32.i64($i229);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p286 := $bitcast.ref.ref($p285);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($add.ref($p286, $mul.ref(0, 64)), $mul.ref($i284, 2)), $mul.ref(1, 1));
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p288, $i283);
    assume {:verifier.code 0} true;
    $i278 := $i279;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i266 := $i278;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i254 := $i266;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i289 := $sext.i32.i64($i254);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p291 := $bitcast.ref.ref($p290);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($add.ref($p291, $mul.ref(0, 64)), $mul.ref($i289, 2)), $mul.ref(0, 1));
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p293, $sub.i8(0, 51));
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i11, 0);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i294 == 1);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i11, 2);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i306} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i306 == 1);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i318 := $eq.i32($i11, 1);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i318} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i318 == 1);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i330 := $add.i32($i254, 1);
    call {:si_unique_call 740} {:cexpr "i"} boogie_si_record_i32($i330);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i331 := $sdiv.i32($i27, 4);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i332 := $sub.i32(36, $i331);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i333 := $sdiv.i32($i332, 2);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i334 := $trunc.i32.i8($i333);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i335 := $sext.i32.i64($i254);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $p337 := $bitcast.ref.ref($p336);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($add.ref($p337, $mul.ref(0, 64)), $mul.ref($i335, 2)), $mul.ref(1, 1));
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p339, $i334);
    assume {:verifier.code 0} true;
    $i329 := $i330;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i317 := $i329;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i305 := $i317;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i340 := $sext.i32.i64($i305);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p342 := $bitcast.ref.ref($p341);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($add.ref($p342, $mul.ref(0, 64)), $mul.ref($i340, 2)), $mul.ref(0, 1));
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p344, $sub.i8(0, 50));
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i345 := $eq.i32($i11, 1);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i345} true;
    goto $bb80, $bb82;

  $bb82:
    assume !($i345 == 1);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i346 := $eq.i32($i11, 3);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i346} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i346 == 1);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i354 := $add.i32($i305, 1);
    call {:si_unique_call 742} {:cexpr "i"} boogie_si_record_i32($i354);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i355 := $sext.i32.i64($i305);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p357 := $bitcast.ref.ref($p356);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($add.ref($p357, $mul.ref(0, 64)), $mul.ref($i355, 2)), $mul.ref(1, 1));
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p359, 0);
    assume {:verifier.code 0} true;
    $i353 := $i354;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i360 := $sext.i32.i64($i353);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p362 := $bitcast.ref.ref($p361);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($add.ref($p362, $mul.ref(0, 64)), $mul.ref($i360, 2)), $mul.ref(0, 1));
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p364, $sub.i8(0, 49));
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i365 := $eq.i32($i11, 1);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i365} true;
    goto $bb86, $bb88;

  $bb88:
    assume !($i365 == 1);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i366 := $eq.i32($i11, 3);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i366} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i366 == 1);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i374 := $add.i32($i353, 1);
    call {:si_unique_call 744} {:cexpr "i"} boogie_si_record_i32($i374);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i375 := $sext.i32.i64($i353);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $p377 := $bitcast.ref.ref($p376);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($add.ref($p377, $mul.ref(0, 64)), $mul.ref($i375, 2)), $mul.ref(1, 1));
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p379, 0);
    assume {:verifier.code 0} true;
    $i373 := $i374;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $i380 := $sext.i32.i64($i373);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p382 := $bitcast.ref.ref($p381);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($add.ref($p382, $mul.ref(0, 64)), $mul.ref($i380, 2)), $mul.ref(0, 1));
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p384, $sub.i8(0, 48));
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i385 := $eq.i32($i11, 1);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i385} true;
    goto $bb92, $bb94;

  $bb94:
    assume !($i385 == 1);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i386 := $eq.i32($i11, 3);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i386} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i386 == 1);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i394 := $add.i32($i373, 1);
    call {:si_unique_call 746} {:cexpr "i"} boogie_si_record_i32($i394);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i395 := $sext.i32.i64($i373);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p397 := $bitcast.ref.ref($p396);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($add.ref($p397, $mul.ref(0, 64)), $mul.ref($i395, 2)), $mul.ref(1, 1));
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p399, 31);
    assume {:verifier.code 0} true;
    $i393 := $i394;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i400 := $sext.i32.i64($i393);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p402 := $bitcast.ref.ref($p401);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($add.ref($p402, $mul.ref(0, 64)), $mul.ref($i400, 2)), $mul.ref(0, 1));
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p404, $sub.i8(0, 47));
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i405 := $eq.i32($i11, 1);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    assume {:branchcond $i405} true;
    goto $bb98, $bb100;

  $bb100:
    assume !($i405 == 1);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i406 := $eq.i32($i11, 3);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i406} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i406 == 1);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i414 := $add.i32($i393, 1);
    call {:si_unique_call 748} {:cexpr "i"} boogie_si_record_i32($i414);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i415 := $sext.i32.i64($i393);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $p417 := $bitcast.ref.ref($p416);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($add.ref($p417, $mul.ref(0, 64)), $mul.ref($i415, 2)), $mul.ref(1, 1));
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p419, 31);
    assume {:verifier.code 0} true;
    $i413 := $i414;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i420 := $sext.i32.i64($i413);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p422 := $bitcast.ref.ref($p421);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($add.ref($p422, $mul.ref(0, 64)), $mul.ref($i420, 2)), $mul.ref(0, 1));
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p424, $sub.i8(0, 46));
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i425 := $add.i32($i413, 1);
    call {:si_unique_call 749} {:cexpr "i"} boogie_si_record_i32($i425);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i426 := $sext.i32.i64($i413);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p428 := $bitcast.ref.ref($p427);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($add.ref($p428, $mul.ref(0, 64)), $mul.ref($i426, 2)), $mul.ref(1, 1));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p430, 0);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i431 := $sext.i32.i64($i425);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $p433 := $bitcast.ref.ref($p432);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($add.ref($p433, $mul.ref(0, 64)), $mul.ref($i431, 2)), $mul.ref(0, 1));
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p435, $sub.i8(0, 45));
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i436 := $add.i32($i425, 1);
    call {:si_unique_call 750} {:cexpr "i"} boogie_si_record_i32($i436);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i437 := $sext.i32.i64($i425);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p439 := $bitcast.ref.ref($p438);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($add.ref($p439, $mul.ref(0, 64)), $mul.ref($i437, 2)), $mul.ref(1, 1));
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p441, 0);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i442 := $sext.i32.i64($i436);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p444 := $bitcast.ref.ref($p443);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($add.ref($p444, $mul.ref(0, 64)), $mul.ref($i442, 2)), $mul.ref(0, 1));
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p446, $sub.i8(0, 44));
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i447 := $eq.i32($i11, 1);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i447} true;
    goto $bb104, $bb106;

  $bb106:
    assume !($i447 == 1);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i448 := $eq.i32($i11, 3);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i448} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i448 == 1);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i456 := $add.i32($i436, 1);
    call {:si_unique_call 752} {:cexpr "i"} boogie_si_record_i32($i456);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i457 := $sext.i32.i64($i436);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $p459 := $bitcast.ref.ref($p458);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($add.ref($p459, $mul.ref(0, 64)), $mul.ref($i457, 2)), $mul.ref(1, 1));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p461, $sub.i8(0, 127));
    assume {:verifier.code 0} true;
    $i455 := $i456;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i462 := $sext.i32.i64($i455);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $p464 := $bitcast.ref.ref($p463);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($add.ref($p464, $mul.ref(0, 64)), $mul.ref($i462, 2)), $mul.ref(0, 1));
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p466, $sub.i8(0, 43));
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i467 := $eq.i32($i11, 1);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i467} true;
    goto $bb110, $bb112;

  $bb112:
    assume !($i467 == 1);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i468 := $eq.i32($i11, 3);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i468} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i468 == 1);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i476 := $add.i32($i455, 1);
    call {:si_unique_call 754} {:cexpr "i"} boogie_si_record_i32($i476);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i477 := $sext.i32.i64($i455);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p479 := $bitcast.ref.ref($p478);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($add.ref($p479, $mul.ref(0, 64)), $mul.ref($i477, 2)), $mul.ref(1, 1));
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p481, $sub.i8(0, 127));
    assume {:verifier.code 0} true;
    $i475 := $i476;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i482 := $trunc.i32.i8($i475);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p483, $i482);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} vslice_dummy_var_398 := cpia2_send_command($p0, $p3);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i29 := $i475;
    goto $bb22;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i468 == 1;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i469 := $add.i32($i455, 1);
    call {:si_unique_call 753} {:cexpr "i"} boogie_si_record_i32($i469);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i470 := $sext.i32.i64($i455);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $p472 := $bitcast.ref.ref($p471);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($add.ref($p472, $mul.ref(0, 64)), $mul.ref($i470, 2)), $mul.ref(1, 1));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p474, 19);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i475 := $i469;
    goto $bb115;

  $bb110:
    assume {:verifier.code 0} true;
    assume $i467 == 1;
    goto $bb111;

  $bb107:
    assume {:verifier.code 0} true;
    assume $i448 == 1;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $i449 := $add.i32($i436, 1);
    call {:si_unique_call 751} {:cexpr "i"} boogie_si_record_i32($i449);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i450 := $sext.i32.i64($i436);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p452 := $bitcast.ref.ref($p451);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($add.ref($p452, $mul.ref(0, 64)), $mul.ref($i450, 2)), $mul.ref(1, 1));
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p454, 43);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i455 := $i449;
    goto $bb109;

  $bb104:
    assume {:verifier.code 0} true;
    assume $i447 == 1;
    goto $bb105;

  $bb101:
    assume {:verifier.code 0} true;
    assume $i406 == 1;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i407 := $add.i32($i393, 1);
    call {:si_unique_call 747} {:cexpr "i"} boogie_si_record_i32($i407);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i408 := $sext.i32.i64($i393);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $p410 := $bitcast.ref.ref($p409);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($add.ref($p410, $mul.ref(0, 64)), $mul.ref($i408, 2)), $mul.ref(1, 1));
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p412, 21);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i413 := $i407;
    goto $bb103;

  $bb98:
    assume {:verifier.code 0} true;
    assume $i405 == 1;
    goto $bb99;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i386 == 1;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i387 := $add.i32($i373, 1);
    call {:si_unique_call 745} {:cexpr "i"} boogie_si_record_i32($i387);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i388 := $sext.i32.i64($i373);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p390 := $bitcast.ref.ref($p389);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($add.ref($p390, $mul.ref(0, 64)), $mul.ref($i388, 2)), $mul.ref(1, 1));
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p392, 26);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i393 := $i387;
    goto $bb97;

  $bb92:
    assume {:verifier.code 0} true;
    assume $i385 == 1;
    goto $bb93;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i366 == 1;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i367 := $add.i32($i353, 1);
    call {:si_unique_call 743} {:cexpr "i"} boogie_si_record_i32($i367);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i368 := $sext.i32.i64($i353);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $p370 := $bitcast.ref.ref($p369);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($add.ref($p370, $mul.ref(0, 64)), $mul.ref($i368, 2)), $mul.ref(1, 1));
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p372, 32);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i373 := $i367;
    goto $bb91;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i365 == 1;
    goto $bb87;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i346 == 1;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i347 := $add.i32($i305, 1);
    call {:si_unique_call 741} {:cexpr "i"} boogie_si_record_i32($i347);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i348 := $sext.i32.i64($i305);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $p350 := $bitcast.ref.ref($p349);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($add.ref($p350, $mul.ref(0, 64)), $mul.ref($i348, 2)), $mul.ref(1, 1));
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p352, 36);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i353 := $i347;
    goto $bb85;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i345 == 1;
    goto $bb81;

  $bb77:
    assume $i318 == 1;
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i319 := $add.i32($i254, 1);
    call {:si_unique_call 739} {:cexpr "i"} boogie_si_record_i32($i319);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i320 := $sdiv.i32($i27, 4);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i321 := $sub.i32(72, $i320);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i322 := $sdiv.i32($i321, 2);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i323 := $trunc.i32.i8($i322);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i324 := $sext.i32.i64($i254);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $p326 := $bitcast.ref.ref($p325);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($add.ref($p326, $mul.ref(0, 64)), $mul.ref($i324, 2)), $mul.ref(1, 1));
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p328, $i323);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i329 := $i319;
    goto $bb79;

  $bb74:
    assume $i306 == 1;
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i307 := $add.i32($i254, 1);
    call {:si_unique_call 738} {:cexpr "i"} boogie_si_record_i32($i307);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i308 := $sdiv.i32($i27, 4);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i309 := $sub.i32(60, $i308);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i310 := $sdiv.i32($i309, 2);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i311 := $trunc.i32.i8($i310);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i312 := $sext.i32.i64($i254);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $p314 := $bitcast.ref.ref($p313);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($add.ref($p314, $mul.ref(0, 64)), $mul.ref($i312, 2)), $mul.ref(1, 1));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p316, $i311);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i317 := $i307;
    goto $bb76;

  $bb71:
    assume $i294 == 1;
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i295 := $add.i32($i254, 1);
    call {:si_unique_call 737} {:cexpr "i"} boogie_si_record_i32($i295);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i296 := $sdiv.i32($i27, 4);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i297 := $sub.i32(120, $i296);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i298 := $sdiv.i32($i297, 2);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i299 := $trunc.i32.i8($i298);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i300 := $sext.i32.i64($i254);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p302 := $bitcast.ref.ref($p301);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($add.ref($p302, $mul.ref(0, 64)), $mul.ref($i300, 2)), $mul.ref(1, 1));
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p304, $i299);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i305 := $i295;
    goto $bb73;

  $bb68:
    assume $i267 == 1;
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i268 := $add.i32($i229, 1);
    call {:si_unique_call 735} {:cexpr "i"} boogie_si_record_i32($i268);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i269 := $sdiv.i32($i23, 4);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i270 := $sub.i32(88, $i269);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i271 := $sdiv.i32($i270, 2);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i272 := $trunc.i32.i8($i271);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i273 := $sext.i32.i64($i229);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p275 := $bitcast.ref.ref($p274);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($add.ref($p275, $mul.ref(0, 64)), $mul.ref($i273, 2)), $mul.ref(1, 1));
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p277, $i272);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i278 := $i268;
    goto $bb70;

  $bb65:
    assume $i255 == 1;
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i256 := $add.i32($i229, 1);
    call {:si_unique_call 734} {:cexpr "i"} boogie_si_record_i32($i256);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i257 := $sdiv.i32($i23, 4);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i258 := $sub.i32(80, $i257);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i259 := $sdiv.i32($i258, 2);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i260 := $trunc.i32.i8($i259);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i261 := $sext.i32.i64($i229);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p263 := $bitcast.ref.ref($p262);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($add.ref($p263, $mul.ref(0, 64)), $mul.ref($i261, 2)), $mul.ref(1, 1));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p265, $i260);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i266 := $i256;
    goto $bb67;

  $bb62:
    assume $i243 == 1;
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i244 := $add.i32($i229, 1);
    call {:si_unique_call 733} {:cexpr "i"} boogie_si_record_i32($i244);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i245 := $sdiv.i32($i23, 4);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i246 := $sub.i32(160, $i245);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i247 := $sdiv.i32($i246, 2);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i248 := $trunc.i32.i8($i247);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i249 := $sext.i32.i64($i229);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $p251 := $bitcast.ref.ref($p250);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($p251, $mul.ref(0, 64)), $mul.ref($i249, 2)), $mul.ref(1, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p253, $i248);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i254 := $i244;
    goto $bb64;

  $bb59:
    assume $i222 == 1;
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i223 := $add.i32($i208, 1);
    call {:si_unique_call 731} {:cexpr "i"} boogie_si_record_i32($i223);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i224 := $sext.i32.i64($i208);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p226 := $bitcast.ref.ref($p225);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($p226, $mul.ref(0, 64)), $mul.ref($i224, 2)), $mul.ref(1, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p228, 72);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i229 := $i223;
    goto $bb61;

  $bb56:
    assume $i201 == 1;
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i202 := $add.i32($i181, 1);
    call {:si_unique_call 729} {:cexpr "i"} boogie_si_record_i32($i202);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i203 := $sext.i32.i64($i181);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p205 := $bitcast.ref.ref($p204);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p205, $mul.ref(0, 64)), $mul.ref($i203, 2)), $mul.ref(1, 1));
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p207, 88);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i208 := $i202;
    goto $bb58;

  $bb53:
    assume $i182 == 1;
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i183 := $add.i32($i162, 1);
    call {:si_unique_call 727} {:cexpr "i"} boogie_si_record_i32($i183);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i184 := $sext.i32.i64($i162);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p185);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($p186, $mul.ref(0, 64)), $mul.ref($i184, 2)), $mul.ref(1, 1));
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p188, 64);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i189 := $i183;
    goto $bb55;

  $bb50:
    assume $i174 == 1;
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i175 := $add.i32($i162, 1);
    call {:si_unique_call 726} {:cexpr "i"} boogie_si_record_i32($i175);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i176 := $sext.i32.i64($i162);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p177);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p178, $mul.ref(0, 64)), $mul.ref($i176, 2)), $mul.ref(1, 1));
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p180, 12);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i181 := $i175;
    goto $bb52;

  $bb47:
    assume $i155 == 1;
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i156 := $add.i32($i135, 1);
    call {:si_unique_call 724} {:cexpr "i"} boogie_si_record_i32($i156);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i157 := $sext.i32.i64($i135);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p158);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p159, $mul.ref(0, 64)), $mul.ref($i157, 2)), $mul.ref(1, 1));
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p161, 2);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i162 := $i156;
    goto $bb49;

  $bb44:
    assume $i136 == 1;
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i137 := $add.i32($i116, 1);
    call {:si_unique_call 722} {:cexpr "i"} boogie_si_record_i32($i137);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i138 := $sext.i32.i64($i116);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p140, $mul.ref(0, 64)), $mul.ref($i138, 2)), $mul.ref(1, 1));
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p142, 125);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i143 := $i137;
    goto $bb46;

  $bb41:
    assume $i128 == 1;
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i129 := $add.i32($i116, 1);
    call {:si_unique_call 721} {:cexpr "i"} boogie_si_record_i32($i129);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i130 := $sext.i32.i64($i116);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p131);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p132, $mul.ref(0, 64)), $mul.ref($i130, 2)), $mul.ref(1, 1));
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p134, $sub.i8(0, 6));
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i135 := $i129;
    goto $bb43;

  $bb38:
    assume $i109 == 1;
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i103, 1);
    call {:si_unique_call 719} {:cexpr "i"} boogie_si_record_i32($i110);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i111 := $sext.i32.i64($i103);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p113, $mul.ref(0, 64)), $mul.ref($i111, 2)), $mul.ref(1, 1));
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p115, 2);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i116 := $i110;
    goto $bb40;

  $bb35:
    assume $i92 == 1;
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i86);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p95, $mul.ref(0, 64)), $mul.ref($i93, 2)), $mul.ref(1, 1));
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p97, $sub.i8(0, 96));
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i75 == 1;
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i57);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p78, $mul.ref(0, 64)), $mul.ref($i76, 2)), $mul.ref(1, 1));
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p80, 0);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb26:
    assume $i63 == 1;
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i11, 0);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i64 == 1);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i57);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p72, $mul.ref(0, 64)), $mul.ref($i70, 2)), $mul.ref(1, 1));
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p74, 11);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i64 == 1;
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i57);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p67, $mul.ref(0, 64)), $mul.ref($i65, 2)), $mul.ref(1, 1));
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p69, 1);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb23:
    assume $i42 == 1;
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64(0);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p45, $mul.ref(0, 64)), $mul.ref($i43, 2)), $mul.ref(1, 1));
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.7, $p47);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i49, 4);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64(0);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p54, $mul.ref(0, 64)), $mul.ref($i52, 2)), $mul.ref(1, 1));
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p56, $i51);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i17 := 2;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb14;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;
}



const cpia2_match_video_size: ref;

axiom cpia2_match_video_size == $sub.ref(0, 288787);

procedure cpia2_match_video_size($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cpia2_match_video_size($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} {:cexpr "cpia2_match_video_size:arg:width"} boogie_si_record_i32($i0);
    call {:si_unique_call 757} {:cexpr "cpia2_match_video_size:arg:height"} boogie_si_record_i32($i1);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i0, 639);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i0, 351);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i0, 319);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i0, 287);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i0, 255);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i0, 223);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i0, 191);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i0, 175);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb44:
    assume $i17 == 1;
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i1, 143);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb46;

  $bb47:
    assume $i18 == 1;
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i4 := 3;
    goto $bb6;

  $bb38:
    assume $i15 == 1;
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i1, 143);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb40;

  $bb41:
    assume $i16 == 1;
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i4 := 7;
    goto $bb6;

  $bb32:
    assume $i13 == 1;
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32($i1, 167);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb34;

  $bb35:
    assume $i14 == 1;
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i4 := 6;
    goto $bb6;

  $bb26:
    assume $i11 == 1;
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i1, 191);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb28;

  $bb29:
    assume $i12 == 1;
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i4 := 5;
    goto $bb6;

  $bb20:
    assume $i9 == 1;
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i1, 215);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb22;

  $bb23:
    assume $i10 == 1;
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i4 := 4;
    goto $bb6;

  $bb14:
    assume $i7 == 1;
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i1, 239);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb16;

  $bb17:
    assume $i8 == 1;
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $i4 := 2;
    goto $bb6;

  $bb8:
    assume $i5 == 1;
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i1, 287);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb11:
    assume $i6 == 1;
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i1, 479);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb6;
}



const set_vw_size: ref;

axiom set_vw_size == $sub.ref(0, 289819);

procedure set_vw_size($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4;



implementation set_vw_size($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i8;
  var $p5: ref;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $p17: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p26: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p34: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p42: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p52: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p60: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p68: ref;
  var $p71: ref;
  var $p74: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} {:cexpr "set_vw_size:arg:size"} boogie_si_record_i32($i1);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i8($i1);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(2, 1));
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p5, $i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i1, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i1, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 22);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2480, 1));
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p64, 192);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2484, 1));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p65, 144);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p68, 192);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p71, 144);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb21;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2480, 1));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p56, 224);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2484, 1));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p57, 168);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p60, 224);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p63, 168);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb21;

  $bb4:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2480, 1));
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p48, 256);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2484, 1));
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p49, 192);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p52, 256);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p55, 192);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb21;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p42, 288);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p45, 216);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2480, 1));
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p46, 288);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2484, 1));
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p47, 216);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb21;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i12 == 1);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p74, 176);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p77, 144);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2480, 1));
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p78, 176);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2484, 1));
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p79, 144);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb21;

  $bb15:
    assume $i12 == 1;
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p34, 320);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p37, 240);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2480, 1));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p38, 320);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2484, 1));
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p39, 240);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb21;

  $bb13:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i13 == 1);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p26, 352);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p29, 288);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2480, 1));
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p30, 352);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2484, 1));
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p31, 288);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb21;

  $bb17:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb19:
    assume $i14 == 1;
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p17, 640);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p20, 480);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2480, 1));
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p21, 640);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2484, 1));
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p22, 480);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb21;
}



const rvmalloc: ref;

axiom rvmalloc == $sub.ref(0, 290851);

procedure rvmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.4;



implementation rvmalloc($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i9: i64;
  var $i10: i64;
  var $p6: ref;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} {:cexpr "rvmalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i1 := $add.i64($i0, 4095);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i2 := $and.i64($i1, $sub.i64(0, 4096));
    call {:si_unique_call 760} {:cexpr "size"} boogie_si_record_i64($i2);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $p3 := vmalloc_32($i2);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.4;
    call {:si_unique_call 762} cmdloc_dummy_var_4 := $memset.i8(cmdloc_dummy_var_3, $p3, 0, $i2, $zext.i32.i64(1), 0 == 1);
    $M.4 := cmdloc_dummy_var_4;
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p3);
    call {:si_unique_call 763} {:cexpr "adr"} boogie_si_record_i64($i7);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i64($i2, 0);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p6 := $p3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i9, $i10 := $i2, $i7;
    goto $bb8;

  $bb8:
    call $p11, $p12, $i13, $i14, $i15, $i9, $i10 := rvmalloc_loop_$bb8($p11, $p12, $i13, $i14, $i15, $i9, $i10);
    goto $bb8_last;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $p12 := vmalloc_to_page($p11);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} SetPageReserved($p12);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i10, 4096);
    call {:si_unique_call 766} {:cexpr "adr"} boogie_si_record_i64($i13);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64($i9, 4096);
    call {:si_unique_call 767} {:cexpr "size"} boogie_si_record_i64($i14);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i64($i14, 0);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i9, $i10 := $i14, $i13;
    goto $bb10_dummy;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5378;
}



const vmalloc_32: ref;

axiom vmalloc_32 == $sub.ref(0, 291883);

procedure vmalloc_32($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation vmalloc_32($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} {:cexpr "vmalloc_32:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $p1 := external_alloc();
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const SetPageReserved: ref;

axiom SetPageReserved == $sub.ref(0, 292915);

procedure SetPageReserved($p0: ref);
  free requires assertsPassed;



implementation SetPageReserved($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} set_bit(10, $p1);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 293947);

procedure set_bit($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} {:cexpr "set_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 772} devirtbounce(0, $p1, $i0, $p1);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    return;
}



const mutex_lock_interruptible: ref;

axiom mutex_lock_interruptible == $sub.ref(0, 294979);

procedure mutex_lock_interruptible($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_lock_interruptible($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 1} true;
    call {:si_unique_call 773} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 774} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_interruptible_v4l2_lock_of_camera_data: ref;

axiom ldv_mutex_lock_interruptible_v4l2_lock_of_camera_data == $sub.ref(0, 296011);

procedure ldv_mutex_lock_interruptible_v4l2_lock_of_camera_data($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_interruptible_v4l2_lock_of_camera_data($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i1 := $M.8;
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} ldv_error();
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    call {:si_unique_call 776} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 777} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 778} {:cexpr "nondetermined"} boogie_si_record_i32($i3);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 4);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 779} {:cexpr "ldv_mutex_v4l2_lock_of_camera_data"} boogie_si_record_i32(2);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_interruptible_22: ref;

axiom ldv_mutex_lock_interruptible_22 == $sub.ref(0, 297043);

procedure ldv_mutex_lock_interruptible_22($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_interruptible_22($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 781} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $i2 := ldv_mutex_lock_interruptible_v4l2_lock_of_camera_data($p0);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    call {:si_unique_call 783} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const cpia2_remap_buffer: ref;

axiom cpia2_remap_buffer == $sub.ref(0, 298075);

procedure cpia2_remap_buffer($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.4, $M.16, $CurrAddr;



implementation cpia2_remap_buffer($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i32;
  var $i53: i1;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $p60: ref;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.4, $p3);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.4, $p6);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.4, $p8);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64($i7, $i9);
    call {:si_unique_call 785} {:cexpr "size"} boogie_si_record_i64($i10);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.4, $p11);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i13 := $shl.i64($i12, 12);
    call {:si_unique_call 786} {:cexpr "start_offset"} boogie_si_record_i64($i13);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p5);
    call {:si_unique_call 787} {:cexpr "start"} boogie_si_record_i64($i14);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(904, 1));
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $i16 := video_is_registered($p15);
    call {:si_unique_call 789} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2640, 1));
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.4, $p19);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2644, 1));
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.4, $p21);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i23 := $mul.i32($i20, $i22);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i25 := $ult.i64($i24, $i10);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i25 == 1);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2640, 1));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.4, $p26);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i29 := $urem.i64($i13, $i28);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i13, $i10);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2640, 1));
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.4, $p32);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2644, 1));
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.4, $p34);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i36 := $mul.i32($i33, $i35);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i36);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i38 := $ugt.i64($i31, $i37);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2656, 1));
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.4, $p39);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, $i13);
    call {:si_unique_call 790} {:cexpr "pos"} boogie_si_record_i64($i42);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i10, 0);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(808, 1));
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p60, 1);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb13:
    assume $i43 == 1;
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i44, $i45, $i46 := $i42, $i14, $i10;
    goto $bb16;

  $bb16:
    call $i47, $p48, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i44, $i45, $i46 := cpia2_remap_buffer_loop_$bb16($p1, $p2, $i47, $p48, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i44, $i45, $i46);
    goto $bb16_last;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $i47 := kvirt_to_pa($i44);
    call {:si_unique_call 792} {:cexpr "page"} boogie_si_record_i64($i47);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p48, $sub.i64(0, 9223372036854775769));
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i49 := $lshr.i64($i47, 12);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.15, $p50);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i52 := remap_pfn_range($p1, $i45, $i49, 4096, $i51);
    call {:si_unique_call 794} {:cexpr "tmp___0"} boogie_si_record_i32($i52);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i45, 4096);
    call {:si_unique_call 795} {:cexpr "start"} boogie_si_record_i64($i54);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i44, 4096);
    call {:si_unique_call 796} {:cexpr "pos"} boogie_si_record_i64($i55);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i56 := $ugt.i64($i46, 4096);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i59 == 1);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb24:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i44, $i45, $i46 := $i55, $i54, $i58;
    goto $bb24_dummy;

  $bb21:
    assume $i56 == 1;
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i57 := $sub.i64($i46, 4096);
    call {:si_unique_call 797} {:cexpr "size"} boogie_si_record_i64($i57);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb23;

  $bb18:
    assume $i53 == 1;
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 11);
    goto $bb3;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 19);
    goto $bb3;

  $bb24_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5477;
}



const ldv_mutex_unlock_23: ref;

axiom ldv_mutex_unlock_23 == $sub.ref(0, 299107);

procedure ldv_mutex_unlock_23($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_23($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} ldv_mutex_unlock_v4l2_lock_of_camera_data($p0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} mutex_unlock($p0);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const kvirt_to_pa: ref;

axiom kvirt_to_pa == $sub.ref(0, 300139);

procedure kvirt_to_pa($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation kvirt_to_pa($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} {:cexpr "kvirt_to_pa:arg:adr"} boogie_si_record_i64($i0);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $p2 := vmalloc_to_page($p1);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $p3 := lowmem_page_address($p2);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    call {:si_unique_call 803} {:cexpr "kva"} boogie_si_record_i64($i4);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i0, 4095);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i6 := $or.i64($i5, $i4);
    call {:si_unique_call 804} {:cexpr "kva"} boogie_si_record_i64($i6);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $i7 := __phys_addr($i6);
    call {:si_unique_call 806} {:cexpr "ret"} boogie_si_record_i64($i7);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const remap_pfn_range: ref;

axiom remap_pfn_range == $sub.ref(0, 301171);

procedure remap_pfn_range($p0: ref, $i1: i64, $i2: i64, $i3: i64, $i4: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $CurrAddr;



implementation remap_pfn_range($p0: ref, $i1: i64, $i2: i64, $i3: i64, $i4: i64) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.16 := $store.i64($M.16, $p6, $i4);
    call {:si_unique_call 808} {:cexpr "remap_pfn_range:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 809} {:cexpr "remap_pfn_range:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 810} {:cexpr "remap_pfn_range:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 1} true;
    call {:si_unique_call 811} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 812} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 302203);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 80);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 303235);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 813} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 1} true;
    call {:si_unique_call 814} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 815} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_16: ref;

axiom ldv_mutex_lock_16 == $sub.ref(0, 304267);

procedure ldv_mutex_lock_16($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_16($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} ldv_mutex_lock_v4l2_lock_of_camera_data($p0);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} mutex_lock($p0);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const cpia2_poll: ref;

axiom cpia2_poll == $sub.ref(0, 305299);

procedure cpia2_poll($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.9, $M.7, $M.10, $CurrAddr;



implementation cpia2_poll($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var vslice_dummy_var_399: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i3 := v4l2_ctrl_poll($p1, $p2);
    call {:si_unique_call 819} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $i4 := poll_requested_events($p2);
    call {:si_unique_call 821} {:cexpr "tmp___0"} boogie_si_record_i64($i4);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 65);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2552, 1));
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} poll_wait($p1, $p16, $p2);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2672, 1));
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.4, $p17);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.4, $p19);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 2);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i3;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i3, 65);
    call {:si_unique_call 824} {:cexpr "status"} boogie_si_record_i32($i22);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb9;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(812, 1));
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.4, $p7);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(2, 1));
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.4, $p12);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} vslice_dummy_var_399 := cpia2_usb_stream_start($p0, $i14);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_mutex_unlock_17: ref;

axiom ldv_mutex_unlock_17 == $sub.ref(0, 306331);

procedure ldv_mutex_unlock_17($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_17($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} ldv_mutex_unlock_v4l2_lock_of_camera_data($p0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} mutex_unlock($p0);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const v4l2_ctrl_poll: ref;

axiom v4l2_ctrl_poll == $sub.ref(0, 307363);

procedure v4l2_ctrl_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 1} true;
    call {:si_unique_call 827} $i2 := __VERIFIER_nondet_uint();
    call {:si_unique_call 828} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i2);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const poll_requested_events: ref;

axiom poll_requested_events == $sub.ref(0, 308395);

procedure poll_requested_events($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation poll_requested_events($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.4, $p3);
    call {:si_unique_call 829} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const cpia2_usb_stream_start: ref;

axiom cpia2_usb_stream_start == $sub.ref(0, 309427);

procedure cpia2_usb_stream_start($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.9, $M.7, $M.10, $CurrAddr;



implementation cpia2_usb_stream_start($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i13: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i47: i8;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i54: i32;
  var $i5: i32;
  var vslice_dummy_var_400: i32;
  var vslice_dummy_var_401: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} {:cexpr "cpia2_usb_stream_start:arg:alternate___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(812, 1));
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.4, $p2);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(792, 1));
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.4, $p6);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(2, 1));
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.4, $p38);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    call {:si_unique_call 832} {:cexpr "old_alt"} boogie_si_record_i32($i40);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(2, 1));
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p43, 0);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $i44 := cpia2_usb_change_streaming_alternate($p0, $i1);
    call {:si_unique_call 834} {:cexpr "ret"} boogie_si_record_i32($i44);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, 0);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2648, 1));
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $M.4 := $store.i64($M.4, $p55, 0);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(812, 1));
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p56, 1);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $i57 := cpia2_usb_stream_resume($p0);
    call {:si_unique_call 839} {:cexpr "ret"} boogie_si_record_i32($i57);
    assume {:verifier.code 0} true;
    $i54 := $i57;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i5 := $i54;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb16:
    assume $i45 == 1;
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} vslice_dummy_var_400 := printk.ref.i32(.str.10, $i44);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i40);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(2, 1));
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p50, $i47);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $i51 := set_alternate($p0, 0);
    call {:si_unique_call 837} {:cexpr "ret2"} boogie_si_record_i32($i51);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i51, 0);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i54 := $i44;
    goto $bb21;

  $bb18:
    assume $i52 == 1;
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} vslice_dummy_var_401 := printk.ref.i32.i32.i32(.str.11, $i1, $i44, $i51);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2644, 1));
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.4, $p10);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 0);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.4, $p27);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2672, 1));
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p29, $p28);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2672, 1));
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.4, $p30);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.4, $p32);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2680, 1));
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p34, $p33);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(792, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p35, 0);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb10;

  $bb10:
    call $p14, $p15, $i16, $p18, $p19, $p20, $i21, $p23, $i24, $i25, $i26, $i13 := cpia2_usb_stream_start_loop_$bb10($p0, $p10, $p14, $p15, $i16, $p18, $p19, $p20, $i21, $p23, $i24, $i25, $i26, $i13);
    goto $bb10_last;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.4, $p14);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i13);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref($i16, 56)), $mul.ref(36, 1));
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p18, 0);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.4, $p19);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i13);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref($i21, 56)), $mul.ref(28, 1));
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p23, 0);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i13, 1);
    call {:si_unique_call 831} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.4, $p10);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i25, $i24);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb12:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i13 := $i24;
    goto $bb12_dummy;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb12_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5604;
}



const poll_wait: ref;

axiom poll_wait == $sub.ref(0, 310459);

procedure poll_wait($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation poll_wait($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.4, $p5);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.4, $p11);
    call {:si_unique_call 841} devirtbounce.1($p12, $p0, $p1, $p2);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const ldv_mutex_lock_interruptible_14: ref;

axiom ldv_mutex_lock_interruptible_14 == $sub.ref(0, 311491);

procedure ldv_mutex_lock_interruptible_14($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_interruptible_14($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 843} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $i2 := ldv_mutex_lock_interruptible_v4l2_lock_of_camera_data($p0);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 845} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const cpia2_read: ref;

axiom cpia2_read == $sub.ref(0, 312523);

procedure cpia2_read($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.4, $M.9, $M.7, $M.18, $M.19, $M.20, $M.21, $M.22, $M.10, $M.8, $CurrAddr, assertsPassed, $M.26;



implementation cpia2_read($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i1;
  var $i7: i64;
  var $i8: i1;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $p55: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p57: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i32;
  var $i93: i64;
  var $p94: ref;
  var $i6: i64;
  var vslice_dummy_var_402: i32;
  var vslice_dummy_var_403: i32;
  var vslice_dummy_var_404: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 847} {:cexpr "cpia2_read:arg:count"} boogie_si_record_i64($i2);
    call {:si_unique_call 848} {:cexpr "cpia2_read:arg:noblock"} boogie_si_record_i32($i3);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i2, 0);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p1);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(812, 1));
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.4, $p13);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2672, 1));
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.4, $p22);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i3, 0);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p23, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.4, $p28);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 2);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $p80 := $p23;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.4, $p81);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i82);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i84 := $ugt.i64($i83, $i2);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p80, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.4, $p85);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p80, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.4, $p87);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i89 := copy_to_user($p1, $p86, $i88);
    call {:si_unique_call 874} {:cexpr "tmp___7"} boogie_si_record_i32($i89);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p80, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.4, $p91);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i92);
    call {:si_unique_call 875} {:cexpr "count"} boogie_si_record_i64($i93);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p80, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p94, 0);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i6 := $i93;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb53:
    assume $i90 == 1;
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64(0, 14);
    goto $bb3;

  $bb50:
    assume $i84 == 1;
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64(0, 14);
    goto $bb3;

  $bb20:
    assume $i30 == 1;
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} ldv_mutex_unlock_90($p31);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(904, 1));
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $i33 := video_is_registered($p32);
    call {:si_unique_call 854} {:cexpr "tmp___3"} boogie_si_record_i32($i33);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $p72 := $p23;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} ldv_mutex_lock_91($p73);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $p74 := get_current();
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $i75 := signal_pending($p74);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 870} {:cexpr "tmp___5"} boogie_si_record_i32($i75);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(904, 1));
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $i78 := video_is_registered($p77);
    call {:si_unique_call 872} {:cexpr "tmp___6"} boogie_si_record_i32($i78);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 0);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p80 := $p72;
    goto $bb49;

  $bb46:
    assume $i79 == 1;
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb43:
    assume $i76 == 1;
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64(0, 512);
    goto $bb3;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i34 == 1;
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2672, 1));
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.4, $p35);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.4, $p37);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 2);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $p71 := $p36;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $p72 := $p71;
    goto $bb42;

  $bb24:
    assume $i39 == 1;
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $p40 := get_current();
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p41, 0);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p43, $p40);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p44, autoremove_wake_function);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p47, $p45);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p50, $p48);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2552, 1));
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} prepare_to_wait($p51, $p4, 1);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(904, 1));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $i53 := video_is_registered($p52);
    call {:si_unique_call 858} {:cexpr "tmp___0"} boogie_si_record_i32($i53);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $p55 := $p36;
    assume {:branchcond $i54} true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i54 == 1);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    call $p56, $p58, $p59, $p60, $i61, $i62, $p63, $p64, $i65, $i66, $p67, $i68, $i69 := cpia2_read_loop_$bb29($p0, $p4, $p51, $p52, $p56, $p58, $p59, $p60, $i61, $i62, $p63, $p64, $i65, $i66, $p67, $i68, $i69);
    goto $bb29_last;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.4, $p58);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.4, $p60);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 2);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $p63 := $p59;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $p64 := get_current();
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $i65 := signal_pending($p64);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 862} {:cexpr "tmp___2"} boogie_si_record_i32($i65);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 0);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $p67 := $p59;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p57 := $p67;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2552, 1));
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} finish_wait($p70, $p4);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p71 := $p57;
    goto $bb41;

  $bb36:
    assume $i66 == 1;
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} schedule();
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} prepare_to_wait($p51, $p4, 1);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $i68 := video_is_registered($p52);
    call {:si_unique_call 866} {:cexpr "tmp___0"} boogie_si_record_i32($i68);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $p56 := $p59;
    assume true;
    goto $bb30, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb40_dummy;

  $bb30:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $p55 := $p56;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $p57 := $p55;
    goto $bb31;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p57 := $p63;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb27;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p23, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.4, $p25);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 2);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb16;

  $bb17:
    assume $i27 == 1;
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64(0, 11);
    goto $bb3;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(2, 1));
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.4, $p18);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} vslice_dummy_var_404 := cpia2_usb_stream_start($p0, $i20);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} vslice_dummy_var_403 := printk.ref.ref(.str.26, .str.25);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64(0, 22);
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} vslice_dummy_var_402 := printk.ref.ref(.str.24, .str.25);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb40_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2672, 1));
    goto corral_source_split_5769;
}



const ldv_mutex_unlock_15: ref;

axiom ldv_mutex_unlock_15 == $sub.ref(0, 313555);

procedure ldv_mutex_unlock_15($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_15($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} ldv_mutex_unlock_v4l2_lock_of_camera_data($p0);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} mutex_unlock($p0);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_90: ref;

axiom ldv_mutex_unlock_90 == $sub.ref(0, 314587);

procedure ldv_mutex_unlock_90($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_90($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} ldv_mutex_unlock_v4l2_lock_of_camera_data($p0);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} mutex_unlock($p0);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 315619);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $p0 := devirtbounce.2(0, current_task);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const autoremove_wake_function: ref;

axiom autoremove_wake_function == $sub.ref(0, 316651);

procedure autoremove_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const prepare_to_wait: ref;

axiom prepare_to_wait == $sub.ref(0, 317683);

procedure prepare_to_wait($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation prepare_to_wait($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} {:cexpr "prepare_to_wait:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 318715);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.4, $M.8, $M.9, $M.7, $CurrAddr, assertsPassed;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $i1 := test_tsk_thread_flag($p0, 2);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 883} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 885} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 319747);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 320779);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_91: ref;

axiom ldv_mutex_lock_91 == $sub.ref(0, 321811);

procedure ldv_mutex_lock_91($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_91($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} ldv_mutex_lock_v4l2_lock_of_camera_data($p0);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} mutex_lock($p0);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 322843);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} {:cexpr "copy_to_user:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} might_fault();
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} $i3 := _copy_to_user($p0, $p1, $i2);
    call {:si_unique_call 891} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const might_fault: ref;

axiom might_fault == $sub.ref(0, 323875);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 324907);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 892} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 1} true;
    call {:si_unique_call 893} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 894} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 325939);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.4, $M.8, $M.9, $M.7, $CurrAddr, assertsPassed;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 9576)), $mul.ref(8, 1));
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.17, $p2);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $i5 := test_ti_thread_flag($p4, $i1);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 897} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 326971);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 899} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 328003);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.4, $M.8, $M.9, $M.7, $CurrAddr, assertsPassed;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $i4 := variable_test_bit($i1, $p3);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 902} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 329035);

procedure variable_test_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.4, $M.8, $M.9, $M.7, $CurrAddr, assertsPassed;



implementation variable_test_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 904} $i2 := devirtbounce.3(0, $p1, $i0);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 905} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const cpia2_querycap: ref;

axiom cpia2_querycap == $sub.ref(0, 330067);

procedure cpia2_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4;



implementation cpia2_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $p66: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var vslice_dummy_var_405: ref;
  var vslice_dummy_var_406: ref;
  var vslice_dummy_var_407: ref;
  var vslice_dummy_var_408: ref;
  var vslice_dummy_var_409: ref;
  var vslice_dummy_var_410: ref;
  var vslice_dummy_var_411: ref;
  var vslice_dummy_var_412: ref;
  var vslice_dummy_var_413: ref;
  var vslice_dummy_var_414: ref;
  var vslice_dummy_var_415: ref;
  var vslice_dummy_var_416: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $p3 := video_drvdata($p0);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} vslice_dummy_var_405 := strcpy($p6, .str.12);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.4, $p10);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 337);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} vslice_dummy_var_407 := strcpy($p18, .str.40);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.4, $p22);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i23, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} vslice_dummy_var_410 := strcat($p34, .str.43);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.4, $p38);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i40, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i40, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i40, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} vslice_dummy_var_416 := strcat($p66, .str.49);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2496, 1));
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.4, $p68);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $i72 := usb_make_path($p69, $p71, 32);
    call {:si_unique_call 919} {:cexpr "tmp___0"} boogie_si_record_i32($i72);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i72, 0);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p76, 83886081);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.4, $p77);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $i79 := $or.i32($i78, $sub.i32(0, 2147483648));
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(84, 1));
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p80, $i79);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb36:
    assume $i73 == 1;
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.4;
    call {:si_unique_call 921} cmdloc_dummy_var_6 := $memset.i8(cmdloc_dummy_var_5, $p75, 0, 32, $zext.i32.i64(4), 0 == 1);
    $M.4 := cmdloc_dummy_var_6;
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb21:
    assume $i44 == 1;
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} vslice_dummy_var_411 := strcat($p63, .str.48);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb19:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i40, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb23;

  $bb24:
    assume $i45 == 1;
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} vslice_dummy_var_412 := strcat($p60, .str.47);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb17:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i40, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb23;

  $bb26:
    assume $i46 == 1;
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} vslice_dummy_var_413 := strcat($p57, .str.46);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb15:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i40, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i40, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb23;

  $bb30:
    assume $i48 == 1;
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} vslice_dummy_var_414 := strcat($p54, .str.45);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb28:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i40, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb23;

  $bb32:
    assume $i49 == 1;
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} vslice_dummy_var_415 := strcat($p51, .str.44);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} vslice_dummy_var_408 := strcat($p31, .str.42);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i23, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb9;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} vslice_dummy_var_409 := strcat($p28, .str.41);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} vslice_dummy_var_406 := strcpy($p15, .str.39);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cpia2_enum_fmt_vid_cap: ref;

axiom cpia2_enum_fmt_vid_cap == $sub.ref(0, 331099);

procedure cpia2_enum_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4;



implementation cpia2_enum_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $i7: i32;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_417: ref;
  var vslice_dummy_var_418: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.4, $p3);
    call {:si_unique_call 922} {:cexpr "index"} boogie_si_record_i32($i4);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i4, 1);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_7 := $M.4;
    call {:si_unique_call 923} cmdloc_dummy_var_8 := $memset.i8(cmdloc_dummy_var_7, $p8, 0, 64, $zext.i32.i64(1), 0 == 1);
    $M.4 := cmdloc_dummy_var_8;
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p9, $i4);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p10, 1);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p11, 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} vslice_dummy_var_417 := strcpy($p20, .str.38);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p22, 1195724874);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb9:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb13;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} vslice_dummy_var_418 := strcpy($p16, .str.37);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p18, 1196444237);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const cpia2_g_fmt_vid_cap: ref;

axiom cpia2_g_fmt_vid_cap == $sub.ref(0, 332131);

procedure cpia2_g_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4;



implementation cpia2_g_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $p3 := video_drvdata($p0);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2480, 1));
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.4, $p5);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p9, $i6);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2484, 1));
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.4, $p10);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p14, $i11);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2488, 1));
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.4, $p15);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p19, $i16);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p22, 1);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p25, 0);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2640, 1));
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.4, $p26);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p30, $i27);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p33, 7);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p36, 0);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const cpia2_s_fmt_vid_cap: ref;

axiom cpia2_s_fmt_vid_cap == $sub.ref(0, 333163);

procedure cpia2_s_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.7, $M.18, $M.19, $M.20, $M.21, $M.22, $M.10, $M.8, $CurrAddr, $M.9, assertsPassed, $M.26;



implementation cpia2_s_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i57: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $p3 := video_drvdata($p0);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} $i5 := cpia2_try_fmt_vid_cap($p0, $p1, $p2);
    call {:si_unique_call 929} {:cexpr "err"} boogie_si_record_i32($i5);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.4, $p10);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2488, 1));
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p12, $i11);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(25, 1)), $mul.ref(3, 1));
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p15, 0);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.4, $p18);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2480, 1));
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.4, $p20);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i19, $i21);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i22 == 1);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.4, $p25);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2484, 1));
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.4, $p27);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i26, $i28);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2644, 1));
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.4, $p54);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i56 := $sgt.i32($i55, 0);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i56 == 1;
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb14;

  $bb14:
    call $p58, $p59, $i60, $p62, $i63, $i64, $i65, $i66, $i67, $p68, $p69, $i70, $p72, $i73, $i74, $i75, $i57 := cpia2_s_fmt_vid_cap_loop_$bb14($p4, $p54, $p58, $p59, $i60, $p62, $i63, $i64, $i65, $i66, $i67, $p68, $p69, $i70, $p72, $i73, $i74, $i75, $i57);
    goto $bb14_last;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.4, $p58);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i57);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p59, $mul.ref($i60, 56)), $mul.ref(36, 1));
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.4, $p62);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 1);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.4, $p68);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i57);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p69, $mul.ref($i70, 56)), $mul.ref(36, 1));
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p72, 0);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i57, 1);
    call {:si_unique_call 933} {:cexpr "frame"} boogie_si_record_i32($i73);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.4, $p54);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i75 := $sgt.i32($i74, $i73);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i75 == 1);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb22:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i57 := $i73;
    goto $bb22_dummy;

  $bb16:
    assume $i64 == 1;
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $i65 := sync($p4, $i57);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 932} {:cexpr "err"} boogie_si_record_i32($i65);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i65, 0);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i67 := $i65;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $i7 := $i67;
    goto $bb3;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.4, $p32);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2480, 1));
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p34, $i33);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.4, $p37);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2484, 1));
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p39, $i38);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.4, $p42);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p46, $i43);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.4, $p49);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p53, $i50);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} cpia2_set_format($p4);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6118;
}



const cpia2_try_fmt_vid_cap: ref;

axiom cpia2_try_fmt_vid_cap == $sub.ref(0, 334195);

procedure cpia2_try_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4;



implementation cpia2_try_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $p3 := video_drvdata($p0);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.4, $p7);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 1196444237);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p18, 1);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p21, 0);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2640, 1));
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.4, $p22);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p26, $i23);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p29, 7);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p32, 0);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.4, $p35);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.4, $p39);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $i41 := cpia2_match_video_size($i36, $i40);
    call {:si_unique_call 936} {:cexpr "tmp___0"} boogie_si_record_i32($i41);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i41, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i41, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i41, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p95, 176);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p98, 144);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb15:
    assume $i45 == 1;
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p89, 192);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p92, 144);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb13:
    assume $i44 == 1;
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p83, 224);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p86, 168);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb11:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i41, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i46 == 1);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p77, 256);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p80, 192);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb18:
    assume $i46 == 1;
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p71, 288);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p74, 216);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb9:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i41, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i41, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i48 == 1);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb22:
    assume $i48 == 1;
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p65, 320);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p68, 240);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i41, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i49 == 1);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p59, 352);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p62, 288);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb24:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i41, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb17;

  $bb26:
    assume $i50 == 1;
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p53, 640);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p56, 480);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.4, $p12);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 1195724874);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb6;
}



const cpia2_reqbufs: ref;

axiom cpia2_reqbufs == $sub.ref(0, 335227);

procedure cpia2_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4;



implementation cpia2_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i11: i32;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $p3 := video_drvdata($p0);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.4, $p5);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.4, $p8);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 1);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2644, 1));
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.4, $p12);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p14, $i13);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.4;
    call {:si_unique_call 938} cmdloc_dummy_var_10 := $memset.i8(cmdloc_dummy_var_9, $p16, 0, 8, $zext.i32.i64(4), 0 == 1);
    $M.4 := cmdloc_dummy_var_10;
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const cpia2_querybuf: ref;

axiom cpia2_querybuf == $sub.ref(0, 336259);

procedure cpia2_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4;



implementation cpia2_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i64;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i64;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i64;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i64;
  var $p81: ref;
  var $i82: i64;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $i13: i32;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $p3 := video_drvdata($p0);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.4, $p5);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.4, $p8);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2644, 1));
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.4, $p10);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i32($i9, $i11);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.4, $p14);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.4, $p16);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref($i18, 56)), $mul.ref(40, 1));
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.4, $p20);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i22);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2656, 1));
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.4, $p24);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i32($i26);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32($i23, $i27);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p30, $i28);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2640, 1));
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.4, $p31);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p33, $i32);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p34, 1);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(808, 1));
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.4, $p35);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p40, 0);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.4, $p41);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.4, $p43);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i44);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p42, $mul.ref($i45, 56)), $mul.ref(36, 1));
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.4, $p47);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i48, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i48, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p54, 0);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p55, 2);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb14:
    assume $i50 == 1;
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.4, $p56);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.4, $p58);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $i60 := $zext.i32.i64($i59);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p57, $mul.ref($i60, 56)), $mul.ref(28, 1));
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.4, $p62);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p64, $i63);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.4, $p66);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.4, $p68);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i70 := $zext.i32.i64($i69);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p67, $mul.ref($i70, 56)), $mul.ref(0, 1));
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p65);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p72);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.4;
    cmdloc_dummy_var_12 := $M.4;
    call {:si_unique_call 940} cmdloc_dummy_var_13 := $memcpy.i8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p73, $p74, 16, $zext.i32.i64(8), 0 == 1);
    $M.4 := cmdloc_dummy_var_13;
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.4, $p75);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.4, $p77);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i79 := $zext.i32.i64($i78);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p76, $mul.ref($i79, 56)), $mul.ref(16, 1));
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i82 := $load.i64($M.4, $p81);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i64.i32($i82);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p84, $i83);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p85, 4);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb12:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i48, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb22;

  $bb20:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i48, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb19;

  $bb23:
    assume $i53 == 1;
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p39, 1);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const cpia2_qbuf: ref;

axiom cpia2_qbuf == $sub.ref(0, 337291);

procedure cpia2_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4;



implementation cpia2_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $p32: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} $p3 := video_drvdata($p0);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.4, $p5);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.4, $p8);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 1);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.4, $p11);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2644, 1));
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.4, $p13);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i12, $i14);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.4, $p17);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.4, $p19);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p18, $mul.ref($i21, 56)), $mul.ref(36, 1));
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.4, $p23);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 2);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.4, $p26);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.4, $p28);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p27, $mul.ref($i30, 56)), $mul.ref(36, 1));
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p32, 0);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const cpia2_dqbuf: ref;

axiom cpia2_dqbuf == $sub.ref(0, 338323);

procedure cpia2_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.19, $M.20, $M.21, $M.22, $M.4, $M.8, $CurrAddr, assertsPassed, $M.26, $M.9, $M.7;



implementation cpia2_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $p46: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p48: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i64;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i64;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i64;
  var $p102: ref;
  var $i103: i64;
  var $i104: i32;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $i110: i64;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $i115: i32;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $i119: i32;
  var $i120: i32;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i12: i32;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $p4 := video_drvdata($p0);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.4, $p6);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 1);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.4, $p9);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 1);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $i13 := find_earliest_filled_buffer($p5);
    call {:si_unique_call 945} {:cexpr "frame"} boogie_si_record_i32($i13);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i13, 0);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i73 := $i13;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p74, $i73);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p5, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.4, $p75);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.4, $p77);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $i79 := $zext.i32.i64($i78);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p76, $mul.ref($i79, 56)), $mul.ref(28, 1));
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.4, $p81);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p83, $i82);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p84, 5);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p85, 1);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p5, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.4, $p87);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.4, $p89);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i91 := $zext.i32.i64($i90);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p88, $mul.ref($i91, 56)), $mul.ref(0, 1));
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p86);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p93);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.4;
    cmdloc_dummy_var_15 := $M.4;
    call {:si_unique_call 968} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p94, $p95, 16, $zext.i32.i64(8), 0 == 1);
    $M.4 := cmdloc_dummy_var_16;
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p5, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.4, $p96);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.4, $p98);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i100 := $zext.i32.i64($i99);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p97, $mul.ref($i100, 56)), $mul.ref(16, 1));
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $i103 := $load.i64($M.4, $p102);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i64.i32($i103);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p105, $i104);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p5, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.4, $p106);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.4, $p108);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i110 := $zext.i32.i64($i109);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p107, $mul.ref($i110, 56)), $mul.ref(40, 1));
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.4, $p112);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p113);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i64.i32($i114);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p5, $mul.ref(0, 2824)), $mul.ref(2656, 1));
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.4, $p116);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p117);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i64.i32($i118);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $i120 := $sub.i32($i115, $i119);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p122, $i120);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p5, $mul.ref(0, 2824)), $mul.ref(2640, 1));
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.4, $p123);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p125, $i124);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(76, 1));
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p126, 0);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p127, 0);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.4;
    call {:si_unique_call 969} cmdloc_dummy_var_18 := $memset.i8(cmdloc_dummy_var_17, $p129, 0, 16, $zext.i32.i64(8), 0 == 1);
    $M.4 := cmdloc_dummy_var_18;
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 2824)), $mul.ref(2672, 1));
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.4, $p20);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} ldv_mutex_unlock_20($p22);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 2824)), $mul.ref(904, 1));
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $i24 := video_is_registered($p23);
    call {:si_unique_call 948} {:cexpr "tmp___4"} boogie_si_record_i32($i24);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $p63 := $p21;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} ldv_mutex_lock_21($p64);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $p65 := get_current();
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $i66 := signal_pending($p65);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 964} {:cexpr "tmp___6"} boogie_si_record_i32($i66);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 2824)), $mul.ref(904, 1));
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $i69 := video_is_registered($p68);
    call {:si_unique_call 966} {:cexpr "tmp___7"} boogie_si_record_i32($i69);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 0);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p63, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.4, $p71);
    call {:si_unique_call 967} {:cexpr "frame"} boogie_si_record_i32($i72);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i73 := $i72;
    goto $bb43;

  $bb40:
    assume $i70 == 1;
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 25);
    goto $bb6;

  $bb37:
    assume $i67 == 1;
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 512);
    goto $bb6;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i25 == 1;
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 2824)), $mul.ref(2672, 1));
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.4, $p26);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.4, $p28);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 2);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $p62 := $p27;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $p63 := $p62;
    goto $bb36;

  $bb18:
    assume $i30 == 1;
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $p31 := get_current();
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p32, 0);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p34, $p31);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p35, autoremove_wake_function);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p38, $p36);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p41, $p39);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 2824)), $mul.ref(2552, 1));
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} prepare_to_wait($p42, $p3, 1);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 2824)), $mul.ref(904, 1));
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $i44 := video_is_registered($p43);
    call {:si_unique_call 952} {:cexpr "tmp___1"} boogie_si_record_i32($i44);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $p46 := $p27;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i45 == 1);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    call $p47, $p49, $p50, $p51, $i52, $i53, $p54, $p55, $i56, $i57, $p58, $i59, $i60 := cpia2_dqbuf_loop_$bb23($p3, $p5, $p42, $p43, $p47, $p49, $p50, $p51, $i52, $i53, $p54, $p55, $i56, $i57, $p58, $i59, $i60);
    goto $bb23_last;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.4, $p49);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.4, $p51);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 2);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $p54 := $p50;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $p55 := get_current();
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} $i56 := signal_pending($p55);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    call {:si_unique_call 956} {:cexpr "tmp___3"} boogie_si_record_i32($i56);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $p58 := $p50;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p48 := $p58;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 2824)), $mul.ref(2552, 1));
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} finish_wait($p61, $p3);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $p62 := $p48;
    goto $bb35;

  $bb30:
    assume $i57 == 1;
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} schedule();
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} prepare_to_wait($p42, $p3, 1);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $i59 := video_is_registered($p43);
    call {:si_unique_call 960} {:cexpr "tmp___1"} boogie_si_record_i32($i59);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $p47 := $p50;
    assume true;
    goto $bb24, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb34_dummy;

  $bb24:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $p46 := $p47;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $p48 := $p46;
    goto $bb25;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $p48 := $p54;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb21;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(128, 1));
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.4, $p15);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 2048);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 11);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb34_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 2824)), $mul.ref(2672, 1));
    goto corral_source_split_6512;
}



const cpia2_streamon: ref;

axiom cpia2_streamon == $sub.ref(0, 339355);

procedure cpia2_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.9, $M.7, $M.10, $CurrAddr;



implementation cpia2_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} {:cexpr "cpia2_streamon:arg:type"} boogie_si_record_i32($i2);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} $p3 := video_drvdata($p0);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(808, 1));
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.4, $p5);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 1);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(812, 1));
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.4, $p11);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 22);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $i10 := $i23;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(2, 1));
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.4, $p16);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $i19 := cpia2_usb_stream_start($p4, $i18);
    call {:si_unique_call 973} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i23 := $i19;
    goto $bb13;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(776, 1));
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.4, $p21);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} v4l2_ctrl_grab($p22, 1);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const cpia2_streamoff: ref;

axiom cpia2_streamoff == $sub.ref(0, 340387);

procedure cpia2_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.9, $M.7, $CurrAddr;



implementation cpia2_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} {:cexpr "cpia2_streamoff:arg:type"} boogie_si_record_i32($i2);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} $p3 := video_drvdata($p0);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(808, 1));
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.4, $p5);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 1);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(812, 1));
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.4, $p11);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i10 := $i18;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $i14 := cpia2_usb_stream_stop($p4);
    call {:si_unique_call 978} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i18 := $i14;
    goto $bb13;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(776, 1));
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.4, $p16);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} v4l2_ctrl_grab($p17, 0);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const cpia2_enum_input: ref;

axiom cpia2_enum_input == $sub.ref(0, 341419);

procedure cpia2_enum_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4;



implementation cpia2_enum_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i6: i32;
  var vslice_dummy_var_419: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.4, $p3);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} vslice_dummy_var_419 := strcpy($p8, .str.53);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p10, 2);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const cpia2_g_input: ref;

axiom cpia2_g_input == $sub.ref(0, 342451);

procedure cpia2_g_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4;



implementation cpia2_g_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p2, 0);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const cpia2_s_input: ref;

axiom cpia2_s_input == $sub.ref(0, 343483);

procedure cpia2_s_input($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cpia2_s_input($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} {:cexpr "cpia2_s_input:arg:i"} boogie_si_record_i32($i2);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const cpia2_cropcap: ref;

axiom cpia2_cropcap == $sub.ref(0, 344515);

procedure cpia2_cropcap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4;



implementation cpia2_cropcap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $p3 := video_drvdata($p0);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.4, $p5);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p10, 0);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p12, 0);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2480, 1));
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.4, $p13);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(8, 1));
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p16, $i14);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2484, 1));
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.4, $p17);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(12, 1));
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p20, $i18);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p22, 0);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p24, 0);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2480, 1));
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.4, $p25);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(20, 1)), $mul.ref(8, 1));
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p28, $i26);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2484, 1));
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.4, $p29);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(20, 1)), $mul.ref(12, 1));
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p32, $i30);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(36, 1)), $mul.ref(0, 1));
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p34, 1);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(36, 1)), $mul.ref(4, 1));
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p36, 1);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const cpia2_g_jpegcomp: ref;

axiom cpia2_g_jpegcomp == $sub.ref(0, 345547);

procedure cpia2_g_jpegcomp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4;



implementation cpia2_g_jpegcomp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $p3 := video_drvdata($p0);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.4;
    call {:si_unique_call 984} cmdloc_dummy_var_20 := $memset.i8(cmdloc_dummy_var_19, $p5, 0, 140, $zext.i32.i64(1), 0 == 1);
    $M.4 := cmdloc_dummy_var_20;
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p6, 80);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(136, 1));
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p7, 48);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(25, 1)), $mul.ref(3, 1));
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.4, $p10);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2688, 1));
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.4, $p18);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(4, 1));
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p20, $i19);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2692, 1));
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.4, $p21);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(8, 1));
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p23, $i22);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2692, 1));
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.4, $p24);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i25, 0);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2756, 1));
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.4, $p38);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(72, 1));
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p40, $i39);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2756, 1));
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.4, $p41);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i43 := $sgt.i32($i42, 0);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb7:
    assume $i43 == 1;
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2756, 1));
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.4, $p44);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i45);
    call {:si_unique_call 987} {:cexpr "__len___0"} boogie_si_record_i64($i46);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(76, 1));
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2760, 1));
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.4;
    cmdloc_dummy_var_25 := $M.4;
    call {:si_unique_call 988} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p48, $p50, $i46, $zext.i32.i64(4), 0 == 1);
    $M.4 := cmdloc_dummy_var_26;
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(136, 1));
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.4, $p51);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i53 := $or.i32($i52, 64);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(136, 1));
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p54, $i53);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2692, 1));
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.4, $p27);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    call {:si_unique_call 985} {:cexpr "__len"} boogie_si_record_i64($i29);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(12, 1));
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2696, 1));
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.4;
    cmdloc_dummy_var_22 := $M.4;
    call {:si_unique_call 986} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p31, $p33, $i29, $zext.i32.i64(4), 0 == 1);
    $M.4 := cmdloc_dummy_var_23;
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(136, 1));
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.4, $p34);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, 128);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(136, 1));
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p37, $i36);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(136, 1));
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.4, $p14);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 8);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(136, 1));
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p17, $i16);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cpia2_s_jpegcomp: ref;

axiom cpia2_s_jpegcomp == $sub.ref(0, 346579);

procedure cpia2_s_jpegcomp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4;



implementation cpia2_s_jpegcomp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i8;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i64;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i47: i32;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var vslice_dummy_var_420: i32;
  var vslice_dummy_var_421: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $p3 := video_drvdata($p0);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(136, 1));
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.4, $p5);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 8);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(25, 1)), $mul.ref(3, 1));
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p13, $i10);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(8, 1));
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.4, $p14);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2692, 1));
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p48, 0);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(72, 1));
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.4, $p49);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $r := $i47;
    return;

  $bb15:
    assume $i51 == 1;
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(72, 1));
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.4, $p52);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $i54 := $sgt.i32($i53, 0);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(72, 1));
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.4, $p68);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} vslice_dummy_var_421 := printk.ref.i32(.str.52, $i69);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 22);
    goto $bb13;

  $bb17:
    assume $i54 == 1;
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(72, 1));
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.4, $p55);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $i57 := $ule.i32($i56, 60);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb19;

  $bb20:
    assume $i57 == 1;
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(72, 1));
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.4, $p58);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2756, 1));
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p60, $i59);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(72, 1));
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.4, $p61);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    call {:si_unique_call 994} {:cexpr "__len___0"} boogie_si_record_i64($i63);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2760, 1));
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(76, 1));
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.4;
    cmdloc_dummy_var_31 := $M.4;
    call {:si_unique_call 995} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p65, $p67, $i63, $zext.i32.i64(4), 0 == 1);
    $M.4 := cmdloc_dummy_var_32;
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(8, 1));
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.4, $p17);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, 0);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(4, 1));
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.4, $p42);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(8, 1));
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.4, $p44);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} vslice_dummy_var_420 := printk.ref.i32.i32(.str.51, $i43, $i45);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 22);
    goto $bb13;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(8, 1));
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.4, $p20);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i22 := $ule.i32($i21, 60);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb5;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(4, 1));
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.4, $p23);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $i25 := $sge.i32($i24, 0);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb5;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(4, 1));
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.4, $p26);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $i28 := $sle.i32($i27, 15);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb5;

  $bb10:
    assume $i28 == 1;
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(4, 1));
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.4, $p29);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2688, 1));
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p31, $i30);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(8, 1));
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.4, $p32);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2692, 1));
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p34, $i33);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(8, 1));
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.4, $p35);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    call {:si_unique_call 991} {:cexpr "__len"} boogie_si_record_i64($i37);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2696, 1));
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(12, 1));
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.4;
    cmdloc_dummy_var_28 := $M.4;
    call {:si_unique_call 992} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p39, $p41, $i37, $zext.i32.i64(4), 0 == 1);
    $M.4 := cmdloc_dummy_var_29;
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb14;
}



const cpia2_g_parm: ref;

axiom cpia2_g_parm == $sub.ref(0, 347611);

procedure cpia2_g_parm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4;



implementation cpia2_g_parm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $p22: ref;
  var $i23: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i10: i32;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} $p3 := video_drvdata($p0);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(0, 1));
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.4, $p7);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 1);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p11, 4096);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2644, 1));
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.4, $p12);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p14, $i13);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(1, 1));
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.4, $p17);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i21 := 0;
    assume {:branchcond $i20} true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(1, 1));
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.4, $p30);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $i21 := 1;
    assume {:branchcond $i33} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(1, 1));
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.4, $p36);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 4);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i21 := 2;
    assume {:branchcond $i39} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(1, 1));
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.4, $p42);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 8);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $i21 := 3;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(1, 1));
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.4, $p48);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 16);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i21 := 4;
    assume {:branchcond $i51} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(1, 1));
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.4, $p54);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 32);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i21 := 5;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i21);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref($i23, 12)), $mul.ref(4, 1));
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p22);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p25);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.4;
    cmdloc_dummy_var_34 := $M.4;
    call {:si_unique_call 997} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p26, $p27, 8, $zext.i32.i64(4), 0 == 1);
    $M.4 := cmdloc_dummy_var_35;
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb8;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb8;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb8;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb8;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;
}



const cpia2_s_parm: ref;

axiom cpia2_s_parm == $sub.ref(0, 348643);

procedure cpia2_s_parm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.7, $CurrAddr;



implementation cpia2_s_parm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i62: i32;
  var $i63: i1;
  var $i35: i32;
  var $i64: i32;
  var $i61: i32;
  var $i65: i1;
  var $i66: i32;
  var $p67: ref;
  var $i68: i64;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i21: i32;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} $p6 := video_drvdata($p0);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p3);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p10);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.4;
    cmdloc_dummy_var_37 := $M.4;
    call {:si_unique_call 1002} cmdloc_dummy_var_38 := $memcpy.i8(cmdloc_dummy_var_36, cmdloc_dummy_var_37, $p11, $p12, 8, $zext.i32.i64(4), 0 == 1);
    $M.4 := cmdloc_dummy_var_38;
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} $i13 := cpia2_g_parm($p0, $p1, $p2);
    call {:si_unique_call 1004} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i14 == 1);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.4, $p15);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.4, $p18);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.4, $p24);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i34 := 5;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb16;

  $bb16:
    call $p36, $p37, $i38, $p40, $p41, $p42, $p43, $i44, $p45, $i46, $i47, $p48, $p49, $i50, $p51, $i52, $i53, $p54, $p55, $i56, $p57, $i58, $i59, $i60, $i62, $i63, $i35, $i64, cmdloc_dummy_var_39, cmdloc_dummy_var_40, cmdloc_dummy_var_41, cmdloc_dummy_var_42, cmdloc_dummy_var_43, cmdloc_dummy_var_44 := cpia2_s_parm_loop_$bb16($p3, $p4, $p5, $i34, $p36, $p37, $i38, $p40, $p41, $p42, $p43, $i44, $p45, $i46, $i47, $p48, $p49, $i50, $p51, $i52, $i53, $p54, $p55, $i56, $p57, $i58, $i59, $i60, $i62, $i63, $i35, $i64, cmdloc_dummy_var_39, cmdloc_dummy_var_40, cmdloc_dummy_var_41, cmdloc_dummy_var_42, cmdloc_dummy_var_43, cmdloc_dummy_var_44);
    goto $bb16_last;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p4);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p3);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.4;
    cmdloc_dummy_var_40 := $M.4;
    call {:si_unique_call 1006} cmdloc_dummy_var_41 := $memcpy.i8(cmdloc_dummy_var_39, cmdloc_dummy_var_40, $p36, $p37, 8, $zext.i32.i64(4), 0 == 1);
    $M.4 := cmdloc_dummy_var_41;
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i35);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref($i38, 12)), $mul.ref(4, 1));
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p5);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p40);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.4;
    cmdloc_dummy_var_43 := $M.4;
    call {:si_unique_call 1007} cmdloc_dummy_var_44 := $memcpy.i8(cmdloc_dummy_var_42, cmdloc_dummy_var_43, $p41, $p42, 8, $zext.i32.i64(4), 0 == 1);
    $M.4 := cmdloc_dummy_var_44;
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.4, $p43);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.4, $p45);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $i47 := $mul.i32($i44, $i46);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p48, $i47);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.4, $p49);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.4, $p51);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i53 := $mul.i32($i50, $i52);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p54, $i53);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.4, $p55);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.4, $p57);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i59 := $uge.i32($i56, $i58);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $i60 := $i35;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i35, 1);
    call {:si_unique_call 1008} {:cexpr "i"} boogie_si_record_i32($i62);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i63 := $sle.i32($i62, $i34);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $i64 := $i62;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i61 := $i64;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i65 := $sgt.i32($i61, $i34);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $i61;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i66);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref($i68, 12)), $mul.ref(4, 1));
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p67);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p70);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.4;
    cmdloc_dummy_var_46 := $M.4;
    call {:si_unique_call 1009} cmdloc_dummy_var_47 := $memcpy.i8(cmdloc_dummy_var_45, cmdloc_dummy_var_46, $p71, $p72, 8, $zext.i32.i64(4), 0 == 1);
    $M.4 := cmdloc_dummy_var_47;
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i66);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref($i73, 12)), $mul.ref(0, 1));
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.4, $p75);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} $i77 := cpia2_set_fps($p7, $i76);
    call {:si_unique_call 1011} {:cexpr "tmp___0"} boogie_si_record_i32($i77);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i21 := $i77;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb24:
    assume $i65 == 1;
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i66 := $i34;
    goto $bb26;

  $bb22:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $i35 := $i62;
    goto $bb22_dummy;

  $bb18:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i61 := $i60;
    goto $bb20;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.4, $p29);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 16);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb12;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i33 := $add.i32(5, $sub.i32(0, 2));
    call {:si_unique_call 1005} {:cexpr "max"} boogie_si_record_i32($i33);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb15;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i21 := $i13;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb22_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7014;
}



const cpia2_enum_framesizes: ref;

axiom cpia2_enum_framesizes == $sub.ref(0, 349675);

procedure cpia2_enum_framesizes($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4;



implementation cpia2_enum_framesizes($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.4, $p3);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 1196444237);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.4, $p10);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i32($i11, 7);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p13, 1);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.4, $p14);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref(cpia2_framesizes, $mul.ref(0, 64)), $mul.ref($i16, 8)), $mul.ref(0, 1));
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.23, $p18);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p22, $i19);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.4, $p23);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref(cpia2_framesizes, $mul.ref(0, 64)), $mul.ref($i25, 8)), $mul.ref(4, 1));
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.24, $p27);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p31, $i28);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.4, $p6);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 1195724874);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb6;
}



const cpia2_enum_frameintervals: ref;

axiom cpia2_enum_frameintervals == $sub.ref(0, 350707);

procedure cpia2_enum_frameintervals($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4;



implementation cpia2_enum_frameintervals($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i11: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} $p3 := video_drvdata($p0);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(4, 1));
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.4, $p5);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1196444237);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.4, $p14);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 1);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i24 := 5;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.4, $p25);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i27 := $ugt.i32($i26, $i24);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.4, $p28);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 640);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.4, $p47);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 352);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.4, $p53);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 320);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.4, $p59);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 288);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.4, $p65);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 256);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.4, $p71);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 224);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.4, $p77);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 192);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.4, $p83);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 176);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i35 := 8;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 8);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(16, 1));
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p37, 1);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(20, 1));
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.4, $p40);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $i42 := $zext.i32.i64($i41);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref($i42, 12)), $mul.ref(4, 1));
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p39);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p44);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.4;
    cmdloc_dummy_var_49 := $M.4;
    call {:si_unique_call 1014} cmdloc_dummy_var_50 := $memcpy.i8(cmdloc_dummy_var_48, cmdloc_dummy_var_49, $p45, $p46, 8, $zext.i32.i64(4), 0 == 1);
    $M.4 := cmdloc_dummy_var_50;
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb28:
    assume $i36 == 1;
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb6;

  $bb73:
    assume $i85 == 1;
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(12, 1));
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.4, $p86);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 144);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i34 := 7;
    assume {:branchcond $i88} true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb75;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb25;

  $bb66:
    assume $i79 == 1;
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(12, 1));
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.4, $p80);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 144);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $i34 := 6;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb68;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb23;

  $bb59:
    assume $i73 == 1;
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(12, 1));
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.4, $p74);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 168);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $i34 := 5;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb61;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb23;

  $bb52:
    assume $i67 == 1;
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(12, 1));
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.4, $p68);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 192);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $i34 := 4;
    assume {:branchcond $i70} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb54;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb23;

  $bb45:
    assume $i61 == 1;
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(12, 1));
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.4, $p62);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 216);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $i34 := 3;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb47;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb23;

  $bb38:
    assume $i55 == 1;
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(12, 1));
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.4, $p56);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 240);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $i34 := 2;
    assume {:branchcond $i58} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb40;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb23;

  $bb31:
    assume $i49 == 1;
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(12, 1));
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.4, $p50);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 288);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i34 := 1;
    assume {:branchcond $i52} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb33;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb23;

  $bb19:
    assume $i30 == 1;
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(12, 1));
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.4, $p31);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 480);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $i34 := 0;
    assume {:branchcond $i33} true;
    goto $bb22, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb21;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb23;

  $bb14:
    assume $i27 == 1;
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb6;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.4, $p19);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 16);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb10;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $i23 := $add.i32(5, $sub.i32(0, 2));
    call {:si_unique_call 1013} {:cexpr "max"} boogie_si_record_i32($i23);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb13;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(4, 1));
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.4, $p8);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 1195724874);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb6;
}



const v4l2_ctrl_subscribe_event: ref;

axiom v4l2_ctrl_subscribe_event == $sub.ref(0, 351739);

procedure v4l2_ctrl_subscribe_event($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_subscribe_event($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1015} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1016} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const v4l2_event_unsubscribe: ref;

axiom v4l2_event_unsubscribe == $sub.ref(0, 352771);

procedure v4l2_event_unsubscribe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_event_unsubscribe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1017} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1018} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 353803);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const v4l2_ctrl_grab: ref;

axiom v4l2_ctrl_grab == $sub.ref(0, 354835);

procedure v4l2_ctrl_grab($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation v4l2_ctrl_grab($p0: ref, $i1: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} {:cexpr "v4l2_ctrl_grab:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    return;
}



const find_earliest_filled_buffer: ref;

axiom find_earliest_filled_buffer == $sub.ref(0, 355867);

procedure find_earliest_filled_buffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation find_earliest_filled_buffer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i15: i32;
  var $i16: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i5: i32;
  var $i6: i32;
  var $i49: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2644, 1));
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.4, $p1);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 0);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 1);
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i5, $i6 := $sub.i32(0, 1), 0;
    goto $bb4;

  $bb4:
    call $p7, $p8, $i9, $p11, $i12, $i13, $i14, $p17, $p18, $i19, $p22, $p23, $i24, $p27, $i28, $p29, $i30, $i31, $p32, $i33, $p34, $i35, $i36, $p37, $i38, $p39, $i40, $i41, $i42, $i43, $i15, $i16, $i44, $i45, $i46, $i47, $i48, $i5, $i6, $i49 := find_earliest_filled_buffer_loop_$bb4($p0, $p1, $p7, $p8, $i9, $p11, $i12, $i13, $i14, $p17, $p18, $i19, $p22, $p23, $i24, $p27, $i28, $p29, $i30, $i31, $p32, $i33, $p34, $i35, $i36, $p37, $i38, $p39, $i40, $i41, $i42, $i43, $i15, $i16, $i44, $i45, $i46, $i47, $i48, $i5, $i6, $i49);
    goto $bb4_last;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.4, $p7);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i6);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref($i9, 56)), $mul.ref(36, 1));
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.4, $p11);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 2);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i44, $i45 := $i6, $i5;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i44, 1);
    call {:si_unique_call 1020} {:cexpr "i"} boogie_si_record_i32($i46);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.4, $p1);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i48 := $sgt.i32($i47, $i46);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $i49 := $i45;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i4 := $i49;
    goto $bb3;

  $bb21:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i5, $i6 := $i45, $i46;
    goto $bb21_dummy;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i5, 0);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.4, $p17);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i6);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.4, $p22);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i5);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p18, $mul.ref($i19, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.4, $p27);
    $p29 := $add.ref($add.ref($add.ref($p23, $mul.ref($i24, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.4, $p29);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i31 := $slt.i64($i28, $i30);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i31 == 1);
    $p32 := $add.ref($add.ref($add.ref($p18, $mul.ref($i19, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.4, $p32);
    $p34 := $add.ref($add.ref($add.ref($p23, $mul.ref($i24, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.4, $p34);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i33, $i35);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i42, $i43 := $i6, $i5;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i15, $i16 := $i42, $i43;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $i44, $i45 := $i15, $i16;
    goto $bb20;

  $bb14:
    assume $i36 == 1;
    $p37 := $add.ref($add.ref($add.ref($p18, $mul.ref($i19, 56)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.4, $p37);
    $p39 := $add.ref($add.ref($add.ref($p23, $mul.ref($i24, 56)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.4, $p39);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i41 := $slt.i64($i38, $i40);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb16;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i42, $i43 := $i6, $i6;
    goto $bb19;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb12;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i15, $i16 := $i6, $i6;
    goto $bb10;

  $bb21_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7253;
}



const ldv_mutex_unlock_20: ref;

axiom ldv_mutex_unlock_20 == $sub.ref(0, 356899);

procedure ldv_mutex_unlock_20($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_20($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} ldv_mutex_unlock_v4l2_lock_of_camera_data($p0);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} mutex_unlock($p0);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_21: ref;

axiom ldv_mutex_lock_21 == $sub.ref(0, 357931);

procedure ldv_mutex_lock_21($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_21($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} ldv_mutex_lock_v4l2_lock_of_camera_data($p0);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} mutex_lock($p0);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const cpia2_set_format: ref;

axiom cpia2_set_format == $sub.ref(0, 358963);

procedure cpia2_set_format($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.7, $M.10, $CurrAddr, $M.9;



implementation cpia2_set_format($p0: ref)
{
  var $p1: ref;
  var $p5: ref;
  var vslice_dummy_var_422: i32;
  var vslice_dummy_var_423: i32;
  var vslice_dummy_var_424: i32;
  var vslice_dummy_var_425: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(792, 1));
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p1, 1);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} vslice_dummy_var_422 := cpia2_usb_stream_pause($p0);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} vslice_dummy_var_423 := cpia2_set_low_power($p0);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} vslice_dummy_var_424 := cpia2_reset_camera($p0);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(792, 1));
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p5, 0);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} cpia2_dbg_dump_registers($p0);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} vslice_dummy_var_425 := cpia2_usb_stream_resume($p0);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    return;
}



const sync: ref;

axiom sync == $sub.ref(0, 359995);

procedure sync($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.18, $M.19, $M.20, $M.21, $M.22, $M.8, $CurrAddr, assertsPassed, $M.26, $M.9, $M.7;



implementation sync($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1031} {:cexpr "sync:arg:frame_nr"} boogie_si_record_i32($i1);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.4, $p3);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i1);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref($i5, 56)), $mul.ref(36, 1));
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.4, $p7);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 2);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p11, $i12, $i13, $p16, $p17, $i18, $i19, $p20, $i21, $i22, $p23, $p24, $p26, $p27, $p28, $p30, $p31, $p33, $p34, $p35, $i36, $i37, $p38, $i39, $i40, $p41, $i42, $i43, $i44, $i45, $p46, $p47, $p48, $i49, $i50, $p51, $i52, $i53, $i54, $i55 := sync_loop_$bb4($p0, $p2, $p4, $i5, $p7, $p11, $i12, $i13, $p16, $p17, $i18, $i19, $p20, $i21, $i22, $p23, $p24, $p26, $p27, $p28, $p30, $p31, $p33, $p34, $p35, $i36, $i37, $p38, $i39, $i40, $p41, $i42, $i43, $i44, $i45, $p46, $p47, $p48, $i49, $i50, $p51, $i52, $i53, $i54, $i55);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(812, 1));
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.4, $p11);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} ldv_mutex_unlock_18($p16);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(812, 1));
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.4, $p17);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} ldv_mutex_lock_19($p47);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $p48 := get_current();
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $i49 := signal_pending($p48);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    call {:si_unique_call 1044} {:cexpr "tmp___3"} boogie_si_record_i32($i49);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(904, 1));
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $i52 := video_is_registered($p51);
    call {:si_unique_call 1046} {:cexpr "tmp___4"} boogie_si_record_i32($i52);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.4, $p7);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 2);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb37_dummy;

  $bb5:
    assume $i55 == 1;
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb34:
    assume $i53 == 1;
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 25);
    goto $bb6;

  $bb31:
    assume $i50 == 1;
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 512);
    goto $bb6;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref($i5, 56)), $mul.ref(36, 1));
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.4, $p20);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 2);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb13;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $p23 := get_current();
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p24, 0);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p26, $p23);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p27, autoremove_wake_function);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p30, $p28);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p33, $p31);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2552, 1));
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} prepare_to_wait($p34, $p2, 1);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(812, 1));
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.4, $p35);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i37 == 1);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    call $p38, $i39, $i40, $p41, $i42, $i43, $i44, $i45 := sync_loop_$bb19($p2, $p4, $i5, $p34, $p35, $p38, $i39, $i40, $p41, $i42, $i43, $i44, $i45);
    goto $bb19_last;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.4, $p38);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 2);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} $p41 := get_current();
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $i42 := signal_pending($p41);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 1038} {:cexpr "tmp___1"} boogie_si_record_i32($i42);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2552, 1));
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} finish_wait($p46, $p2);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i43 == 1;
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} schedule();
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} prepare_to_wait($p34, $p2, 1);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.4, $p35);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb29_dummy;

  $bb22:
    assume $i45 == 1;
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i40 == 1;
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb17;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref($i5, 56)), $mul.ref(36, 1));
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p14, 2);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref($i5, 56)), $mul.ref(28, 1));
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p15, 0);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb29_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref($i5, 56)), $mul.ref(36, 1));
    goto corral_source_split_7380;

  $bb37_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const ldv_mutex_unlock_18: ref;

axiom ldv_mutex_unlock_18 == $sub.ref(0, 361027);

procedure ldv_mutex_unlock_18($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} ldv_mutex_unlock_v4l2_lock_of_camera_data($p0);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} mutex_unlock($p0);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_19: ref;

axiom ldv_mutex_lock_19 == $sub.ref(0, 362059);

procedure ldv_mutex_lock_19($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_19($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} ldv_mutex_lock_v4l2_lock_of_camera_data($p0);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} mutex_lock($p0);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const strcat: ref;

axiom strcat == $sub.ref(0, 363091);

procedure strcat($p0: ref, $p1: ref) returns ($r: ref);



const usb_make_path: ref;

axiom usb_make_path == $sub.ref(0, 364123);

procedure usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} {:cexpr "usb_make_path:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(64, 1));
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.4, $p3);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.4, $p5);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(4, 1));
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} $i9 := snprintf.ref.i64.ref.ref.ref($p1, $i2, .str.50, $p6, $p8);
    call {:si_unique_call 1053} {:cexpr "actual"} boogie_si_record_i32($i9);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i2);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, $i9);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb3;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 365155);

procedure snprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);



const cpia2_usb_probe: ref;

axiom cpia2_usb_probe == $sub.ref(0, 366187);

procedure cpia2_usb_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.7, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $CurrAddr;



implementation cpia2_usb_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $p61: ref;
  var $i62: i16;
  var $i63: i32;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $p80: ref;
  var $i8: i32;
  var vslice_dummy_var_426: i32;
  var vslice_dummy_var_427: i32;
  var vslice_dummy_var_428: i32;
  var vslice_dummy_var_429: i32;
  var vslice_dummy_var_430: i32;
  var vslice_dummy_var_431: i32;
  var vslice_dummy_var_432: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $p2 := interface_to_usbdev($p0);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1744)), $mul.ref(1280, 1)), $mul.ref(17, 1));
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.4, $p4);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(8, 1));
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.4, $p9);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} vslice_dummy_var_426 := printk.ref(.str.63);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $p13 := cpia2_init_camera_struct($p0);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref(0, 2824)), $mul.ref(2496, 1));
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p16, $p2);
    $p17 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.25, $p17);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p13, $mul.ref(0, 2824)), $mul.ref(2504, 1));
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p19, $i18);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} $i20 := set_alternate($p13, 0);
    call {:si_unique_call 1058} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} $i24 := cpia2_init_camera($p13);
    call {:si_unique_call 1062} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.4, $p30);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.4, $p35);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.4, $p40);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.4, $p45);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} vslice_dummy_var_429 := printk.ref.i32.i32.i32.i32(.str.67, $i32, $i37, $i42, $i47);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.4, $p51);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.4, $p56);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.4, $p61);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} vslice_dummy_var_430 := printk.ref.i32.i32.i32(.str.68, $i53, $i58, $i63);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.4, $p67);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.4, $p72);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} vslice_dummy_var_431 := printk.ref.i32.i32(.str.69, $i69, $i74);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p13);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} usb_set_intfdata($p0, $p76);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $i77 := cpia2_register_camera($p13);
    call {:si_unique_call 1070} {:cexpr "ret"} boogie_si_record_i32($i77);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i77, 0);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb14:
    assume $i78 == 1;
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} vslice_dummy_var_432 := printk.ref.ref.i32(.str.70, .str.65, $i77);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p13);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} kfree($p80);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i8 := $i77;
    goto $bb3;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} vslice_dummy_var_428 := printk.ref.ref.i32(.str.66, .str.65, $i24);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p13);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} kfree($p27);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i8 := $i24;
    goto $bb3;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} vslice_dummy_var_427 := printk.ref.ref.i32(.str.64, .str.65, $i20);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p13);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} kfree($p23);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i8 := $i20;
    goto $bb3;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;
}



const cpia2_usb_disconnect: ref;

axiom cpia2_usb_disconnect == $sub.ref(0, 367219);

procedure cpia2_usb_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.9, $M.7, $M.8, assertsPassed, $CurrAddr;



implementation cpia2_usb_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var vslice_dummy_var_433: i32;
  var vslice_dummy_var_434: i32;
  var vslice_dummy_var_435: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} usb_set_intfdata($p0, $0.ref);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} vslice_dummy_var_433 := cpia2_usb_stream_stop($p2);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} ldv_mutex_lock_56($p4);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} cpia2_unregister_camera($p2);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 2824)), $mul.ref(0, 1));
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} v4l2_device_disconnect($p5);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} ldv_mutex_unlock_57($p6);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 2824)), $mul.ref(0, 1));
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} vslice_dummy_var_434 := v4l2_device_put($p7);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.4, $p9);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} usb_driver_release_interface(cpia2_driver, $p0);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} vslice_dummy_var_435 := printk.ref(.str.73);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 2824)), $mul.ref(2672, 1));
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.4, $p13);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p15, 2);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 2824)), $mul.ref(2672, 1));
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.4, $p16);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p18, 0);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 2824)), $mul.ref(2552, 1));
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $i20 := waitqueue_active($p19);
    call {:si_unique_call 1082} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i21 == 1;
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 2824)), $mul.ref(2552, 1));
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} __wake_up($p22, 1, 1, $0.ref);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const cpia2_usb_suspend: ref;

axiom cpia2_usb_suspend == $sub.ref(0, 368251);

procedure cpia2_usb_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.4, $M.8, $M.9, $M.7, $CurrAddr, assertsPassed;



implementation cpia2_usb_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_436: i32;
  var vslice_dummy_var_437: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p3, $i1);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $p4 := usb_get_intfdata($p0);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} ldv_mutex_lock_58($p6);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 2824)), $mul.ref(812, 1));
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.4, $p7);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} ldv_mutex_unlock_59($p12);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} vslice_dummy_var_437 := _dev_info.ref.ref($p13, .str.71);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} vslice_dummy_var_436 := cpia2_usb_stream_stop($p5);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 2824)), $mul.ref(812, 1));
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p11, 1);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const cpia2_usb_resume: ref;

axiom cpia2_usb_resume == $sub.ref(0, 369283);

procedure cpia2_usb_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.9, $M.7, $M.8, $M.10, assertsPassed, $CurrAddr;



implementation cpia2_usb_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $p16: ref;
  var $p17: ref;
  var vslice_dummy_var_438: i32;
  var vslice_dummy_var_439: i32;
  var vslice_dummy_var_440: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} ldv_mutex_lock_60($p3);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 2824)), $mul.ref(528, 1));
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} vslice_dummy_var_438 := v4l2_ctrl_handler_setup($p4);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 2824)), $mul.ref(812, 1));
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.4, $p6);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} ldv_mutex_unlock_61($p16);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} vslice_dummy_var_440 := _dev_info.ref.ref($p17, .str.72);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 2824)), $mul.ref(812, 1));
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p9, 0);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(2, 1));
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.4, $p12);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} vslice_dummy_var_439 := cpia2_usb_stream_start($p2, $i14);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const usb_get_intfdata: ref;

axiom usb_get_intfdata == $sub.ref(0, 370315);

procedure usb_get_intfdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intfdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_mutex_lock_60: ref;

axiom ldv_mutex_lock_60 == $sub.ref(0, 371347);

procedure ldv_mutex_lock_60($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_60($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} ldv_mutex_lock_v4l2_lock_of_camera_data($p0);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} mutex_lock($p0);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_61: ref;

axiom ldv_mutex_unlock_61 == $sub.ref(0, 372379);

procedure ldv_mutex_unlock_61($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_61($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} ldv_mutex_unlock_v4l2_lock_of_camera_data($p0);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} mutex_unlock($p0);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 373411);

procedure _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1103} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1104} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_lock_58: ref;

axiom ldv_mutex_lock_58 == $sub.ref(0, 374443);

procedure ldv_mutex_lock_58($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_58($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} ldv_mutex_lock_v4l2_lock_of_camera_data($p0);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} mutex_lock($p0);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_59: ref;

axiom ldv_mutex_unlock_59 == $sub.ref(0, 375475);

procedure ldv_mutex_unlock_59($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_59($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} ldv_mutex_unlock_v4l2_lock_of_camera_data($p0);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} mutex_unlock($p0);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const usb_set_intfdata: ref;

axiom usb_set_intfdata == $sub.ref(0, 376507);

procedure usb_set_intfdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_set_intfdata($p0: ref, $p1: ref)
{
  var $p2: ref;
  var vslice_dummy_var_441: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} vslice_dummy_var_441 := dev_set_drvdata($p2, $p1);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_56: ref;

axiom ldv_mutex_lock_56 == $sub.ref(0, 377539);

procedure ldv_mutex_lock_56($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_lock_56($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} ldv_mutex_lock_v4l2_lock_of_camera_data($p0);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} mutex_lock($p0);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const cpia2_unregister_camera: ref;

axiom cpia2_unregister_camera == $sub.ref(0, 378571);

procedure cpia2_unregister_camera($p0: ref);
  free requires assertsPassed;



implementation cpia2_unregister_camera($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(904, 1));
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} video_unregister_device($p1);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_device_disconnect: ref;

axiom v4l2_device_disconnect == $sub.ref(0, 379603);

procedure v4l2_device_disconnect($p0: ref);
  free requires assertsPassed;



implementation v4l2_device_disconnect($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_57: ref;

axiom ldv_mutex_unlock_57 == $sub.ref(0, 380635);

procedure ldv_mutex_unlock_57($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_mutex_unlock_57($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} ldv_mutex_unlock_v4l2_lock_of_camera_data($p0);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} mutex_unlock($p0);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const v4l2_device_put: ref;

axiom v4l2_device_put == $sub.ref(0, 381667);

procedure v4l2_device_put($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_device_put($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1115} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1116} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_driver_release_interface: ref;

axiom usb_driver_release_interface == $sub.ref(0, 382699);

procedure usb_driver_release_interface($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_driver_release_interface($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    return;
}



const video_unregister_device: ref;

axiom video_unregister_device == $sub.ref(0, 383731);

procedure video_unregister_device($p0: ref);
  free requires assertsPassed;



implementation video_unregister_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 384763);

procedure dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1117} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1118} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 385795);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.4, $p2);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 136), 1744));
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const cpia2_init_camera_struct: ref;

axiom cpia2_init_camera_struct == $sub.ref(0, 386827);

procedure cpia2_init_camera_struct($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.4, $CurrAddr;



implementation cpia2_init_camera_struct($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p8: ref;
  var vslice_dummy_var_442: i32;
  var vslice_dummy_var_443: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $p3 := kzalloc(2816, 208);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(0, 1)), $mul.ref(352, 1));
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, cpia2_camera_release);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(48, 1));
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(0, 1));
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $i14 := v4l2_device_register($p12, $p13);
    call {:si_unique_call 1124} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} __mutex_init($p21, .str.19, $p1);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(2552, 1));
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} __init_waitqueue_head($p22, .str.20, $p2);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2824)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} vslice_dummy_var_443 := printk.ref.ref(.str.18, $p18);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p4);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} kfree($p20);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} vslice_dummy_var_442 := printk.ref(.str.17);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;
}



const cpia2_init_camera: ref;

axiom cpia2_init_camera == $sub.ref(0, 387859);

procedure cpia2_init_camera($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.7, $CurrAddr;



implementation cpia2_init_camera($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i15: i32;
  var vslice_dummy_var_444: i32;
  var vslice_dummy_var_445: i32;
  var vslice_dummy_var_446: i32;
  var vslice_dummy_var_447: i32;
  var vslice_dummy_var_448: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(808, 1));
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p1, 0);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} vslice_dummy_var_444 := cpia2_set_high_power($p0);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} cpia2_get_version_info($p0);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.4, $p5);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 103);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} vslice_dummy_var_446 := cpia2_do_command($p0, 17, 1, 0);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} vslice_dummy_var_447 := cpia2_do_command($p0, 19, 1, 0);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} reset_camera_struct($p0);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} vslice_dummy_var_448 := cpia2_set_low_power($p0);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.4, $p11);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} vslice_dummy_var_445 := printk.ref.i32(.str.21, $i13);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 19);
    goto $bb3;
}



const cpia2_register_camera: ref;

axiom cpia2_register_camera == $sub.ref(0, 388891);

procedure cpia2_register_camera($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.4, $CurrAddr;



implementation cpia2_register_camera($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i8;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p49: ref;
  var $i50: i16;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p78: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $i66: i32;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var vslice_dummy_var_449: i32;
  var vslice_dummy_var_450: ref;
  var vslice_dummy_var_451: ref;
  var vslice_dummy_var_452: ref;
  var vslice_dummy_var_453: ref;
  var vslice_dummy_var_454: ref;
  var vslice_dummy_var_455: ref;
  var vslice_dummy_var_456: ref;
  var vslice_dummy_var_457: ref;
  var vslice_dummy_var_458: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} $p1 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(528, 1));
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p3, cpia2_ctrl_ops);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p4, 10025216);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, $p5, .str);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $M.30 := $store.i32($M.30, $p6, 1);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(28, 1));
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $M.31 := $store.i32($M.31, $p7, 2);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $M.32 := $store.i32($M.32, $p8, 7);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p9, 1);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, $p10, 0);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(44, 1));
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $M.35 := $store.i32($M.35, $p11, 0);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $M.36 := $store.i32($M.36, $p12, 0);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p13, $0.ref);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(64, 1));
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p14, $0.ref);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.39, $p15);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $i17 := $and.i8($i16, $sub.i8(0, 2));
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p15, $i17);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} vslice_dummy_var_449 := v4l2_ctrl_handler_init($p2, 12);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.4, $p21);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 1);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} vslice_dummy_var_450 := v4l2_ctrl_new_std($p2, cpia2_ctrl_ops, 9963776, $i24, 255, 1, 70);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} vslice_dummy_var_451 := v4l2_ctrl_new_std($p2, cpia2_ctrl_ops, 9963777, 0, 255, 1, 147);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} vslice_dummy_var_452 := v4l2_ctrl_new_std($p2, cpia2_ctrl_ops, 9963778, 0, 255, 1, 127);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} vslice_dummy_var_453 := v4l2_ctrl_new_std($p2, cpia2_ctrl_ops, 9963796, 0, 1, 1, 0);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} vslice_dummy_var_454 := v4l2_ctrl_new_std($p2, cpia2_ctrl_ops, 10291460, 0, 262144, 0, 262144);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} vslice_dummy_var_455 := v4l2_ctrl_new_std($p2, cpia2_ctrl_ops, 10291459, 1, 100, 1, 100);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $i31 := $M.40;
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, $p32, $i31);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $p33 := v4l2_ctrl_new_custom($p2, $p1, $0.ref);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(776, 1));
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p34, $p33);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.4, $p37);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 1);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.4, $p43);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 1);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.4, $p49);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 337);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(528, 1)), $mul.ref(228, 1));
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.4, $p61);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(904, 1));
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_51 := $M.4;
    cmdloc_dummy_var_52 := $M.4;
    call {:si_unique_call 1152} cmdloc_dummy_var_53 := $memcpy.i8(cmdloc_dummy_var_51, cmdloc_dummy_var_52, $p68, cpia2_template, 1576, $zext.i32.i64(8), 0 == 1);
    $M.4 := cmdloc_dummy_var_53;
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(904, 1));
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p0);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} video_set_drvdata($p69, $p70);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(904, 1)), $mul.ref(1568, 1));
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p73, $p71);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(904, 1)), $mul.ref(1304, 1));
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p75, $p2);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(904, 1)), $mul.ref(1296, 1));
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p78, $p0);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(904, 1)), $mul.ref(1376, 1));
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} set_bit(2, $p80);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} reset_camera_struct_v4l($p0);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(904, 1));
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $i82 := $M.41;
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $i83 := video_register_device($p81, 0, $i82);
    call {:si_unique_call 1157} {:cexpr "tmp"} boogie_si_record_i32($i83);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i83, 0);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i66 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $r := $i66;
    return;

  $bb14:
    assume $i84 == 1;
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} vslice_dummy_var_458 := printk.ref(.str.1);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $i66 := $sub.i32(0, 19);
    goto $bb12;

  $bb10:
    assume $i63 == 1;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(528, 1)), $mul.ref(228, 1));
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.4, $p64);
    call {:si_unique_call 1150} {:cexpr "ret"} boogie_si_record_i32($i65);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} v4l2_ctrl_handler_free($p2);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $i66 := $i65;
    goto $bb12;

  $bb7:
    assume $i52 == 1;
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $p53 := v4l2_ctrl_new_std($p2, cpia2_ctrl_ops, 9963813, 0, 1, 1, 0);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(760, 1)), $mul.ref(0, 1));
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p55, $p53);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} $p56 := v4l2_ctrl_new_std($p2, cpia2_ctrl_ops, 9963814, 0, 1, 1, 0);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(760, 1)), $mul.ref(8, 1));
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p58, $p56);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(760, 1)), $mul.ref(0, 1));
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} v4l2_ctrl_cluster(2, $p60);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i45 == 1;
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} vslice_dummy_var_457 := v4l2_ctrl_new_std_menu($p2, cpia2_ctrl_ops, 9963800, 2, 0, 0);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i39 == 1;
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} vslice_dummy_var_456 := v4l2_ctrl_new_std($p2, cpia2_ctrl_ops, 9963797, 0, 1, 1, 0);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const v4l2_ctrl_handler_init: ref;

axiom v4l2_ctrl_handler_init == $sub.ref(0, 389923);

procedure v4l2_ctrl_handler_init($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_handler_init($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1159} {:cexpr "v4l2_ctrl_handler_init:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1160} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1161} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const v4l2_ctrl_new_std: ref;

axiom v4l2_ctrl_new_std == $sub.ref(0, 390955);

procedure v4l2_ctrl_new_std($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_new_std($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32) returns ($r: ref)
{
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} {:cexpr "v4l2_ctrl_new_std:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1163} {:cexpr "v4l2_ctrl_new_std:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1164} {:cexpr "v4l2_ctrl_new_std:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1165} {:cexpr "v4l2_ctrl_new_std:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 1166} {:cexpr "v4l2_ctrl_new_std:arg:arg6"} boogie_si_record_i32($i6);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} $p7 := external_alloc();
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;
}



const v4l2_ctrl_new_custom: ref;

axiom v4l2_ctrl_new_custom == $sub.ref(0, 391987);

procedure v4l2_ctrl_new_custom($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_new_custom($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} $p3 := external_alloc();
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const v4l2_ctrl_new_std_menu: ref;

axiom v4l2_ctrl_new_std_menu == $sub.ref(0, 393019);

procedure v4l2_ctrl_new_std_menu($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_new_std_menu($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: ref)
{
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} {:cexpr "v4l2_ctrl_new_std_menu:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1170} {:cexpr "v4l2_ctrl_new_std_menu:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1171} {:cexpr "v4l2_ctrl_new_std_menu:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1172} {:cexpr "v4l2_ctrl_new_std_menu:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $p6 := external_alloc();
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const v4l2_ctrl_cluster: ref;

axiom v4l2_ctrl_cluster == $sub.ref(0, 394051);

procedure v4l2_ctrl_cluster($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_cluster($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} {:cexpr "v4l2_ctrl_cluster:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    return;
}



const video_set_drvdata: ref;

axiom video_set_drvdata == $sub.ref(0, 395083);

procedure video_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation video_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;
  var vslice_dummy_var_459: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1576)), $mul.ref(136, 1));
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} vslice_dummy_var_459 := dev_set_drvdata($p2, $p1);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    return;
}



const reset_camera_struct_v4l: ref;

axiom reset_camera_struct_v4l == $sub.ref(0, 396115);

procedure reset_camera_struct_v4l($p0: ref);
  free requires assertsPassed;
  modifies $M.4;



implementation reset_camera_struct_v4l($p0: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i8;
  var $p19: ref;
  var $i20: i32;
  var $i21: i8;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.4, $p3);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2480, 1));
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p5, $i4);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.4, $p8);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2484, 1));
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p10, $i9);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $i11 := $M.42;
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2640, 1));
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p12, $i11);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $i13 := $M.43;
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2644, 1));
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p14, $i13);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $i15 := $M.44;
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(23, 1)), $mul.ref(1, 1));
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p19, $i16);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $i20 := $M.40;
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(69, 1)), $mul.ref(2, 1));
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p24, $i21);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2488, 1));
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p25, 1195724874);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    return;
}



const video_register_device: ref;

axiom video_register_device == $sub.ref(0, 397147);

procedure video_register_device($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation video_register_device($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} {:cexpr "video_register_device:arg:type"} boogie_si_record_i32($i1);
    call {:si_unique_call 1177} {:cexpr "video_register_device:arg:nr"} boogie_si_record_i32($i2);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1576)), $mul.ref(128, 1));
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.4, $p3);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.4, $p5);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} $i7 := __video_register_device($p0, $i1, $i2, 1, $p6);
    call {:si_unique_call 1179} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const __video_register_device: ref;

axiom __video_register_device == $sub.ref(0, 398179);

procedure __video_register_device($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __video_register_device($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1180} {:cexpr "__video_register_device:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1181} {:cexpr "__video_register_device:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1182} {:cexpr "__video_register_device:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1183} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1184} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const cpia2_get_version_info: ref;

axiom cpia2_get_version_info == $sub.ref(0, 399211);

procedure cpia2_get_version_info($p0: ref);
  free requires assertsPassed;
  modifies $M.7, $M.4, $CurrAddr;



implementation cpia2_get_version_info($p0: ref)
{
  var vslice_dummy_var_460: i32;
  var vslice_dummy_var_461: i32;
  var vslice_dummy_var_462: i32;
  var vslice_dummy_var_463: i32;
  var vslice_dummy_var_464: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} vslice_dummy_var_460 := cpia2_do_command($p0, 1, 0, 0);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} vslice_dummy_var_461 := cpia2_do_command($p0, 2, 0, 0);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} vslice_dummy_var_462 := cpia2_do_command($p0, 3, 0, 0);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} vslice_dummy_var_463 := cpia2_do_command($p0, 4, 0, 0);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} vslice_dummy_var_464 := cpia2_do_command($p0, 5, 0, 0);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    return;
}



const reset_camera_struct: ref;

axiom reset_camera_struct == $sub.ref(0, 400243);

procedure reset_camera_struct($p0: ref);
  free requires assertsPassed;
  modifies $M.4;



implementation reset_camera_struct($p0: ref)
{
  var $p3: ref;
  var $p6: ref;
  var $p9: ref;
  var $p12: ref;
  var $p15: ref;
  var $p18: ref;
  var $p21: ref;
  var $p24: ref;
  var $p27: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p41: ref;
  var $p44: ref;
  var $p47: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p58: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p66: ref;
  var $p69: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(7, 1));
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p3, 0);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(23, 1)), $mul.ref(1, 1));
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p6, 0);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(25, 1)), $mul.ref(0, 1));
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p9, 5);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(25, 1)), $mul.ref(1, 1));
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p12, 2);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(25, 1)), $mul.ref(2, 1));
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p15, 20);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(25, 1)), $mul.ref(3, 1));
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p18, 0);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(3, 1));
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p21, 0);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(4, 1));
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p24, 0);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(63, 1)), $mul.ref(5, 1));
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p27, 100);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.4, $p30);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 1);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i32 == 1);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(1, 1));
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p47, 32);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.4, $p50);
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 16);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i53 == 1);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(788, 1));
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p62, 0);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(896, 1));
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p63, 1);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p66, 352);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p69, 288);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.4, $p72);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2480, 1));
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p74, $i73);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.4, $p77);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2484, 1));
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p79, $i78);
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i53 == 1;
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(788, 1));
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p54, 1);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(896, 1));
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p55, 0);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p58, 640);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p61, 480);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i32 == 1;
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.4, $p35);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 16);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i38 == 1);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(1, 1));
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p44, 32);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i38 == 1;
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(820, 1)), $mul.ref(52, 1)), $mul.ref(1, 1));
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p41, 8);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 401275);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1191} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const v4l2_device_register: ref;

axiom v4l2_device_register == $sub.ref(0, 402307);

procedure v4l2_device_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_device_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1193} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1194} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 403339);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 404371);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 405403);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.4, $M.53, $M.61, $M.1, $M.18, $M.19, $M.20, $M.21, $M.22, $M.7, $M.9, $M.52, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.129, $M.14, $M.23, $M.24, $M.41, $M.44, $M.43, $M.42, $M.40, $M.8, $M.107, $M.106, $M.105, $M.104, $M.133, $CurrAddr, $M.15, $M.26, $M.10, assertsPassed, $M.16, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39;



implementation main() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i64;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i64;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i1;
  var $i92: i32;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i1;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i1;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i1;
  var $i133: i1;
  var $i134: i1;
  var $i135: i1;
  var $i136: i1;
  var $i137: i1;
  var $i138: i1;
  var $i139: i1;
  var $i140: i1;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $i170: i32;
  var $i171: i1;
  var $p172: ref;
  var $p173: ref;
  var $i174: i32;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $i188: i32;
  var $i189: i1;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i194: i32;
  var $i195: i1;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $i200: i32;
  var $i201: i1;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $i206: i32;
  var $i207: i1;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $i212: i32;
  var $i213: i1;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $i218: i32;
  var $i219: i1;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $i224: i32;
  var $i225: i1;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $i230: i32;
  var $i231: i1;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $i236: i32;
  var $i237: i1;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $i242: i32;
  var $i243: i1;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $i248: i32;
  var $i249: i1;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $i254: i32;
  var $i255: i1;
  var $p256: ref;
  var $p257: ref;
  var $i259: i32;
  var $i260: i1;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $i265: i32;
  var $i266: i1;
  var $p267: ref;
  var $p268: ref;
  var $i269: i32;
  var $i271: i32;
  var $i272: i1;
  var $p273: ref;
  var $p274: ref;
  var $i275: i32;
  var vslice_dummy_var_465: i32;
  var vslice_dummy_var_466: i32;
  var vslice_dummy_var_467: i32;
  var vslice_dummy_var_468: i64;
  var vslice_dummy_var_469: i32;
  var vslice_dummy_var_470: i32;
  var vslice_dummy_var_471: i64;
  var vslice_dummy_var_472: i64;
  var vslice_dummy_var_473: i32;
  var vslice_dummy_var_474: i32;
  var vslice_dummy_var_475: i32;
  var vslice_dummy_var_476: i32;
  var vslice_dummy_var_477: i32;
  var vslice_dummy_var_478: i32;
  var vslice_dummy_var_479: i32;
  var vslice_dummy_var_480: i32;
  var vslice_dummy_var_481: i32;
  var vslice_dummy_var_482: i32;
  var vslice_dummy_var_483: i32;
  var vslice_dummy_var_484: i32;
  var vslice_dummy_var_485: i32;
  var vslice_dummy_var_486: i32;
  var vslice_dummy_var_487: i32;
  var vslice_dummy_var_488: i32;
  var vslice_dummy_var_489: i32;
  var vslice_dummy_var_490: i32;
  var vslice_dummy_var_491: i32;
  var vslice_dummy_var_492: i32;
  var vslice_dummy_var_493: i32;
  var vslice_dummy_var_494: i32;
  var vslice_dummy_var_495: i32;
  var vslice_dummy_var_496: i32;
  var vslice_dummy_var_497: i32;

  $bb0:
    call {:si_unique_call 1195} $initialize();
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} ldv_initialize();
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $M.45 := 0;
    call {:si_unique_call 1198} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $M.46 := 0;
    call {:si_unique_call 1199} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $M.47 := 0;
    call {:si_unique_call 1200} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1201} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $M.49 := 0;
    call {:si_unique_call 1202} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $M.50 := 0;
    call {:si_unique_call 1203} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $M.51 := 0;
    call {:si_unique_call 1204} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $p20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $p28, $p29, $i31, $i32, $p33, $p34, $i36, $i37, $p38, $i40, $i41, $i42, $i43, $p44, $p45, $i46, $p47, $i49, $i50, $p51, $p52, $i54, $i55, $p56, $p57, $i59, $i60, $p61, $i62, $i63, $i65, $i66, $p67, $i68, $i69, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $p98, $i99, $i100, $i101, $i102, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $p112, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $p143, $p144, $p145, $i147, $i148, $p149, $p150, $i152, $i153, $p154, $p155, $p156, $i158, $i159, $p160, $p161, $p162, $i164, $i165, $p166, $p167, $p168, $i170, $i171, $p172, $p173, $i174, $i176, $i177, $p178, $p179, $p180, $i182, $i183, $p184, $p185, $p186, $i188, $i189, $p190, $p191, $p192, $i194, $i195, $p196, $p197, $p198, $i200, $i201, $p202, $p203, $p204, $i206, $i207, $p208, $p209, $p210, $i212, $i213, $p214, $p215, $p216, $i218, $i219, $p220, $p221, $p222, $i224, $i225, $p226, $p227, $p228, $i230, $i231, $p232, $p233, $p234, $i236, $i237, $p238, $p239, $p240, $i242, $i243, $p244, $p245, $p246, $i248, $i249, $p250, $p251, $p252, $i254, $i255, $p256, $p257, $i259, $i260, $p261, $p262, $p263, $i265, $i266, $p267, $p268, $i269, $i271, $i272, $p273, $p274, $i275, vslice_dummy_var_465, vslice_dummy_var_466, vslice_dummy_var_467, vslice_dummy_var_468, vslice_dummy_var_469, vslice_dummy_var_470, vslice_dummy_var_471, vslice_dummy_var_472, vslice_dummy_var_473, vslice_dummy_var_474, vslice_dummy_var_475, vslice_dummy_var_476, vslice_dummy_var_477, vslice_dummy_var_478, vslice_dummy_var_479, vslice_dummy_var_480, vslice_dummy_var_481, vslice_dummy_var_482, vslice_dummy_var_483, vslice_dummy_var_484, vslice_dummy_var_485, vslice_dummy_var_486, vslice_dummy_var_487, vslice_dummy_var_488, vslice_dummy_var_489, vslice_dummy_var_490, vslice_dummy_var_491, vslice_dummy_var_492, vslice_dummy_var_493, vslice_dummy_var_494, vslice_dummy_var_495, vslice_dummy_var_496, vslice_dummy_var_497 := main_loop_$bb1($i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $p20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $p28, $p29, $i31, $i32, $p33, $p34, $i36, $i37, $p38, $i40, $i41, $i42, $i43, $p44, $p45, $i46, $p47, $i49, $i50, $p51, $p52, $i54, $i55, $p56, $p57, $i59, $i60, $p61, $i62, $i63, $i65, $i66, $p67, $i68, $i69, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $p98, $i99, $i100, $i101, $i102, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $p112, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $p143, $p144, $p145, $i147, $i148, $p149, $p150, $i152, $i153, $p154, $p155, $p156, $i158, $i159, $p160, $p161, $p162, $i164, $i165, $p166, $p167, $p168, $i170, $i171, $p172, $p173, $i174, $i176, $i177, $p178, $p179, $p180, $i182, $i183, $p184, $p185, $p186, $i188, $i189, $p190, $p191, $p192, $i194, $i195, $p196, $p197, $p198, $i200, $i201, $p202, $p203, $p204, $i206, $i207, $p208, $p209, $p210, $i212, $i213, $p214, $p215, $p216, $i218, $i219, $p220, $p221, $p222, $i224, $i225, $p226, $p227, $p228, $i230, $i231, $p232, $p233, $p234, $i236, $i237, $p238, $p239, $p240, $i242, $i243, $p244, $p245, $p246, $i248, $i249, $p250, $p251, $p252, $i254, $i255, $p256, $p257, $i259, $i260, $p261, $p262, $p263, $i265, $i266, $p267, $p268, $i269, $i271, $i272, $p273, $p274, $i275, vslice_dummy_var_465, vslice_dummy_var_466, vslice_dummy_var_467, vslice_dummy_var_468, vslice_dummy_var_469, vslice_dummy_var_470, vslice_dummy_var_471, vslice_dummy_var_472, vslice_dummy_var_473, vslice_dummy_var_474, vslice_dummy_var_475, vslice_dummy_var_476, vslice_dummy_var_477, vslice_dummy_var_478, vslice_dummy_var_479, vslice_dummy_var_480, vslice_dummy_var_481, vslice_dummy_var_482, vslice_dummy_var_483, vslice_dummy_var_484, vslice_dummy_var_485, vslice_dummy_var_486, vslice_dummy_var_487, vslice_dummy_var_488, vslice_dummy_var_489, vslice_dummy_var_490, vslice_dummy_var_491, vslice_dummy_var_492, vslice_dummy_var_493, vslice_dummy_var_494, vslice_dummy_var_495, vslice_dummy_var_496, vslice_dummy_var_497);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb69_dummy;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $i114 := $M.51;
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb132:
    assume $i115 == 1;
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1261} $i116 := __VERIFIER_nondet_int();
    call {:si_unique_call 1262} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i116);
    call {:si_unique_call 1263} {:cexpr "tmp___4"} boogie_si_record_i32($i116);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $i117 := $slt.i32($i116, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i116, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    $i119 := $slt.i32($i116, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    $i120 := $slt.i32($i116, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    $i121 := $slt.i32($i116, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i116, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    assume !($i122 == 1);
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb145:
    assume $i122 == 1;
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $i271 := $M.51;
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $i272 := $eq.i32($i271, 1);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb251:
    assume $i272 == 1;
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $p273 := $M.64;
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $p274 := $M.102;
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $i275 := $M.103;
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} vslice_dummy_var_497 := cpia2_streamon($p273, $p274, $i275);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1309} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb143:
    assume $i121 == 1;
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $i265 := $M.51;
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 1);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb248:
    assume $i266 == 1;
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $p267 := $M.64;
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $p268 := $M.100;
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $i269 := $M.101;
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} vslice_dummy_var_496 := cpia2_s_input($p267, $p268, $i269);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1307} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb141:
    assume $i120 == 1;
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $i259 := $M.51;
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i259, 1);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb245:
    assume $i260 == 1;
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $p261 := $M.64;
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $p262 := $M.99;
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $p263 := $M.96;
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} vslice_dummy_var_495 := cpia2_s_parm($p261, $p262, $p263);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1305} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb139:
    assume $i119 == 1;
    assume {:verifier.code 0} true;
    $i123 := $slt.i32($i116, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i116, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i124 == 1);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $i254 := $M.51;
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i254, 1);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb242:
    assume $i255 == 1;
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $p256 := $M.67;
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $p257 := $M.68;
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} vslice_dummy_var_494 := v4l2_ctrl_subscribe_event($p256, $p257);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1303} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb150:
    assume $i124 == 1;
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $i248 := $M.51;
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i248, 1);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb239:
    assume $i249 == 1;
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $p250 := $M.64;
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $p251 := $M.97;
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $p252 := $M.98;
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} vslice_dummy_var_493 := cpia2_enum_input($p250, $p251, $p252);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1301} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb148:
    assume $i123 == 1;
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i242 := $M.51;
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i242, 1);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb236:
    assume $i243 == 1;
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $p244 := $M.64;
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $p245 := $M.95;
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $p246 := $M.96;
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} vslice_dummy_var_492 := cpia2_g_parm($p244, $p245, $p246);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1299} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb137:
    assume $i118 == 1;
    assume {:verifier.code 0} true;
    $i125 := $slt.i32($i116, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    $i126 := $slt.i32($i116, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i116, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i127 == 1);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $i236 := $M.51;
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i236, 1);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb233:
    assume $i237 == 1;
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $p238 := $M.64;
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $p239 := $M.93;
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $p240 := $M.94;
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} vslice_dummy_var_491 := cpia2_g_jpegcomp($p238, $p239, $p240);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1297} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb156:
    assume $i127 == 1;
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $i230 := $M.51;
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i230, 1);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb230:
    assume $i231 == 1;
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $p232 := $M.64;
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $p233 := $M.91;
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $p234 := $M.92;
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} vslice_dummy_var_490 := cpia2_s_jpegcomp($p232, $p233, $p234);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1295} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb154:
    assume $i126 == 1;
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $i224 := $M.51;
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i224, 1);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb227:
    assume $i225 == 1;
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $p226 := $M.64;
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $p227 := $M.89;
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $p228 := $M.90;
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} vslice_dummy_var_489 := cpia2_enum_frameintervals($p226, $p227, $p228);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1293} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb152:
    assume $i125 == 1;
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i116, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i116, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i129 == 1);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i218 := $M.51;
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 1);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb224:
    assume $i219 == 1;
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $p220 := $M.64;
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $p221 := $M.87;
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $p222 := $M.88;
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} vslice_dummy_var_488 := cpia2_querycap($p220, $p221, $p222);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1291} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb160:
    assume $i129 == 1;
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $i212 := $M.51;
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 1);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb221:
    assume $i213 == 1;
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $p214 := $M.64;
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $p215 := $M.85;
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $p216 := $M.86;
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} vslice_dummy_var_487 := cpia2_enum_framesizes($p214, $p215, $p216);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1289} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb158:
    assume $i128 == 1;
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $i206 := $M.51;
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i206, 1);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb218:
    assume $i207 == 1;
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $p208 := $M.64;
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $p209 := $M.84;
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $p210 := $M.72;
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} vslice_dummy_var_486 := cpia2_qbuf($p208, $p209, $p210);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1287} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb135:
    assume $i117 == 1;
    assume {:verifier.code 0} true;
    $i130 := $slt.i32($i116, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    $i131 := $slt.i32($i116, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    $i132 := $slt.i32($i116, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    $i133 := $slt.i32($i116, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i133 == 1);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $i200 := $M.51;
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i200, 1);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb215:
    assume $i201 == 1;
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $p202 := $M.64;
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $p203 := $M.82;
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $p204 := $M.83;
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} vslice_dummy_var_485 := cpia2_g_input($p202, $p203, $p204);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1285} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb168:
    assume $i133 == 1;
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $i194 := $M.51;
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 1);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb212:
    assume $i195 == 1;
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $p196 := $M.64;
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $p197 := $M.81;
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $p198 := $M.70;
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} vslice_dummy_var_484 := cpia2_g_fmt_vid_cap($p196, $p197, $p198);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1283} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb166:
    assume $i132 == 1;
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $i188 := $M.51;
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i188, 1);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb209:
    assume $i189 == 1;
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $p190 := $M.64;
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $p191 := $M.79;
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $p192 := $M.80;
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} vslice_dummy_var_483 := cpia2_cropcap($p190, $p191, $p192);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1281} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb164:
    assume $i131 == 1;
    assume {:verifier.code 0} true;
    $i134 := $slt.i32($i116, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    $i135 := $slt.i32($i116, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i135 == 1);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $i182 := $M.51;
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, 1);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb206:
    assume $i183 == 1;
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $p184 := $M.64;
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $p185 := $M.78;
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $p186 := $M.70;
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} vslice_dummy_var_482 := cpia2_s_fmt_vid_cap($p184, $p185, $p186);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1279} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    goto $bb208;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb172:
    assume $i135 == 1;
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $i176 := $M.51;
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 1);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb203:
    assume $i177 == 1;
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $p178 := $M.64;
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $p179 := $M.76;
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $p180 := $M.77;
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} vslice_dummy_var_481 := cpia2_enum_fmt_vid_cap($p178, $p179, $p180);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1277} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb170:
    assume $i134 == 1;
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $i170 := $M.51;
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 1);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb200:
    assume $i171 == 1;
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $p172 := $M.64;
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $p173 := $M.74;
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $i174 := $M.75;
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} vslice_dummy_var_480 := cpia2_streamoff($p172, $p173, $i174);
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1275} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb162:
    assume $i130 == 1;
    assume {:verifier.code 0} true;
    $i136 := $slt.i32($i116, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    $i137 := $slt.i32($i116, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    $i138 := $slt.i32($i116, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i138 == 1);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $i164 := $M.51;
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 1);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb197:
    assume $i165 == 1;
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $p166 := $M.64;
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $p167 := $M.73;
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $p168 := $M.72;
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} vslice_dummy_var_479 := cpia2_dqbuf($p166, $p167, $p168);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1273} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    goto $bb199;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb178:
    assume $i138 == 1;
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $i158 := $M.51;
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 1);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb194:
    assume $i159 == 1;
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $p160 := $M.64;
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $p161 := $M.71;
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $p162 := $M.72;
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} vslice_dummy_var_478 := cpia2_querybuf($p160, $p161, $p162);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1271} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb176:
    assume $i137 == 1;
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $i152 := $M.51;
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 1);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb191:
    assume $i153 == 1;
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $p154 := $M.64;
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $p155 := $M.69;
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $p156 := $M.70;
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} vslice_dummy_var_477 := cpia2_try_fmt_vid_cap($p154, $p155, $p156);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1269} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb174:
    assume $i136 == 1;
    assume {:verifier.code 0} true;
    $i139 := $slt.i32($i116, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i139 == 1);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $i147 := $M.51;
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 1);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb188:
    assume $i148 == 1;
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $p149 := $M.67;
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $p150 := $M.68;
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} vslice_dummy_var_476 := v4l2_event_unsubscribe($p149, $p150);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1267} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb180:
    assume $i139 == 1;
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i116, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    assume !($i140 == 1);
    goto $bb147;

  $bb182:
    assume $i140 == 1;
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $i141 := $M.51;
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 1);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb184:
    assume $i142 == 1;
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $p143 := $M.64;
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $p144 := $M.65;
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $p145 := $M.66;
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} vslice_dummy_var_475 := cpia2_reqbufs($p143, $p144, $p145);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1265} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb7:
    assume $i3 == 1;
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $i106 := $M.50;
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb121:
    assume $i107 == 1;
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1256} $i108 := __VERIFIER_nondet_int();
    call {:si_unique_call 1257} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i108);
    call {:si_unique_call 1258} {:cexpr "tmp___3"} boogie_si_record_i32($i108);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb124:
    assume $i109 == 1;
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $i110 := $M.50;
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 1);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb126:
    assume $i111 == 1;
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $p112 := $M.63;
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} vslice_dummy_var_474 := cpia2_s_ctrl($p112);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1260} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb5:
    assume $i2 == 1;
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $i90 := $M.49;
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb102:
    assume $i91 == 1;
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1247} $i92 := __VERIFIER_nondet_int();
    call {:si_unique_call 1248} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i92);
    call {:si_unique_call 1249} {:cexpr "tmp___2"} boogie_si_record_i32($i92);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i92, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i92, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb107:
    assume $i94 == 1;
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $i101 := $M.49;
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 1);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb116:
    assume $i102 == 1;
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} vslice_dummy_var_473 := ldv_cpia2_template_probe_3();
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1254} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $i104 := $M.47;
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i104, 1);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $M.47 := $i105;
    call {:si_unique_call 1255} {:cexpr "ref_cnt"} boogie_si_record_i32($i105);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb105:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i92, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb109;

  $bb110:
    assume $i95 == 1;
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $i96 := $M.49;
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 2);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb112:
    assume $i97 == 1;
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $p98 := $M.62;
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} video_device_release_empty($p98);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1251} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $i99 := $M.47;
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $i100 := $sub.i32($i99, 1);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $M.47 := $i100;
    call {:si_unique_call 1252} {:cexpr "ref_cnt"} boogie_si_record_i32($i100);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb3:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i6 == 1);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $i73 := $M.48;
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb73:
    assume $i74 == 1;
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1233} $i75 := __VERIFIER_nondet_int();
    call {:si_unique_call 1234} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i75);
    call {:si_unique_call 1235} {:cexpr "tmp___1"} boogie_si_record_i32($i75);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i75, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i75, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb78:
    assume $i77 == 1;
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $i83 := $M.48;
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 1);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb91:
    assume $i84 == 1;
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} $i85 := cpia2_init();
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $M.61 := $i85;
    call {:si_unique_call 1240} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i85);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $i86 := $M.61;
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i88 := $M.61;
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 0);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb96:
    assume $i89 == 1;
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1242} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1243} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1244} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1245} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1246} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb93:
    assume $i87 == 1;
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1241} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} ldv_check_final_state();
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb76:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i75, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb80;

  $bb81:
    assume $i78 == 1;
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $i79 := $M.48;
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 2);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb83:
    assume $i80 == 1;
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $i81 := $M.47;
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 0);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb85;

  $bb86:
    assume $i82 == 1;
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} cpia2_exit();
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1237} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb14:
    assume $i6 == 1;
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $i71 := $M.46;
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb70:
    assume $i72 == 1;
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} ldv_main_exported_1();
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    goto $bb72;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb11;

  $bb16:
    assume $i7 == 1;
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $i8 := $M.45;
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb18:
    assume $i9 == 1;
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1208} $i10 := __VERIFIER_nondet_int();
    call {:si_unique_call 1209} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i10);
    call {:si_unique_call 1210} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i10, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb27:
    assume $i14 == 1;
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $i59 := $M.45;
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 1);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i65 := $M.45;
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 2);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb64:
    assume $i66 == 1;
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $p67 := $M.52;
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $i68 := $M.59;
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $i69 := $M.60;
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} vslice_dummy_var_472 := video_ioctl2($p67, $i68, $i69);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1231} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb61:
    assume $i60 == 1;
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $p61 := $M.52;
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $i62 := $M.59;
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $i63 := $M.60;
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} vslice_dummy_var_471 := video_ioctl2($p61, $i62, $i63);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1229} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb25:
    assume $i13 == 1;
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $i49 := $M.45;
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 1);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i54 := $M.45;
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 2);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb58:
    assume $i55 == 1;
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $p56 := $M.52;
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $p57 := $M.58;
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} vslice_dummy_var_470 := cpia2_v4l_poll($p56, $p57);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1227} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i50 == 1;
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $p51 := $M.52;
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $p52 := $M.58;
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} vslice_dummy_var_469 := cpia2_v4l_poll($p51, $p52);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1225} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    goto $bb57;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i12 == 1;
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $i42 := $M.45;
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 2);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb52:
    assume $i43 == 1;
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $p44 := $M.52;
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $p45 := $M.55;
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $i46 := $M.56;
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $p47 := $M.57;
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} vslice_dummy_var_468 := cpia2_v4l_read($p44, $p45, $i46, $p47);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1223} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i10, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i10, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i16 == 1);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $i36 := $M.45;
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 2);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb49:
    assume $i37 == 1;
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $p38 := $M.52;
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} vslice_dummy_var_467 := cpia2_close($p38);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1220} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $i40 := $M.47;
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i40, 1);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $M.47 := $i41;
    call {:si_unique_call 1221} {:cexpr "ref_cnt"} boogie_si_record_i32($i41);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    goto $bb51;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i16 == 1;
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i26 := $M.45;
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i31 := $M.45;
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 2);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb46:
    assume $i32 == 1;
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $p33 := $M.52;
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $p34 := $M.54;
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} vslice_dummy_var_466 := cpia2_mmap($p33, $p34);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1218} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    goto $bb48;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i27 == 1;
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $p28 := $M.52;
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $p29 := $M.54;
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} vslice_dummy_var_465 := cpia2_mmap($p28, $p29);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1216} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i10, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb29;

  $bb34:
    assume $i17 == 1;
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $i18 := $M.45;
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb36:
    assume $i19 == 1;
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $p20 := $M.52;
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} $i21 := cpia2_open($p20);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $M.53 := $i21;
    call {:si_unique_call 1212} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i21);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $i22 := $M.53;
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i23 == 1;
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1213} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $i24 := $M.47;
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 1);
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $M.47 := $i25;
    call {:si_unique_call 1214} {:cexpr "ref_cnt"} boogie_si_record_i32($i25);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb69_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1205} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1206} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1207} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 406435);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.104, $M.105, $M.106, $M.107, $M.8;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $M.104 := 1;
    call {:si_unique_call 1310} {:cexpr "ldv_mutex_cred_guard_mutex_of_signal_struct"} boogie_si_record_i32(1);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $M.105 := 1;
    call {:si_unique_call 1311} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $M.106 := 1;
    call {:si_unique_call 1312} {:cexpr "ldv_mutex_lock_of_v4l2_ctrl_handler"} boogie_si_record_i32(1);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $M.107 := 1;
    call {:si_unique_call 1313} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 1314} {:cexpr "ldv_mutex_v4l2_lock_of_camera_data"} boogie_si_record_i32(1);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_1: ref;

axiom ldv_main_exported_1 == $sub.ref(0, 407467);

procedure ldv_main_exported_1();
  free requires assertsPassed;
  modifies $M.4, $M.110, $M.46, $M.47, $M.26, $M.112, $M.9, $M.7, $M.113, $M.114, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.8, $M.10, $CurrAddr, assertsPassed;



implementation ldv_main_exported_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1315} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1316} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1317} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i4 == 1;
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $i35 := $M.46;
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 3);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i42 := $M.46;
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 2);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb46:
    assume $i43 == 1;
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $i44 := $M.115;
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb48;

  $bb49:
    assume $i45 == 1;
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $p46 := $M.108;
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} cpia2_usb_disconnect($p46);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1335} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $i47 := $M.47;
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32($i47, 1);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $M.47 := $i48;
    call {:si_unique_call 1336} {:cexpr "ref_cnt"} boogie_si_record_i32($i48);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    goto $bb51;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i36 == 1;
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $i37 := $M.115;
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb42;

  $bb43:
    assume $i38 == 1;
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $p39 := $M.108;
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} cpia2_usb_disconnect($p39);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1332} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $i40 := $M.47;
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i40, 1);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $M.47 := $i41;
    call {:si_unique_call 1333} {:cexpr "ref_cnt"} boogie_si_record_i32($i41);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $i29 := $M.46;
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 3);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb34:
    assume $i30 == 1;
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $p31 := $M.108;
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $i32 := cpia2_usb_resume($p31);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $M.114 := $i32;
    call {:si_unique_call 1329} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i32);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $i33 := $M.114;
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i34 == 1;
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1330} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $i23 := $M.46;
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28:
    assume $i24 == 1;
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $p25 := $M.108;
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $i26 := cpia2_usb_resume($p25);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $M.113 := $i26;
    call {:si_unique_call 1326} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i26);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i27 := $M.113;
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i28 == 1;
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1327} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $i16 := $M.46;
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22:
    assume $i17 == 1;
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $p18 := $M.108;
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $i19 := $M.111;
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $i20 := cpia2_usb_suspend($p18, $i19);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $M.112 := $i20;
    call {:si_unique_call 1323} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i20);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $i21 := $M.112;
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i22 == 1;
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1324} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $i7 := $M.46;
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb15:
    assume $i8 == 1;
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $p9 := $M.108;
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $p10 := $M.109;
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $i11 := cpia2_usb_probe($p9, $p10);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $M.110 := $i11;
    call {:si_unique_call 1319} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i11);
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $i12 := $M.110;
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1320} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $i14 := $M.47;
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 1);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $M.47 := $i15;
    call {:si_unique_call 1321} {:cexpr "ref_cnt"} boogie_si_record_i32($i15);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const cpia2_exit: ref;

axiom cpia2_exit == $sub.ref(0, 408499);

procedure cpia2_exit();
  free requires assertsPassed;
  modifies $M.46;



implementation cpia2_exit()
{
  var vslice_dummy_var_498: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} cpia2_usb_cleanup();
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} vslice_dummy_var_498 := schedule_timeout(500);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    return;
}



const cpia2_init: ref;

axiom cpia2_init == $sub.ref(0, 409531);

procedure cpia2_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.43, $M.40, $M.44, $M.46, $M.115;



implementation cpia2_init() returns ($r: i32)
{
  var vslice_dummy_var_499: i32;
  var vslice_dummy_var_500: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} vslice_dummy_var_499 := printk.ref.ref.ref(.str.28, .str.29, .str.30);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} check_parameters();
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} vslice_dummy_var_500 := cpia2_usb_init();
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ldv_cpia2_template_probe_3: ref;

axiom ldv_cpia2_template_probe_3 == $sub.ref(0, 410563);

procedure ldv_cpia2_template_probe_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_cpia2_template_probe_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1342} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1343} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 411595);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $i0 := $M.104;
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} ldv_error();
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.105;
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} ldv_error();
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.106;
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} ldv_error();
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.107;
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} ldv_error();
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $M.8;
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} ldv_error();
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const check_parameters: ref;

axiom check_parameters == $sub.ref(0, 412627);

procedure check_parameters();
  free requires assertsPassed;
  modifies $M.42, $M.43, $M.40, $M.44;



implementation check_parameters()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var vslice_dummy_var_501: i32;
  var vslice_dummy_var_502: i32;
  var vslice_dummy_var_503: i32;
  var vslice_dummy_var_504: i32;
  var vslice_dummy_var_505: i32;
  var vslice_dummy_var_506: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $i0 := $M.42;
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $i1 := $ule.i32($i0, 4095);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $i4 := $M.42;
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 1048576);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $i8 := $M.42;
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 4095);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $M.42 := $i9;
    call {:si_unique_call 1353} {:cexpr "buffer_size"} boogie_si_record_i32($i9);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $i10 := $M.42;
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, $sub.i32(0, 4096));
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $M.42 := $i11;
    call {:si_unique_call 1354} {:cexpr "buffer_size"} boogie_si_record_i32($i11);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $M.43;
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $i13 := $sle.i32($i12, 0);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $i16 := $M.43;
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, 32);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := $M.40;
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $i21 := $sle.i32($i20, 1);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i21 == 1);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $i22 := $M.40;
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $i23 := $sgt.i32($i22, 7);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i26 := $M.44;
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i27 == 1;
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $i28 := $M.44;
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 50);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb21;

  $bb22:
    assume $i29 == 1;
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $i30 := $M.44;
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 60);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb21;

  $bb24:
    assume $i31 == 1;
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $M.44 := 0;
    call {:si_unique_call 1361} {:cexpr "flicker_mode"} boogie_si_record_i32(0);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $i32 := $M.44;
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} vslice_dummy_var_506 := printk.ref.i32(.str.36, $i32);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.40 := 7;
    call {:si_unique_call 1359} {:cexpr "alternate"} boogie_si_record_i32(7);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $i24 := $M.40;
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} vslice_dummy_var_505 := printk.ref.i32(.str.35, $i24);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb14;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $M.43 := 32;
    call {:si_unique_call 1357} {:cexpr "num_buffers"} boogie_si_record_i32(32);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $i18 := $M.43;
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} vslice_dummy_var_504 := printk.ref.i32(.str.34, $i18);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1355} {:cexpr "num_buffers"} boogie_si_record_i32(1);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $i14 := $M.43;
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} vslice_dummy_var_503 := printk.ref.i32(.str.33, $i14);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $M.42 := 1048576;
    call {:si_unique_call 1351} {:cexpr "buffer_size"} boogie_si_record_i32(1048576);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $i6 := $M.42;
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} vslice_dummy_var_502 := printk.ref.i32(.str.32, $i6);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $M.42 := 4096;
    call {:si_unique_call 1349} {:cexpr "buffer_size"} boogie_si_record_i32(4096);
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $i2 := $M.42;
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} vslice_dummy_var_501 := printk.ref.i32(.str.31, $i2);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cpia2_usb_init: ref;

axiom cpia2_usb_init == $sub.ref(0, 413659);

procedure cpia2_usb_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.46, $M.115;



implementation cpia2_usb_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} $i0 := ldv_usb_register_driver_62(cpia2_driver, __this_module, .str.12);
    call {:si_unique_call 1364} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_usb_register_driver_62: ref;

axiom ldv_usb_register_driver_62 == $sub.ref(0, 414691);

procedure ldv_usb_register_driver_62($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.46, $M.115;



implementation ldv_usb_register_driver_62($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1366} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1367} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $M.115 := 0;
    call {:si_unique_call 1368} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 415723);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1369} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1370} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const cpia2_usb_cleanup: ref;

axiom cpia2_usb_cleanup == $sub.ref(0, 416755);

procedure cpia2_usb_cleanup();
  free requires assertsPassed;
  modifies $M.46;



implementation cpia2_usb_cleanup()
{
  var vslice_dummy_var_507: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} vslice_dummy_var_507 := schedule_timeout(500);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} ldv_usb_deregister_63(cpia2_driver);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 417787);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1373} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1374} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 1375} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_usb_deregister_63: ref;

axiom ldv_usb_deregister_63 == $sub.ref(0, 418819);

procedure ldv_usb_deregister_63($p0: ref);
  free requires assertsPassed;
  modifies $M.46;



implementation ldv_usb_deregister_63($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} usb_deregister($p0);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $M.46 := 0;
    call {:si_unique_call 1377} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 419851);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 420883);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1378} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 1} true;
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 421915);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 422947);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 423979);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 425011);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 426043);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 427075);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 428107);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 429139);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 430171);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 431203);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 432235);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 433267);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 434299);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1379} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1380} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1381} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1382} __VERIFIER_assume($i4);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 435331);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 436363);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 437395);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 438427);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1383} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1384} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1385} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1386} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1387} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1388} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1389} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1390} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1391} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1392} __VERIFIER_assume($i7);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1393} __VERIFIER_assume($i11);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 439459);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 440491);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1394} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1395} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1396} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1397} __VERIFIER_assume($i4);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 441523);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 442555);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 443587);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 444619);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 445651);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1398} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1399} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1400} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1401} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1402} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1403} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1404} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1405} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1406} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1407} __VERIFIER_assume($i7);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1408} __VERIFIER_assume($i11);
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 446683);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 447715);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 448747);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 449779);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 450811);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 451843);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 452875);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 453907);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 454939);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1409} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1410} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1411} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 455971);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1412} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1413} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1414} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 457003);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1415} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1416} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 458035);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 459067);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1417} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1418} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 460099);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 461131);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 462163);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 463195);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.4, $M.129, $M.14, $M.23, $M.24, $M.41, $M.44, $M.43, $M.42, $M.40, $M.8, $M.107, $M.106, $M.105, $M.104, $M.133;



implementation __SMACK_static_init()
{

  $bb0:
    $M.45 := 0;
    call {:si_unique_call 1419} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1420} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 1421} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1422} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1423} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 1424} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 1425} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.52 := $0.ref;
    $M.53 := 0;
    call {:si_unique_call 1426} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.54 := $0.ref;
    $M.55 := $0.ref;
    $M.56 := 0;
    call {:si_unique_call 1427} {:cexpr "ldvarg4"} boogie_si_record_i64(0);
    $M.57 := $0.ref;
    $M.58 := $0.ref;
    $M.59 := 0;
    call {:si_unique_call 1428} {:cexpr "ldvarg1"} boogie_si_record_i32(0);
    $M.60 := 0;
    call {:si_unique_call 1429} {:cexpr "ldvarg0"} boogie_si_record_i64(0);
    $M.61 := 0;
    call {:si_unique_call 1430} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.62 := $0.ref;
    $M.63 := $0.ref;
    $M.64 := $0.ref;
    $M.65 := $0.ref;
    $M.66 := $0.ref;
    $M.67 := $0.ref;
    $M.68 := $0.ref;
    $M.69 := $0.ref;
    $M.70 := $0.ref;
    $M.71 := $0.ref;
    $M.72 := $0.ref;
    $M.73 := $0.ref;
    $M.74 := $0.ref;
    $M.75 := 0;
    call {:si_unique_call 1431} {:cexpr "ldvarg38"} boogie_si_record_i32(0);
    $M.76 := $0.ref;
    $M.77 := $0.ref;
    $M.78 := $0.ref;
    $M.79 := $0.ref;
    $M.80 := $0.ref;
    $M.81 := $0.ref;
    $M.82 := $0.ref;
    $M.83 := $0.ref;
    $M.84 := $0.ref;
    $M.85 := $0.ref;
    $M.86 := $0.ref;
    $M.87 := $0.ref;
    $M.88 := $0.ref;
    $M.89 := $0.ref;
    $M.90 := $0.ref;
    $M.91 := $0.ref;
    $M.92 := $0.ref;
    $M.93 := $0.ref;
    $M.94 := $0.ref;
    $M.95 := $0.ref;
    $M.96 := $0.ref;
    $M.97 := $0.ref;
    $M.98 := $0.ref;
    $M.99 := $0.ref;
    $M.100 := $0.ref;
    $M.101 := 0;
    call {:si_unique_call 1432} {:cexpr "ldvarg13"} boogie_si_record_i32(0);
    $M.102 := $0.ref;
    $M.103 := 0;
    call {:si_unique_call 1433} {:cexpr "ldvarg11"} boogie_si_record_i32(0);
    $M.108 := $0.ref;
    $M.109 := $0.ref;
    $M.110 := 0;
    call {:si_unique_call 1434} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.111 := 0;
    $M.112 := 0;
    call {:si_unique_call 1435} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.113 := 0;
    call {:si_unique_call 1436} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.114 := 0;
    call {:si_unique_call 1437} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.115 := 0;
    call {:si_unique_call 1438} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.4 := $store.i16($M.4, cpia2_id_table, 3);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(2, 1)), 1363);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(4, 1)), 256);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(2, 1)), 1363);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(4, 1)), 320);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(2, 1)), 1363);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(4, 1)), 337);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(0, 1)), 0);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(2, 1)), 0);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(4, 1)), 0);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref(cpia2_id_table, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.129 := $store.ref($M.129, cpia2_driver, .str.12);
    $M.129 := $store.ref($M.129, $add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), cpia2_usb_probe);
    $M.129 := $store.ref($M.129, $add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), cpia2_usb_disconnect);
    $M.129 := $store.ref($M.129, $add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), cpia2_usb_suspend);
    $M.129 := $store.ref($M.129, $add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), cpia2_usb_resume);
    $M.129 := $store.ref($M.129, $add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), cpia2_usb_resume);
    $M.129 := $store.ref($M.129, $add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), cpia2_id_table);
    $M.129 := $store.i32($M.129, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.129 := $store.i32($M.129, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.129 := $store.i32($M.129, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.129 := $store.i32($M.129, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.129 := $store.i64($M.129, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.129 := $store.i8($M.129, $add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.129 := $store.i32($M.129, $add.ref($add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(cpia2_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 0);
    $M.14 := $store.i32($M.14, frame_sizes, 0);
    $M.14 := $store.i32($M.14, $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(1, 4)), 0);
    $M.14 := $store.i32($M.14, $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(2, 4)), 128);
    $M.14 := $store.i32($M.14, $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(3, 4)), 384);
    $M.14 := $store.i32($M.14, $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(4, 4)), 640);
    $M.14 := $store.i32($M.14, $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(5, 4)), 768);
    $M.14 := $store.i32($M.14, $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(6, 4)), 896);
    $M.14 := $store.i32($M.14, $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(7, 4)), 1023);
    $M.4 := $store.i32($M.4, framerate_controls, 1);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref(0, 12)), $mul.ref(4, 1)), $mul.ref(0, 1)), 4);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref(0, 12)), $mul.ref(4, 1)), $mul.ref(4, 1)), 25);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref(1, 12)), $mul.ref(0, 1)), 2);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref(1, 12)), $mul.ref(4, 1)), $mul.ref(0, 1)), 2);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref(1, 12)), $mul.ref(4, 1)), $mul.ref(4, 1)), 15);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref(2, 12)), $mul.ref(0, 1)), 4);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref(2, 12)), $mul.ref(4, 1)), $mul.ref(0, 1)), 2);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref(2, 12)), $mul.ref(4, 1)), $mul.ref(4, 1)), 25);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref(3, 12)), $mul.ref(0, 1)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref(3, 12)), $mul.ref(4, 1)), $mul.ref(0, 1)), 1);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref(3, 12)), $mul.ref(4, 1)), $mul.ref(4, 1)), 15);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref(4, 12)), $mul.ref(0, 1)), 16);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref(4, 12)), $mul.ref(4, 1)), $mul.ref(0, 1)), 1);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref(4, 12)), $mul.ref(4, 1)), $mul.ref(4, 1)), 25);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref(5, 12)), $mul.ref(0, 1)), 32);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref(5, 12)), $mul.ref(4, 1)), $mul.ref(0, 1)), 1);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref(5, 12)), $mul.ref(4, 1)), $mul.ref(4, 1)), 30);
    $M.23 := $store.i32($M.23, cpia2_framesizes, 640);
    $M.24 := $store.i32($M.24, $add.ref($add.ref($add.ref(cpia2_framesizes, $mul.ref(0, 64)), $mul.ref(0, 8)), $mul.ref(4, 1)), 480);
    $M.23 := $store.i32($M.23, $add.ref($add.ref($add.ref(cpia2_framesizes, $mul.ref(0, 64)), $mul.ref(1, 8)), $mul.ref(0, 1)), 352);
    $M.24 := $store.i32($M.24, $add.ref($add.ref($add.ref(cpia2_framesizes, $mul.ref(0, 64)), $mul.ref(1, 8)), $mul.ref(4, 1)), 288);
    $M.23 := $store.i32($M.23, $add.ref($add.ref($add.ref(cpia2_framesizes, $mul.ref(0, 64)), $mul.ref(2, 8)), $mul.ref(0, 1)), 320);
    $M.24 := $store.i32($M.24, $add.ref($add.ref($add.ref(cpia2_framesizes, $mul.ref(0, 64)), $mul.ref(2, 8)), $mul.ref(4, 1)), 240);
    $M.23 := $store.i32($M.23, $add.ref($add.ref($add.ref(cpia2_framesizes, $mul.ref(0, 64)), $mul.ref(3, 8)), $mul.ref(0, 1)), 288);
    $M.24 := $store.i32($M.24, $add.ref($add.ref($add.ref(cpia2_framesizes, $mul.ref(0, 64)), $mul.ref(3, 8)), $mul.ref(4, 1)), 216);
    $M.23 := $store.i32($M.23, $add.ref($add.ref($add.ref(cpia2_framesizes, $mul.ref(0, 64)), $mul.ref(4, 8)), $mul.ref(0, 1)), 256);
    $M.24 := $store.i32($M.24, $add.ref($add.ref($add.ref(cpia2_framesizes, $mul.ref(0, 64)), $mul.ref(4, 8)), $mul.ref(4, 1)), 192);
    $M.23 := $store.i32($M.23, $add.ref($add.ref($add.ref(cpia2_framesizes, $mul.ref(0, 64)), $mul.ref(5, 8)), $mul.ref(0, 1)), 224);
    $M.24 := $store.i32($M.24, $add.ref($add.ref($add.ref(cpia2_framesizes, $mul.ref(0, 64)), $mul.ref(5, 8)), $mul.ref(4, 1)), 168);
    $M.23 := $store.i32($M.23, $add.ref($add.ref($add.ref(cpia2_framesizes, $mul.ref(0, 64)), $mul.ref(6, 8)), $mul.ref(0, 1)), 192);
    $M.24 := $store.i32($M.24, $add.ref($add.ref($add.ref(cpia2_framesizes, $mul.ref(0, 64)), $mul.ref(6, 8)), $mul.ref(4, 1)), 144);
    $M.23 := $store.i32($M.23, $add.ref($add.ref($add.ref(cpia2_framesizes, $mul.ref(0, 64)), $mul.ref(7, 8)), $mul.ref(0, 1)), 176);
    $M.24 := $store.i32($M.24, $add.ref($add.ref($add.ref(cpia2_framesizes, $mul.ref(0, 64)), $mul.ref(7, 8)), $mul.ref(4, 1)), 144);
    $M.41 := $sub.i32(0, 1);
    call {:si_unique_call 1439} {:cexpr "video_nr"} boogie_si_record_i32($sub.i32(0, 1));
    $M.44 := 0;
    call {:si_unique_call 1440} {:cexpr "flicker_mode"} boogie_si_record_i32(0);
    $M.43 := 3;
    call {:si_unique_call 1441} {:cexpr "num_buffers"} boogie_si_record_i32(3);
    $M.42 := 69632;
    call {:si_unique_call 1442} {:cexpr "buffer_size"} boogie_si_record_i32(69632);
    $M.4 := $store.ref($M.4, cpia2_ioctl_ops, cpia2_querycap);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(8, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(16, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(24, 1)), cpia2_enum_fmt_vid_cap);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(32, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(40, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(48, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(56, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(64, 1)), cpia2_g_fmt_vid_cap);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(72, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(80, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(88, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(96, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(104, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(112, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(120, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(128, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(136, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(144, 1)), cpia2_s_fmt_vid_cap);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(152, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(160, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(168, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(176, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(184, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(192, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(200, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(208, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(216, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(224, 1)), cpia2_try_fmt_vid_cap);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(232, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(240, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(248, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(256, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(264, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(272, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(280, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(288, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(296, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(304, 1)), cpia2_reqbufs);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(312, 1)), cpia2_querybuf);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(320, 1)), cpia2_qbuf);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(328, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(336, 1)), cpia2_dqbuf);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(344, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(352, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(360, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(368, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(376, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(384, 1)), cpia2_streamon);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(392, 1)), cpia2_streamoff);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(400, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(408, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(416, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(424, 1)), cpia2_enum_input);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(432, 1)), cpia2_g_input);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(440, 1)), cpia2_s_input);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(448, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(456, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(464, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(472, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(480, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(488, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(496, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(504, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(512, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(520, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(528, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(536, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(544, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(552, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(560, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(568, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(576, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(584, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(592, 1)), cpia2_cropcap);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(600, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(608, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(616, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(624, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(632, 1)), cpia2_g_jpegcomp);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(640, 1)), cpia2_s_jpegcomp);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(648, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(656, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(664, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(672, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(680, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(688, 1)), cpia2_g_parm);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(696, 1)), cpia2_s_parm);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(704, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(712, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(720, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(728, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(736, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(744, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(752, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(760, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(768, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(776, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(784, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(792, 1)), cpia2_enum_framesizes);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(800, 1)), cpia2_enum_frameintervals);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(808, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(816, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(824, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(832, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(840, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(848, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(856, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(864, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(872, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(880, 1)), v4l2_ctrl_subscribe_event);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(888, 1)), v4l2_event_unsubscribe);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_ioctl_ops, $mul.ref(0, 904)), $mul.ref(896, 1)), $0.ref);
    $M.4 := $store.ref($M.4, cpia2_fops, __this_module);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_fops, $mul.ref(0, 88)), $mul.ref(8, 1)), cpia2_v4l_read);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_fops, $mul.ref(0, 88)), $mul.ref(16, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_fops, $mul.ref(0, 88)), $mul.ref(24, 1)), cpia2_v4l_poll);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_fops, $mul.ref(0, 88)), $mul.ref(32, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_fops, $mul.ref(0, 88)), $mul.ref(40, 1)), video_ioctl2);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_fops, $mul.ref(0, 88)), $mul.ref(48, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_fops, $mul.ref(0, 88)), $mul.ref(56, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_fops, $mul.ref(0, 88)), $mul.ref(64, 1)), cpia2_mmap);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_fops, $mul.ref(0, 88)), $mul.ref(72, 1)), cpia2_open);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_fops, $mul.ref(0, 88)), $mul.ref(80, 1)), cpia2_close);
    $M.4 := $store.ref($M.4, cpia2_template, $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(32, 1)), $0.ref);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(44, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(48, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(60, 1)), 0);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(62, 1)), 0);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(64, 1)), 0);
    $M.4 := $store.i16($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(66, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(96, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(100, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(128, 1)), cpia2_fops);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(8, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(60, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(80, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(88, 1)), $0.ref);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(96, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(104, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(112, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(24, 1)), $0.ref);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(264, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(272, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(280, 1)), $0.ref);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(4, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(5, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(6, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(7, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(8, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(88, 1)), $mul.ref(8, 1)), $0.ref);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(0, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(200, 1)), $0.ref);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(208, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(209, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(16, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(24, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(32, 1)), $0.ref);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(40, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(48, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(52, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(56, 1)), $0.ref);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(344, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(24, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(524, 1)), $mul.ref(0, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(528, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(529, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(532, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(536, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(540, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(544, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(552, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(560, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(568, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(576, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(584, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(288, 1)), $mul.ref(592, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(888, 1)), $0.ref);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(896, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(904, 1)), $0.ref);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(912, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(920, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(928, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(928, 1)), $mul.ref(8, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(944, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(952, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(952, 1)), $mul.ref(8, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(968, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(976, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(984, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(988, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(1064, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(1064, 1)), $mul.ref(8, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(1080, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(1080, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(1080, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(1080, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(1112, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(1120, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(1128, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(136, 1)), $mul.ref(1136, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1280, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1288, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1296, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1304, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1312, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1320, 1)), $0.ref);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(0, 1)), 67);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(1, 1)), 80);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(2, 1)), 105);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(3, 1)), 65);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(4, 1)), 50);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(5, 1)), 32);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(6, 1)), 67);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(7, 1)), 97);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(8, 1)), 109);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(9, 1)), 101);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(10, 1)), 114);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(11, 1)), 97);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(12, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(13, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(14, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(15, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(16, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(17, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(18, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(19, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(20, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(21, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(22, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(23, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(24, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(25, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(26, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(27, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(28, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(29, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(30, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1328, 1)), $mul.ref(31, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1360, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1364, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1368, 1)), 0);
    $M.4 := $store.i16($M.4, $add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1372, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1376, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1384, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.4 := $store.i32($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1392, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1464, 1)), $mul.ref(0, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1464, 1)), $mul.ref(8, 1)), $0.ref);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1480, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1488, 1)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1496, 1)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1504, 1)), video_device_release_empty);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1512, 1)), cpia2_ioctl_ops);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1520, 1)), $mul.ref(0, 8)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1520, 1)), $mul.ref(1, 8)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1520, 1)), $mul.ref(2, 8)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1544, 1)), $mul.ref(0, 8)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1544, 1)), $mul.ref(1, 8)), 0);
    $M.4 := $store.i64($M.4, $add.ref($add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1544, 1)), $mul.ref(2, 8)), 0);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(cpia2_template, $mul.ref(0, 1576)), $mul.ref(1568, 1)), $0.ref);
    $M.40 := 7;
    call {:si_unique_call 1443} {:cexpr "alternate"} boogie_si_record_i32(7);
    $M.8 := 0;
    call {:si_unique_call 1444} {:cexpr "ldv_mutex_v4l2_lock_of_camera_data"} boogie_si_record_i32(0);
    $M.107 := 0;
    call {:si_unique_call 1445} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(0);
    $M.106 := 0;
    call {:si_unique_call 1446} {:cexpr "ldv_mutex_lock_of_v4l2_ctrl_handler"} boogie_si_record_i32(0);
    $M.105 := 0;
    call {:si_unique_call 1447} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(0);
    $M.104 := 0;
    call {:si_unique_call 1448} {:cexpr "ldv_mutex_cred_guard_mutex_of_signal_struct"} boogie_si_record_i32(0);
    $M.4 := $store.i8($M.4, .str.53, 67);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.53, $mul.ref(0, 7)), $mul.ref(1, 1)), 97);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.53, $mul.ref(0, 7)), $mul.ref(2, 1)), 109);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.53, $mul.ref(0, 7)), $mul.ref(3, 1)), 101);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.53, $mul.ref(0, 7)), $mul.ref(4, 1)), 114);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.53, $mul.ref(0, 7)), $mul.ref(5, 1)), 97);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.53, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.4 := $store.i8($M.4, .str.37, 77);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.37, $mul.ref(0, 6)), $mul.ref(1, 1)), 74);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.37, $mul.ref(0, 6)), $mul.ref(2, 1)), 80);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.37, $mul.ref(0, 6)), $mul.ref(3, 1)), 69);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.37, $mul.ref(0, 6)), $mul.ref(4, 1)), 71);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.37, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.4 := $store.i8($M.4, .str.38, 74);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.38, $mul.ref(0, 5)), $mul.ref(1, 1)), 80);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.38, $mul.ref(0, 5)), $mul.ref(2, 1)), 69);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.38, $mul.ref(0, 5)), $mul.ref(3, 1)), 71);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.38, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.4 := $store.i8($M.4, .str.12, 99);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.12, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.12, $mul.ref(0, 6)), $mul.ref(2, 1)), 105);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.12, $mul.ref(0, 6)), $mul.ref(3, 1)), 97);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.12, $mul.ref(0, 6)), $mul.ref(4, 1)), 50);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.12, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.4 := $store.i8($M.4, .str.39, 81);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.39, $mul.ref(0, 15)), $mul.ref(1, 1)), 88);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.39, $mul.ref(0, 15)), $mul.ref(2, 1)), 53);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.39, $mul.ref(0, 15)), $mul.ref(3, 1)), 32);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.39, $mul.ref(0, 15)), $mul.ref(4, 1)), 77);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.39, $mul.ref(0, 15)), $mul.ref(5, 1)), 105);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.39, $mul.ref(0, 15)), $mul.ref(6, 1)), 99);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.39, $mul.ref(0, 15)), $mul.ref(7, 1)), 114);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.39, $mul.ref(0, 15)), $mul.ref(8, 1)), 111);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.39, $mul.ref(0, 15)), $mul.ref(9, 1)), 115);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.39, $mul.ref(0, 15)), $mul.ref(10, 1)), 99);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.39, $mul.ref(0, 15)), $mul.ref(11, 1)), 111);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.39, $mul.ref(0, 15)), $mul.ref(12, 1)), 112);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.39, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.39, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.4 := $store.i8($M.4, .str.40, 67);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.40, $mul.ref(0, 13)), $mul.ref(1, 1)), 80);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.40, $mul.ref(0, 13)), $mul.ref(2, 1)), 105);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.40, $mul.ref(0, 13)), $mul.ref(3, 1)), 65);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.40, $mul.ref(0, 13)), $mul.ref(4, 1)), 50);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.40, $mul.ref(0, 13)), $mul.ref(5, 1)), 32);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.40, $mul.ref(0, 13)), $mul.ref(6, 1)), 67);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.40, $mul.ref(0, 13)), $mul.ref(7, 1)), 97);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.40, $mul.ref(0, 13)), $mul.ref(8, 1)), 109);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.40, $mul.ref(0, 13)), $mul.ref(9, 1)), 101);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.40, $mul.ref(0, 13)), $mul.ref(10, 1)), 114);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.40, $mul.ref(0, 13)), $mul.ref(11, 1)), 97);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.40, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.4 := $store.i8($M.4, .str.41, 32);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.41, $mul.ref(0, 7)), $mul.ref(1, 1)), 40);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.41, $mul.ref(0, 7)), $mul.ref(2, 1)), 54);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.41, $mul.ref(0, 7)), $mul.ref(3, 1)), 55);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.41, $mul.ref(0, 7)), $mul.ref(4, 1)), 50);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.41, $mul.ref(0, 7)), $mul.ref(5, 1)), 47);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.41, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.4 := $store.i8($M.4, .str.42, 32);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.42, $mul.ref(0, 7)), $mul.ref(1, 1)), 40);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.42, $mul.ref(0, 7)), $mul.ref(2, 1)), 54);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.42, $mul.ref(0, 7)), $mul.ref(3, 1)), 55);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.42, $mul.ref(0, 7)), $mul.ref(4, 1)), 54);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.42, $mul.ref(0, 7)), $mul.ref(5, 1)), 47);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.42, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.4 := $store.i8($M.4, .str.43, 32);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.43, $mul.ref(0, 7)), $mul.ref(1, 1)), 40);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.43, $mul.ref(0, 7)), $mul.ref(2, 1)), 88);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.43, $mul.ref(0, 7)), $mul.ref(3, 1)), 88);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.43, $mul.ref(0, 7)), $mul.ref(4, 1)), 88);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.43, $mul.ref(0, 7)), $mul.ref(5, 1)), 47);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.43, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.4 := $store.i8($M.4, .str.44, 52);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.44, $mul.ref(0, 5)), $mul.ref(1, 1)), 48);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.44, $mul.ref(0, 5)), $mul.ref(2, 1)), 52);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.44, $mul.ref(0, 5)), $mul.ref(3, 1)), 41);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.44, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.4 := $store.i8($M.4, .str.45, 52);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.45, $mul.ref(0, 5)), $mul.ref(1, 1)), 48);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.45, $mul.ref(0, 5)), $mul.ref(2, 1)), 55);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.45, $mul.ref(0, 5)), $mul.ref(3, 1)), 41);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.45, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.4 := $store.i8($M.4, .str.46, 52);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.46, $mul.ref(0, 5)), $mul.ref(1, 1)), 48);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.46, $mul.ref(0, 5)), $mul.ref(2, 1)), 57);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.46, $mul.ref(0, 5)), $mul.ref(3, 1)), 41);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.46, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.4 := $store.i8($M.4, .str.47, 52);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.47, $mul.ref(0, 5)), $mul.ref(1, 1)), 49);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.47, $mul.ref(0, 5)), $mul.ref(2, 1)), 48);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.47, $mul.ref(0, 5)), $mul.ref(3, 1)), 41);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.47, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.4 := $store.i8($M.4, .str.48, 53);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.48, $mul.ref(0, 5)), $mul.ref(1, 1)), 48);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.48, $mul.ref(0, 5)), $mul.ref(2, 1)), 48);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.48, $mul.ref(0, 5)), $mul.ref(3, 1)), 41);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.48, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.4 := $store.i8($M.4, .str.49, 88);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.49, $mul.ref(0, 5)), $mul.ref(1, 1)), 88);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.49, $mul.ref(0, 5)), $mul.ref(2, 1)), 88);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.49, $mul.ref(0, 5)), $mul.ref(3, 1)), 41);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.49, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.133 := $store.i8($M.133, .str.50, 117);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.50, $mul.ref(0, 10)), $mul.ref(1, 1)), 115);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.50, $mul.ref(0, 10)), $mul.ref(2, 1)), 98);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.50, $mul.ref(0, 10)), $mul.ref(3, 1)), 45);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.50, $mul.ref(0, 10)), $mul.ref(4, 1)), 37);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.50, $mul.ref(0, 10)), $mul.ref(5, 1)), 115);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.50, $mul.ref(0, 10)), $mul.ref(6, 1)), 45);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.50, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.50, $mul.ref(0, 10)), $mul.ref(8, 1)), 115);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(.str.50, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    call {:si_unique_call 1449} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 464227);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 465259);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 466291);

procedure devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 467323);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.4, $M.8, $M.9, $M.7, $CurrAddr, assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(cpia2_usb_suspend, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1450} $i2 := cpia2_usb_suspend($p1, arg1);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    $r := $i2;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.4, $M.129, $M.14, $M.23, $M.24, $M.41, $M.44, $M.43, $M.42, $M.40, $M.8, $M.107, $M.106, $M.105, $M.104, $M.133, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1451} __SMACK_static_init();
    call {:si_unique_call 1452} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.4, $M.53, $M.61, $M.1, $M.18, $M.19, $M.20, $M.21, $M.22, $M.7, $M.9, $M.52, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.129, $M.14, $M.23, $M.24, $M.41, $M.44, $M.43, $M.42, $M.40, $M.8, $M.107, $M.106, $M.105, $M.104, $M.133, $CurrAddr, $M.15, $M.26, $M.10, $M.16, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation rvfree_loop_$bb8(in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i64, in_$i14: i1, in_$i8: i64, in_$i9: i64) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i64, out_$i14: i1, out_$i8: i64, out_$i9: i64)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i8, out_$i9 := in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$i8, in_$i9;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1503;

  $bb10:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$i9 := out_$i12, out_$i13;
    goto $bb10_dummy;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    out_$i14 := $sgt.i64(out_$i13, 0);
    goto corral_source_split_1510;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    out_$i13 := $sub.i64(out_$i9, 4096);
    call {:si_unique_call 211} {:cexpr "size"} boogie_si_record_i64(out_$i13);
    goto corral_source_split_1509;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i64(out_$i8, 4096);
    call {:si_unique_call 210} {:cexpr "adr"} boogie_si_record_i64(out_$i12);
    goto corral_source_split_1508;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} ClearPageReserved(out_$p11);
    goto corral_source_split_1507;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} out_$p11 := vmalloc_to_page(out_$p10);
    goto corral_source_split_1506;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p10 := $i2p.i64.ref(out_$i8);
    goto corral_source_split_1505;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i8, out_$i9 := rvfree_loop_$bb8(out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i8, out_$i9);
    return;

  exit:
    return;
}



procedure rvfree_loop_$bb8(in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i64, in_$i14: i1, in_$i8: i64, in_$i9: i64) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i64, out_$i14: i1, out_$i8: i64, out_$i9: i64);



implementation {:SIextraRecBound 2} free_sbufs_loop_$bb1(in_$p0: ref, in_$i2: i64, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i64, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p22: ref, in_$i23: i64, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i30: i64, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i1: i32) returns (out_$i2: i64, out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i64, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p22: ref, out_$i23: i64, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i30: i64, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i1: i32)
{

  entry:
    out_$i2, out_$p5, out_$p6, out_$i7, out_$i8, out_$i9, out_$p12, out_$p13, out_$i14, out_$p17, out_$p18, out_$i19, out_$p22, out_$i23, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p33, out_$p34, out_$i35, out_$p38, out_$i39, out_$i40, out_$i1 := in_$i2, in_$p5, in_$p6, in_$i7, in_$i8, in_$i9, in_$p12, in_$p13, in_$i14, in_$p17, in_$p18, in_$i19, in_$p22, in_$i23, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$p33, in_$p34, in_$i35, in_$p38, in_$i39, in_$i40, in_$i1;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1704;

  $bb9:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i1 := out_$i39;
    goto $bb9_dummy;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    out_$i40 := $sle.i32(out_$i39, 1);
    goto corral_source_split_1741;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i1, 1);
    call {:si_unique_call 237} {:cexpr "i"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_1740;

  $bb7:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p38, $0.ref);
    goto corral_source_split_1738;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref(out_$i35, 16)), $mul.ref(0, 1));
    goto corral_source_split_1737;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i1);
    goto corral_source_split_1736;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} kfree(out_$p34);
    goto corral_source_split_1735;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.4, out_$p33);
    goto corral_source_split_1734;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref(out_$i30, 16)), $mul.ref(0, 1));
    goto corral_source_split_1733;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i1);
    goto corral_source_split_1732;

  $bb6:
    assume out_$i29 == 1;
    goto corral_source_split_1731;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, 0);
    goto corral_source_split_1729;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_1728;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.4, out_$p26);
    goto corral_source_split_1727;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref(out_$i23, 16)), $mul.ref(0, 1));
    goto corral_source_split_1726;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i1);
    goto corral_source_split_1725;

  $bb4:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p22, $0.ref);
    goto corral_source_split_1723;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref(out_$i19, 16)), $mul.ref(8, 1));
    goto corral_source_split_1722;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i1);
    goto corral_source_split_1721;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} usb_free_urb(out_$p18);
    goto corral_source_split_1720;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.4, out_$p17);
    goto corral_source_split_1719;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref(out_$i14, 16)), $mul.ref(8, 1));
    goto corral_source_split_1718;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i1);
    goto corral_source_split_1717;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} usb_kill_urb(out_$p13);
    goto corral_source_split_1716;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.4, out_$p12);
    goto corral_source_split_1715;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref(out_$i9, 16)), $mul.ref(8, 1));
    goto corral_source_split_1714;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i1);
    goto corral_source_split_1713;

  $bb3:
    assume out_$i8 == 1;
    goto corral_source_split_1712;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_1710;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64(out_$p6);
    goto corral_source_split_1709;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.4, out_$p5);
    goto corral_source_split_1708;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref(out_$i2, 16)), $mul.ref(8, 1));
    goto corral_source_split_1707;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i2 := $sext.i32.i64(out_$i1);
    goto corral_source_split_1706;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i2, out_$p5, out_$p6, out_$i7, out_$i8, out_$i9, out_$p12, out_$p13, out_$i14, out_$p17, out_$p18, out_$i19, out_$p22, out_$i23, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p33, out_$p34, out_$i35, out_$p38, out_$i39, out_$i40, out_$i1 := free_sbufs_loop_$bb1(in_$p0, out_$i2, out_$p5, out_$p6, out_$i7, out_$i8, out_$i9, out_$p12, out_$p13, out_$i14, out_$p17, out_$p18, out_$i19, out_$p22, out_$i23, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p33, out_$p34, out_$i35, out_$p38, out_$i39, out_$i40, out_$i1);
    return;

  exit:
    return;
}



procedure free_sbufs_loop_$bb1(in_$p0: ref, in_$i2: i64, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i64, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p22: ref, in_$i23: i64, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i30: i64, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i1: i32) returns (out_$i2: i64, out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i64, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p22: ref, out_$i23: i64, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i30: i64, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i1: i32);
  modifies $M.4;



implementation cpia2_allocate_buffers_loop_$bb17(in_$p0: ref, in_$p41: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i92: i1, in_$i46: i32, in_$i93: i32) returns (out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i92: i1, out_$i46: i32, out_$i93: i32)
{

  entry:
    out_$p47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$i66, out_$p68, out_$p69, out_$p70, out_$i71, out_$p73, out_$p74, out_$p75, out_$i76, out_$p78, out_$p79, out_$p80, out_$i81, out_$p83, out_$p84, out_$p85, out_$i86, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i46, out_$i93 := in_$p47, in_$p48, in_$i49, in_$i50, in_$p51, in_$p52, in_$p53, in_$i54, in_$p56, in_$p57, in_$p58, in_$p59, in_$i60, in_$i61, in_$i62, in_$p63, in_$p64, in_$p65, in_$i66, in_$p68, in_$p69, in_$p70, in_$i71, in_$p73, in_$p74, in_$p75, in_$i76, in_$p78, in_$p79, in_$p80, in_$i81, in_$p83, in_$p84, in_$p85, in_$i86, in_$p88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i46, in_$i93;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1903;

  $bb19:
    assume out_$i92 == 1;
    assume {:verifier.code 0} true;
    out_$i46 := out_$i89;
    goto $bb19_dummy;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    out_$i93 := out_$i89;
    assume true;
    goto $bb19;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    out_$i92 := $sgt.i32(out_$i91, out_$i89);
    goto corral_source_split_1956;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    out_$i91 := $add.i32(out_$i90, $sub.i32(0, 1));
    goto corral_source_split_1955;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.4, in_$p41);
    goto corral_source_split_1954;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i46, 1);
    call {:si_unique_call 267} {:cexpr "i"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_1953;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p88, out_$i46);
    goto corral_source_split_1952;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p85, $mul.ref(out_$i86, 56)), $mul.ref(24, 1));
    goto corral_source_split_1951;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    goto corral_source_split_1950;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    out_$i86 := $sext.i32.i64(out_$i46);
    goto corral_source_split_1949;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.4, out_$p84);
    goto corral_source_split_1948;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1947;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p83, 0);
    goto corral_source_split_1946;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p80, $mul.ref(out_$i81, 56)), $mul.ref(32, 1));
    goto corral_source_split_1945;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    goto corral_source_split_1944;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    out_$i81 := $sext.i32.i64(out_$i46);
    goto corral_source_split_1943;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.4, out_$p79);
    goto corral_source_split_1942;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1941;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p78, 0);
    goto corral_source_split_1940;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(out_$p75, $mul.ref(out_$i76, 56)), $mul.ref(28, 1));
    goto corral_source_split_1939;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    goto corral_source_split_1938;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    out_$i76 := $sext.i32.i64(out_$i46);
    goto corral_source_split_1937;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.4, out_$p74);
    goto corral_source_split_1936;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1935;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p73, 0);
    goto corral_source_split_1934;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p70, $mul.ref(out_$i71, 56)), $mul.ref(36, 1));
    goto corral_source_split_1933;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    goto corral_source_split_1932;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i46);
    goto corral_source_split_1931;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.4, out_$p69);
    goto corral_source_split_1930;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1929;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p68, out_$p63);
    goto corral_source_split_1928;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p65, $mul.ref(out_$i66, 56)), $mul.ref(40, 1));
    goto corral_source_split_1927;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    goto corral_source_split_1926;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(out_$i46);
    goto corral_source_split_1925;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.4, out_$p64);
    goto corral_source_split_1924;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1923;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(out_$p58, $mul.ref(out_$i62, 1));
    goto corral_source_split_1922;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i32.i64(out_$i61);
    goto corral_source_split_1921;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    out_$i61 := $mul.i32(out_$i60, out_$i46);
    goto corral_source_split_1920;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.4, out_$p59);
    goto corral_source_split_1919;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2640, 1));
    goto corral_source_split_1918;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.4, out_$p57);
    goto corral_source_split_1917;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2656, 1));
    goto corral_source_split_1916;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p56, out_$p51);
    goto corral_source_split_1915;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p53, $mul.ref(out_$i54, 56)), $mul.ref(48, 1));
    goto corral_source_split_1914;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    goto corral_source_split_1913;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i46);
    goto corral_source_split_1912;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.4, out_$p52);
    goto corral_source_split_1911;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1910;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p48, $mul.ref(out_$i50, 56));
    goto corral_source_split_1909;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i64(out_$i49, 1);
    goto corral_source_split_1908;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i46);
    goto corral_source_split_1907;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.4, out_$p47);
    goto corral_source_split_1906;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_1905;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$i66, out_$p68, out_$p69, out_$p70, out_$i71, out_$p73, out_$p74, out_$p75, out_$i76, out_$p78, out_$p79, out_$p80, out_$i81, out_$p83, out_$p84, out_$p85, out_$i86, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i46, out_$i93 := cpia2_allocate_buffers_loop_$bb17(in_$p0, in_$p41, out_$p47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$i66, out_$p68, out_$p69, out_$p70, out_$i71, out_$p73, out_$p74, out_$p75, out_$i76, out_$p78, out_$p79, out_$p80, out_$i81, out_$p83, out_$p84, out_$p85, out_$i86, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i46, out_$i93);
    return;

  exit:
    return;
}



procedure cpia2_allocate_buffers_loop_$bb17(in_$p0: ref, in_$p41: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i92: i1, in_$i46: i32, in_$i93: i32) returns (out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i92: i1, out_$i46: i32, out_$i93: i32);
  modifies $M.4;



implementation apply_vp_patch_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$i64: i32, in_$i65: i8, in_$p66: ref, in_$p67: ref, in_$i68: i8, in_$i69: i64, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$p77: ref, in_$i79: i32, in_$i80: i64, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$i56: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_vslice_dummy_var_371: i32) returns (out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$i64: i32, out_$i65: i8, out_$p66: ref, out_$p67: ref, out_$i68: i8, out_$i69: i64, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$p77: ref, out_$i79: i32, out_$i80: i64, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$i56: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_vslice_dummy_var_371: i32)
{

  entry:
    out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$i76, out_$p77, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i56, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_vslice_dummy_var_371 := in_$p57, in_$p58, in_$p59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$p67, in_$i68, in_$i69, in_$p70, in_$p71, in_$p72, in_$p73, in_$p74, in_$p75, in_$i76, in_$p77, in_$i79, in_$i80, in_$p81, in_$p82, in_$i83, in_$i84, in_$i56, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2, in_vslice_dummy_var_371;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3568;

  $bb13:
    assume out_$i84 == 1;
    assume {:verifier.code 0} true;
    out_$i56 := out_$i79;
    goto $bb13_dummy;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    out_$i84 := $ult.i64(out_$i80, out_$i83);
    goto corral_source_split_3603;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i64($M.13, out_$p82);
    goto corral_source_split_3602;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p81, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3601;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.11, in_$p1);
    goto corral_source_split_3600;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    out_$i80 := $sext.i32.i64(out_$i79);
    goto corral_source_split_3599;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i56, 64);
    call {:si_unique_call 596} {:cexpr "i"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_3598;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} out_vslice_dummy_var_371 := cpia2_send_command(in_$p0, in_$p3);
    goto corral_source_split_3597;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.7;
    out_cmdloc_dummy_var_1 := $M.7;
    call {:si_unique_call 594} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_$p72, out_$p77, out_$i69, $zext.i32.i64(1), 0 == 1);
    $M.7 := out_cmdloc_dummy_var_2;
    goto corral_source_split_3596;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref(out_$p75, $mul.ref(out_$i76, 1));
    goto corral_source_split_3595;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    out_$i76 := $sext.i32.i64(out_$i56);
    goto corral_source_split_3594;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.12, out_$p74);
    goto corral_source_split_3593;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p73, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3592;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.11, in_$p1);
    goto corral_source_split_3591;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    out_$p72 := $bitcast.ref.ref(out_$p71);
    goto corral_source_split_3590;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(out_$p70);
    goto corral_source_split_3589;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_3588;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i8.i64(out_$i68);
    call {:si_unique_call 593} {:cexpr "__len"} boogie_si_record_i64(out_$i69);
    goto corral_source_split_3587;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i8($M.7, out_$p67);
    goto corral_source_split_3586;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p3, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_3585;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, out_$p66, out_$i65);
    goto corral_source_split_3584;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p3, $mul.ref(0, 72)), $mul.ref(5, 1));
    goto corral_source_split_3583;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    out_$i65 := $trunc.i32.i8(out_$i64);
    goto corral_source_split_3582;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3581;

  $bb11:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    out_$i64 := out_$i62;
    goto $bb12;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    out_$i64 := 64;
    goto $bb12;

  $bb10:
    assume out_$i63 == 1;
    goto corral_source_split_3579;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    out_$i63 := $slt.i32(64, out_$i62);
    goto corral_source_split_3577;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    out_$i62 := $sub.i32(out_$i61, out_$i56);
    call {:si_unique_call 592} {:cexpr "__min2"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_3576;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    out_$i61 := $trunc.i64.i32(out_$i60);
    goto corral_source_split_3575;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i64($M.13, out_$p59);
    goto corral_source_split_3574;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p58, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3573;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.11, in_$p1);
    goto corral_source_split_3572;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, out_$p57, 12);
    goto corral_source_split_3571;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p3, $mul.ref(0, 72)), $mul.ref(7, 1));
    goto corral_source_split_3570;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$i76, out_$p77, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i56, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_vslice_dummy_var_371 := apply_vp_patch_loop_$bb8(in_$p0, in_$p1, in_$p3, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$i76, out_$p77, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i56, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_vslice_dummy_var_371);
    return;

  exit:
    return;
}



procedure apply_vp_patch_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$i64: i32, in_$i65: i8, in_$p66: ref, in_$p67: ref, in_$i68: i8, in_$i69: i64, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$p77: ref, in_$i79: i32, in_$i80: i64, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$i56: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_vslice_dummy_var_371: i32) returns (out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$i64: i32, out_$i65: i8, out_$p66: ref, out_$p67: ref, out_$i68: i8, out_$i69: i64, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$p77: ref, out_$i79: i32, out_$i80: i64, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$i56: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_vslice_dummy_var_371: i32);
  modifies $M.7;



implementation submit_urbs_loop_$bb33(in_$p0: ref, in_$i51: i32, in_$i55: i64, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i54: i32) returns (out_$i55: i64, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i54: i32)
{

  entry:
    out_$i55, out_$p58, out_$p59, out_$i60, out_$i61, out_$i54 := in_$i55, in_$p58, in_$p59, in_$i60, in_$i61, in_$i54;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_3893;

  $bb35:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$i54 := out_$i60;
    goto $bb35_dummy;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    out_$i61 := $slt.i32(out_$i60, in_$i51);
    goto corral_source_split_3900;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i32(out_$i54, 1);
    call {:si_unique_call 638} {:cexpr "j"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_3899;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} usb_free_urb(out_$p59);
    goto corral_source_split_3898;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.4, out_$p58);
    goto corral_source_split_3897;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref(out_$i55, 16)), $mul.ref(8, 1));
    goto corral_source_split_3896;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i54);
    goto corral_source_split_3895;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i55, out_$p58, out_$p59, out_$i60, out_$i61, out_$i54 := submit_urbs_loop_$bb33(in_$p0, in_$i51, out_$i55, out_$p58, out_$p59, out_$i60, out_$i61, out_$i54);
    return;

  exit:
    return;
}



procedure submit_urbs_loop_$bb33(in_$p0: ref, in_$i51: i32, in_$i55: i64, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i54: i32) returns (out_$i55: i64, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i54: i32);



implementation submit_urbs_loop_$bb22(in_$p0: ref, in_$i41: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$i51: i32, in_$i62: i64, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$i87: i32, in_$i88: i64, in_$p89: ref, in_$i90: i32, in_$i91: i32, in_$p92: ref, in_$p95: ref, in_$p96: ref, in_$i97: i32, in_$i98: i64, in_$p99: ref, in_$i100: i32, in_$p103: ref, in_$i104: i32, in_$i105: i1, in_$i40: i32, in_$p121: ref, in_$i122: i32, in_$i123: i64, in_$p124: ref, in_$i125: i32, in_$p128: ref, in_$p129: ref, in_$i130: i32, in_$i131: i64, in_$p132: ref, in_$i133: i32, in_$p136: ref, in_$p137: ref, in_$i138: i32, in_$i139: i64, in_$p140: ref, in_$i141: i32, in_$i142: i32, in_$p145: ref, in_$p146: ref, in_$i147: i32, in_$i148: i64, in_$p149: ref, in_$i150: i32, in_$p153: ref, in_$p154: ref, in_$i155: i32, in_$i156: i64, in_$p157: ref, in_$i158: i32, in_$i159: i32, in_$p162: ref, in_$p163: ref, in_$i164: i32, in_$i165: i64, in_$p166: ref, in_$i167: i32, in_$p170: ref, in_$p171: ref, in_$i172: i32, in_$i173: i64, in_$p174: ref, in_$i175: i32, in_$i176: i32, in_$p179: ref, in_$p180: ref, in_$i181: i32, in_$i182: i64, in_$p183: ref, in_$i184: i32, in_$p187: ref, in_$p188: ref, in_$i189: i32, in_$i190: i64, in_$p191: ref, in_$i192: i32, in_$i193: i32, in_$p196: ref, in_$p197: ref, in_$i198: i32, in_$i199: i64, in_$p200: ref, in_$i201: i32, in_$p204: ref, in_$p205: ref, in_$i206: i32, in_$i207: i64, in_$p208: ref, in_$i209: i32, in_$i210: i32, in_$p213: ref, in_$p214: ref, in_$i215: i32, in_$i216: i64, in_$p217: ref, in_$i218: i32, in_$p221: ref, in_$p222: ref, in_$i223: i32, in_$i224: i64, in_$p225: ref, in_$i226: i32, in_$i227: i32, in_$p230: ref, in_$p231: ref, in_$i232: i32, in_$i233: i64, in_$p234: ref, in_$i235: i32, in_$p238: ref, in_$p239: ref, in_$i240: i32, in_$i241: i64, in_$p242: ref, in_$i243: i32, in_$i244: i32, in_$p247: ref, in_$p248: ref, in_$i249: i32, in_$i250: i64, in_$p251: ref, in_$i252: i32, in_$p255: ref, in_$p256: ref, in_$i257: i32, in_$i258: i64, in_$p259: ref, in_$i260: i32, in_$i261: i32, in_$p264: ref, in_$p265: ref, in_$i266: i32, in_$i267: i64, in_$p268: ref, in_$i269: i32, in_$p272: ref) returns (out_$i41: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$i51: i32, out_$i62: i64, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$i87: i32, out_$i88: i64, out_$p89: ref, out_$i90: i32, out_$i91: i32, out_$p92: ref, out_$p95: ref, out_$p96: ref, out_$i97: i32, out_$i98: i64, out_$p99: ref, out_$i100: i32, out_$p103: ref, out_$i104: i32, out_$i105: i1, out_$i40: i32, out_$p121: ref, out_$i122: i32, out_$i123: i64, out_$p124: ref, out_$i125: i32, out_$p128: ref, out_$p129: ref, out_$i130: i32, out_$i131: i64, out_$p132: ref, out_$i133: i32, out_$p136: ref, out_$p137: ref, out_$i138: i32, out_$i139: i64, out_$p140: ref, out_$i141: i32, out_$i142: i32, out_$p145: ref, out_$p146: ref, out_$i147: i32, out_$i148: i64, out_$p149: ref, out_$i150: i32, out_$p153: ref, out_$p154: ref, out_$i155: i32, out_$i156: i64, out_$p157: ref, out_$i158: i32, out_$i159: i32, out_$p162: ref, out_$p163: ref, out_$i164: i32, out_$i165: i64, out_$p166: ref, out_$i167: i32, out_$p170: ref, out_$p171: ref, out_$i172: i32, out_$i173: i64, out_$p174: ref, out_$i175: i32, out_$i176: i32, out_$p179: ref, out_$p180: ref, out_$i181: i32, out_$i182: i64, out_$p183: ref, out_$i184: i32, out_$p187: ref, out_$p188: ref, out_$i189: i32, out_$i190: i64, out_$p191: ref, out_$i192: i32, out_$i193: i32, out_$p196: ref, out_$p197: ref, out_$i198: i32, out_$i199: i64, out_$p200: ref, out_$i201: i32, out_$p204: ref, out_$p205: ref, out_$i206: i32, out_$i207: i64, out_$p208: ref, out_$i209: i32, out_$i210: i32, out_$p213: ref, out_$p214: ref, out_$i215: i32, out_$i216: i64, out_$p217: ref, out_$i218: i32, out_$p221: ref, out_$p222: ref, out_$i223: i32, out_$i224: i64, out_$p225: ref, out_$i226: i32, out_$i227: i32, out_$p230: ref, out_$p231: ref, out_$i232: i32, out_$i233: i64, out_$p234: ref, out_$i235: i32, out_$p238: ref, out_$p239: ref, out_$i240: i32, out_$i241: i64, out_$p242: ref, out_$i243: i32, out_$i244: i32, out_$p247: ref, out_$p248: ref, out_$i249: i32, out_$i250: i64, out_$p251: ref, out_$i252: i32, out_$p255: ref, out_$p256: ref, out_$i257: i32, out_$i258: i64, out_$p259: ref, out_$i260: i32, out_$i261: i32, out_$p264: ref, out_$p265: ref, out_$i266: i32, out_$i267: i64, out_$p268: ref, out_$i269: i32, out_$p272: ref)
{

  entry:
    out_$i41, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i62, out_$p65, out_$p66, out_$p67, out_$p68, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$p95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i100, out_$p103, out_$i104, out_$i105, out_$i40, out_$p121, out_$i122, out_$i123, out_$p124, out_$i125, out_$p128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$p136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$p145, out_$p146, out_$i147, out_$i148, out_$p149, out_$i150, out_$p153, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$p162, out_$p163, out_$i164, out_$i165, out_$p166, out_$i167, out_$p170, out_$p171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$p179, out_$p180, out_$i181, out_$i182, out_$p183, out_$i184, out_$p187, out_$p188, out_$i189, out_$i190, out_$p191, out_$i192, out_$i193, out_$p196, out_$p197, out_$i198, out_$i199, out_$p200, out_$i201, out_$p204, out_$p205, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$p213, out_$p214, out_$i215, out_$i216, out_$p217, out_$i218, out_$p221, out_$p222, out_$i223, out_$i224, out_$p225, out_$i226, out_$i227, out_$p230, out_$p231, out_$i232, out_$i233, out_$p234, out_$i235, out_$p238, out_$p239, out_$i240, out_$i241, out_$p242, out_$i243, out_$i244, out_$p247, out_$p248, out_$i249, out_$i250, out_$p251, out_$i252, out_$p255, out_$p256, out_$i257, out_$i258, out_$p259, out_$i260, out_$i261, out_$p264, out_$p265, out_$i266, out_$i267, out_$p268, out_$i269, out_$p272 := in_$i41, in_$p44, in_$p45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i62, in_$p65, in_$p66, in_$p67, in_$p68, in_$p70, in_$p71, in_$p72, in_$i73, in_$i74, in_$p75, in_$p76, in_$i77, in_$p80, in_$p81, in_$p82, in_$p83, in_$p84, in_$p85, in_$p86, in_$i87, in_$i88, in_$p89, in_$i90, in_$i91, in_$p92, in_$p95, in_$p96, in_$i97, in_$i98, in_$p99, in_$i100, in_$p103, in_$i104, in_$i105, in_$i40, in_$p121, in_$i122, in_$i123, in_$p124, in_$i125, in_$p128, in_$p129, in_$i130, in_$i131, in_$p132, in_$i133, in_$p136, in_$p137, in_$i138, in_$i139, in_$p140, in_$i141, in_$i142, in_$p145, in_$p146, in_$i147, in_$i148, in_$p149, in_$i150, in_$p153, in_$p154, in_$i155, in_$i156, in_$p157, in_$i158, in_$i159, in_$p162, in_$p163, in_$i164, in_$i165, in_$p166, in_$i167, in_$p170, in_$p171, in_$i172, in_$i173, in_$p174, in_$i175, in_$i176, in_$p179, in_$p180, in_$i181, in_$i182, in_$p183, in_$i184, in_$p187, in_$p188, in_$i189, in_$i190, in_$p191, in_$i192, in_$i193, in_$p196, in_$p197, in_$i198, in_$i199, in_$p200, in_$i201, in_$p204, in_$p205, in_$i206, in_$i207, in_$p208, in_$i209, in_$i210, in_$p213, in_$p214, in_$i215, in_$i216, in_$p217, in_$i218, in_$p221, in_$p222, in_$i223, in_$i224, in_$p225, in_$i226, in_$i227, in_$p230, in_$p231, in_$i232, in_$i233, in_$p234, in_$i235, in_$p238, in_$p239, in_$i240, in_$i241, in_$p242, in_$i243, in_$i244, in_$p247, in_$p248, in_$i249, in_$i250, in_$p251, in_$i252, in_$p255, in_$p256, in_$i257, in_$i258, in_$p259, in_$i260, in_$i261, in_$p264, in_$p265, in_$i266, in_$i267, in_$p268, in_$i269, in_$p272;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3870;

  $bb43:
    assume out_$i105 == 1;
    assume {:verifier.code 0} true;
    out_$i40 := out_$i104;
    goto $bb43_dummy;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    out_$i105 := $sle.i32(out_$i104, 1);
    goto corral_source_split_3881;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i104 := $add.i32(out_$i40, 1);
    call {:si_unique_call 634} {:cexpr "i"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_3880;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i47 == 1;
    goto corral_source_split_3878;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_3876;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_3875;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.4, out_$p44);
    goto corral_source_split_3874;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref(out_$i41, 16)), $mul.ref(8, 1));
    goto corral_source_split_3873;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i40);
    goto corral_source_split_3872;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p272, out_$i269);
    goto corral_source_split_4108;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    out_$p272 := $add.ref($add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_4107;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    out_$i269 := $load.i32($M.14, out_$p268);
    goto corral_source_split_4106;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    out_$p268 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(out_$i267, 4));
    goto corral_source_split_4105;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    out_$i267 := $zext.i32.i64(out_$i266);
    goto corral_source_split_4104;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    out_$i266 := $load.i32($M.4, out_$p265);
    goto corral_source_split_4103;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    out_$p265 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4102;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p264, out_$i261);
    goto corral_source_split_4101;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    out_$p264 := $add.ref($add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_4100;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    out_$i261 := $mul.i32(out_$i260, 9);
    goto corral_source_split_4099;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    out_$i260 := $load.i32($M.14, out_$p259);
    goto corral_source_split_4098;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    out_$p259 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(out_$i258, 4));
    goto corral_source_split_4097;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    out_$i258 := $zext.i32.i64(out_$i257);
    goto corral_source_split_4096;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    out_$i257 := $load.i32($M.4, out_$p256);
    goto corral_source_split_4095;

  $bb64:
    assume {:verifier.code 0} true;
    out_$p256 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4094;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p255, out_$i252);
    goto corral_source_split_4092;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    out_$p255 := $add.ref($add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_4091;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    out_$i252 := $load.i32($M.14, out_$p251);
    goto corral_source_split_4090;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    out_$p251 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(out_$i250, 4));
    goto corral_source_split_4089;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    out_$i250 := $zext.i32.i64(out_$i249);
    goto corral_source_split_4088;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    out_$i249 := $load.i32($M.4, out_$p248);
    goto corral_source_split_4087;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    out_$p248 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4086;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p247, out_$i244);
    goto corral_source_split_4085;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    out_$p247 := $add.ref($add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_4084;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    out_$i244 := $mul.i32(out_$i243, 8);
    goto corral_source_split_4083;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    out_$i243 := $load.i32($M.14, out_$p242);
    goto corral_source_split_4082;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    out_$p242 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(out_$i241, 4));
    goto corral_source_split_4081;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    out_$i241 := $zext.i32.i64(out_$i240);
    goto corral_source_split_4080;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    out_$i240 := $load.i32($M.4, out_$p239);
    goto corral_source_split_4079;

  $bb63:
    assume {:verifier.code 0} true;
    out_$p239 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4078;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p238, out_$i235);
    goto corral_source_split_4076;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    out_$p238 := $add.ref($add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_4075;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    out_$i235 := $load.i32($M.14, out_$p234);
    goto corral_source_split_4074;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    out_$p234 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(out_$i233, 4));
    goto corral_source_split_4073;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    out_$i233 := $zext.i32.i64(out_$i232);
    goto corral_source_split_4072;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    out_$i232 := $load.i32($M.4, out_$p231);
    goto corral_source_split_4071;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    out_$p231 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4070;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p230, out_$i227);
    goto corral_source_split_4069;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    out_$p230 := $add.ref($add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_4068;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    out_$i227 := $mul.i32(out_$i226, 7);
    goto corral_source_split_4067;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    out_$i226 := $load.i32($M.14, out_$p225);
    goto corral_source_split_4066;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    out_$p225 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(out_$i224, 4));
    goto corral_source_split_4065;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    out_$i224 := $zext.i32.i64(out_$i223);
    goto corral_source_split_4064;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    out_$i223 := $load.i32($M.4, out_$p222);
    goto corral_source_split_4063;

  $bb62:
    assume {:verifier.code 0} true;
    out_$p222 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4062;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p221, out_$i218);
    goto corral_source_split_4060;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    out_$p221 := $add.ref($add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_4059;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    out_$i218 := $load.i32($M.14, out_$p217);
    goto corral_source_split_4058;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(out_$i216, 4));
    goto corral_source_split_4057;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    out_$i216 := $zext.i32.i64(out_$i215);
    goto corral_source_split_4056;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    out_$i215 := $load.i32($M.4, out_$p214);
    goto corral_source_split_4055;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    out_$p214 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4054;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p213, out_$i210);
    goto corral_source_split_4053;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    out_$p213 := $add.ref($add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_4052;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    out_$i210 := $mul.i32(out_$i209, 6);
    goto corral_source_split_4051;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    out_$i209 := $load.i32($M.14, out_$p208);
    goto corral_source_split_4050;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    out_$p208 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(out_$i207, 4));
    goto corral_source_split_4049;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    out_$i207 := $zext.i32.i64(out_$i206);
    goto corral_source_split_4048;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    out_$i206 := $load.i32($M.4, out_$p205);
    goto corral_source_split_4047;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p205 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4046;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p204, out_$i201);
    goto corral_source_split_4044;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    out_$p204 := $add.ref($add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_4043;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    out_$i201 := $load.i32($M.14, out_$p200);
    goto corral_source_split_4042;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    out_$p200 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(out_$i199, 4));
    goto corral_source_split_4041;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    out_$i199 := $zext.i32.i64(out_$i198);
    goto corral_source_split_4040;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    out_$i198 := $load.i32($M.4, out_$p197);
    goto corral_source_split_4039;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    out_$p197 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4038;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p196, out_$i193);
    goto corral_source_split_4037;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    out_$p196 := $add.ref($add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_4036;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    out_$i193 := $mul.i32(out_$i192, 5);
    goto corral_source_split_4035;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    out_$i192 := $load.i32($M.14, out_$p191);
    goto corral_source_split_4034;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    out_$p191 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(out_$i190, 4));
    goto corral_source_split_4033;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    out_$i190 := $zext.i32.i64(out_$i189);
    goto corral_source_split_4032;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    out_$i189 := $load.i32($M.4, out_$p188);
    goto corral_source_split_4031;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p188 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4030;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p187, out_$i184);
    goto corral_source_split_4028;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_4027;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    out_$i184 := $load.i32($M.14, out_$p183);
    goto corral_source_split_4026;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    out_$p183 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(out_$i182, 4));
    goto corral_source_split_4025;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    out_$i182 := $zext.i32.i64(out_$i181);
    goto corral_source_split_4024;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    out_$i181 := $load.i32($M.4, out_$p180);
    goto corral_source_split_4023;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    out_$p180 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4022;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p179, out_$i176);
    goto corral_source_split_4021;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    out_$p179 := $add.ref($add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_4020;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    out_$i176 := $mul.i32(out_$i175, 4);
    goto corral_source_split_4019;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    out_$i175 := $load.i32($M.14, out_$p174);
    goto corral_source_split_4018;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(out_$i173, 4));
    goto corral_source_split_4017;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    out_$i173 := $zext.i32.i64(out_$i172);
    goto corral_source_split_4016;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    out_$i172 := $load.i32($M.4, out_$p171);
    goto corral_source_split_4015;

  $bb59:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4014;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p170, out_$i167);
    goto corral_source_split_4012;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_4011;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    out_$i167 := $load.i32($M.14, out_$p166);
    goto corral_source_split_4010;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(out_$i165, 4));
    goto corral_source_split_4009;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    out_$i165 := $zext.i32.i64(out_$i164);
    goto corral_source_split_4008;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    out_$i164 := $load.i32($M.4, out_$p163);
    goto corral_source_split_4007;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_4006;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p162, out_$i159);
    goto corral_source_split_4005;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_4004;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    out_$i159 := $mul.i32(out_$i158, 3);
    goto corral_source_split_4003;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i32($M.14, out_$p157);
    goto corral_source_split_4002;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(out_$i156, 4));
    goto corral_source_split_4001;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    out_$i156 := $zext.i32.i64(out_$i155);
    goto corral_source_split_4000;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    out_$i155 := $load.i32($M.4, out_$p154);
    goto corral_source_split_3999;

  $bb58:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_3998;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p153, out_$i150);
    goto corral_source_split_3996;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_3995;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    out_$i150 := $load.i32($M.14, out_$p149);
    goto corral_source_split_3994;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(out_$i148, 4));
    goto corral_source_split_3993;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    out_$i148 := $zext.i32.i64(out_$i147);
    goto corral_source_split_3992;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    out_$i147 := $load.i32($M.4, out_$p146);
    goto corral_source_split_3991;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_3990;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p145, out_$i142);
    goto corral_source_split_3989;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_3988;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    out_$i142 := $mul.i32(out_$i141, 2);
    goto corral_source_split_3987;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i32($M.14, out_$p140);
    goto corral_source_split_3986;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(out_$i139, 4));
    goto corral_source_split_3985;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    out_$i139 := $zext.i32.i64(out_$i138);
    goto corral_source_split_3984;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i32($M.4, out_$p137);
    goto corral_source_split_3983;

  $bb57:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_3982;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p136, out_$i133);
    goto corral_source_split_3965;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_3964;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i32($M.14, out_$p132);
    goto corral_source_split_3963;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(out_$i131, 4));
    goto corral_source_split_3962;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    out_$i131 := $zext.i32.i64(out_$i130);
    goto corral_source_split_3961;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i32($M.4, out_$p129);
    goto corral_source_split_3960;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_3959;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p128, out_$i125);
    goto corral_source_split_3958;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_3957;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i32($M.14, out_$p124);
    goto corral_source_split_3956;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(out_$i123, 4));
    goto corral_source_split_3955;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i32.i64(out_$i122);
    goto corral_source_split_3954;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i32($M.4, out_$p121);
    goto corral_source_split_3953;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_3952;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p103, out_$i100);
    goto corral_source_split_3950;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3949;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i32($M.14, out_$p99);
    goto corral_source_split_3948;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(out_$i98, 4));
    goto corral_source_split_3947;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    out_$i98 := $zext.i32.i64(out_$i97);
    goto corral_source_split_3946;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i32($M.4, out_$p96);
    goto corral_source_split_3945;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_3944;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p95, 0);
    goto corral_source_split_3943;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3942;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p92, out_$i91);
    goto corral_source_split_3940;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3939;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    out_$i91 := $mul.i32(out_$i90, 10);
    goto corral_source_split_3938;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.14, out_$p89);
    goto corral_source_split_3937;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(frame_sizes, $mul.ref(0, 32)), $mul.ref(out_$i88, 4));
    goto corral_source_split_3936;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i32.i64(out_$i87);
    goto corral_source_split_3935;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.4, out_$p86);
    goto corral_source_split_3934;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2508, 1));
    goto corral_source_split_3933;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p85, 1);
    goto corral_source_split_3932;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_3931;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p84, 10);
    goto corral_source_split_3930;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_3929;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p83, cpia2_usb_complete);
    goto corral_source_split_3928;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3927;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p82, out_$p81);
    goto corral_source_split_3926;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3925;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.4, out_$p80);
    goto corral_source_split_3924;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref(out_$i77, 16)), $mul.ref(0, 1));
    goto corral_source_split_3923;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    out_$i77 := $sext.i32.i64(out_$i40);
    goto corral_source_split_3922;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p76, 2);
    goto corral_source_split_3921;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_3920;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p75, out_$i74);
    goto corral_source_split_3919;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3918;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    out_$i74 := $or.i32(out_$i73, 128);
    goto corral_source_split_3917;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} out_$i73 := __create_pipe(out_$p72, 1);
    call {:si_unique_call 640} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_3916;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.4, out_$p71);
    goto corral_source_split_3915;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2496, 1));
    goto corral_source_split_3914;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p70, in_$p0);
    goto corral_source_split_3913;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3912;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    goto corral_source_split_3911;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p68, out_$p67);
    goto corral_source_split_3910;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p48, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3909;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.4, out_$p66);
    goto corral_source_split_3908;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2496, 1));
    goto corral_source_split_3907;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p65, out_$p48);
    goto corral_source_split_3906;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref(out_$i62, 16)), $mul.ref(8, 1));
    goto corral_source_split_3905;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i40);
    goto corral_source_split_3904;

  $bb29:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i40;
    assume true;
    goto $bb29;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i64(out_$i49, 0);
    goto corral_source_split_3885;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_3884;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} out_$p48 := usb_alloc_urb(10, 208);
    goto corral_source_split_3883;

  $bb25:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb43_dummy:
    call {:si_unique_call 1} out_$i41, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i62, out_$p65, out_$p66, out_$p67, out_$p68, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$p95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i100, out_$p103, out_$i104, out_$i105, out_$i40, out_$p121, out_$i122, out_$i123, out_$p124, out_$i125, out_$p128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$p136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$p145, out_$p146, out_$i147, out_$i148, out_$p149, out_$i150, out_$p153, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$p162, out_$p163, out_$i164, out_$i165, out_$p166, out_$i167, out_$p170, out_$p171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$p179, out_$p180, out_$i181, out_$i182, out_$p183, out_$i184, out_$p187, out_$p188, out_$i189, out_$i190, out_$p191, out_$i192, out_$i193, out_$p196, out_$p197, out_$i198, out_$i199, out_$p200, out_$i201, out_$p204, out_$p205, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$p213, out_$p214, out_$i215, out_$i216, out_$p217, out_$i218, out_$p221, out_$p222, out_$i223, out_$i224, out_$p225, out_$i226, out_$i227, out_$p230, out_$p231, out_$i232, out_$i233, out_$p234, out_$i235, out_$p238, out_$p239, out_$i240, out_$i241, out_$p242, out_$i243, out_$i244, out_$p247, out_$p248, out_$i249, out_$i250, out_$p251, out_$i252, out_$p255, out_$p256, out_$i257, out_$i258, out_$p259, out_$i260, out_$i261, out_$p264, out_$p265, out_$i266, out_$i267, out_$p268, out_$i269, out_$p272 := submit_urbs_loop_$bb22(in_$p0, out_$i41, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i62, out_$p65, out_$p66, out_$p67, out_$p68, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$p95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i100, out_$p103, out_$i104, out_$i105, out_$i40, out_$p121, out_$i122, out_$i123, out_$p124, out_$i125, out_$p128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i133, out_$p136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$p145, out_$p146, out_$i147, out_$i148, out_$p149, out_$i150, out_$p153, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$p162, out_$p163, out_$i164, out_$i165, out_$p166, out_$i167, out_$p170, out_$p171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$p179, out_$p180, out_$i181, out_$i182, out_$p183, out_$i184, out_$p187, out_$p188, out_$i189, out_$i190, out_$p191, out_$i192, out_$i193, out_$p196, out_$p197, out_$i198, out_$i199, out_$p200, out_$i201, out_$p204, out_$p205, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$p213, out_$p214, out_$i215, out_$i216, out_$p217, out_$i218, out_$p221, out_$p222, out_$i223, out_$i224, out_$p225, out_$i226, out_$i227, out_$p230, out_$p231, out_$i232, out_$i233, out_$p234, out_$i235, out_$p238, out_$p239, out_$i240, out_$i241, out_$p242, out_$i243, out_$i244, out_$p247, out_$p248, out_$i249, out_$i250, out_$p251, out_$i252, out_$p255, out_$p256, out_$i257, out_$i258, out_$p259, out_$i260, out_$i261, out_$p264, out_$p265, out_$i266, out_$i267, out_$p268, out_$i269, out_$p272);
    return;

  exit:
    return;
}



procedure submit_urbs_loop_$bb22(in_$p0: ref, in_$i41: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$i51: i32, in_$i62: i64, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$i87: i32, in_$i88: i64, in_$p89: ref, in_$i90: i32, in_$i91: i32, in_$p92: ref, in_$p95: ref, in_$p96: ref, in_$i97: i32, in_$i98: i64, in_$p99: ref, in_$i100: i32, in_$p103: ref, in_$i104: i32, in_$i105: i1, in_$i40: i32, in_$p121: ref, in_$i122: i32, in_$i123: i64, in_$p124: ref, in_$i125: i32, in_$p128: ref, in_$p129: ref, in_$i130: i32, in_$i131: i64, in_$p132: ref, in_$i133: i32, in_$p136: ref, in_$p137: ref, in_$i138: i32, in_$i139: i64, in_$p140: ref, in_$i141: i32, in_$i142: i32, in_$p145: ref, in_$p146: ref, in_$i147: i32, in_$i148: i64, in_$p149: ref, in_$i150: i32, in_$p153: ref, in_$p154: ref, in_$i155: i32, in_$i156: i64, in_$p157: ref, in_$i158: i32, in_$i159: i32, in_$p162: ref, in_$p163: ref, in_$i164: i32, in_$i165: i64, in_$p166: ref, in_$i167: i32, in_$p170: ref, in_$p171: ref, in_$i172: i32, in_$i173: i64, in_$p174: ref, in_$i175: i32, in_$i176: i32, in_$p179: ref, in_$p180: ref, in_$i181: i32, in_$i182: i64, in_$p183: ref, in_$i184: i32, in_$p187: ref, in_$p188: ref, in_$i189: i32, in_$i190: i64, in_$p191: ref, in_$i192: i32, in_$i193: i32, in_$p196: ref, in_$p197: ref, in_$i198: i32, in_$i199: i64, in_$p200: ref, in_$i201: i32, in_$p204: ref, in_$p205: ref, in_$i206: i32, in_$i207: i64, in_$p208: ref, in_$i209: i32, in_$i210: i32, in_$p213: ref, in_$p214: ref, in_$i215: i32, in_$i216: i64, in_$p217: ref, in_$i218: i32, in_$p221: ref, in_$p222: ref, in_$i223: i32, in_$i224: i64, in_$p225: ref, in_$i226: i32, in_$i227: i32, in_$p230: ref, in_$p231: ref, in_$i232: i32, in_$i233: i64, in_$p234: ref, in_$i235: i32, in_$p238: ref, in_$p239: ref, in_$i240: i32, in_$i241: i64, in_$p242: ref, in_$i243: i32, in_$i244: i32, in_$p247: ref, in_$p248: ref, in_$i249: i32, in_$i250: i64, in_$p251: ref, in_$i252: i32, in_$p255: ref, in_$p256: ref, in_$i257: i32, in_$i258: i64, in_$p259: ref, in_$i260: i32, in_$i261: i32, in_$p264: ref, in_$p265: ref, in_$i266: i32, in_$i267: i64, in_$p268: ref, in_$i269: i32, in_$p272: ref) returns (out_$i41: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$i51: i32, out_$i62: i64, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$i87: i32, out_$i88: i64, out_$p89: ref, out_$i90: i32, out_$i91: i32, out_$p92: ref, out_$p95: ref, out_$p96: ref, out_$i97: i32, out_$i98: i64, out_$p99: ref, out_$i100: i32, out_$p103: ref, out_$i104: i32, out_$i105: i1, out_$i40: i32, out_$p121: ref, out_$i122: i32, out_$i123: i64, out_$p124: ref, out_$i125: i32, out_$p128: ref, out_$p129: ref, out_$i130: i32, out_$i131: i64, out_$p132: ref, out_$i133: i32, out_$p136: ref, out_$p137: ref, out_$i138: i32, out_$i139: i64, out_$p140: ref, out_$i141: i32, out_$i142: i32, out_$p145: ref, out_$p146: ref, out_$i147: i32, out_$i148: i64, out_$p149: ref, out_$i150: i32, out_$p153: ref, out_$p154: ref, out_$i155: i32, out_$i156: i64, out_$p157: ref, out_$i158: i32, out_$i159: i32, out_$p162: ref, out_$p163: ref, out_$i164: i32, out_$i165: i64, out_$p166: ref, out_$i167: i32, out_$p170: ref, out_$p171: ref, out_$i172: i32, out_$i173: i64, out_$p174: ref, out_$i175: i32, out_$i176: i32, out_$p179: ref, out_$p180: ref, out_$i181: i32, out_$i182: i64, out_$p183: ref, out_$i184: i32, out_$p187: ref, out_$p188: ref, out_$i189: i32, out_$i190: i64, out_$p191: ref, out_$i192: i32, out_$i193: i32, out_$p196: ref, out_$p197: ref, out_$i198: i32, out_$i199: i64, out_$p200: ref, out_$i201: i32, out_$p204: ref, out_$p205: ref, out_$i206: i32, out_$i207: i64, out_$p208: ref, out_$i209: i32, out_$i210: i32, out_$p213: ref, out_$p214: ref, out_$i215: i32, out_$i216: i64, out_$p217: ref, out_$i218: i32, out_$p221: ref, out_$p222: ref, out_$i223: i32, out_$i224: i64, out_$p225: ref, out_$i226: i32, out_$i227: i32, out_$p230: ref, out_$p231: ref, out_$i232: i32, out_$i233: i64, out_$p234: ref, out_$i235: i32, out_$p238: ref, out_$p239: ref, out_$i240: i32, out_$i241: i64, out_$p242: ref, out_$i243: i32, out_$i244: i32, out_$p247: ref, out_$p248: ref, out_$i249: i32, out_$i250: i64, out_$p251: ref, out_$i252: i32, out_$p255: ref, out_$p256: ref, out_$i257: i32, out_$i258: i64, out_$p259: ref, out_$i260: i32, out_$i261: i32, out_$p264: ref, out_$p265: ref, out_$i266: i32, out_$i267: i64, out_$p268: ref, out_$i269: i32, out_$p272: ref);
  modifies $M.4;



implementation submit_urbs_loop_$bb13(in_$p0: ref, in_$i28: i64, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i27: i32) returns (out_$i28: i64, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i27: i32)
{

  entry:
    out_$i28, out_$p31, out_$p32, out_$i33, out_$p36, out_$i37, out_$i38, out_$i27 := in_$i28, in_$p31, in_$p32, in_$i33, in_$p36, in_$i37, in_$i38, in_$i27;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3849;

  $bb15:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := out_$i37;
    goto $bb15_dummy;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    out_$i38 := $sge.i32(out_$i37, 0);
    goto corral_source_split_3859;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    out_$i37 := $sub.i32(out_$i27, 1);
    call {:si_unique_call 633} {:cexpr "i"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_3858;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p36, $0.ref);
    goto corral_source_split_3857;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref(out_$i33, 16)), $mul.ref(0, 1));
    goto corral_source_split_3856;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i27);
    goto corral_source_split_3855;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} kfree(out_$p32);
    goto corral_source_split_3854;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.4, out_$p31);
    goto corral_source_split_3853;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2520, 1)), $mul.ref(out_$i28, 16)), $mul.ref(0, 1));
    goto corral_source_split_3852;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i27);
    goto corral_source_split_3851;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i28, out_$p31, out_$p32, out_$i33, out_$p36, out_$i37, out_$i38, out_$i27 := submit_urbs_loop_$bb13(in_$p0, out_$i28, out_$p31, out_$p32, out_$i33, out_$p36, out_$i37, out_$i38, out_$i27);
    return;

  exit:
    return;
}



procedure submit_urbs_loop_$bb13(in_$p0: ref, in_$i28: i64, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i27: i32) returns (out_$i28: i64, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i27: i32);
  modifies $M.4;



implementation rvmalloc_loop_$bb8(in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i64, in_$i15: i1, in_$i9: i64, in_$i10: i64) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i64, out_$i15: i1, out_$i9: i64, out_$i10: i64)
{

  entry:
    out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i9, out_$i10 := in_$p11, in_$p12, in_$i13, in_$i14, in_$i15, in_$i9, in_$i10;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5378;

  $bb10:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i9, out_$i10 := out_$i14, out_$i13;
    goto $bb10_dummy;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    out_$i15 := $sgt.i64(out_$i14, 0);
    goto corral_source_split_5385;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    out_$i14 := $sub.i64(out_$i9, 4096);
    call {:si_unique_call 767} {:cexpr "size"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_5384;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i64(out_$i10, 4096);
    call {:si_unique_call 766} {:cexpr "adr"} boogie_si_record_i64(out_$i13);
    goto corral_source_split_5383;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} SetPageReserved(out_$p12);
    goto corral_source_split_5382;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} out_$p12 := vmalloc_to_page(out_$p11);
    goto corral_source_split_5381;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p11 := $i2p.i64.ref(out_$i10);
    goto corral_source_split_5380;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i9, out_$i10 := rvmalloc_loop_$bb8(out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure rvmalloc_loop_$bb8(in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i64, in_$i15: i1, in_$i9: i64, in_$i10: i64) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i64, out_$i15: i1, out_$i9: i64, out_$i10: i64);



implementation cpia2_remap_buffer_loop_$bb16(in_$p1: ref, in_$p2: ref, in_$i47: i64, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$i51: i64, in_$i52: i32, in_$i53: i1, in_$i54: i64, in_$i55: i64, in_$i56: i1, in_$i57: i64, in_$i58: i64, in_$i59: i1, in_$i44: i64, in_$i45: i64, in_$i46: i64) returns (out_$i47: i64, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$i51: i64, out_$i52: i32, out_$i53: i1, out_$i54: i64, out_$i55: i64, out_$i56: i1, out_$i57: i64, out_$i58: i64, out_$i59: i1, out_$i44: i64, out_$i45: i64, out_$i46: i64)
{

  entry:
    out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i44, out_$i45, out_$i46 := in_$i47, in_$p48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i44, in_$i45, in_$i46;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5477;

  $bb24:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i44, out_$i45, out_$i46 := out_$i55, out_$i54, out_$i58;
    goto $bb24_dummy;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i64(out_$i58, 0);
    goto corral_source_split_5498;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5497;

  $bb22:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    out_$i58 := 0;
    goto $bb23;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    out_$i58 := out_$i57;
    goto $bb23;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    out_$i57 := $sub.i64(out_$i46, 4096);
    call {:si_unique_call 797} {:cexpr "size"} boogie_si_record_i64(out_$i57);
    goto corral_source_split_5495;

  $bb21:
    assume out_$i56 == 1;
    goto corral_source_split_5494;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    out_$i56 := $ugt.i64(out_$i46, 4096);
    goto corral_source_split_5492;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i64(out_$i44, 4096);
    call {:si_unique_call 796} {:cexpr "pos"} boogie_si_record_i64(out_$i55);
    goto corral_source_split_5491;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i64(out_$i45, 4096);
    call {:si_unique_call 795} {:cexpr "start"} boogie_si_record_i64(out_$i54);
    goto corral_source_split_5490;

  $bb19:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i52, 0);
    goto corral_source_split_5486;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} out_$i52 := remap_pfn_range(in_$p1, out_$i45, out_$i49, 4096, out_$i51);
    call {:si_unique_call 794} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_5485;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i64($M.15, out_$p50);
    goto corral_source_split_5484;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5483;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    out_$i49 := $lshr.i64(out_$i47, 12);
    goto corral_source_split_5482;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, out_$p48, $sub.i64(0, 9223372036854775769));
    goto corral_source_split_5481;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5480;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} out_$i47 := kvirt_to_pa(out_$i44);
    call {:si_unique_call 792} {:cexpr "page"} boogie_si_record_i64(out_$i47);
    goto corral_source_split_5479;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb24_dummy:
    call {:si_unique_call 1} out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i44, out_$i45, out_$i46 := cpia2_remap_buffer_loop_$bb16(in_$p1, in_$p2, out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i44, out_$i45, out_$i46);
    return;

  exit:
    return;
}



procedure cpia2_remap_buffer_loop_$bb16(in_$p1: ref, in_$p2: ref, in_$i47: i64, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$i51: i64, in_$i52: i32, in_$i53: i1, in_$i54: i64, in_$i55: i64, in_$i56: i1, in_$i57: i64, in_$i58: i64, in_$i59: i1, in_$i44: i64, in_$i45: i64, in_$i46: i64) returns (out_$i47: i64, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$i51: i64, out_$i52: i32, out_$i53: i1, out_$i54: i64, out_$i55: i64, out_$i56: i1, out_$i57: i64, out_$i58: i64, out_$i59: i1, out_$i44: i64, out_$i45: i64, out_$i46: i64);
  modifies $M.16, $CurrAddr, $M.15;



implementation cpia2_usb_stream_start_loop_$bb10(in_$p0: ref, in_$p10: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i13: i32) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i13: i32)
{

  entry:
    out_$p14, out_$p15, out_$i16, out_$p18, out_$p19, out_$p20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i13 := in_$p14, in_$p15, in_$i16, in_$p18, in_$p19, in_$p20, in_$i21, in_$p23, in_$i24, in_$i25, in_$i26, in_$i13;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5604;

  $bb12:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := out_$i24;
    goto $bb12_dummy;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    out_$i26 := $sgt.i32(out_$i25, out_$i24);
    goto corral_source_split_5620;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.4, in_$p10);
    goto corral_source_split_5619;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i13, 1);
    call {:si_unique_call 831} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_5618;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p23, 0);
    goto corral_source_split_5617;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 56)), $mul.ref(28, 1));
    goto corral_source_split_5616;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    goto corral_source_split_5615;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i13);
    goto corral_source_split_5614;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.4, out_$p19);
    goto corral_source_split_5613;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_5612;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p18, 0);
    goto corral_source_split_5611;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 56)), $mul.ref(36, 1));
    goto corral_source_split_5610;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    goto corral_source_split_5609;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i13);
    goto corral_source_split_5608;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.4, out_$p14);
    goto corral_source_split_5607;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_5606;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$i16, out_$p18, out_$p19, out_$p20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i13 := cpia2_usb_stream_start_loop_$bb10(in_$p0, in_$p10, out_$p14, out_$p15, out_$i16, out_$p18, out_$p19, out_$p20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i13);
    return;

  exit:
    return;
}



procedure cpia2_usb_stream_start_loop_$bb10(in_$p0: ref, in_$p10: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i13: i32) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i13: i32);
  modifies $M.4;



implementation cpia2_read_loop_$bb29(in_$p0: ref, in_$p4: ref, in_$p51: ref, in_$p52: ref, in_$p56: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i68: i32, in_$i69: i1) returns (out_$p56: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i68: i32, out_$i69: i1)
{

  entry:
    out_$p56, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69 := in_$p56, in_$p58, in_$p59, in_$p60, in_$i61, in_$i62, in_$p63, in_$p64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2672, 1));
    goto corral_source_split_5769;

  $bb40:
    assume {:verifier.code 0} true;
    assume !(out_$i69 == 1);
    goto $bb40_dummy;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    out_$p56 := out_$p59;
    assume true;
    goto $bb40;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 0);
    goto corral_source_split_5792;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} out_$i68 := video_is_registered(in_$p52);
    call {:si_unique_call 866} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_5791;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} prepare_to_wait(in_$p51, in_$p4, 1);
    goto corral_source_split_5790;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} schedule();
    goto corral_source_split_5788;

  $bb36:
    assume out_$i66 == 1;
    goto corral_source_split_5787;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    out_$p67 := out_$p59;
    assume true;
    goto $bb36;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i32(out_$i65, 0);
    goto corral_source_split_5785;

  SeqInstr_78:
    call {:si_unique_call 862} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_5784;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} out_$i65 := signal_pending(out_$p64);
    goto SeqInstr_77;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} out_$p64 := get_current();
    goto corral_source_split_5783;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    out_$p63 := out_$p59;
    assume true;
    goto $bb33;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i61, 2);
    goto corral_source_split_5773;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.4, out_$p60);
    goto corral_source_split_5772;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p59, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_5771;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.4, out_$p58);
    goto corral_source_split_5770;

  $bb40_dummy:
    call {:si_unique_call 1} out_$p56, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69 := cpia2_read_loop_$bb29(in_$p0, in_$p4, in_$p51, in_$p52, out_$p56, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69);
    return;

  exit:
    return;
}



procedure cpia2_read_loop_$bb29(in_$p0: ref, in_$p4: ref, in_$p51: ref, in_$p52: ref, in_$p56: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i68: i32, in_$i69: i1) returns (out_$p56: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i68: i32, out_$i69: i1);
  modifies $M.26, $M.4, $M.8, $M.9, $M.7, $CurrAddr, assertsPassed;



implementation cpia2_s_fmt_vid_cap_loop_$bb14(in_$p4: ref, in_$p54: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i57: i32) returns (out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i57: i32)
{

  entry:
    out_$p58, out_$p59, out_$i60, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$p72, out_$i73, out_$i74, out_$i75, out_$i57 := in_$p58, in_$p59, in_$i60, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$p68, in_$p69, in_$i70, in_$p72, in_$i73, in_$i74, in_$i75, in_$i57;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6118;

  $bb22:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i57 := out_$i73;
    goto $bb22_dummy;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    out_$i75 := $sgt.i32(out_$i74, out_$i73);
    goto corral_source_split_6142;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.4, in_$p54);
    goto corral_source_split_6141;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i32(out_$i57, 1);
    call {:si_unique_call 933} {:cexpr "frame"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_6140;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p72, 0);
    goto corral_source_split_6139;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p69, $mul.ref(out_$i70, 56)), $mul.ref(36, 1));
    goto corral_source_split_6138;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    goto corral_source_split_6137;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    out_$i70 := $sext.i32.i64(out_$i57);
    goto corral_source_split_6136;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.4, out_$p68);
    goto corral_source_split_6135;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_6134;

  $bb17:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    out_$i67 := out_$i65;
    assume true;
    goto $bb19;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i65, 0);
    goto corral_source_split_6130;

  SeqInstr_108:
    call {:si_unique_call 932} {:cexpr "err"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_6129;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} out_$i65 := sync(in_$p4, out_$i57);
    goto SeqInstr_107;

  $bb16:
    assume out_$i64 == 1;
    goto corral_source_split_6128;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i63, 1);
    goto corral_source_split_6126;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.4, out_$p62);
    goto corral_source_split_6125;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p59, $mul.ref(out_$i60, 56)), $mul.ref(36, 1));
    goto corral_source_split_6124;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    goto corral_source_split_6123;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i57);
    goto corral_source_split_6122;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.4, out_$p58);
    goto corral_source_split_6121;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_6120;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p58, out_$p59, out_$i60, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$p72, out_$i73, out_$i74, out_$i75, out_$i57 := cpia2_s_fmt_vid_cap_loop_$bb14(in_$p4, in_$p54, out_$p58, out_$p59, out_$i60, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$p72, out_$i73, out_$i74, out_$i75, out_$i57);
    return;

  exit:
    return;
}



procedure cpia2_s_fmt_vid_cap_loop_$bb14(in_$p4: ref, in_$p54: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i57: i32) returns (out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i57: i32);
  modifies $M.4, $M.18, $M.19, $M.20, $M.21, $M.22, $M.8, $CurrAddr, assertsPassed, $M.26, $M.9, $M.7;



implementation cpia2_dqbuf_loop_$bb23(in_$p3: ref, in_$p5: ref, in_$p42: ref, in_$p43: ref, in_$p47: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i32, in_$i60: i1) returns (out_$p47: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i32, out_$i60: i1)
{

  entry:
    out_$p47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60 := in_$p47, in_$p49, in_$p50, in_$p51, in_$i52, in_$i53, in_$p54, in_$p55, in_$i56, in_$i57, in_$p58, in_$i59, in_$i60;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p5, $mul.ref(0, 2824)), $mul.ref(2672, 1));
    goto corral_source_split_6512;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(out_$i60 == 1);
    goto $bb34_dummy;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    out_$p47 := out_$p50;
    assume true;
    goto $bb34;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i59, 0);
    goto corral_source_split_6535;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} out_$i59 := video_is_registered(in_$p43);
    call {:si_unique_call 960} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_6534;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} prepare_to_wait(in_$p42, in_$p3, 1);
    goto corral_source_split_6533;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} schedule();
    goto corral_source_split_6531;

  $bb30:
    assume out_$i57 == 1;
    goto corral_source_split_6530;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    out_$p58 := out_$p50;
    assume true;
    goto $bb30;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, 0);
    goto corral_source_split_6528;

  SeqInstr_114:
    call {:si_unique_call 956} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_6527;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} out_$i56 := signal_pending(out_$p55);
    goto SeqInstr_113;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} out_$p55 := get_current();
    goto corral_source_split_6526;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    out_$p54 := out_$p50;
    assume true;
    goto $bb27;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 2);
    goto corral_source_split_6516;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.4, out_$p51);
    goto corral_source_split_6515;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p50, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_6514;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.4, out_$p49);
    goto corral_source_split_6513;

  $bb34_dummy:
    call {:si_unique_call 1} out_$p47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60 := cpia2_dqbuf_loop_$bb23(in_$p3, in_$p5, in_$p42, in_$p43, out_$p47, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60);
    return;

  exit:
    return;
}



procedure cpia2_dqbuf_loop_$bb23(in_$p3: ref, in_$p5: ref, in_$p42: ref, in_$p43: ref, in_$p47: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i32, in_$i60: i1) returns (out_$p47: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i32, out_$i60: i1);
  modifies $M.26, $M.4, $M.8, $M.9, $M.7, $CurrAddr, assertsPassed;



implementation cpia2_s_parm_loop_$bb16(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i34: i32, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$p57: ref, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i62: i32, in_$i63: i1, in_$i35: i32, in_$i64: i32, in_cmdloc_dummy_var_39: [ref]i8, in_cmdloc_dummy_var_40: [ref]i8, in_cmdloc_dummy_var_41: [ref]i8, in_cmdloc_dummy_var_42: [ref]i8, in_cmdloc_dummy_var_43: [ref]i8, in_cmdloc_dummy_var_44: [ref]i8) returns (out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$p57: ref, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i62: i32, out_$i63: i1, out_$i35: i32, out_$i64: i32, out_cmdloc_dummy_var_39: [ref]i8, out_cmdloc_dummy_var_40: [ref]i8, out_cmdloc_dummy_var_41: [ref]i8, out_cmdloc_dummy_var_42: [ref]i8, out_cmdloc_dummy_var_43: [ref]i8, out_cmdloc_dummy_var_44: [ref]i8)
{

  entry:
    out_$p36, out_$p37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i62, out_$i63, out_$i35, out_$i64, out_cmdloc_dummy_var_39, out_cmdloc_dummy_var_40, out_cmdloc_dummy_var_41, out_cmdloc_dummy_var_42, out_cmdloc_dummy_var_43, out_cmdloc_dummy_var_44 := in_$p36, in_$p37, in_$i38, in_$p40, in_$p41, in_$p42, in_$p43, in_$i44, in_$p45, in_$i46, in_$i47, in_$p48, in_$p49, in_$i50, in_$p51, in_$i52, in_$i53, in_$p54, in_$p55, in_$i56, in_$p57, in_$i58, in_$i59, in_$i60, in_$i62, in_$i63, in_$i35, in_$i64, in_cmdloc_dummy_var_39, in_cmdloc_dummy_var_40, in_cmdloc_dummy_var_41, in_cmdloc_dummy_var_42, in_cmdloc_dummy_var_43, in_cmdloc_dummy_var_44;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_7014;

  $bb22:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    out_$i35 := out_$i62;
    goto $bb22_dummy;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i62;
    assume true;
    goto $bb22;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    out_$i63 := $sle.i32(out_$i62, in_$i34);
    goto corral_source_split_7050;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i35, 1);
    call {:si_unique_call 1008} {:cexpr "i"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_7049;

  $bb19:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i35;
    assume true;
    goto $bb19;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    out_$i59 := $uge.i32(out_$i56, out_$i58);
    goto corral_source_split_7042;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.4, out_$p57);
    goto corral_source_split_7041;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7040;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.4, out_$p55);
    goto corral_source_split_7039;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7038;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p54, out_$i53);
    goto corral_source_split_7037;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7036;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    out_$i53 := $mul.i32(out_$i50, out_$i52);
    goto corral_source_split_7035;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.4, out_$p51);
    goto corral_source_split_7034;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7033;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.4, out_$p49);
    goto corral_source_split_7032;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7031;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p48, out_$i47);
    goto corral_source_split_7030;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7029;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    out_$i47 := $mul.i32(out_$i44, out_$i46);
    goto corral_source_split_7028;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.4, out_$p45);
    goto corral_source_split_7027;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7026;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.4, out_$p43);
    goto corral_source_split_7025;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7024;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_42 := $M.4;
    out_cmdloc_dummy_var_43 := $M.4;
    call {:si_unique_call 1007} out_cmdloc_dummy_var_44 := $memcpy.i8(out_cmdloc_dummy_var_42, out_cmdloc_dummy_var_43, out_$p41, out_$p42, 8, $zext.i32.i64(4), 0 == 1);
    $M.4 := out_cmdloc_dummy_var_44;
    goto corral_source_split_7023;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(out_$p40);
    goto corral_source_split_7022;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_7021;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(framerate_controls, $mul.ref(0, 72)), $mul.ref(out_$i38, 12)), $mul.ref(4, 1));
    goto corral_source_split_7020;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i35);
    goto corral_source_split_7019;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_39 := $M.4;
    out_cmdloc_dummy_var_40 := $M.4;
    call {:si_unique_call 1006} out_cmdloc_dummy_var_41 := $memcpy.i8(out_cmdloc_dummy_var_39, out_cmdloc_dummy_var_40, out_$p36, out_$p37, 8, $zext.i32.i64(4), 0 == 1);
    $M.4 := out_cmdloc_dummy_var_41;
    goto corral_source_split_7018;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_7017;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_7016;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p36, out_$p37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i62, out_$i63, out_$i35, out_$i64, out_cmdloc_dummy_var_39, out_cmdloc_dummy_var_40, out_cmdloc_dummy_var_41, out_cmdloc_dummy_var_42, out_cmdloc_dummy_var_43, out_cmdloc_dummy_var_44 := cpia2_s_parm_loop_$bb16(in_$p3, in_$p4, in_$p5, in_$i34, out_$p36, out_$p37, out_$i38, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i62, out_$i63, out_$i35, out_$i64, out_cmdloc_dummy_var_39, out_cmdloc_dummy_var_40, out_cmdloc_dummy_var_41, out_cmdloc_dummy_var_42, out_cmdloc_dummy_var_43, out_cmdloc_dummy_var_44);
    return;

  exit:
    return;
}



procedure cpia2_s_parm_loop_$bb16(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i34: i32, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$p57: ref, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i62: i32, in_$i63: i1, in_$i35: i32, in_$i64: i32, in_cmdloc_dummy_var_39: [ref]i8, in_cmdloc_dummy_var_40: [ref]i8, in_cmdloc_dummy_var_41: [ref]i8, in_cmdloc_dummy_var_42: [ref]i8, in_cmdloc_dummy_var_43: [ref]i8, in_cmdloc_dummy_var_44: [ref]i8) returns (out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$p57: ref, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i62: i32, out_$i63: i1, out_$i35: i32, out_$i64: i32, out_cmdloc_dummy_var_39: [ref]i8, out_cmdloc_dummy_var_40: [ref]i8, out_cmdloc_dummy_var_41: [ref]i8, out_cmdloc_dummy_var_42: [ref]i8, out_cmdloc_dummy_var_43: [ref]i8, out_cmdloc_dummy_var_44: [ref]i8);
  modifies $M.4;



implementation find_earliest_filled_buffer_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$i14: i1, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i15: i32, in_$i16: i32, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i5: i32, in_$i6: i32, in_$i49: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$i14: i1, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i15: i32, out_$i16: i32, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i5: i32, out_$i6: i32, out_$i49: i32)
{

  entry:
    out_$p7, out_$p8, out_$i9, out_$p11, out_$i12, out_$i13, out_$i14, out_$p17, out_$p18, out_$i19, out_$p22, out_$p23, out_$i24, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i15, out_$i16, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i5, out_$i6, out_$i49 := in_$p7, in_$p8, in_$i9, in_$p11, in_$i12, in_$i13, in_$i14, in_$p17, in_$p18, in_$i19, in_$p22, in_$p23, in_$i24, in_$p27, in_$i28, in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$p34, in_$i35, in_$i36, in_$p37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i15, in_$i16, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i5, in_$i6, in_$i49;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7253;

  $bb21:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i5, out_$i6 := out_$i45, out_$i46;
    goto $bb21_dummy;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i45;
    assume true;
    goto $bb21;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    out_$i48 := $sgt.i32(out_$i47, out_$i46);
    goto corral_source_split_7298;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.4, in_$p1);
    goto corral_source_split_7297;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i44, 1);
    call {:si_unique_call 1020} {:cexpr "i"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_7296;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7295;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i44, out_$i45 := out_$i6, out_$i5;
    goto $bb20;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    out_$i44, out_$i45 := out_$i15, out_$i16;
    goto $bb20;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7283;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i15, out_$i16 := out_$i42, out_$i43;
    goto $bb10;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    out_$i15, out_$i16 := out_$i6, out_$i6;
    goto $bb10;

  $bb8:
    assume out_$i14 == 1;
    goto corral_source_split_7266;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i5, 0);
    goto corral_source_split_7264;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_7263;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, 2);
    goto corral_source_split_7261;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.4, out_$p11);
    goto corral_source_split_7260;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p8, $mul.ref(out_$i9, 56)), $mul.ref(36, 1));
    goto corral_source_split_7259;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    goto corral_source_split_7258;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i6);
    goto corral_source_split_7257;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.4, out_$p7);
    goto corral_source_split_7256;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_7255;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i42, out_$i43 := out_$i6, out_$i5;
    goto $bb19;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i42, out_$i43 := out_$i6, out_$i6;
    goto $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i41 == 1;
    goto $bb12;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i31 == 1;
    goto $bb12;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i64(out_$i28, out_$i30);
    goto corral_source_split_7281;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i64($M.4, out_$p29);
    goto corral_source_split_7280;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.4, out_$p27);
    out_$p29 := $add.ref($add.ref($add.ref(out_$p23, $mul.ref(out_$i24, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7279;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7278;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    goto corral_source_split_7277;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(out_$i5);
    goto corral_source_split_7276;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.4, out_$p22);
    goto corral_source_split_7275;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_7274;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    goto corral_source_split_7273;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    goto corral_source_split_7272;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i6);
    goto corral_source_split_7271;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.4, out_$p17);
    goto corral_source_split_7270;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2664, 1));
    goto corral_source_split_7269;

  $bb9:
    assume !(out_$i14 == 1);
    goto corral_source_split_7268;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i64(out_$i38, out_$i40);
    goto corral_source_split_7293;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i64($M.4, out_$p39);
    goto corral_source_split_7292;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i64($M.4, out_$p37);
    out_$p39 := $add.ref($add.ref($add.ref(out_$p23, $mul.ref(out_$i24, 56)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_7291;

  $bb14:
    assume out_$i36 == 1;
    out_$p37 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 56)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_7290;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i64(out_$i33, out_$i35);
    goto corral_source_split_7288;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i64($M.4, out_$p34);
    goto corral_source_split_7287;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i64($M.4, out_$p32);
    out_$p34 := $add.ref($add.ref($add.ref(out_$p23, $mul.ref(out_$i24, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7286;

  $bb13:
    assume !(out_$i31 == 1);
    out_$p32 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7285;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb16;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb16;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$i9, out_$p11, out_$i12, out_$i13, out_$i14, out_$p17, out_$p18, out_$i19, out_$p22, out_$p23, out_$i24, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i15, out_$i16, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i5, out_$i6, out_$i49 := find_earliest_filled_buffer_loop_$bb4(in_$p0, in_$p1, out_$p7, out_$p8, out_$i9, out_$p11, out_$i12, out_$i13, out_$i14, out_$p17, out_$p18, out_$i19, out_$p22, out_$p23, out_$i24, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i15, out_$i16, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i5, out_$i6, out_$i49);
    return;

  exit:
    return;
}



procedure find_earliest_filled_buffer_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$i14: i1, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i15: i32, in_$i16: i32, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i5: i32, in_$i6: i32, in_$i49: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$i14: i1, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i15: i32, out_$i16: i32, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i5: i32, out_$i6: i32, out_$i49: i32);



implementation sync_loop_$bb19(in_$p2: ref, in_$p4: ref, in_$i5: i64, in_$p34: ref, in_$p35: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1) returns (out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1)
{

  entry:
    out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45 := in_$p38, in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i44, in_$i45;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p4, $mul.ref(in_$i5, 56)), $mul.ref(36, 1));
    goto corral_source_split_7380;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i45 == 1);
    goto $bb29_dummy;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 0);
    goto corral_source_split_7400;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.4, in_$p35);
    goto corral_source_split_7399;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} prepare_to_wait(in_$p34, in_$p2, 1);
    goto corral_source_split_7398;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} schedule();
    goto corral_source_split_7396;

  $bb25:
    assume out_$i43 == 1;
    goto corral_source_split_7395;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 0);
    goto corral_source_split_7393;

  SeqInstr_132:
    call {:si_unique_call 1038} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_7392;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} out_$i42 := signal_pending(out_$p41);
    goto SeqInstr_131;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} out_$p41 := get_current();
    goto corral_source_split_7391;

  $bb21:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 2);
    goto corral_source_split_7382;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.4, out_$p38);
    goto corral_source_split_7381;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45 := sync_loop_$bb19(in_$p2, in_$p4, in_$i5, in_$p34, in_$p35, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45);
    return;

  exit:
    return;
}



procedure sync_loop_$bb19(in_$p2: ref, in_$p4: ref, in_$i5: i64, in_$p34: ref, in_$p35: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1) returns (out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1);
  modifies $M.26, $M.4, $M.8, $M.9, $M.7, $CurrAddr, assertsPassed;



implementation sync_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p4: ref, in_$i5: i64, in_$p7: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1) returns (out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p30: ref, out_$p31: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1)
{

  entry:
    out_$p11, out_$i12, out_$i13, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p26, out_$p27, out_$p28, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55 := in_$p11, in_$i12, in_$i13, in_$p16, in_$p17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p26, in_$p27, in_$p28, in_$p30, in_$p31, in_$p33, in_$p34, in_$p35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb37_dummy;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i54, 2);
    goto corral_source_split_7417;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.4, in_$p7);
    goto corral_source_split_7416;

  $bb35:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 0);
    goto corral_source_split_7412;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} out_$i52 := video_is_registered(out_$p51);
    call {:si_unique_call 1046} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_7411;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(904, 1));
    goto corral_source_split_7410;

  $bb32:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_7406;

  SeqInstr_138:
    call {:si_unique_call 1044} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_7405;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} out_$i49 := signal_pending(out_$p48);
    goto SeqInstr_137;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} out_$p48 := get_current();
    goto corral_source_split_7404;

  SeqInstr_135:
    goto corral_source_split_7403;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} ldv_mutex_lock_19(out_$p47);
    goto SeqInstr_134;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_7402;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} finish_wait(out_$p46, in_$p2);
    goto corral_source_split_7389;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2552, 1));
    goto corral_source_split_7388;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i37 == 1;
    goto $bb17;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 0);
    goto corral_source_split_7376;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.4, out_$p35);
    goto corral_source_split_7375;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(812, 1));
    goto corral_source_split_7374;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} prepare_to_wait(out_$p34, in_$p2, 1);
    goto corral_source_split_7373;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(2552, 1));
    goto corral_source_split_7372;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, out_$p33, out_$p31);
    goto corral_source_split_7371;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_7370;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7369;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, out_$p30, out_$p28);
    goto corral_source_split_7368;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7367;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7366;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, out_$p27, autoremove_wake_function);
    goto corral_source_split_7365;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7364;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, out_$p26, out_$p23);
    goto corral_source_split_7363;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7362;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    goto corral_source_split_7361;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, out_$p24, 0);
    goto corral_source_split_7360;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7359;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} out_$p23 := get_current();
    goto corral_source_split_7358;

  $bb14:
    assume out_$i22 == 1;
    goto corral_source_split_7357;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 2);
    goto corral_source_split_7355;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.4, out_$p20);
    goto corral_source_split_7354;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p4, $mul.ref(in_$i5, 56)), $mul.ref(36, 1));
    goto corral_source_split_7353;

  $bb11:
    assume out_$i19 == 1;
    goto corral_source_split_7352;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_7350;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.4, out_$p17);
    goto corral_source_split_7349;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(812, 1));
    goto corral_source_split_7348;

  SeqInstr_129:
    goto corral_source_split_7347;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} ldv_mutex_unlock_18(out_$p16);
    goto SeqInstr_128;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(360, 1));
    goto corral_source_split_7346;

  $bb9:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, 0);
    goto corral_source_split_7338;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.4, out_$p11);
    goto corral_source_split_7337;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(812, 1));
    goto corral_source_split_7336;

  $bb20:
    assume out_$i40 == 1;
    goto corral_source_split_7384;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 2);
    goto corral_source_split_7382;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.4, out_$p38);
    goto corral_source_split_7381;

  $bb19:
    call out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45 := sync_loop_$bb19(in_$p2, in_$p4, in_$i5, out_$p34, out_$p35, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45);
    goto $bb19_last;

  $bb19_last:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p4, $mul.ref(in_$i5, 56)), $mul.ref(36, 1));
    goto corral_source_split_7380;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i45 == 1);
    assume false;
    return;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb29;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 0);
    goto corral_source_split_7400;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.4, out_$p35);
    goto corral_source_split_7399;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} prepare_to_wait(out_$p34, in_$p2, 1);
    goto corral_source_split_7398;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} schedule();
    goto corral_source_split_7396;

  $bb25:
    assume out_$i43 == 1;
    goto corral_source_split_7395;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 0);
    goto corral_source_split_7393;

  SeqInstr_132:
    call {:si_unique_call 1038} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_7392;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} out_$i42 := signal_pending(out_$p41);
    goto SeqInstr_131;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} out_$p41 := get_current();
    goto corral_source_split_7391;

  $bb21:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume !(out_$i37 == 1);
    goto corral_source_split_7378;

  $bb22:
    assume out_$i45 == 1;
    goto corral_source_split_7386;

  $bb26:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i19 == 1);
    goto $bb13;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb13;

  $bb37_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$i13, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p26, out_$p27, out_$p28, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55 := sync_loop_$bb4(in_$p0, in_$p2, in_$p4, in_$i5, in_$p7, out_$p11, out_$i12, out_$i13, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p26, out_$p27, out_$p28, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55);
    return;

  exit:
    return;
}



procedure sync_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p4: ref, in_$i5: i64, in_$p7: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1) returns (out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p30: ref, out_$p31: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1);
  modifies $M.26, $M.4, $M.8, $M.9, $M.7, $CurrAddr, assertsPassed, $M.22, $M.21, $M.20, $M.19, $M.18;



implementation main_loop_$bb1(in_$i0: i32, in_$i1: i1, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i32, in_$i9: i1, in_$i10: i32, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$p29: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$p57: ref, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$i62: i32, in_$i63: i64, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i68: i32, in_$i69: i64, in_$i71: i32, in_$i72: i1, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$i118: i1, in_$i119: i1, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i1, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$p150: ref, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$p161: ref, in_$p162: ref, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$i170: i32, in_$i171: i1, in_$p172: ref, in_$p173: ref, in_$i174: i32, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$p179: ref, in_$p180: ref, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$p185: ref, in_$p186: ref, in_$i188: i32, in_$i189: i1, in_$p190: ref, in_$p191: ref, in_$p192: ref, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$p197: ref, in_$p198: ref, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$p203: ref, in_$p204: ref, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$p209: ref, in_$p210: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$p215: ref, in_$p216: ref, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$p221: ref, in_$p222: ref, in_$i224: i32, in_$i225: i1, in_$p226: ref, in_$p227: ref, in_$p228: ref, in_$i230: i32, in_$i231: i1, in_$p232: ref, in_$p233: ref, in_$p234: ref, in_$i236: i32, in_$i237: i1, in_$p238: ref, in_$p239: ref, in_$p240: ref, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$p245: ref, in_$p246: ref, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$p251: ref, in_$p252: ref, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$p257: ref, in_$i259: i32, in_$i260: i1, in_$p261: ref, in_$p262: ref, in_$p263: ref, in_$i265: i32, in_$i266: i1, in_$p267: ref, in_$p268: ref, in_$i269: i32, in_$i271: i32, in_$i272: i1, in_$p273: ref, in_$p274: ref, in_$i275: i32, in_vslice_dummy_var_465: i32, in_vslice_dummy_var_466: i32, in_vslice_dummy_var_467: i32, in_vslice_dummy_var_468: i64, in_vslice_dummy_var_469: i32, in_vslice_dummy_var_470: i32, in_vslice_dummy_var_471: i64, in_vslice_dummy_var_472: i64, in_vslice_dummy_var_473: i32, in_vslice_dummy_var_474: i32, in_vslice_dummy_var_475: i32, in_vslice_dummy_var_476: i32, in_vslice_dummy_var_477: i32, in_vslice_dummy_var_478: i32, in_vslice_dummy_var_479: i32, in_vslice_dummy_var_480: i32, in_vslice_dummy_var_481: i32, in_vslice_dummy_var_482: i32, in_vslice_dummy_var_483: i32, in_vslice_dummy_var_484: i32, in_vslice_dummy_var_485: i32, in_vslice_dummy_var_486: i32, in_vslice_dummy_var_487: i32, in_vslice_dummy_var_488: i32, in_vslice_dummy_var_489: i32, in_vslice_dummy_var_490: i32, in_vslice_dummy_var_491: i32, in_vslice_dummy_var_492: i32, in_vslice_dummy_var_493: i32, in_vslice_dummy_var_494: i32, in_vslice_dummy_var_495: i32, in_vslice_dummy_var_496: i32, in_vslice_dummy_var_497: i32) returns (out_$i0: i32, out_$i1: i1, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i32, out_$i9: i1, out_$i10: i32, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$p29: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$p57: ref, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$i62: i32, out_$i63: i64, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i68: i32, out_$i69: i64, out_$i71: i32, out_$i72: i1, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$i118: i1, out_$i119: i1, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i1, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$p150: ref, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$p161: ref, out_$p162: ref, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$i170: i32, out_$i171: i1, out_$p172: ref, out_$p173: ref, out_$i174: i32, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$p179: ref, out_$p180: ref, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$p185: ref, out_$p186: ref, out_$i188: i32, out_$i189: i1, out_$p190: ref, out_$p191: ref, out_$p192: ref, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$p197: ref, out_$p198: ref, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$p203: ref, out_$p204: ref, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$p209: ref, out_$p210: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$p215: ref, out_$p216: ref, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$p221: ref, out_$p222: ref, out_$i224: i32, out_$i225: i1, out_$p226: ref, out_$p227: ref, out_$p228: ref, out_$i230: i32, out_$i231: i1, out_$p232: ref, out_$p233: ref, out_$p234: ref, out_$i236: i32, out_$i237: i1, out_$p238: ref, out_$p239: ref, out_$p240: ref, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$p245: ref, out_$p246: ref, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$p251: ref, out_$p252: ref, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$p257: ref, out_$i259: i32, out_$i260: i1, out_$p261: ref, out_$p262: ref, out_$p263: ref, out_$i265: i32, out_$i266: i1, out_$p267: ref, out_$p268: ref, out_$i269: i32, out_$i271: i32, out_$i272: i1, out_$p273: ref, out_$p274: ref, out_$i275: i32, out_vslice_dummy_var_465: i32, out_vslice_dummy_var_466: i32, out_vslice_dummy_var_467: i32, out_vslice_dummy_var_468: i64, out_vslice_dummy_var_469: i32, out_vslice_dummy_var_470: i32, out_vslice_dummy_var_471: i64, out_vslice_dummy_var_472: i64, out_vslice_dummy_var_473: i32, out_vslice_dummy_var_474: i32, out_vslice_dummy_var_475: i32, out_vslice_dummy_var_476: i32, out_vslice_dummy_var_477: i32, out_vslice_dummy_var_478: i32, out_vslice_dummy_var_479: i32, out_vslice_dummy_var_480: i32, out_vslice_dummy_var_481: i32, out_vslice_dummy_var_482: i32, out_vslice_dummy_var_483: i32, out_vslice_dummy_var_484: i32, out_vslice_dummy_var_485: i32, out_vslice_dummy_var_486: i32, out_vslice_dummy_var_487: i32, out_vslice_dummy_var_488: i32, out_vslice_dummy_var_489: i32, out_vslice_dummy_var_490: i32, out_vslice_dummy_var_491: i32, out_vslice_dummy_var_492: i32, out_vslice_dummy_var_493: i32, out_vslice_dummy_var_494: i32, out_vslice_dummy_var_495: i32, out_vslice_dummy_var_496: i32, out_vslice_dummy_var_497: i32)
{

  entry:
    out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i31, out_$i32, out_$p33, out_$p34, out_$i36, out_$i37, out_$p38, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p47, out_$i49, out_$i50, out_$p51, out_$p52, out_$i54, out_$i55, out_$p56, out_$p57, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p145, out_$i147, out_$i148, out_$p149, out_$p150, out_$i152, out_$i153, out_$p154, out_$p155, out_$p156, out_$i158, out_$i159, out_$p160, out_$p161, out_$p162, out_$i164, out_$i165, out_$p166, out_$p167, out_$p168, out_$i170, out_$i171, out_$p172, out_$p173, out_$i174, out_$i176, out_$i177, out_$p178, out_$p179, out_$p180, out_$i182, out_$i183, out_$p184, out_$p185, out_$p186, out_$i188, out_$i189, out_$p190, out_$p191, out_$p192, out_$i194, out_$i195, out_$p196, out_$p197, out_$p198, out_$i200, out_$i201, out_$p202, out_$p203, out_$p204, out_$i206, out_$i207, out_$p208, out_$p209, out_$p210, out_$i212, out_$i213, out_$p214, out_$p215, out_$p216, out_$i218, out_$i219, out_$p220, out_$p221, out_$p222, out_$i224, out_$i225, out_$p226, out_$p227, out_$p228, out_$i230, out_$i231, out_$p232, out_$p233, out_$p234, out_$i236, out_$i237, out_$p238, out_$p239, out_$p240, out_$i242, out_$i243, out_$p244, out_$p245, out_$p246, out_$i248, out_$i249, out_$p250, out_$p251, out_$p252, out_$i254, out_$i255, out_$p256, out_$p257, out_$i259, out_$i260, out_$p261, out_$p262, out_$p263, out_$i265, out_$i266, out_$p267, out_$p268, out_$i269, out_$i271, out_$i272, out_$p273, out_$p274, out_$i275, out_vslice_dummy_var_465, out_vslice_dummy_var_466, out_vslice_dummy_var_467, out_vslice_dummy_var_468, out_vslice_dummy_var_469, out_vslice_dummy_var_470, out_vslice_dummy_var_471, out_vslice_dummy_var_472, out_vslice_dummy_var_473, out_vslice_dummy_var_474, out_vslice_dummy_var_475, out_vslice_dummy_var_476, out_vslice_dummy_var_477, out_vslice_dummy_var_478, out_vslice_dummy_var_479, out_vslice_dummy_var_480, out_vslice_dummy_var_481, out_vslice_dummy_var_482, out_vslice_dummy_var_483, out_vslice_dummy_var_484, out_vslice_dummy_var_485, out_vslice_dummy_var_486, out_vslice_dummy_var_487, out_vslice_dummy_var_488, out_vslice_dummy_var_489, out_vslice_dummy_var_490, out_vslice_dummy_var_491, out_vslice_dummy_var_492, out_vslice_dummy_var_493, out_vslice_dummy_var_494, out_vslice_dummy_var_495, out_vslice_dummy_var_496, out_vslice_dummy_var_497 := in_$i0, in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$p28, in_$p29, in_$i31, in_$i32, in_$p33, in_$p34, in_$i36, in_$i37, in_$p38, in_$i40, in_$i41, in_$i42, in_$i43, in_$p44, in_$p45, in_$i46, in_$p47, in_$i49, in_$i50, in_$p51, in_$p52, in_$i54, in_$i55, in_$p56, in_$p57, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$p98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$p112, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$p143, in_$p144, in_$p145, in_$i147, in_$i148, in_$p149, in_$p150, in_$i152, in_$i153, in_$p154, in_$p155, in_$p156, in_$i158, in_$i159, in_$p160, in_$p161, in_$p162, in_$i164, in_$i165, in_$p166, in_$p167, in_$p168, in_$i170, in_$i171, in_$p172, in_$p173, in_$i174, in_$i176, in_$i177, in_$p178, in_$p179, in_$p180, in_$i182, in_$i183, in_$p184, in_$p185, in_$p186, in_$i188, in_$i189, in_$p190, in_$p191, in_$p192, in_$i194, in_$i195, in_$p196, in_$p197, in_$p198, in_$i200, in_$i201, in_$p202, in_$p203, in_$p204, in_$i206, in_$i207, in_$p208, in_$p209, in_$p210, in_$i212, in_$i213, in_$p214, in_$p215, in_$p216, in_$i218, in_$i219, in_$p220, in_$p221, in_$p222, in_$i224, in_$i225, in_$p226, in_$p227, in_$p228, in_$i230, in_$i231, in_$p232, in_$p233, in_$p234, in_$i236, in_$i237, in_$p238, in_$p239, in_$p240, in_$i242, in_$i243, in_$p244, in_$p245, in_$p246, in_$i248, in_$i249, in_$p250, in_$p251, in_$p252, in_$i254, in_$i255, in_$p256, in_$p257, in_$i259, in_$i260, in_$p261, in_$p262, in_$p263, in_$i265, in_$i266, in_$p267, in_$p268, in_$i269, in_$i271, in_$i272, in_$p273, in_$p274, in_$i275, in_vslice_dummy_var_465, in_vslice_dummy_var_466, in_vslice_dummy_var_467, in_vslice_dummy_var_468, in_vslice_dummy_var_469, in_vslice_dummy_var_470, in_vslice_dummy_var_471, in_vslice_dummy_var_472, in_vslice_dummy_var_473, in_vslice_dummy_var_474, in_vslice_dummy_var_475, in_vslice_dummy_var_476, in_vslice_dummy_var_477, in_vslice_dummy_var_478, in_vslice_dummy_var_479, in_vslice_dummy_var_480, in_vslice_dummy_var_481, in_vslice_dummy_var_482, in_vslice_dummy_var_483, in_vslice_dummy_var_484, in_vslice_dummy_var_485, in_vslice_dummy_var_486, in_vslice_dummy_var_487, in_vslice_dummy_var_488, in_vslice_dummy_var_489, in_vslice_dummy_var_490, in_vslice_dummy_var_491, in_vslice_dummy_var_492, in_vslice_dummy_var_493, in_vslice_dummy_var_494, in_vslice_dummy_var_495, in_vslice_dummy_var_496, in_vslice_dummy_var_497;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1205} out_$i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1206} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i0);
    call {:si_unique_call 1207} {:cexpr "tmp"} boogie_si_record_i32(out_$i0);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb69_dummy;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb19:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $M.47 := out_$i25;
    call {:si_unique_call 1214} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_8047;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i24, 1);
    goto corral_source_split_8046;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    out_$i24 := $M.47;
    goto corral_source_split_8045;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1213} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8044;

  $bb38:
    assume out_$i23 == 1;
    goto corral_source_split_8043;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, 0);
    goto corral_source_split_8041;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    out_$i22 := $M.53;
    goto corral_source_split_8040;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $M.53 := out_$i21;
    call {:si_unique_call 1212} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_8039;

  SeqInstr_183:
    goto corral_source_split_8038;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} out_$i21 := cpia2_open(out_$p20);
    goto SeqInstr_182;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    out_$p20 := $M.52;
    goto corral_source_split_8037;

  $bb36:
    assume out_$i19 == 1;
    goto corral_source_split_8036;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i18, 1);
    goto corral_source_split_8034;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    out_$i18 := $M.45;
    goto corral_source_split_8033;

  $bb34:
    assume out_$i17 == 1;
    goto corral_source_split_8032;

  $bb30:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i10, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb21:
    assume out_$i11 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i10, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(out_$i10, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_8010:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1208} out_$i10 := __VERIFIER_nondet_int();
    call {:si_unique_call 1209} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i10);
    call {:si_unique_call 1210} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i10);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i9 == 1;
    goto corral_source_split_8010;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i32(out_$i8, 0);
    goto corral_source_split_8008;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    out_$i8 := $M.45;
    goto corral_source_split_8007;

  $bb16:
    assume out_$i7 == 1;
    goto corral_source_split_8006;

  $bb12:
    assume out_$i5 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb3:
    assume out_$i1 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := $slt.i32(out_$i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i1 := $slt.i32(out_$i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb47:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1218} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8062;

  SeqInstr_189:
    goto corral_source_split_8061;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} out_vslice_dummy_var_466 := cpia2_mmap(out_$p33, out_$p34);
    goto SeqInstr_188;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    out_$p34 := $M.54;
    goto corral_source_split_8060;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    out_$p33 := $M.52;
    goto corral_source_split_8059;

  $bb46:
    assume out_$i32 == 1;
    goto corral_source_split_8058;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 2);
    goto corral_source_split_8056;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i31 := $M.45;
    goto corral_source_split_8055;

  $bb44:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1216} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8053;

  SeqInstr_186:
    goto corral_source_split_8052;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} out_vslice_dummy_var_465 := cpia2_mmap(out_$p28, out_$p29);
    goto SeqInstr_185;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    out_$p29 := $M.54;
    goto corral_source_split_8051;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    out_$p28 := $M.52;
    goto corral_source_split_8050;

  $bb43:
    assume out_$i27 == 1;
    goto corral_source_split_8049;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, 1);
    goto corral_source_split_8026;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    out_$i26 := $M.45;
    goto corral_source_split_8025;

  $bb32:
    assume out_$i16 == 1;
    goto corral_source_split_8024;

  $bb31:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i10, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb50:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $M.47 := out_$i41;
    call {:si_unique_call 1221} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_8070;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    out_$i41 := $sub.i32(out_$i40, 1);
    goto corral_source_split_8069;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    out_$i40 := $M.47;
    goto corral_source_split_8068;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1220} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8067;

  SeqInstr_192:
    goto corral_source_split_8066;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} out_vslice_dummy_var_467 := cpia2_close(out_$p38);
    goto SeqInstr_191;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    out_$p38 := $M.52;
    goto corral_source_split_8065;

  $bb49:
    assume out_$i37 == 1;
    goto corral_source_split_8064;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 2);
    goto corral_source_split_8030;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    out_$i36 := $M.45;
    goto corral_source_split_8029;

  $bb33:
    assume !(out_$i16 == 1);
    goto corral_source_split_8028;

  $bb53:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1223} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8078;

  SeqInstr_195:
    goto corral_source_split_8077;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} out_vslice_dummy_var_468 := cpia2_v4l_read(out_$p44, out_$p45, out_$i46, out_$p47);
    goto SeqInstr_194;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    out_$p47 := $M.57;
    goto corral_source_split_8076;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    out_$i46 := $M.56;
    goto corral_source_split_8075;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    out_$p45 := $M.55;
    goto corral_source_split_8074;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    out_$p44 := $M.52;
    goto corral_source_split_8073;

  $bb52:
    assume out_$i43 == 1;
    goto corral_source_split_8072;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 2);
    goto corral_source_split_8014;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    out_$i42 := $M.45;
    goto corral_source_split_8013;

  $bb23:
    assume out_$i12 == 1;
    goto corral_source_split_8012;

  $bb22:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i10, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb59:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1227} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8093;

  SeqInstr_201:
    goto corral_source_split_8092;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} out_vslice_dummy_var_470 := cpia2_v4l_poll(out_$p56, out_$p57);
    goto SeqInstr_200;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    out_$p57 := $M.58;
    goto corral_source_split_8091;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    out_$p56 := $M.52;
    goto corral_source_split_8090;

  $bb58:
    assume out_$i55 == 1;
    goto corral_source_split_8089;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i54, 2);
    goto corral_source_split_8087;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i54 := $M.45;
    goto corral_source_split_8086;

  $bb56:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1225} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8084;

  SeqInstr_198:
    goto corral_source_split_8083;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} out_vslice_dummy_var_469 := cpia2_v4l_poll(out_$p51, out_$p52);
    goto SeqInstr_197;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    out_$p52 := $M.58;
    goto corral_source_split_8082;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    out_$p51 := $M.52;
    goto corral_source_split_8081;

  $bb55:
    assume out_$i50 == 1;
    goto corral_source_split_8080;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i49, 1);
    goto corral_source_split_8018;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    out_$i49 := $M.45;
    goto corral_source_split_8017;

  $bb25:
    assume out_$i13 == 1;
    goto corral_source_split_8016;

  $bb24:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i10, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb65:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1231} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8110;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} out_vslice_dummy_var_472 := video_ioctl2(out_$p67, out_$i68, out_$i69);
    goto corral_source_split_8109;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    out_$i69 := $M.60;
    goto corral_source_split_8108;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    out_$i68 := $M.59;
    goto corral_source_split_8107;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    out_$p67 := $M.52;
    goto corral_source_split_8106;

  $bb64:
    assume out_$i66 == 1;
    goto corral_source_split_8105;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i32(out_$i65, 2);
    goto corral_source_split_8103;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i65 := $M.45;
    goto corral_source_split_8102;

  $bb62:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1229} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8100;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} out_vslice_dummy_var_471 := video_ioctl2(out_$p61, out_$i62, out_$i63);
    goto corral_source_split_8099;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    out_$i63 := $M.60;
    goto corral_source_split_8098;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    out_$i62 := $M.59;
    goto corral_source_split_8097;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    out_$p61 := $M.52;
    goto corral_source_split_8096;

  $bb61:
    assume out_$i60 == 1;
    goto corral_source_split_8095;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i59, 1);
    goto corral_source_split_8022;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    out_$i59 := $M.45;
    goto corral_source_split_8021;

  $bb27:
    assume out_$i14 == 1;
    goto corral_source_split_8020;

  $bb26:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i10, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i14 == 1);
    goto $bb29;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb29;

  $bb71:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    goto $bb72;

  SeqInstr_204:
    goto corral_source_split_8113;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} ldv_main_exported_1();
    goto SeqInstr_203;

  $bb70:
    assume out_$i72 == 1;
    goto corral_source_split_8112;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i32(out_$i71, 0);
    goto corral_source_split_8000;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    out_$i71 := $M.46;
    goto corral_source_split_7999;

  $bb14:
    assume out_$i6 == 1;
    goto corral_source_split_7998;

  $bb13:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    out_$i6 := $slt.i32(out_$i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb74:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb84:
    assume {:verifier.code 0} true;
    assume !(out_$i80 == 1);
    goto $bb85;

  $bb87:
    assume {:verifier.code 0} true;
    assume !(out_$i82 == 1);
    goto $bb85;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 0);
    goto corral_source_split_8127;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    out_$i81 := $M.47;
    goto corral_source_split_8126;

  $bb83:
    assume out_$i80 == 1;
    goto corral_source_split_8125;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i32(out_$i79, 2);
    goto corral_source_split_8123;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    out_$i79 := $M.48;
    goto corral_source_split_8122;

  $bb81:
    assume out_$i78 == 1;
    goto corral_source_split_8121;

  $bb76:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i75, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb75:
    assume {:verifier.code 0} true;
    out_$i76 := $slt.i32(out_$i75, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_8115:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1233} out_$i75 := __VERIFIER_nondet_int();
    call {:si_unique_call 1234} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i75);
    call {:si_unique_call 1235} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i75);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb73:
    assume out_$i74 == 1;
    goto corral_source_split_8115;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i32(out_$i73, 0);
    goto corral_source_split_8004;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    out_$i73 := $M.48;
    goto corral_source_split_8003;

  $bb15:
    assume !(out_$i6 == 1);
    goto corral_source_split_8002;

  $bb92:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb97:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1246} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8152;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1245} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8151;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1244} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_8150;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1243} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8149;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1242} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8148;

  $bb96:
    assume out_$i89 == 1;
    goto corral_source_split_8147;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i88, 0);
    goto corral_source_split_8145;

  $bb95:
    assume {:verifier.code 0} true;
    out_$i88 := $M.61;
    goto corral_source_split_8144;

  $bb94:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i32(out_$i86, 0);
    goto corral_source_split_8139;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    out_$i86 := $M.61;
    goto corral_source_split_8138;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $M.61 := out_$i85;
    call {:si_unique_call 1240} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i85);
    goto corral_source_split_8137;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} out_$i85 := cpia2_init();
    goto corral_source_split_8136;

  $bb91:
    assume out_$i84 == 1;
    goto corral_source_split_8135;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i83, 1);
    goto corral_source_split_8119;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    out_$i83 := $M.48;
    goto corral_source_split_8118;

  $bb78:
    assume out_$i77 == 1;
    goto corral_source_split_8117;

  $bb77:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i75, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb79:
    assume {:verifier.code 0} true;
    assume !(out_$i77 == 1);
    goto $bb80;

  $bb82:
    assume {:verifier.code 0} true;
    assume !(out_$i78 == 1);
    goto $bb80;

  $bb103:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb113:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $M.47 := out_$i100;
    call {:si_unique_call 1252} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_8170;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    out_$i100 := $sub.i32(out_$i99, 1);
    goto corral_source_split_8169;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    out_$i99 := $M.47;
    goto corral_source_split_8168;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1251} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8167;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} video_device_release_empty(out_$p98);
    goto corral_source_split_8166;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    out_$p98 := $M.62;
    goto corral_source_split_8165;

  $bb112:
    assume out_$i97 == 1;
    goto corral_source_split_8164;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i96, 2);
    goto corral_source_split_8162;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    out_$i96 := $M.49;
    goto corral_source_split_8161;

  $bb110:
    assume out_$i95 == 1;
    goto corral_source_split_8160;

  $bb105:
    assume out_$i93 == 1;
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i92, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb104:
    assume {:verifier.code 0} true;
    out_$i93 := $slt.i32(out_$i92, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_8154:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1247} out_$i92 := __VERIFIER_nondet_int();
    call {:si_unique_call 1248} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i92);
    call {:si_unique_call 1249} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i92);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb102:
    assume out_$i91 == 1;
    goto corral_source_split_8154;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    out_$i91 := $ne.i32(out_$i90, 0);
    goto corral_source_split_7988;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    out_$i90 := $M.49;
    goto corral_source_split_7987;

  $bb5:
    assume out_$i2 == 1;
    goto corral_source_split_7986;

  $bb4:
    assume !(out_$i1 == 1);
    assume {:verifier.code 0} true;
    out_$i2 := $slt.i32(out_$i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb117:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $M.47 := out_$i105;
    call {:si_unique_call 1255} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_8177;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    out_$i105 := $add.i32(out_$i104, 1);
    goto corral_source_split_8176;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    out_$i104 := $M.47;
    goto corral_source_split_8175;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1254} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8174;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} out_vslice_dummy_var_473 := ldv_cpia2_template_probe_3();
    goto corral_source_split_8173;

  $bb116:
    assume out_$i102 == 1;
    goto corral_source_split_8172;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i101, 1);
    goto corral_source_split_8158;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    out_$i101 := $M.49;
    goto corral_source_split_8157;

  $bb107:
    assume out_$i94 == 1;
    goto corral_source_split_8156;

  $bb106:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i92, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb108:
    assume {:verifier.code 0} true;
    assume !(out_$i94 == 1);
    goto $bb109;

  $bb111:
    assume {:verifier.code 0} true;
    assume !(out_$i95 == 1);
    goto $bb109;

  $bb122:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb127:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1260} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_8188;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} out_vslice_dummy_var_474 := cpia2_s_ctrl(out_$p112);
    goto corral_source_split_8187;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    out_$p112 := $M.63;
    goto corral_source_split_8186;

  $bb126:
    assume out_$i111 == 1;
    goto corral_source_split_8185;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 1);
    goto corral_source_split_8183;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    out_$i110 := $M.50;
    goto corral_source_split_8182;

  $bb124:
    assume out_$i109 == 1;
    goto corral_source_split_8181;

  $bb123:
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i32(out_$i108, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_8179:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1256} out_$i108 := __VERIFIER_nondet_int();
    call {:si_unique_call 1257} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i108);
    call {:si_unique_call 1258} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i108);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb121:
    assume out_$i107 == 1;
    goto corral_source_split_8179;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i32(out_$i106, 0);
    goto corral_source_split_7992;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    out_$i106 := $M.50;
    goto corral_source_split_7991;

  $bb7:
    assume out_$i3 == 1;
    goto corral_source_split_7990;

  $bb6:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    out_$i3 := $slt.i32(out_$i0, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb125:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb133:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb185:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1265} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8289;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} out_vslice_dummy_var_475 := cpia2_reqbufs(out_$p143, out_$p144, out_$p145);
    goto corral_source_split_8288;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    out_$p145 := $M.66;
    goto corral_source_split_8287;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    out_$p144 := $M.65;
    goto corral_source_split_8286;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    out_$p143 := $M.64;
    goto corral_source_split_8285;

  $bb184:
    assume out_$i142 == 1;
    goto corral_source_split_8284;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, 1);
    goto corral_source_split_8282;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    out_$i141 := $M.51;
    goto corral_source_split_8281;

  $bb182:
    assume out_$i140 == 1;
    goto corral_source_split_8280;

  $bb180:
    assume out_$i139 == 1;
    assume {:verifier.code 0} true;
    out_$i140 := $eq.i32(out_$i116, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb174:
    assume out_$i136 == 1;
    assume {:verifier.code 0} true;
    out_$i139 := $slt.i32(out_$i116, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb162:
    assume out_$i130 == 1;
    assume {:verifier.code 0} true;
    out_$i136 := $slt.i32(out_$i116, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb135:
    assume out_$i117 == 1;
    assume {:verifier.code 0} true;
    out_$i130 := $slt.i32(out_$i116, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb134:
    assume {:verifier.code 0} true;
    out_$i117 := $slt.i32(out_$i116, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  corral_source_split_8190:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1261} out_$i116 := __VERIFIER_nondet_int();
    call {:si_unique_call 1262} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i116);
    call {:si_unique_call 1263} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i116);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb132:
    assume out_$i115 == 1;
    goto corral_source_split_8190;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i32(out_$i114, 0);
    goto corral_source_split_7996;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    out_$i114 := $M.51;
    goto corral_source_split_7995;

  $bb9:
    assume out_$i4 == 1;
    goto corral_source_split_7994;

  $bb8:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i0, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb189:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1267} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8295;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} out_vslice_dummy_var_476 := v4l2_event_unsubscribe(out_$p149, out_$p150);
    goto corral_source_split_8294;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    out_$p150 := $M.68;
    goto corral_source_split_8293;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    out_$p149 := $M.67;
    goto corral_source_split_8292;

  $bb188:
    assume out_$i148 == 1;
    goto corral_source_split_8291;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(out_$i147, 1);
    goto corral_source_split_8278;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    out_$i147 := $M.51;
    goto corral_source_split_8277;

  $bb181:
    assume !(out_$i139 == 1);
    goto corral_source_split_8276;

  $bb192:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1269} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8302;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} out_vslice_dummy_var_477 := cpia2_try_fmt_vid_cap(out_$p154, out_$p155, out_$p156);
    goto corral_source_split_8301;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    out_$p156 := $M.70;
    goto corral_source_split_8300;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    out_$p155 := $M.69;
    goto corral_source_split_8299;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    out_$p154 := $M.64;
    goto corral_source_split_8298;

  $bb191:
    assume out_$i153 == 1;
    goto corral_source_split_8297;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    out_$i153 := $eq.i32(out_$i152, 1);
    goto corral_source_split_8266;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    out_$i152 := $M.51;
    goto corral_source_split_8265;

  $bb176:
    assume out_$i137 == 1;
    goto corral_source_split_8264;

  $bb175:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    out_$i137 := $slt.i32(out_$i116, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb195:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    goto $bb196;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1271} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8309;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} out_vslice_dummy_var_478 := cpia2_querybuf(out_$p160, out_$p161, out_$p162);
    goto corral_source_split_8308;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    out_$p162 := $M.72;
    goto corral_source_split_8307;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    out_$p161 := $M.71;
    goto corral_source_split_8306;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    out_$p160 := $M.64;
    goto corral_source_split_8305;

  $bb194:
    assume out_$i159 == 1;
    goto corral_source_split_8304;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 1);
    goto corral_source_split_8270;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    out_$i158 := $M.51;
    goto corral_source_split_8269;

  $bb178:
    assume out_$i138 == 1;
    goto corral_source_split_8268;

  $bb177:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    out_$i138 := $slt.i32(out_$i116, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb198:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1273} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8316;

  SeqInstr_210:
    goto corral_source_split_8315;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} out_vslice_dummy_var_479 := cpia2_dqbuf(out_$p166, out_$p167, out_$p168);
    goto SeqInstr_209;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    out_$p168 := $M.72;
    goto corral_source_split_8314;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    out_$p167 := $M.73;
    goto corral_source_split_8313;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    out_$p166 := $M.64;
    goto corral_source_split_8312;

  $bb197:
    assume out_$i165 == 1;
    goto corral_source_split_8311;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    out_$i165 := $eq.i32(out_$i164, 1);
    goto corral_source_split_8274;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    out_$i164 := $M.51;
    goto corral_source_split_8273;

  $bb179:
    assume !(out_$i138 == 1);
    goto corral_source_split_8272;

  $bb201:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1275} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8323;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} out_vslice_dummy_var_480 := cpia2_streamoff(out_$p172, out_$p173, out_$i174);
    goto corral_source_split_8322;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    out_$i174 := $M.75;
    goto corral_source_split_8321;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    out_$p173 := $M.74;
    goto corral_source_split_8320;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    out_$p172 := $M.64;
    goto corral_source_split_8319;

  $bb200:
    assume out_$i171 == 1;
    goto corral_source_split_8318;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i170, 1);
    goto corral_source_split_8254;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    out_$i170 := $M.51;
    goto corral_source_split_8253;

  $bb170:
    assume out_$i134 == 1;
    goto corral_source_split_8252;

  $bb164:
    assume out_$i131 == 1;
    assume {:verifier.code 0} true;
    out_$i134 := $slt.i32(out_$i116, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb163:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    out_$i131 := $slt.i32(out_$i116, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb204:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1277} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8330;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} out_vslice_dummy_var_481 := cpia2_enum_fmt_vid_cap(out_$p178, out_$p179, out_$p180);
    goto corral_source_split_8329;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    out_$p180 := $M.77;
    goto corral_source_split_8328;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    out_$p179 := $M.76;
    goto corral_source_split_8327;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    out_$p178 := $M.64;
    goto corral_source_split_8326;

  $bb203:
    assume out_$i177 == 1;
    goto corral_source_split_8325;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 1);
    goto corral_source_split_8258;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    out_$i176 := $M.51;
    goto corral_source_split_8257;

  $bb172:
    assume out_$i135 == 1;
    goto corral_source_split_8256;

  $bb171:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    out_$i135 := $slt.i32(out_$i116, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb207:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1279} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8337;

  SeqInstr_213:
    goto corral_source_split_8336;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} out_vslice_dummy_var_482 := cpia2_s_fmt_vid_cap(out_$p184, out_$p185, out_$p186);
    goto SeqInstr_212;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    out_$p186 := $M.70;
    goto corral_source_split_8335;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    out_$p185 := $M.78;
    goto corral_source_split_8334;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    out_$p184 := $M.64;
    goto corral_source_split_8333;

  $bb206:
    assume out_$i183 == 1;
    goto corral_source_split_8332;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i182, 1);
    goto corral_source_split_8262;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    out_$i182 := $M.51;
    goto corral_source_split_8261;

  $bb173:
    assume !(out_$i135 == 1);
    goto corral_source_split_8260;

  $bb210:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1281} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8344;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} out_vslice_dummy_var_483 := cpia2_cropcap(out_$p190, out_$p191, out_$p192);
    goto corral_source_split_8343;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    out_$p192 := $M.80;
    goto corral_source_split_8342;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    out_$p191 := $M.79;
    goto corral_source_split_8341;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    out_$p190 := $M.64;
    goto corral_source_split_8340;

  $bb209:
    assume out_$i189 == 1;
    goto corral_source_split_8339;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    out_$i189 := $eq.i32(out_$i188, 1);
    goto corral_source_split_8242;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    out_$i188 := $M.51;
    goto corral_source_split_8241;

  $bb166:
    assume out_$i132 == 1;
    goto corral_source_split_8240;

  $bb165:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    out_$i132 := $slt.i32(out_$i116, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb213:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1283} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8351;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} out_vslice_dummy_var_484 := cpia2_g_fmt_vid_cap(out_$p196, out_$p197, out_$p198);
    goto corral_source_split_8350;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    out_$p198 := $M.70;
    goto corral_source_split_8349;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    out_$p197 := $M.81;
    goto corral_source_split_8348;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    out_$p196 := $M.64;
    goto corral_source_split_8347;

  $bb212:
    assume out_$i195 == 1;
    goto corral_source_split_8346;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i32(out_$i194, 1);
    goto corral_source_split_8246;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    out_$i194 := $M.51;
    goto corral_source_split_8245;

  $bb168:
    assume out_$i133 == 1;
    goto corral_source_split_8244;

  $bb167:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    out_$i133 := $slt.i32(out_$i116, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb216:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1285} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8358;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} out_vslice_dummy_var_485 := cpia2_g_input(out_$p202, out_$p203, out_$p204);
    goto corral_source_split_8357;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    out_$p204 := $M.83;
    goto corral_source_split_8356;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    out_$p203 := $M.82;
    goto corral_source_split_8355;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    out_$p202 := $M.64;
    goto corral_source_split_8354;

  $bb215:
    assume out_$i201 == 1;
    goto corral_source_split_8353;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    out_$i201 := $eq.i32(out_$i200, 1);
    goto corral_source_split_8250;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    out_$i200 := $M.51;
    goto corral_source_split_8249;

  $bb169:
    assume !(out_$i133 == 1);
    goto corral_source_split_8248;

  $bb219:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1287} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8365;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} out_vslice_dummy_var_486 := cpia2_qbuf(out_$p208, out_$p209, out_$p210);
    goto corral_source_split_8364;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    out_$p210 := $M.72;
    goto corral_source_split_8363;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    out_$p209 := $M.84;
    goto corral_source_split_8362;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    out_$p208 := $M.64;
    goto corral_source_split_8361;

  $bb218:
    assume out_$i207 == 1;
    goto corral_source_split_8360;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    out_$i207 := $eq.i32(out_$i206, 1);
    goto corral_source_split_8230;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    out_$i206 := $M.51;
    goto corral_source_split_8229;

  $bb158:
    assume out_$i128 == 1;
    goto corral_source_split_8228;

  $bb152:
    assume out_$i125 == 1;
    assume {:verifier.code 0} true;
    out_$i128 := $slt.i32(out_$i116, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb137:
    assume out_$i118 == 1;
    assume {:verifier.code 0} true;
    out_$i125 := $slt.i32(out_$i116, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb136:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    out_$i118 := $slt.i32(out_$i116, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb222:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1289} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8372;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} out_vslice_dummy_var_487 := cpia2_enum_framesizes(out_$p214, out_$p215, out_$p216);
    goto corral_source_split_8371;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    out_$p216 := $M.86;
    goto corral_source_split_8370;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    out_$p215 := $M.85;
    goto corral_source_split_8369;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    out_$p214 := $M.64;
    goto corral_source_split_8368;

  $bb221:
    assume out_$i213 == 1;
    goto corral_source_split_8367;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 1);
    goto corral_source_split_8234;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    out_$i212 := $M.51;
    goto corral_source_split_8233;

  $bb160:
    assume out_$i129 == 1;
    goto corral_source_split_8232;

  $bb159:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(out_$i116, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb225:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1291} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8379;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} out_vslice_dummy_var_488 := cpia2_querycap(out_$p220, out_$p221, out_$p222);
    goto corral_source_split_8378;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    out_$p222 := $M.88;
    goto corral_source_split_8377;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    out_$p221 := $M.87;
    goto corral_source_split_8376;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    out_$p220 := $M.64;
    goto corral_source_split_8375;

  $bb224:
    assume out_$i219 == 1;
    goto corral_source_split_8374;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    out_$i219 := $eq.i32(out_$i218, 1);
    goto corral_source_split_8238;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    out_$i218 := $M.51;
    goto corral_source_split_8237;

  $bb161:
    assume !(out_$i129 == 1);
    goto corral_source_split_8236;

  $bb228:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1293} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8386;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} out_vslice_dummy_var_489 := cpia2_enum_frameintervals(out_$p226, out_$p227, out_$p228);
    goto corral_source_split_8385;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    out_$p228 := $M.90;
    goto corral_source_split_8384;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    out_$p227 := $M.89;
    goto corral_source_split_8383;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    out_$p226 := $M.64;
    goto corral_source_split_8382;

  $bb227:
    assume out_$i225 == 1;
    goto corral_source_split_8381;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    out_$i225 := $eq.i32(out_$i224, 1);
    goto corral_source_split_8218;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    out_$i224 := $M.51;
    goto corral_source_split_8217;

  $bb154:
    assume out_$i126 == 1;
    goto corral_source_split_8216;

  $bb153:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    out_$i126 := $slt.i32(out_$i116, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb231:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1295} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8393;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} out_vslice_dummy_var_490 := cpia2_s_jpegcomp(out_$p232, out_$p233, out_$p234);
    goto corral_source_split_8392;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    out_$p234 := $M.92;
    goto corral_source_split_8391;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    out_$p233 := $M.91;
    goto corral_source_split_8390;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    out_$p232 := $M.64;
    goto corral_source_split_8389;

  $bb230:
    assume out_$i231 == 1;
    goto corral_source_split_8388;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    out_$i231 := $eq.i32(out_$i230, 1);
    goto corral_source_split_8222;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    out_$i230 := $M.51;
    goto corral_source_split_8221;

  $bb156:
    assume out_$i127 == 1;
    goto corral_source_split_8220;

  $bb155:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    out_$i127 := $slt.i32(out_$i116, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb234:
    assume !(out_$i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1297} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8400;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} out_vslice_dummy_var_491 := cpia2_g_jpegcomp(out_$p238, out_$p239, out_$p240);
    goto corral_source_split_8399;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    out_$p240 := $M.94;
    goto corral_source_split_8398;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    out_$p239 := $M.93;
    goto corral_source_split_8397;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    out_$p238 := $M.64;
    goto corral_source_split_8396;

  $bb233:
    assume out_$i237 == 1;
    goto corral_source_split_8395;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    out_$i237 := $eq.i32(out_$i236, 1);
    goto corral_source_split_8226;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    out_$i236 := $M.51;
    goto corral_source_split_8225;

  $bb157:
    assume !(out_$i127 == 1);
    goto corral_source_split_8224;

  $bb237:
    assume !(out_$i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1299} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8407;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} out_vslice_dummy_var_492 := cpia2_g_parm(out_$p244, out_$p245, out_$p246);
    goto corral_source_split_8406;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    out_$p246 := $M.96;
    goto corral_source_split_8405;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    out_$p245 := $M.95;
    goto corral_source_split_8404;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    out_$p244 := $M.64;
    goto corral_source_split_8403;

  $bb236:
    assume out_$i243 == 1;
    goto corral_source_split_8402;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    out_$i243 := $eq.i32(out_$i242, 1);
    goto corral_source_split_8206;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    out_$i242 := $M.51;
    goto corral_source_split_8205;

  $bb148:
    assume out_$i123 == 1;
    goto corral_source_split_8204;

  $bb139:
    assume out_$i119 == 1;
    assume {:verifier.code 0} true;
    out_$i123 := $slt.i32(out_$i116, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb138:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    out_$i119 := $slt.i32(out_$i116, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb240:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1301} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8414;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} out_vslice_dummy_var_493 := cpia2_enum_input(out_$p250, out_$p251, out_$p252);
    goto corral_source_split_8413;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    out_$p252 := $M.98;
    goto corral_source_split_8412;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    out_$p251 := $M.97;
    goto corral_source_split_8411;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    out_$p250 := $M.64;
    goto corral_source_split_8410;

  $bb239:
    assume out_$i249 == 1;
    goto corral_source_split_8409;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    out_$i249 := $eq.i32(out_$i248, 1);
    goto corral_source_split_8210;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    out_$i248 := $M.51;
    goto corral_source_split_8209;

  $bb150:
    assume out_$i124 == 1;
    goto corral_source_split_8208;

  $bb149:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    out_$i124 := $slt.i32(out_$i116, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb243:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1303} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8420;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} out_vslice_dummy_var_494 := v4l2_ctrl_subscribe_event(out_$p256, out_$p257);
    goto corral_source_split_8419;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    out_$p257 := $M.68;
    goto corral_source_split_8418;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    out_$p256 := $M.67;
    goto corral_source_split_8417;

  $bb242:
    assume out_$i255 == 1;
    goto corral_source_split_8416;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    out_$i255 := $eq.i32(out_$i254, 1);
    goto corral_source_split_8214;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    out_$i254 := $M.51;
    goto corral_source_split_8213;

  $bb151:
    assume !(out_$i124 == 1);
    goto corral_source_split_8212;

  $bb246:
    assume !(out_$i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1305} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8427;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} out_vslice_dummy_var_495 := cpia2_s_parm(out_$p261, out_$p262, out_$p263);
    goto corral_source_split_8426;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    out_$p263 := $M.96;
    goto corral_source_split_8425;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    out_$p262 := $M.99;
    goto corral_source_split_8424;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    out_$p261 := $M.64;
    goto corral_source_split_8423;

  $bb245:
    assume out_$i260 == 1;
    goto corral_source_split_8422;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    out_$i260 := $eq.i32(out_$i259, 1);
    goto corral_source_split_8194;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    out_$i259 := $M.51;
    goto corral_source_split_8193;

  $bb141:
    assume out_$i120 == 1;
    goto corral_source_split_8192;

  $bb140:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    out_$i120 := $slt.i32(out_$i116, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb249:
    assume !(out_$i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1307} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8434;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} out_vslice_dummy_var_496 := cpia2_s_input(out_$p267, out_$p268, out_$i269);
    goto corral_source_split_8433;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    out_$i269 := $M.101;
    goto corral_source_split_8432;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    out_$p268 := $M.100;
    goto corral_source_split_8431;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    out_$p267 := $M.64;
    goto corral_source_split_8430;

  $bb248:
    assume out_$i266 == 1;
    goto corral_source_split_8429;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    out_$i266 := $eq.i32(out_$i265, 1);
    goto corral_source_split_8198;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    out_$i265 := $M.51;
    goto corral_source_split_8197;

  $bb143:
    assume out_$i121 == 1;
    goto corral_source_split_8196;

  $bb142:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    out_$i121 := $slt.i32(out_$i116, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb252:
    assume !(out_$i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1309} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8441;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} out_vslice_dummy_var_497 := cpia2_streamon(out_$p273, out_$p274, out_$i275);
    goto corral_source_split_8440;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    out_$i275 := $M.103;
    goto corral_source_split_8439;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    out_$p274 := $M.102;
    goto corral_source_split_8438;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    out_$p273 := $M.64;
    goto corral_source_split_8437;

  $bb251:
    assume out_$i272 == 1;
    goto corral_source_split_8436;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    out_$i272 := $eq.i32(out_$i271, 1);
    goto corral_source_split_8202;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    out_$i271 := $M.51;
    goto corral_source_split_8201;

  $bb145:
    assume out_$i122 == 1;
    goto corral_source_split_8200;

  $bb144:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i116, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb146:
    assume {:verifier.code 0} true;
    assume !(out_$i122 == 1);
    goto $bb147;

  $bb183:
    assume {:verifier.code 0} true;
    assume !(out_$i140 == 1);
    goto $bb147;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i4 == 1);
    goto $bb11;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i7 == 1);
    goto $bb11;

  $bb69_dummy:
    call {:si_unique_call 1} out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i31, out_$i32, out_$p33, out_$p34, out_$i36, out_$i37, out_$p38, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p47, out_$i49, out_$i50, out_$p51, out_$p52, out_$i54, out_$i55, out_$p56, out_$p57, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p145, out_$i147, out_$i148, out_$p149, out_$p150, out_$i152, out_$i153, out_$p154, out_$p155, out_$p156, out_$i158, out_$i159, out_$p160, out_$p161, out_$p162, out_$i164, out_$i165, out_$p166, out_$p167, out_$p168, out_$i170, out_$i171, out_$p172, out_$p173, out_$i174, out_$i176, out_$i177, out_$p178, out_$p179, out_$p180, out_$i182, out_$i183, out_$p184, out_$p185, out_$p186, out_$i188, out_$i189, out_$p190, out_$p191, out_$p192, out_$i194, out_$i195, out_$p196, out_$p197, out_$p198, out_$i200, out_$i201, out_$p202, out_$p203, out_$p204, out_$i206, out_$i207, out_$p208, out_$p209, out_$p210, out_$i212, out_$i213, out_$p214, out_$p215, out_$p216, out_$i218, out_$i219, out_$p220, out_$p221, out_$p222, out_$i224, out_$i225, out_$p226, out_$p227, out_$p228, out_$i230, out_$i231, out_$p232, out_$p233, out_$p234, out_$i236, out_$i237, out_$p238, out_$p239, out_$p240, out_$i242, out_$i243, out_$p244, out_$p245, out_$p246, out_$i248, out_$i249, out_$p250, out_$p251, out_$p252, out_$i254, out_$i255, out_$p256, out_$p257, out_$i259, out_$i260, out_$p261, out_$p262, out_$p263, out_$i265, out_$i266, out_$p267, out_$p268, out_$i269, out_$i271, out_$i272, out_$p273, out_$p274, out_$i275, out_vslice_dummy_var_465, out_vslice_dummy_var_466, out_vslice_dummy_var_467, out_vslice_dummy_var_468, out_vslice_dummy_var_469, out_vslice_dummy_var_470, out_vslice_dummy_var_471, out_vslice_dummy_var_472, out_vslice_dummy_var_473, out_vslice_dummy_var_474, out_vslice_dummy_var_475, out_vslice_dummy_var_476, out_vslice_dummy_var_477, out_vslice_dummy_var_478, out_vslice_dummy_var_479, out_vslice_dummy_var_480, out_vslice_dummy_var_481, out_vslice_dummy_var_482, out_vslice_dummy_var_483, out_vslice_dummy_var_484, out_vslice_dummy_var_485, out_vslice_dummy_var_486, out_vslice_dummy_var_487, out_vslice_dummy_var_488, out_vslice_dummy_var_489, out_vslice_dummy_var_490, out_vslice_dummy_var_491, out_vslice_dummy_var_492, out_vslice_dummy_var_493, out_vslice_dummy_var_494, out_vslice_dummy_var_495, out_vslice_dummy_var_496, out_vslice_dummy_var_497 := main_loop_$bb1(out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i31, out_$i32, out_$p33, out_$p34, out_$i36, out_$i37, out_$p38, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p47, out_$i49, out_$i50, out_$p51, out_$p52, out_$i54, out_$i55, out_$p56, out_$p57, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p145, out_$i147, out_$i148, out_$p149, out_$p150, out_$i152, out_$i153, out_$p154, out_$p155, out_$p156, out_$i158, out_$i159, out_$p160, out_$p161, out_$p162, out_$i164, out_$i165, out_$p166, out_$p167, out_$p168, out_$i170, out_$i171, out_$p172, out_$p173, out_$i174, out_$i176, out_$i177, out_$p178, out_$p179, out_$p180, out_$i182, out_$i183, out_$p184, out_$p185, out_$p186, out_$i188, out_$i189, out_$p190, out_$p191, out_$p192, out_$i194, out_$i195, out_$p196, out_$p197, out_$p198, out_$i200, out_$i201, out_$p202, out_$p203, out_$p204, out_$i206, out_$i207, out_$p208, out_$p209, out_$p210, out_$i212, out_$i213, out_$p214, out_$p215, out_$p216, out_$i218, out_$i219, out_$p220, out_$p221, out_$p222, out_$i224, out_$i225, out_$p226, out_$p227, out_$p228, out_$i230, out_$i231, out_$p232, out_$p233, out_$p234, out_$i236, out_$i237, out_$p238, out_$p239, out_$p240, out_$i242, out_$i243, out_$p244, out_$p245, out_$p246, out_$i248, out_$i249, out_$p250, out_$p251, out_$p252, out_$i254, out_$i255, out_$p256, out_$p257, out_$i259, out_$i260, out_$p261, out_$p262, out_$p263, out_$i265, out_$i266, out_$p267, out_$p268, out_$i269, out_$i271, out_$i272, out_$p273, out_$p274, out_$i275, out_vslice_dummy_var_465, out_vslice_dummy_var_466, out_vslice_dummy_var_467, out_vslice_dummy_var_468, out_vslice_dummy_var_469, out_vslice_dummy_var_470, out_vslice_dummy_var_471, out_vslice_dummy_var_472, out_vslice_dummy_var_473, out_vslice_dummy_var_474, out_vslice_dummy_var_475, out_vslice_dummy_var_476, out_vslice_dummy_var_477, out_vslice_dummy_var_478, out_vslice_dummy_var_479, out_vslice_dummy_var_480, out_vslice_dummy_var_481, out_vslice_dummy_var_482, out_vslice_dummy_var_483, out_vslice_dummy_var_484, out_vslice_dummy_var_485, out_vslice_dummy_var_486, out_vslice_dummy_var_487, out_vslice_dummy_var_488, out_vslice_dummy_var_489, out_vslice_dummy_var_490, out_vslice_dummy_var_491, out_vslice_dummy_var_492, out_vslice_dummy_var_493, out_vslice_dummy_var_494, out_vslice_dummy_var_495, out_vslice_dummy_var_496, out_vslice_dummy_var_497);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$i0: i32, in_$i1: i1, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i32, in_$i9: i1, in_$i10: i32, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$p29: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$p57: ref, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$i62: i32, in_$i63: i64, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i68: i32, in_$i69: i64, in_$i71: i32, in_$i72: i1, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$i118: i1, in_$i119: i1, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i1, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$p150: ref, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$p161: ref, in_$p162: ref, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$i170: i32, in_$i171: i1, in_$p172: ref, in_$p173: ref, in_$i174: i32, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$p179: ref, in_$p180: ref, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$p185: ref, in_$p186: ref, in_$i188: i32, in_$i189: i1, in_$p190: ref, in_$p191: ref, in_$p192: ref, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$p197: ref, in_$p198: ref, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$p203: ref, in_$p204: ref, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$p209: ref, in_$p210: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$p215: ref, in_$p216: ref, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$p221: ref, in_$p222: ref, in_$i224: i32, in_$i225: i1, in_$p226: ref, in_$p227: ref, in_$p228: ref, in_$i230: i32, in_$i231: i1, in_$p232: ref, in_$p233: ref, in_$p234: ref, in_$i236: i32, in_$i237: i1, in_$p238: ref, in_$p239: ref, in_$p240: ref, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$p245: ref, in_$p246: ref, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$p251: ref, in_$p252: ref, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$p257: ref, in_$i259: i32, in_$i260: i1, in_$p261: ref, in_$p262: ref, in_$p263: ref, in_$i265: i32, in_$i266: i1, in_$p267: ref, in_$p268: ref, in_$i269: i32, in_$i271: i32, in_$i272: i1, in_$p273: ref, in_$p274: ref, in_$i275: i32, in_vslice_dummy_var_465: i32, in_vslice_dummy_var_466: i32, in_vslice_dummy_var_467: i32, in_vslice_dummy_var_468: i64, in_vslice_dummy_var_469: i32, in_vslice_dummy_var_470: i32, in_vslice_dummy_var_471: i64, in_vslice_dummy_var_472: i64, in_vslice_dummy_var_473: i32, in_vslice_dummy_var_474: i32, in_vslice_dummy_var_475: i32, in_vslice_dummy_var_476: i32, in_vslice_dummy_var_477: i32, in_vslice_dummy_var_478: i32, in_vslice_dummy_var_479: i32, in_vslice_dummy_var_480: i32, in_vslice_dummy_var_481: i32, in_vslice_dummy_var_482: i32, in_vslice_dummy_var_483: i32, in_vslice_dummy_var_484: i32, in_vslice_dummy_var_485: i32, in_vslice_dummy_var_486: i32, in_vslice_dummy_var_487: i32, in_vslice_dummy_var_488: i32, in_vslice_dummy_var_489: i32, in_vslice_dummy_var_490: i32, in_vslice_dummy_var_491: i32, in_vslice_dummy_var_492: i32, in_vslice_dummy_var_493: i32, in_vslice_dummy_var_494: i32, in_vslice_dummy_var_495: i32, in_vslice_dummy_var_496: i32, in_vslice_dummy_var_497: i32) returns (out_$i0: i32, out_$i1: i1, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i32, out_$i9: i1, out_$i10: i32, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$p29: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$p57: ref, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$i62: i32, out_$i63: i64, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i68: i32, out_$i69: i64, out_$i71: i32, out_$i72: i1, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$i118: i1, out_$i119: i1, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i1, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$p150: ref, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$p161: ref, out_$p162: ref, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$i170: i32, out_$i171: i1, out_$p172: ref, out_$p173: ref, out_$i174: i32, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$p179: ref, out_$p180: ref, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$p185: ref, out_$p186: ref, out_$i188: i32, out_$i189: i1, out_$p190: ref, out_$p191: ref, out_$p192: ref, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$p197: ref, out_$p198: ref, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$p203: ref, out_$p204: ref, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$p209: ref, out_$p210: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$p215: ref, out_$p216: ref, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$p221: ref, out_$p222: ref, out_$i224: i32, out_$i225: i1, out_$p226: ref, out_$p227: ref, out_$p228: ref, out_$i230: i32, out_$i231: i1, out_$p232: ref, out_$p233: ref, out_$p234: ref, out_$i236: i32, out_$i237: i1, out_$p238: ref, out_$p239: ref, out_$p240: ref, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$p245: ref, out_$p246: ref, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$p251: ref, out_$p252: ref, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$p257: ref, out_$i259: i32, out_$i260: i1, out_$p261: ref, out_$p262: ref, out_$p263: ref, out_$i265: i32, out_$i266: i1, out_$p267: ref, out_$p268: ref, out_$i269: i32, out_$i271: i32, out_$i272: i1, out_$p273: ref, out_$p274: ref, out_$i275: i32, out_vslice_dummy_var_465: i32, out_vslice_dummy_var_466: i32, out_vslice_dummy_var_467: i32, out_vslice_dummy_var_468: i64, out_vslice_dummy_var_469: i32, out_vslice_dummy_var_470: i32, out_vslice_dummy_var_471: i64, out_vslice_dummy_var_472: i64, out_vslice_dummy_var_473: i32, out_vslice_dummy_var_474: i32, out_vslice_dummy_var_475: i32, out_vslice_dummy_var_476: i32, out_vslice_dummy_var_477: i32, out_vslice_dummy_var_478: i32, out_vslice_dummy_var_479: i32, out_vslice_dummy_var_480: i32, out_vslice_dummy_var_481: i32, out_vslice_dummy_var_482: i32, out_vslice_dummy_var_483: i32, out_vslice_dummy_var_484: i32, out_vslice_dummy_var_485: i32, out_vslice_dummy_var_486: i32, out_vslice_dummy_var_487: i32, out_vslice_dummy_var_488: i32, out_vslice_dummy_var_489: i32, out_vslice_dummy_var_490: i32, out_vslice_dummy_var_491: i32, out_vslice_dummy_var_492: i32, out_vslice_dummy_var_493: i32, out_vslice_dummy_var_494: i32, out_vslice_dummy_var_495: i32, out_vslice_dummy_var_496: i32, out_vslice_dummy_var_497: i32);
  modifies $M.47, $M.45, $M.53, $M.4, $M.8, $M.7, $M.10, assertsPassed, $CurrAddr, $M.9, $M.15, $M.16, $M.18, $M.19, $M.20, $M.21, $M.22, $M.26, $M.110, $M.46, $M.112, $M.113, $M.114, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.49, $M.50, $M.51, $M.48, $M.61, $M.42, $M.43, $M.40, $M.44, $M.115, $M.1;


